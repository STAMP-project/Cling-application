import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test8001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8001");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate7.minusMonths(0);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.secondOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property21.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale29 = dateTimeFormatter28.getLocale();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter28.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField(chronology35);
        mutableDateTime12.setChronology(chronology35);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(chronology35);
        long long40 = mutableDateTime39.getMillis();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime39.add(readableDuration41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime39.add(readableDuration43);
        mutableDateTime39.addMonths(0);
        org.joda.time.DateTime dateTime47 = localDate10.toDateTime((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalDate localDate49 = localDate10.withWeekyear(8970795);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clear();
        java.util.Locale.Builder builder52 = builder50.clearExtensions();
        java.util.Locale.Builder builder53 = builder52.clearExtensions();
        boolean boolean54 = localDate49.equals((java.lang.Object) builder52);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645515237798L + "'", long40 == 1645515237798L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test8002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8002");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate0.withPeriodAdded(readablePeriod15, (-2));
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str19 = dateTimeFieldType18.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int21 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter20.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology29);
        boolean boolean34 = localDate0.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDate.Property property35 = localDate0.year();
        org.joda.time.LocalDate localDate36 = property35.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate37 = property35.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "year" + "'", str19, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test8003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8003");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        mutableDateTime0.addWeekyears(26676070);
        mutableDateTime0.setMillis((long) 65008);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfDay();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime0.add(readableDuration13, 26973022);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515237988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=57,MILLISECOND=988,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:33:57 AM +00:00" + "'", str7, "7:33:57 AM +00:00");
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test8004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8004");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        mutableDateTime0.setChronology(chronology10);
        mutableDateTime0.addMinutes(86399999);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        boolean boolean20 = mutableDateTime15.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str22 = mutableDateTime15.toString(dateTimeFormatter21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property30 = localDate23.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate23.withPeriodAdded(readablePeriod31, (int) ' ');
        java.lang.String str34 = dateTimeFormatter21.print((org.joda.time.ReadablePartial) localDate33);
        boolean boolean35 = dateTimeFormatter21.isOffsetParsed();
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.getDefault(category36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter21.withLocale(locale38);
        org.joda.time.Chronology chronology40 = dateTimeFormatter21.getChronology();
        java.lang.String str41 = mutableDateTime0.toString(dateTimeFormatter21);
        boolean boolean42 = dateTimeFormatter21.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatter21.getParser();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645515238005,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=58,MILLISECOND=5,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7:33:58 AM +00:00" + "'", str22, "7:33:58 AM +00:00");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str34, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(chronology40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7:32:58 AM +00:00" + "'", str41, "7:32:58 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeParser43);
    }

    @Test
    public void test8005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8005");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        int int10 = mutableDateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime11 = mutableDateTime0.toDateTimeISO();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        long long31 = chronology25.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.parse("53");
        int int35 = mutableDateTime34.getDayOfMonth();
        long long36 = mutableDateTime34.getMillis();
        int int37 = dateTime32.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime39 = dateTime32.minusHours(26677059);
        int int40 = dateTime32.getYearOfCentury();
        org.joda.time.DateTime dateTime41 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property42 = dateTime32.minuteOfHour();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusDays(4);
        org.joda.time.DateTime.Property property51 = dateTime48.millisOfSecond();
        org.joda.time.DateTime dateTime52 = property51.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime54 = property51.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.minus(readablePeriod57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.plus(readablePeriod59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate67 = localDate61.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property68 = localDate61.yearOfEra();
        org.joda.time.LocalDate localDate69 = property68.roundFloorCopy();
        org.joda.time.LocalDate localDate70 = property68.withMaximumValue();
        org.joda.time.LocalDate localDate72 = property68.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean74 = localDate72.isSupported(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType73.getRangeDurationType();
        int int76 = dateTime58.get(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType73.getRangeDurationType();
        org.joda.time.DateTime dateTime79 = dateTime32.withFieldAdded(durationFieldType77, 26786000);
        mutableDateTime0.add(durationFieldType77, 26716987);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515238022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=58,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:33:58 AM +00:00" + "'", str7, "7:33:58 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-48469999L) + "'", long31 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60494601600000L) + "'", long36 == (-60494601600000L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 53 + "'", int76 == 53);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test8006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8006");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale6 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str7 = locale3.getDisplayName(locale6);
        java.util.Locale.setDefault(category2, locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.ReadableInstant readableInstant10 = null;
        java.lang.String str11 = dateTimeFormatter0.print(readableInstant10);
        java.lang.String str13 = dateTimeFormatter0.print((long) (-469));
        boolean boolean14 = dateTimeFormatter0.isOffsetParsed();
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale17 = dateTimeFormatter16.getLocale();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter16.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekOfWeekyear();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer15, (org.joda.time.ReadableInstant) mutableDateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale6.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "February 22, 2022 7:33:58 AM +00:00" + "'", str11, "February 22, 2022 7:33:58 AM +00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "December 31, 1969 11:59:59 PM +00:00" + "'", str13, "December 31, 1969 11:59:59 PM +00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test8007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8007");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime2.add(readableDuration4);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        mutableDateTime6.setChronology(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.years();
        org.joda.time.DurationField durationField18 = chronology14.centuries();
        mutableDateTime2.setChronology(chronology14);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(14011341876837L, chronology14, locale20, (java.lang.Integer) 26676320, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = org.joda.time.format.DateTimeFormat.patternForStyle("7:27:53 AM +00:00", locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 7:27:53 AM +00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T07:33:58.160Z" + "'", str3, "2022-02-22T07:33:58.160Z");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jpn" + "'", str21, "jpn");
    }

    @Test
    public void test8008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8008");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate2.plusWeeks(26828677);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        java.lang.String str15 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int19 = dateTimeFormatter7.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime16, "1", 1);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isFixed();
        mutableDateTime16.setZone(dateTimeZone32);
        java.lang.String str38 = dateTimeZone32.getNameKey((long) (byte) 1);
        long long40 = dateTimeZone32.previousTransition((long) (byte) -1);
        org.joda.time.Interval interval41 = localDate6.toInterval(dateTimeZone32);
        org.joda.time.LocalDate localDate43 = localDate6.minusDays(26769591);
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.LocalDate localDate46 = localDate43.minusYears((-2922690));
        int int47 = localDate43.getDayOfWeek();
        org.joda.time.LocalDate.Property property48 = localDate43.era();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test8009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8009");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate11.getFieldType(1);
        int int16 = localDate11.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        boolean boolean24 = localDate11.isSupported(durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDate11.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate11.plus(readablePeriod26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale29 = dateTimeFormatter28.getLocale();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter28.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate40.equals((java.lang.Object) (byte) 10);
        int[] intArray49 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int50 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDate40, intArray49);
        int int51 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate27, intArray49);
        org.joda.time.LocalDate localDate53 = localDate27.withYear((-1));
        org.joda.time.LocalDate.Property property54 = localDate53.era();
        org.joda.time.LocalDate localDate55 = property54.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
    }

    @Test
    public void test8010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8010");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology6.getZone();
        org.joda.time.DurationField durationField14 = chronology6.centuries();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        int int26 = dateTimeField23.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDate34, (int) (short) -1, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDate34.getFieldType((int) (short) 1);
        int int44 = localDate34.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime47 = localDate34.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.Chronology chronology48 = chronology6.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test8011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8011");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        java.util.Locale locale13 = new java.util.Locale("53");
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale10.getDisplayLanguage(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter0.withLocale(locale10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515238350,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=58,MILLISECOND=350,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale13.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test8012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8012");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale6 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str7 = locale3.getDisplayName(locale6);
        java.util.Locale.setDefault(category2, locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 1077);
        java.io.Writer writer13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate23 = property21.withMaximumValue();
        org.joda.time.LocalDate localDate25 = property21.addWrapFieldToCopy(26666877);
        org.joda.time.LocalDate localDate27 = property21.addToCopy(59);
        org.joda.time.LocalDate.Property property28 = localDate27.era();
        org.joda.time.LocalDate localDate30 = localDate27.plusMonths(51);
        org.joda.time.LocalDate localDate32 = localDate27.minusWeeks(26706026);
        org.joda.time.LocalDate localDate34 = localDate27.withDayOfYear(40);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer13, (org.joda.time.ReadablePartial) localDate27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale6.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test8013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8013");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("53");
        int int23 = mutableDateTime22.getDayOfMonth();
        long long24 = mutableDateTime22.getMillis();
        int int25 = dateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.DateTime dateTime29 = dateTime20.withFieldAdded(durationFieldType27, (int) (short) -1);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("");
        java.lang.String str33 = timeZone32.getID();
        java.lang.String str34 = timeZone32.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 53, dateTimeZone35);
        long long39 = dateTimeZone35.convertLocalToUTC((long) 26, true);
        org.joda.time.DateTime dateTime40 = dateTime29.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime29.toMutableDateTime(chronology50);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.millisOfSecond();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMonths((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime62.plus((-48469999L));
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.DateTime.Property property66 = dateTime64.era();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfYear();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.weekOfWeekyear();
        org.joda.time.DateTime dateTime75 = dateTime64.withChronology(chronology72);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.withPeriodAdded(readablePeriod76, 26760322);
        boolean boolean79 = mutableDateTime53.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60494601600000L) + "'", long24 == (-60494601600000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GMT" + "'", str33, "GMT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT" + "'", str34, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 26L + "'", long39 == 26L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0003-06-21T18:06:08.383Z" + "'", str65, "0003-06-21T18:06:08.383Z");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test8014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8014");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property67 = dateTime66.hourOfDay();
        org.joda.time.DateTime dateTime68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfDay();
        org.joda.time.DateTime dateTime71 = property69.addToCopy(26918449);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test8015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8015");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("");
        java.time.ZoneId zoneId40 = timeZone39.toZoneId();
        boolean boolean41 = timeZone37.hasSameRules(timeZone39);
        timeZone39.setRawOffset(26994559);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test8016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8016");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("2022-02-22T07:25:38.849Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test8017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8017");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.LocalDate.Property property4 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy(26696);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime15 = dateTime12.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        java.lang.String str28 = dateTimeFormatter20.print((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        boolean boolean38 = dateTimeZone29.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime19.toDateTime(dateTimeZone36);
        long long42 = dateTimeZone36.nextTransition(1600012620000L);
        boolean boolean44 = dateTimeZone36.isStandardOffset(3600052L);
        org.joda.time.DateTime dateTime45 = localDate6.toDateTimeAtStartOfDay(dateTimeZone36);
        int int47 = dateTimeZone36.getOffset(113148L);
        java.lang.String str49 = dateTimeZone36.getNameKey((long) 24747);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str28, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1600012620000L + "'", long42 == 1600012620000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
    }

    @Test
    public void test8018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8018");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale16 = dateTimeFormatter15.getLocale();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter15.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType13.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfYear();
        long long29 = chronology22.add(259260000L, (long) 295, (int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter30.withChronology(chronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusMonths((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.plus((-48469999L));
        org.joda.time.DateTime dateTime54 = dateTime50.plusSeconds(2);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = localDate58.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) dateTime50, dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology77 = localDate72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology79 = chronology77.withZone(dateTimeZone78);
        org.joda.time.DateTimeField dateTimeField80 = chronology77.weekOfWeekyear();
        boolean boolean81 = dateTimeFieldType71.isSupported(chronology77);
        org.joda.time.DateTimeField dateTimeField82 = chronology77.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime50.toMutableDateTime(chronology77);
        org.joda.time.DateTime dateTime85 = dateTime50.minusMinutes(5);
        int int86 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter30.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology88 = chronology22.withZone(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration90 = null;
        mutableDateTime89.add(readableDuration90);
        java.util.Locale locale92 = java.util.Locale.getDefault();
        java.util.Calendar calendar93 = mutableDateTime89.toCalendar(locale92);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket(19045L, chronology22, locale92, (java.lang.Integer) 26666768);
        org.joda.time.DateTimeField dateTimeField96 = chronology22.weekyear();
        org.joda.time.DateTime dateTime97 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DurationField durationField98 = chronology22.years();
        org.joda.time.DateTimeField dateTimeField99 = chronology22.dayOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 259288615L + "'", long29 == 259288615L);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97200000 + "'", int86 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(locale92);
// flaky:         org.junit.Assert.assertEquals(locale92.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar93);
// flaky:         org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=1645515238554,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=58,MILLISECOND=554,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(durationField98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test8019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8019");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter0.withZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        int int35 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime30, "24", (int) '4');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeFormatter0.getZone();
        java.lang.String str38 = dateTimeFormatter0.print((-45150852290378L));
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekOfWeekyear();
        boolean boolean49 = dateTimeFieldType39.isSupported(chronology45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter0.withChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-53) + "'", int35 == (-53));
        org.junit.Assert.assertNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Mar 24, 0539 4:35:09 PM" + "'", str38, "Mar 24, 0539 4:35:09 PM");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test8020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8020");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(26666335);
        int int8 = localDateTime7.size();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withPeriodAdded(readablePeriod9, (int) '4');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withPeriodAdded(readablePeriod12, (int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours(19);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withWeekyear(34);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes(56);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.hourOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withDurationAdded(readableDuration23, 26679);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(104);
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str33 = nameProvider29.getShortName(locale30, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.util.Locale locale37 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale41 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str42 = locale41.getDisplayVariant();
        java.lang.String str43 = locale37.getDisplayCountry(locale41);
        java.lang.String str44 = locale37.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayCountry();
        java.lang.String str47 = locale37.getDisplayCountry(locale45);
        java.util.Locale locale51 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.util.Locale.setDefault(locale51);
        java.lang.String str53 = locale37.getDisplayScript(locale51);
        java.lang.String str56 = nameProvider29.getShortName(locale37, "2022-02-22T07:24:38.645Z", "0003-06-21T17:56:46.777Z");
        java.util.Set<java.lang.Character> charSet57 = locale37.getExtensionKeys();
        boolean boolean58 = locale37.hasExtensions();
        java.util.Set<java.lang.String> strSet59 = locale37.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = localDateTime25.toString("2022-02-22T07:28:04.263Z", locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals(locale37.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str43, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str44, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str46, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str47, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
    }

    @Test
    public void test8021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8021");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime12.withHourOfDay((int) (short) 10);
        org.joda.time.Instant instant36 = dateTime12.toInstant();
        org.joda.time.DateTime.Property property37 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime38 = property37.withMaximumValue();
        org.joda.time.DateTime dateTime39 = property37.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test8022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8022");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        int int21 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime5.minuteOfHour();
        org.joda.time.LocalDate localDate23 = dateTime5.toLocalDate();
        org.joda.time.DateTime.Property property24 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime26 = property24.addToCopy(26681858);
        org.joda.time.DateTime dateTime27 = property24.getDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate30.withYear((int) (byte) 1);
        java.lang.String str37 = dateTimeFormatter29.print((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        boolean boolean47 = dateTimeZone38.equals((java.lang.Object) dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate36.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.LocalDate localDate50 = localDate36.minusYears(2000);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        int int52 = localDate51.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMonths((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime60.plus((-48469999L));
        org.joda.time.DateTime dateTime64 = dateTime60.plusSeconds(2);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTime(readableInstant69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTime dateTime79 = localDate68.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((java.lang.Object) dateTime60, dateTimeZone77);
        org.joda.time.Interval interval81 = localDate51.toInterval(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime();
        java.lang.String str83 = mutableDateTime82.toString();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        boolean boolean86 = dateTimeZone84.equals((java.lang.Object) locale85);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(dateTimeZone84);
        mutableDateTime82.setZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime89 = localDate51.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate(dateTimeZone84);
        org.joda.time.DateTime dateTime91 = localDate50.toDateTimeAtCurrentTime(dateTimeZone84);
        java.lang.String str92 = dateTimeZone84.toString();
        boolean boolean93 = dateTimeZone84.isFixed();
        org.joda.time.DateTime dateTime94 = dateTime27.withZone(dateTimeZone84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = dateTime27.withCenturyOfEra(9016042);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9016042 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 58 + "'", int21 == 58);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str37, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval81);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-22T07:33:58.737Z" + "'", str83, "2022-02-22T07:33:58.737Z");
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "UTC" + "'", str92, "UTC");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test8023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8023");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        mutableDateTime12.setTime((long) 26666335);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        int int28 = dateTimeFormatter16.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime25, "1", 1);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.isFixed();
        mutableDateTime25.setZone(dateTimeZone41);
        long long47 = dateTimeZone41.convertUTCToLocal((long) 22);
        mutableDateTime12.setZone(dateTimeZone41);
        boolean boolean50 = mutableDateTime12.isEqual((long) 26677408);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(chronology58);
        mutableDateTime61.addMonths(26675972);
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) mutableDateTime61);
        int int65 = mutableDateTime12.getYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-2) + "'", int28 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 22L + "'", long47 == 22L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2225019 + "'", int65 == 2225019);
    }

    @Test
    public void test8024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8024");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property20 = dateTime5.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime21.setZoneRetainFields(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime21.add(readablePeriod47, 8);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        int int61 = dateTimeField58.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        java.lang.String str70 = dateTimeFormatter62.print((org.joda.time.ReadablePartial) localDate69);
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate69, (int) (short) -1, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDate69.getFieldType((int) (short) 1);
        boolean boolean79 = mutableDateTime21.isSupported(dateTimeFieldType78);
        int int80 = dateTime5.get(dateTimeFieldType78);
        org.joda.time.DateTime dateTime82 = dateTime5.plusWeeks(513332);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime84 = dateTime5.minus(readablePeriod83);
        int int85 = dateTime84.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:06:08.820Z" + "'", str18, "0003-06-21T18:06:08.820Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645515238819,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=58,MILLISECOND=819,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str70, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test8025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8025");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        int int79 = mutableDateTime77.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime77.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime80.setWeekOfWeekyear(2059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2059 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime80);
    }

    @Test
    public void test8026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8026");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        boolean boolean7 = dateTimeFormatter5.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withPivotYear(28);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone13.getOffset(readableInstant14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy((long) 26665274);
        int int23 = localDateTime22.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusWeeks(182);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone27);
        java.util.TimeZone timeZone29 = dateTimeZone27.toTimeZone();
        boolean boolean30 = dateTimeZone27.isFixed();
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime(dateTimeZone27);
        long long33 = dateTimeZone13.getMillisKeepLocal(dateTimeZone27, (long) 26666);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(5063, 27034914, 820, 84, 65008, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 84 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7200000 + "'", int23 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 26666L + "'", long33 == 26666L);
    }

    @Test
    public void test8027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8027");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime20.yearOfCentury();
        int int46 = mutableDateTime20.getRoundingMode();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime20.add(readablePeriod47, 0);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime20.copy();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515238954,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=58,MILLISECOND=954,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test8028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8028");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate6.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DurationField durationField25 = chronology22.seconds();
        org.joda.time.DurationField durationField26 = chronology22.halfdays();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeZone dateTimeZone28 = chronology22.getZone();
        org.joda.time.DateTime dateTime29 = localDate12.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        mutableDateTime30.add(durationFieldType34, (-1));
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableDateTime30.add(readablePeriod37, (int) (short) 10);
        org.joda.time.Chronology chronology40 = null;
        mutableDateTime30.setChronology(chronology40);
        mutableDateTime30.setDayOfWeek(5);
        mutableDateTime30.addMillis((int) 'x');
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime30.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate54 = localDate48.withYear((int) (byte) 1);
        java.lang.String str55 = dateTimeFormatter47.print((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        boolean boolean65 = dateTimeZone56.equals((java.lang.Object) dateTimeZone63);
        org.joda.time.DateTime dateTime66 = localDate54.toDateTimeAtCurrentTime(dateTimeZone63);
        int int67 = dateTime66.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property68 = dateTime66.hourOfDay();
        boolean boolean70 = dateTime66.isAfter((-48469999L));
        org.joda.time.DateTime dateTime72 = dateTime66.minusYears(27268320);
        int int73 = dateTime66.getYear();
        org.joda.time.DateTime.Property property74 = dateTime66.minuteOfHour();
        mutableDateTime30.setDate((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.DateTime dateTime77 = dateTime66.minus(readablePeriod76);
        int int78 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(26988, 26849624, 41, 27016719, 27231, 26719, dateTimeZone28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27016719 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str55, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test8029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8029");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        mutableDateTime12.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int18 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology26);
        mutableDateTime12.setChronology(chronology26);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DurationField durationField33 = chronology26.millis();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology26.add(readablePeriod34, (long) 30461931, 46);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology26);
        java.lang.String str39 = chronology26.toString();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 30461931L + "'", long37 == 30461931L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test8030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8030");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        boolean boolean3 = dateTimeFormatter0.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter0.getChronology();
        org.joda.time.Chronology chronology6 = dateTimeFormatter0.getChronolgy();
        org.joda.time.Chronology chronology7 = dateTimeFormatter0.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test8031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8031");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        mutableDateTime12.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int18 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology26);
        mutableDateTime12.setChronology(chronology26);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime12.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundHalfFloor();
        java.lang.String str34 = mutableDateTime33.toString();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableDateTime33.add(readablePeriod35);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str34, "2022-02-22T00:00:00.000Z");
    }

    @Test
    public void test8032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8032");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate0.withPeriodAdded(readablePeriod15, (-2));
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str19 = dateTimeFieldType18.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int21 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter20.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology29);
        boolean boolean34 = localDate0.isSupported(dateTimeFieldType18);
        int int35 = localDate0.getWeekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter36.getPrinter();
        boolean boolean38 = dateTimeFormatter36.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter36.withPivotYear(28);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = dateTimeZone44.getOffset(readableInstant45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter40.withZone(dateTimeZone44);
        java.lang.String str48 = localDate0.toString(dateTimeFormatter47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate51 = localDate0.withPeriodAdded(readablePeriod49, 26788243);
        int int52 = localDate0.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "year" + "'", str19, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimePrinter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Feb 22, 2022" + "'", str48, "Feb 22, 2022");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
    }

    @Test
    public void test8033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8033");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = dateTimeFormatter6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("53");
        int int11 = mutableDateTime10.getDayOfMonth();
        long long12 = mutableDateTime10.getMillis();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Calendar calendar17 = mutableDateTime13.toCalendar(locale16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        mutableDateTime13.setMillis(readableInstant22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime13.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add(26666);
        org.joda.time.MutableDateTime mutableDateTime29 = property25.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime31 = property25.addWrapField(1);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.getMutableDateTime();
        boolean boolean34 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        long long46 = chronology40.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = dateTimeZone48.getName(0L, locale50);
        org.joda.time.Chronology chronology52 = chronology40.withZone(dateTimeZone48);
        mutableDateTime10.setZoneRetainFields(dateTimeZone48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter6.withZone(dateTimeZone48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 20);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate73 = localDate67.withYear((int) (byte) 1);
        java.lang.String str74 = dateTimeFormatter66.print((org.joda.time.ReadablePartial) localDate73);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime();
        int int78 = dateTimeFormatter66.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime75, "1", 1);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate82 = localDate79.withField(dateTimeFieldType80, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDate82.toDateTime(readableInstant83);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate87 = localDate85.minusMonths((int) (short) -1);
        boolean boolean89 = localDate85.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology90 = localDate85.getChronology();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology92 = chronology90.withZone(dateTimeZone91);
        org.joda.time.DateTime dateTime93 = localDate82.toDateTimeAtCurrentTime(dateTimeZone91);
        boolean boolean94 = dateTimeZone91.isFixed();
        mutableDateTime75.setZone(dateTimeZone91);
        java.lang.String str97 = dateTimeZone91.getNameKey((long) (byte) 1);
        org.joda.time.Chronology chronology98 = chronology62.withZone(dateTimeZone91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter99 = dateTimeFormatter56.withZone(dateTimeZone91);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515239223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=59,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:33:59 AM +00:00" + "'", str7, "7:33:59 AM +00:00");
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60494601600000L) + "'", long12 == (-60494601600000L));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645515239223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=59,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-48469999L) + "'", long46 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDate73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str74, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-2) + "'", int78 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "UTC" + "'", str97, "UTC");
        org.junit.Assert.assertNotNull(chronology98);
        org.junit.Assert.assertNotNull(dateTimeFormatter99);
    }

    @Test
    public void test8034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8034");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        boolean boolean39 = dateTimeFieldType29.isSupported(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyearOfCentury();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime47.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology51 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfHalfday();
        java.util.Locale locale57 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean58 = locale57.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(2L, chronology51, locale57, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale62 = dateTimeParserBucket61.getLocale();
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        int int65 = dateTimeField40.getMaximumShortTextLength(locale63);
        java.lang.String str66 = locale63.getVariant();
        java.util.Calendar calendar67 = mutableDateTime28.toCalendar(locale63);
        int int68 = mutableDateTime28.getSecondOfDay();
        boolean boolean69 = mutableDateTime28.isAfterNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str64, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645515239306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=59,MILLISECOND=306,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 27239 + "'", int68 == 27239);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test8035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8035");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.plus((-48469999L));
        org.joda.time.DateTime dateTime13 = dateTime9.plusSeconds(2);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime9, dateTimeZone26);
        org.joda.time.Interval interval30 = localDate0.toInterval(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        java.lang.String str32 = mutableDateTime31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) locale34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone33);
        mutableDateTime31.setZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = localDate0.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone33);
        int int40 = localDate39.size();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate43.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime46 = localDate43.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate54 = localDate48.withYear((int) (byte) 1);
        java.lang.String str55 = dateTimeFormatter47.print((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        int int59 = dateTimeFormatter47.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime56, "1", 1);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTime(readableInstant64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = localDate63.toDateTimeAtCurrentTime(dateTimeZone72);
        boolean boolean75 = dateTimeZone72.isFixed();
        mutableDateTime56.setZone(dateTimeZone72);
        org.joda.time.DateTime dateTime77 = dateTime46.toDateTime(dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight78 = localDate39.toDateMidnight(dateTimeZone72);
        java.lang.String str80 = dateTimeZone72.getName(113080L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8 + "'", int1 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T07:33:59.335Z" + "'", str32, "2022-02-22T07:33:59.335Z");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str55, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-2) + "'", int59 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
    }

    @Test
    public void test8036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8036");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test8037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8037");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded((long) 26666570, (int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime21.plus(readableDuration26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.minus(readablePeriod29);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfDay();
        org.joda.time.DateTime dateTime33 = property31.addWrapFieldToCopy(26813827);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test8038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8038");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDate(345600000L);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime16 = property13.roundHalfEvenCopy();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime0.monthOfYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.plus((-48469999L));
        org.joda.time.DateTime dateTime30 = dateTime26.plusSeconds(2);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) dateTime26, dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone43);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfMonth();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime47);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes((int) 'a');
        org.joda.time.DateTime.Property property52 = dateTime51.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate60 = localDate54.withYear((int) (byte) 1);
        java.lang.String str61 = dateTimeFormatter53.print((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology68 = localDate63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology70 = chronology68.withZone(dateTimeZone69);
        boolean boolean71 = dateTimeZone62.equals((java.lang.Object) dateTimeZone69);
        org.joda.time.DateTime dateTime72 = localDate60.toDateTimeAtCurrentTime(dateTimeZone69);
        org.joda.time.DateTime.Property property73 = dateTime72.weekOfWeekyear();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        org.joda.time.DateTimeField dateTimeField82 = chronology81.clockhourOfDay();
        org.joda.time.DateTime dateTime83 = dateTime72.withChronology(chronology81);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((java.lang.Object) dateTime51, chronology81);
        org.joda.time.DateTimeField dateTimeField85 = chronology81.halfdayOfDay();
        mutableDateTime0.setChronology(chronology81);
        mutableDateTime0.addHours(26868143);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime0.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime91 = property89.set("7:28:03 AM +00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"7:28:03 AM +00:00\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str61, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test8039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8039");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localTime6.toString("2022-02-22T07:25:06.677Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test8040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8040");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        int int54 = localDate14.getYearOfCentury();
        org.joda.time.LocalDate.Property property55 = localDate14.year();
        org.joda.time.LocalDate localDate57 = property55.addToCopy((int) '4');
        org.joda.time.LocalDate localDate58 = property55.getLocalDate();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515239425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=59,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:33:59 AM +00:00" + "'", str46, "7:33:59 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test8041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8041");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale4 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate16.minus(readablePeriod17);
        org.joda.time.LocalDate.Property property19 = localDate18.year();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalDate localDate22 = property19.addWrapFieldToCopy(26763043);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime29.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology33 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfHalfday();
        java.util.Locale locale39 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean40 = locale39.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(2L, chronology33, locale39, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale44 = dateTimeParserBucket43.getLocale();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        dateTimeParserBucket43.setZone(dateTimeZone46);
        java.util.Locale locale48 = dateTimeParserBucket43.getLocale();
        java.util.Locale locale52 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str53 = locale48.getDisplayName(locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.lang.String str55 = locale52.getDisplayScript();
        int int56 = property19.getMaximumShortTextLength(locale52);
        java.lang.String str57 = locale7.getDisplayVariant(locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = dateTimeFormatter58.getPrinter();
        org.joda.time.Chronology chronology60 = dateTimeFormatter58.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter58.withDefaultYear((int) (byte) 10);
        boolean boolean63 = dateTimeFormatter58.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter58.withPivotYear(5999999);
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("2022-02-22T07:24:52.886Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter58.withLocale(locale67);
        java.lang.String str69 = locale52.getDisplayCountry(locale67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str73 = dateTimeZone70.getName(0L, locale72);
        java.lang.String str74 = locale67.getDisplayLanguage(locale72);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English" + "'", str5, "English");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str53, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimePrinter59);
        org.junit.Assert.assertNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str69, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test8042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8042");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        int int3 = dateTimePrinter1.estimatePrintedLength();
        int int4 = dateTimePrinter1.estimatePrintedLength();
        java.io.Writer writer5 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) (-1000L), chronology13);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(31525459140000L, chronology13);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(26773);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int21 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter20.withChronology(chronology29);
        java.lang.String str33 = dateTimeFormatter20.print((-60000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 33);
        boolean boolean36 = dateTimeFormatter35.isPrinter();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        mutableDateTime46.add(durationFieldType50, (-1));
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime46.weekOfWeekyear();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        int int55 = property53.getMaximumTextLength(locale54);
        int int56 = dateTimeField45.getMaximumShortTextLength(locale54);
        java.lang.String str57 = locale54.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter35.withLocale(locale54);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter1.printTo(writer5, (org.joda.time.ReadablePartial) localDate19, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 40 + "'", int3 == 40);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "12/31/69 11:59 PM" + "'", str33, "12/31/69 11:59 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English" + "'", str57, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
    }

    @Test
    public void test8043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8043");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        java.lang.String str10 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter13.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser22);
        int int24 = dateTimePrinter1.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str10, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 40 + "'", int24 == 40);
    }

    @Test
    public void test8044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8044");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        int int14 = dateTimeField12.getMaximumValue(3366579221870039078L);
        long long16 = dateTimeField12.roundCeiling(32L);
        long long18 = dateTimeField12.roundCeiling(4519783956L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1000L + "'", long16 == 1000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4519784000L + "'", long18 == 4519784000L);
    }

    @Test
    public void test8045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8045");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        boolean boolean6 = charSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream10 = languageRangeList8.stream();
        boolean boolean11 = charSet5.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime17.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        long long32 = chronology28.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime21.withChronology(chronology28);
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded((long) 1, (int) '4');
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.plus((-48469999L));
        org.joda.time.DateTime dateTime48 = dateTime44.plusSeconds(2);
        org.joda.time.DateTime dateTime50 = dateTime48.minusSeconds(8);
        boolean boolean51 = dateTime33.isBefore((org.joda.time.ReadableInstant) dateTime48);
        java.lang.Class<?> wildcardClass52 = dateTime33.getClass();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale54 = dateTimeFormatter53.getLocale();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter53.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyearOfCentury();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate65.equals((java.lang.Object) (byte) 10);
        int[] intArray74 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int75 = dateTimeField62.getMinimumValue((org.joda.time.ReadablePartial) localDate65, intArray74);
        int int77 = dateTimeField62.getMaximumValue((long) 15);
        java.lang.Class<?> wildcardClass78 = dateTimeField62.getClass();
        java.lang.reflect.Type[] typeArray79 = new java.lang.reflect.Type[] { wildcardClass52, wildcardClass78 };
        java.lang.reflect.Type[] typeArray80 = charSet5.toArray(typeArray79);
        java.util.Spliterator<java.lang.Character> charSpliterator81 = charSet5.spliterator();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515239626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=59,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 200L + "'", long32 == 200L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(locale54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 99 + "'", int77 == 99);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(charSpliterator81);
    }

    @Test
    public void test8046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8046");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter15.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        java.lang.String str22 = mutableDateTime21.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        boolean boolean25 = dateTimeZone23.equals((java.lang.Object) locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone23);
        mutableDateTime21.setZoneRetainFields(dateTimeZone23);
        boolean boolean29 = mutableDateTime21.isEqual((long) 1970);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 26666570);
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        int int33 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int36 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime21, "2022-02-22T07:24:44.296Z", 5999999);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) -1);
        java.lang.String str39 = dateTimeFormatter15.print((org.joda.time.ReadablePartial) localDate38);
        java.lang.String str41 = dateTimeFormatter15.print((long) 732);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter15.withPivotYear(27210528);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:33:59.675Z" + "'", str22, "2022-02-22T07:33:59.675Z");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-6000000) + "'", int36 == (-6000000));
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "12:00:00 AM" + "'", str41, "12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test8047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8047");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        java.lang.String str11 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        int int13 = dateTimeParser12.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser12);
        java.lang.Integer int15 = dateTimeFormatter14.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) int15);
        int int17 = mutableDateTime16.getMillisOfDay();
        mutableDateTime16.addMillis((int) (byte) 0);
        int int20 = mutableDateTime16.getWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime26.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime31 = dateTime29.withHourOfDay(22);
        java.lang.String str32 = dateTime29.toString();
        mutableDateTime16.setTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime35 = dateTime29.plusDays(26935816);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str11, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNull(int15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27239727 + "'", int17 == 27239727);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0001-02-19T07:33:59.727Z" + "'", str32, "0001-02-19T07:33:59.727Z");
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test8048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8048");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = property11.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.DateTime dateTime16 = property11.setCopy(26665274);
        org.joda.time.DateTime dateTime17 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = property11.setCopy((-26669));
        org.joda.time.DateTime dateTime21 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology32 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfHalfday();
        java.util.Locale locale38 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean39 = locale38.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(2L, chronology32, locale38, (java.lang.Integer) (-2), (int) 'a');
        dateTimeParserBucket42.setOffset(7);
        java.lang.Object obj45 = dateTimeParserBucket42.saveState();
        int int46 = dateTimeParserBucket42.getOffset();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 24, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyearOfCentury();
        java.util.Locale locale60 = new java.util.Locale("53");
        java.lang.String str61 = dateTimeField57.getAsShortText(26666570, locale60);
        boolean boolean62 = dateTimeParserBucket42.restoreState((java.lang.Object) locale60);
        int int63 = property11.getMaximumTextLength(locale60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:27:43.107Z", locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:27:43.107Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals(locale60.toString(), "53");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "26666570" + "'", str61, "26666570");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
    }

    @Test
    public void test8049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8049");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        int int3 = dateTimeFormatter0.getDefaultYear();
        java.lang.Integer int4 = dateTimeFormatter0.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test8050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8050");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.era();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = dateTimeField14.getAsText((long) (short) 1, locale16);
        java.lang.String str19 = dateTimeField14.getAsShortText((long) 100);
        mutableDateTime0.setRounding(dateTimeField14);
        mutableDateTime0.setMillisOfDay(64651);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology34);
        mutableDateTime0.set(dateTimeFieldType23, (-8306706));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515239766,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=59,MILLISECOND=766,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "year" + "'", str24, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test8051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8051");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        mutableDateTime77.setMillis((-62131077316268L));
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        mutableDateTime77.add(readablePeriod84);
        boolean boolean86 = mutableDateTime77.isAfterNow();
        java.lang.String str87 = mutableDateTime77.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0001-02-22T07:24:43.732Z" + "'", str87, "0001-02-22T07:24:43.732Z");
    }

    @Test
    public void test8052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8052");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property9 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property9.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale17 = dateTimeFormatter16.getLocale();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter16.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType14.getField(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.centuries();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(2L, chronology23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(9223372036854775807L, chronology23);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property36 = localDate29.yearOfEra();
        org.joda.time.LocalDate localDate37 = property36.roundFloorCopy();
        org.joda.time.LocalDate localDate38 = property36.withMaximumValue();
        org.joda.time.LocalDate localDate40 = property36.addWrapFieldToCopy(26666877);
        org.joda.time.LocalDate localDate42 = property36.addToCopy(59);
        org.joda.time.LocalDate localDate43 = property36.roundCeilingCopy();
        org.joda.time.LocalDate localDate45 = property36.addToCopy(26676316);
        org.joda.time.LocalDate localDate47 = localDate45.withCenturyOfEra(28);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths(26783168);
        int int50 = localDate49.getCenturyOfEra();
        int[] intArray52 = chronology23.get((org.joda.time.ReadablePartial) localDate49, 55669000L);
        int int53 = localDate49.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22347 + "'", int50 == 22347);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
    }

    @Test
    public void test8053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8053");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDate1.getFieldType(1);
        int int6 = localDate1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        mutableDateTime7.add(durationFieldType11, (-1));
        boolean boolean14 = localDate1.isSupported(durationFieldType11);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.Interval interval23 = localDate1.toInterval(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((-968417855999999962L), dateTimeZone21);
        org.joda.time.LocalDate localDate26 = localDate24.withYear(218);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = dateTimeFormatter27.getPrinter();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withDefaultYear((int) (byte) 10);
        java.lang.String str33 = dateTimeFormatter27.print((long) 999);
        org.joda.time.format.DateTimeParser dateTimeParser34 = dateTimeFormatter27.getParser();
        boolean boolean35 = dateTimeFormatter27.isParser();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        long long39 = dateTimeZone36.adjustOffset((long) 26710930, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter27.withZone(dateTimeZone36);
        org.joda.time.Interval interval41 = localDate24.toInterval(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimePrinter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Thursday, January 1, 1970" + "'", str33, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeParser34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 26710930L + "'", long39 == 26710930L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(interval41);
    }

    @Test
    public void test8054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8054");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        int int21 = dateTimeField18.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        java.util.Locale locale35 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str36 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDate29, (int) (short) -1, locale35);
        java.lang.String str37 = dateTimeField18.getName();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.lang.String str40 = locale39.getDisplayCountry();
        java.lang.String str41 = dateTimeField18.getAsText((-1L), locale39);
        java.lang.String str42 = locale39.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 18, chronology8, locale39, (java.lang.Integer) 677, 26756981);
        dateTimeParserBucket45.setOffset((java.lang.Integer) 292278993);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekOfWeekyear" + "'", str37, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English" + "'", str42, "English");
    }

    @Test
    public void test8055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8055");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = locale5.getVariant();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        long long18 = dateTimeField15.addWrapField((long) ' ', 0);
        long long20 = dateTimeField15.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDate21.getFieldType(1);
        int int26 = localDate21.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        boolean boolean34 = localDate21.isSupported(durationFieldType31);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        org.joda.time.LocalDate.Property property45 = localDate21.property(dateTimeFieldType44);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Calendar calendar50 = mutableDateTime46.toCalendar(locale49);
        boolean boolean51 = mutableDateTime46.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str53 = mutableDateTime46.toString(dateTimeFormatter52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        boolean boolean56 = dateTimeZone54.equals((java.lang.Object) locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter52.withLocale(locale55);
        java.lang.String str58 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDate21, locale55);
        java.lang.String str59 = locale5.getDisplayCountry(locale55);
        java.util.Locale.Builder builder60 = builder0.setLocale(locale55);
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder63 = builder61.setLocale(locale62);
        java.util.Locale locale64 = builder61.build();
        java.util.Locale locale65 = builder61.build();
        java.util.Locale.Builder builder66 = builder61.clear();
        java.util.Locale locale67 = builder61.build();
        java.util.Locale.Builder builder68 = builder60.setLocale(locale67);
        java.util.Locale.Builder builder69 = builder60.clearExtensions();
        java.util.Locale.Builder builder70 = builder69.clear();
        java.util.Locale.Builder builder71 = builder69.clear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 345600000L + "'", long20 == 345600000L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645515239947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=59,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "7:33:59 AM +00:00" + "'", str53, "7:33:59 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "8" + "'", str58, "8");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test8056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8056");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        boolean boolean51 = dateTimeFieldType41.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime20.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime55 = dateTime20.minusMinutes(5);
        int int56 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter0.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26679);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = dateTimeFormatter59.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter59.withDefaultYear(26718594);
        boolean boolean64 = dateTimeFormatter59.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97200000 + "'", int56 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimePrinter60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test8057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8057");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime12 = dateTime9.withField(dateTimeFieldType10, 26666);
        int int13 = dateTime12.getYear();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime12.withCenturyOfEra(50);
        int int18 = dateTime12.getDayOfYear();
        org.joda.time.DateTime.Property property19 = dateTime12.yearOfEra();
        java.lang.String str21 = dateTime12.toString("7:24:30 am +00:00");
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime12.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setMillisOfSecond(27178912);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27178912 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26666 + "'", int13 == 26666);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7:24:30 AM34 +00:00" + "'", str21, "7:24:30 AM34 +00:00");
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test8058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8058");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        int int5 = dateTimePrinter4.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter6.getParser();
        int int16 = dateTimeParser15.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter18.getPrinter();
        org.joda.time.Chronology chronology20 = dateTimeFormatter18.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withDefaultYear((int) (byte) 10);
        java.util.Locale locale23 = dateTimeFormatter18.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser24);
        int int26 = dateTimeParser24.estimateParsedLength();
        int int27 = dateTimeParser24.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser24);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime29.add(durationFieldType33, (-1));
        mutableDateTime29.setWeekOfWeekyear(52);
        java.lang.String str38 = dateTimeFormatter28.print((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime29.copy();
        int int40 = mutableDateTime29.getDayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.clockhourOfHalfday();
        org.joda.time.Chronology chronology55 = chronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField57 = chronology50.dayOfYear();
        mutableDateTime29.setChronology(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimePrinter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNotNull(dateTimeParser24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Tuesday, December 27, 2022" + "'", str38, "Tuesday, December 27, 2022");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test8059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8059");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        mutableDateTime4.setMillis(readableInstant13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17);
        int int21 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "2022-02-22T07:24:42.673Z", (int) '4');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime.Property property33 = dateTime31.era();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekOfWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime31.withChronology(chronology39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(33);
        java.lang.String str46 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime45.minusHours(1601220000);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.DateTime dateTime58 = dateTime55.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology59 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.clockhourOfHalfday();
        java.util.Locale locale65 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean66 = locale65.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(2L, chronology59, locale65, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.DateTimeField dateTimeField70 = chronology59.weekOfWeekyear();
        org.joda.time.DurationField durationField71 = chronology59.minutes();
        org.joda.time.DateTimeField dateTimeField72 = chronology59.centuryOfEra();
        org.joda.time.DateTime dateTime73 = dateTime48.toDateTime(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645515240097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-53) + "'", int21 == (-53));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0003-06-21T18:06:10.098Z" + "'", str32, "0003-06-21T18:06:10.098Z");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "July 6, 2021 7:34:00 AM +00:00" + "'", str46, "July 6, 2021 7:34:00 AM +00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test8060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8060");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1814400999L);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.millisOfSecond();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        int int18 = dateTimeField15.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        java.lang.String str27 = dateTimeFormatter19.print((org.joda.time.ReadablePartial) localDate26);
        java.util.Locale locale32 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str33 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDate26, (int) (short) -1, locale32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Calendar calendar38 = mutableDateTime34.toCalendar(locale37);
        java.util.Set<java.lang.Character> charSet39 = locale37.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        boolean boolean43 = charSet39.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41);
        charSet39.clear();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        boolean boolean46 = charSet39.contains((java.lang.Object) locale45);
        java.lang.String str47 = locale32.getDisplayCountry(locale45);
        java.lang.String str48 = dateTimeField5.getAsText(26702, locale32);
        org.joda.time.DurationField durationField49 = dateTimeField5.getRangeDurationField();
        int int51 = dateTimeField5.getMinimumValue((long) 782);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str27, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645515240132,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=132,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str47, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "26702" + "'", str48, "26702");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test8061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8061");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        boolean boolean9 = dateTimeFormatter0.isParser();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate13.toDateTimeAtCurrentTime(dateTimeZone22);
        int int25 = dateTime24.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        java.lang.String str27 = mutableDateTime26.toString();
        boolean boolean28 = dateTime24.isEqual((org.joda.time.ReadableInstant) mutableDateTime26);
        java.util.GregorianCalendar gregorianCalendar29 = mutableDateTime26.toGregorianCalendar();
        mutableDateTime26.addMillis(39);
        int int34 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime26, "2022-02-22T07:24:26.446Z", 26742488);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime26.setMinuteOfHour(989);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 989 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 34 + "'", int25 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:34:00.253Z" + "'", str27, "2022-02-22T07:34:00.253Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-26742489) + "'", int34 == (-26742489));
    }

    @Test
    public void test8062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8062");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter14.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType12.getField(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.centuries();
        org.joda.time.DurationField durationField25 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.weekyear();
        long long30 = chronology21.add((long) 26798572, (long) (-36), 26705748);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology21);
        mutableDateTime31.addYears(26989253);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-934608356L) + "'", long30 == (-934608356L));
    }

    @Test
    public void test8063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8063");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        int int6 = dateTimeFormatter5.getDefaultYear();
        int int7 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withPivotYear((java.lang.Integer) (-26683163));
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        mutableDateTime10.setMillis(readableInstant19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime10.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime25 = property22.add(26666);
        org.joda.time.MutableDateTime mutableDateTime26 = property22.getMutableDateTime();
        mutableDateTime26.setMinuteOfHour((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime26.add(readablePeriod29, 26691926);
        mutableDateTime26.setDate(3600000L);
        mutableDateTime26.setMillis(16134216940826667L);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate39.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        long long53 = dateTimeZone48.getMillisKeepLocal(dateTimeZone51, (long) 2);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        boolean boolean56 = dateTimeZone54.equals((java.lang.Object) locale55);
        long long58 = dateTimeZone51.getMillisKeepLocal(dateTimeZone54, (long) 2000);
        mutableDateTime26.setZoneRetainFields(dateTimeZone54);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime26.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundFloor();
        java.lang.String str62 = dateTimeFormatter9.print((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.Chronology chronology63 = mutableDateTime61.getChronology();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime61.dayOfYear();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime61.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645515240365,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=365,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2L + "'", long53 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2000L + "'", long58 == 2000L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "12/25/42 12:00 AM" + "'", str62, "12/25/42 12:00 AM");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test8064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8064");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        mutableDateTime4.setMillis(readableInstant13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17);
        int int21 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "2022-02-22T07:24:42.673Z", (int) '4');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime.Property property33 = dateTime31.era();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekOfWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime31.withChronology(chronology39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(33);
        java.lang.String str46 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter0.withDefaultYear(26673922);
        java.util.Locale locale50 = dateTimeFormatter49.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter49.withPivotYear((java.lang.Integer) 64871);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645515240425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-53) + "'", int21 == (-53));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0003-06-21T18:06:10.426Z" + "'", str32, "0003-06-21T18:06:10.426Z");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "July 6, 2021 7:34:00 AM +00:00" + "'", str46, "July 6, 2021 7:34:00 AM +00:00");
        org.junit.Assert.assertNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test8065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8065");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate15.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = localDate19.toDateTime((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        mutableDateTime20.setRounding(dateTimeField37);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime0.property(dateTimeFieldType42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutableDateTime0.add(readablePeriod46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime0.year();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime0.year();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableDateTime0.add(readablePeriod50);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutableDateTime53.add(readableDuration54);
        java.util.Locale locale56 = java.util.Locale.getDefault();
        java.util.Calendar calendar57 = mutableDateTime53.toCalendar(locale56);
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.fromCalendarFields(calendar57);
        org.joda.time.LocalTime.Property property59 = localTime58.millisOfSecond();
        org.joda.time.LocalTime localTime60 = property59.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime61 = property59.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        mutableDateTime62.add(durationFieldType66, (-1));
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableDateTime62.add(readablePeriod69, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime62.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime73 = property72.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime73.toMutableDateTimeISO();
        mutableDateTime74.setTime((long) 26666335);
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        mutableDateTime74.setZoneRetainFields(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = localTime61.toDateTimeToday(dateTimeZone78);
        org.joda.time.DateTime.Property property81 = dateTime80.millisOfSecond();
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder82.clear();
        java.util.Locale.Builder builder84 = builder83.clear();
        java.util.Locale locale85 = builder84.build();
        java.lang.String str86 = locale85.getLanguage();
        boolean boolean87 = locale85.hasExtensions();
        java.util.Locale locale88 = locale85.stripExtensions();
        java.lang.String str89 = locale88.toLanguageTag();
        int int90 = property81.getMaximumTextLength(locale88);
        java.util.Set<java.lang.Character> charSet91 = locale88.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = mutableDateTime0.toString("0003-06-21T17:56:56.862Z", locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515240469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645515240469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "und" + "'", str89, "und");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
        org.junit.Assert.assertNotNull(charSet91);
    }

    @Test
    public void test8066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8066");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = dateTimeField13.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale18.getISO3Country();
        java.util.Locale locale21 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str22 = locale18.getDisplayName(locale21);
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale locale26 = builder25.build();
        java.lang.String str27 = locale18.getDisplayCountry(locale26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime34.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology38 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.plus((-48469999L));
        org.joda.time.DateTime dateTime51 = dateTime47.plusSeconds(2);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate55.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) dateTime47, dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(dateTimeZone64);
        java.lang.String str69 = dateTimeZone64.toString();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        boolean boolean73 = dateTimeZone71.equals((java.lang.Object) locale72);
        java.lang.String str74 = dateTimeZone64.getName((long) 26667, locale72);
        org.joda.time.Chronology chronology75 = chronology38.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.secondOfMinute();
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(1980000L, chronology75, locale77);
        java.lang.String str79 = locale18.getDisplayName(locale77);
        java.lang.String str80 = dateTimeField13.getAsShortText(readablePartial15, 8893913, locale18);
        java.lang.Object obj81 = locale18.clone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale21.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u82f1\u6587" + "'", str79, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "8893913" + "'", str80, "8893913");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "en");
    }

    @Test
    public void test8067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8067");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(28);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone8.getOffset(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((long) 26665274);
        int int18 = localDateTime17.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks(182);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone22.toTimeZone();
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.DateTime dateTime26 = localDateTime17.toDateTime(dateTimeZone22);
        long long28 = dateTimeZone8.getMillisKeepLocal(dateTimeZone22, (long) 26666);
        int int30 = dateTimeZone22.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7200000 + "'", int18 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 26666L + "'", long28 == 26666L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test8068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8068");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Calendar calendar15 = mutableDateTime11.toCalendar(locale14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        mutableDateTime11.setMillis(readableInstant20);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property23.add(26666);
        org.joda.time.MutableDateTime mutableDateTime28 = property23.addWrapField(2000);
        mutableDateTime28.setDate(480032L);
        boolean boolean31 = dateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTime.Property property32 = dateTime8.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter33.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate42 = localDate36.withYear((int) (byte) 1);
        java.lang.String str43 = dateTimeFormatter35.print((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter35.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser44);
        java.lang.String str46 = dateTime8.toString(dateTimeFormatter45);
        java.lang.String str48 = dateTimeFormatter45.print(63776678641L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645515240618,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=618,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str43, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Feb 19, 0001" + "'", str46, "Feb 19, 0001");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Jan 9, 1972" + "'", str48, "Jan 9, 1972");
    }

    @Test
    public void test8069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8069");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.era();
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalDate.Property property10 = localDate4.yearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int13 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter12.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekyearOfCentury();
        long long28 = chronology21.add((long) '4', (long) 5999999, (-444));
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 55377, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withYear((int) (byte) 1);
        java.lang.String str38 = dateTimeFormatter30.print((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        boolean boolean48 = dateTimeZone39.equals((java.lang.Object) dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime.Property property50 = dateTime49.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight52 = dateTime51.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime55 = dateTime51.withDurationAdded(readableDuration53, 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        org.joda.time.DateTime dateTime59 = dateTime55.withFieldAdded(durationFieldType57, 182);
        mutableDateTime29.add(durationFieldType57, 26676320);
        boolean boolean62 = localDate4.isSupported(durationFieldType57);
        int int63 = localDate4.getDayOfYear();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.weekOfWeekyear();
        long long75 = dateTimeField72.addWrapField((long) ' ', 0);
        boolean boolean76 = localDate4.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-2663999504L) + "'", long28 == (-2663999504L));
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str38, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 53 + "'", int63 == 53);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 32L + "'", long75 == 32L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test8070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8070");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj0, chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int9 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter8.withZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime7.toMutableDateTime(dateTimeZone10);
        boolean boolean16 = dateTimeZone10.isStandardOffset(113182L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test8071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8071");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        long long14 = chronology8.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DurationField durationField17 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField18.getType();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-48469999L) + "'", long14 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
    }

    @Test
    public void test8072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8072");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter0.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = mutableDateTime16.toCalendar(locale19);
        boolean boolean21 = mutableDateTime16.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str23 = mutableDateTime16.toString(dateTimeFormatter22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime16.property(dateTimeFieldType24);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Calendar calendar30 = mutableDateTime26.toCalendar(locale29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        mutableDateTime26.setMillis(readableInstant35);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime26.secondOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate41.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate45 = localDate41.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        mutableDateTime46.add(durationFieldType50, (-1));
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.DateTime dateTime54 = localDate45.toDateTime((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField63.getType();
        mutableDateTime46.setRounding(dateTimeField63);
        mutableDateTime26.setMillis((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate70 = localDate67.withField(dateTimeFieldType68, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime26.property(dateTimeFieldType68);
        boolean boolean72 = mutableDateTime16.isSupported(dateTimeFieldType68);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime15.addDays(26672);
        int int78 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "0003-06-21T17:56:51.078Z", 26668);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology80 = dateTimeFormatter79.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter79.withPivotYear(46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter82.withZoneUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515240719,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=719,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645515240719,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=719,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7:34:00 AM +00:00" + "'", str23, "7:34:00 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515240719,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=719,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-26669) + "'", int78 == (-26669));
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
    }

    @Test
    public void test8073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8073");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate7.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate13 = localDate7.withPeriodAdded(readablePeriod11, 7200000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter14.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = mutableDateTime16.toCalendar(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter14.withLocale(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withDefaultYear(419);
        java.lang.String str27 = localDate13.toString(dateTimeFormatter24);
        org.joda.time.Interval interval28 = localDate13.toInterval();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645515240756,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=756,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Tuesday, February 22, 2022" + "'", str27, "Tuesday, February 22, 2022");
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test8074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8074");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours(26666877);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMillis(30580);
        org.joda.time.DateTime dateTime42 = dateTime38.minus((long) 26737047);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test8075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8075");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField2 = mutableDateTime1.getRoundingField();
        mutableDateTime1.setYear(26787325);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        int int16 = dateTimeField13.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        java.util.Locale locale30 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str31 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDate24, (int) (short) -1, locale30);
        java.lang.String str32 = dateTimeField13.getName();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.lang.String str35 = locale34.getDisplayCountry();
        java.lang.String str36 = dateTimeField13.getAsText((-1L), locale34);
        java.util.Locale locale40 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale44 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str45 = locale44.getDisplayVariant();
        java.lang.String str46 = locale40.getDisplayCountry(locale44);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = locale47.getDisplayCountry();
        java.lang.String str49 = locale44.getDisplayCountry(locale47);
        int int50 = dateTimeField13.getMaximumTextLength(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.centuryOfEra();
        org.joda.time.DurationField durationField60 = chronology58.halfdays();
        boolean boolean61 = dateTimeFieldType51.isSupported(chronology58);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.now(chronology58);
        int int63 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDate62);
        int int64 = dateTimeField13.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1" + "'", str31, "-1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "weekOfWeekyear" + "'", str32, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str46, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str49, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
    }

    @Test
    public void test8076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8076");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter11.withChronology(chronology49);
        int int51 = dateTimeFormatter50.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser52 = dateTimeFormatter50.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter50.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test8077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8077");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("0003-06-21T17:59:26.429Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T17:59:26.429Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test8078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8078");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (-62135596800000L), 17);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        java.lang.String str26 = dateTimeField25.toString();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 24, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        java.util.Locale locale40 = new java.util.Locale("53");
        java.lang.String str41 = dateTimeField37.getAsShortText(26666570, locale40);
        int int42 = dateTimeField25.getMaximumTextLength(locale40);
        java.lang.String str43 = locale40.getISO3Country();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515240917,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=0,MILLISECOND=917,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:00 AM +00:00" + "'", str7, "7:34:00 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62135596800000L) + "'", long24 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str26, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale40.toString(), "53");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "26666570" + "'", str41, "26666570");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test8079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8079");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26700463);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), chronology6);
        java.lang.String str9 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 115315);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11:59:59 PM " + "'", str9, "11:59:59 PM ");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test8080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8080");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        mutableDateTime0.setChronology(chronology10);
        mutableDateTime0.setDayOfWeek(5);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.plus((long) 182);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property26 = dateTime22.property(dateTimeFieldType25);
        mutableDateTime0.set(dateTimeFieldType25, 27054438);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime0.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withYear((int) (byte) 1);
        java.lang.String str38 = dateTimeFormatter30.print((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        boolean boolean48 = dateTimeZone39.equals((java.lang.Object) dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtCurrentTime(dateTimeZone46);
        int int50 = dateTime49.getYearOfCentury();
        boolean boolean52 = dateTime49.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property53 = dateTime49.monthOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfCeilingCopy();
        boolean boolean55 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str38, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test8081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8081");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate17 = localDate11.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate22 = property18.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean24 = localDate22.isSupported(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale26 = dateTimeFormatter25.getLocale();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter25.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType23.getField(chronology32);
        mutableDateTime9.setChronology(chronology32);
        org.joda.time.DurationField durationField36 = chronology32.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) property7, chronology32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test8082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8082");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        java.lang.String str8 = mutableDateTime7.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime7.add(readableDuration9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        mutableDateTime11.setChronology(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.years();
        org.joda.time.DurationField durationField23 = chronology19.centuries();
        mutableDateTime7.setChronology(chronology19);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(14011341876837L, chronology19, locale25, (java.lang.Integer) 26676320, (int) '#');
        int int32 = dateTimeParser5.parseInto(dateTimeParserBucket29, "0003-06-21T17:56:56.419Z", (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser5);
        int int34 = dateTimePrinter1.estimatePrintedLength();
        java.lang.StringBuffer stringBuffer35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property39.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMinutes(26666335);
        int int44 = localDateTime43.size();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withPeriodAdded(readablePeriod45, (int) '4');
        int int48 = localDateTime47.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusSeconds(26784774);
        java.util.Locale locale53 = new java.util.Locale("0003-06-21T18:00:20.562Z", "0001-02-19T22:25:26.204Z");
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter1.printTo(stringBuffer35, (org.joda.time.ReadablePartial) localDateTime50, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:34:01.123Z" + "'", str8, "2022-02-22T07:34:01.123Z");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jpn" + "'", str26, "jpn");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 37 + "'", int48 == 37);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertEquals(locale53.toString(), "0003-06-21t18:00:20.562z_0001-02-19T22:25:26.204Z");
    }

    @Test
    public void test8083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8083");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.Chronology chronology13 = dateTimeFormatter11.getChronolgy();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.era();
        long long16 = dateTimeField14.roundFloor(26940726L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62135596800000L) + "'", long16 == (-62135596800000L));
    }

    @Test
    public void test8084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8084");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        int int54 = localDate14.getYearOfCentury();
        org.joda.time.LocalDate.Property property55 = localDate14.year();
        org.joda.time.DateTime dateTime56 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        java.lang.String str65 = dateTimeZone63.getID();
        org.joda.time.DateTime dateTime66 = localDate14.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate68 = localDate14.plusYears(266907);
        org.joda.time.DateTime dateTime69 = localDate14.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515241184,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=1,MILLISECOND=184,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:34:01 AM +00:00" + "'", str46, "7:34:01 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test8085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8085");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate14.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate14.withPeriodAdded(readablePeriod22, (int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate14.dayOfWeek();
        boolean boolean26 = dateTime13.equals((java.lang.Object) property25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        boolean boolean38 = dateTimeFieldType28.isSupported(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((-1062980L), chronology34);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime47.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property52 = dateTime50.property(dateTimeFieldType51);
        org.joda.time.DateTime dateTime53 = property52.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime54 = property52.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate62 = localDate56.withYear((int) (byte) 1);
        java.lang.String str63 = dateTimeFormatter55.print((org.joda.time.ReadablePartial) localDate62);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology70 = localDate65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        boolean boolean73 = dateTimeZone64.equals((java.lang.Object) dateTimeZone71);
        org.joda.time.DateTime dateTime74 = localDate62.toDateTimeAtCurrentTime(dateTimeZone71);
        org.joda.time.DateTime dateTime75 = dateTime54.toDateTime(dateTimeZone71);
        org.joda.time.DateTime dateTime77 = dateTime54.withHourOfDay((int) (short) 10);
        org.joda.time.Instant instant78 = dateTime54.toInstant();
        int int79 = mutableDateTime41.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime41.monthOfYear();
        boolean boolean81 = dateTime13.isAfter((org.joda.time.ReadableInstant) mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDate62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str63, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test8086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8086");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate9.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 2);
        boolean boolean25 = dateTimeZone18.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime1.setZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 27, dateTimeZone18);
        long long30 = dateTimeZone18.adjustOffset(26711000L, true);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.yearOfEra();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        org.joda.time.LocalDate localDate41 = property39.withMaximumValue();
        org.joda.time.LocalDate localDate42 = property39.withMaximumValue();
        org.joda.time.DurationField durationField43 = property39.getRangeDurationField();
        org.joda.time.LocalDate localDate45 = property39.addToCopy(26753906);
        org.joda.time.LocalDate localDate47 = property39.addToCopy(26688680);
        org.joda.time.LocalDate localDate48 = property39.roundFloorCopy();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str54 = nameProvider50.getShortName(locale51, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 24, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.weekyearOfCentury();
        java.util.Locale locale68 = new java.util.Locale("53");
        java.lang.String str69 = dateTimeField65.getAsShortText(26666570, locale68);
        java.lang.String str72 = nameProvider50.getName(locale68, "7:25:58 AM +00:00", "2022-02-22T07:24:59.736Z");
        java.lang.String str73 = localDate48.toString("07:27:01.999", locale68);
        java.lang.String str74 = dateTimeZone18.getShortName(113423L, locale68);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645515241510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=1,MILLISECOND=510,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 26711000L + "'", long30 == 26711000L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNull(durationField43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals(locale68.toString(), "53");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "26666570" + "'", str69, "26666570");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "07:27:01.999" + "'", str73, "07:27:01.999");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
    }

    @Test
    public void test8087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8087");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(26666335);
        int int15 = localDateTime14.size();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withPeriodAdded(readablePeriod16, (int) '4');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withPeriodAdded(readablePeriod19, (int) '#');
        java.lang.String str22 = dateTimeFormatter5.print((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds(26799215);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minus(readableDuration25);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Tuesday, September 13, 2072" + "'", str22, "Tuesday, September 13, 2072");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test8088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8088");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime.Property property11 = dateTime9.era();
        java.lang.String str12 = property11.toString();
        org.joda.time.DateTime dateTime13 = property11.getDateTime();
        int int14 = dateTime13.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime17 = dateTime13.withField(dateTimeFieldType15, 0);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime23.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime30 = dateTime27.withField(dateTimeFieldType28, 26666);
        org.joda.time.DateTime dateTime32 = dateTime27.minusMonths(24);
        boolean boolean33 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate41 = localDate35.withYear((int) (byte) 1);
        java.lang.String str42 = dateTimeFormatter34.print((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        int int46 = dateTimeFormatter34.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime43, "1", 1);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        boolean boolean62 = dateTimeZone59.isFixed();
        mutableDateTime43.setZone(dateTimeZone59);
        java.lang.String str65 = dateTimeZone59.getNameKey((long) (byte) 1);
        long long67 = dateTimeZone59.previousTransition((long) (byte) -1);
        boolean boolean69 = dateTimeZone59.isStandardOffset(26666877L);
        org.joda.time.DateTime dateTime70 = dateTime17.toDateTime(dateTimeZone59);
        org.joda.time.DateTime.Property property71 = dateTime70.minuteOfHour();
        org.joda.time.DateTime dateTime73 = dateTime70.withWeekyear(27111111);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0003-06-21T18:06:11.565Z" + "'", str10, "0003-06-21T18:06:11.565Z");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[era]" + "'", str12, "Property[era]");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 65171 + "'", int14 == 65171);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str42, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2) + "'", int46 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test8089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8089");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        boolean boolean35 = dateTimeZone26.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        long long49 = chronology43.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime51 = dateTime36.withChronology(chronology43);
        org.joda.time.DurationField durationField52 = chronology43.halfdays();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 26701949, chronology43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = localDate53.withWeekOfWeekyear(26957699);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26957699 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645515241613,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=1,MILLISECOND=613,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-48469999L) + "'", long49 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test8090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8090");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        org.joda.time.DateTime dateTime24 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate65 = localDate59.withYear((int) (byte) 1);
        java.lang.String str66 = dateTimeFormatter58.print((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime();
        int int70 = dateTimeFormatter58.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime67, "1", 1);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate74 = localDate71.withField(dateTimeFieldType72, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDate74.toDateTime(readableInstant75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = localDate74.toDateTimeAtCurrentTime(dateTimeZone83);
        boolean boolean86 = dateTimeZone83.isFixed();
        mutableDateTime67.setZone(dateTimeZone83);
        java.util.TimeZone timeZone88 = null;
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forTimeZone(timeZone88);
        mutableDateTime67.setZoneRetainFields(dateTimeZone89);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime67.era();
        boolean boolean92 = dateTimeZone54.equals((java.lang.Object) property91);
        org.joda.time.DateTime dateTime93 = dateTime24.toDateTime(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str66, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-2) + "'", int70 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test8091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8091");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.minus((-1228953L));
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readablePeriod23);
        org.joda.time.DateTime.Property property25 = dateTime20.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test8092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8092");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        long long25 = dateTimeField23.roundCeiling((long) 26672);
        long long28 = dateTimeField23.add(55425000L, 26700528);
        org.joda.time.DurationField durationField29 = dateTimeField23.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3600000L + "'", long25 == 3600000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 96121956225000L + "'", long28 == 96121956225000L);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test8093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8093");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfDay();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.weekyears();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate14.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime17 = localDate14.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate25 = localDate19.withYear((int) (byte) 1);
        java.lang.String str26 = dateTimeFormatter18.print((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        int int30 = dateTimeFormatter18.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime27, "1", 1);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTimeAtCurrentTime(dateTimeZone43);
        boolean boolean46 = dateTimeZone43.isFixed();
        mutableDateTime27.setZone(dateTimeZone43);
        org.joda.time.DateTime dateTime48 = dateTime17.toDateTime(dateTimeZone43);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate51.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate55 = localDate51.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        mutableDateTime56.add(durationFieldType60, (-1));
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime56.weekOfWeekyear();
        org.joda.time.DateTime dateTime64 = localDate55.toDateTime((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology70 = localDate65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField73 = chronology70.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = dateTimeField73.getType();
        mutableDateTime56.setRounding(dateTimeField73);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime56.secondOfMinute();
        int int77 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone43);
        java.util.Locale locale83 = new java.util.Locale("2022-02-22T07:25:02.092Z", "", "2022-02-22T07:24:30.010Z");
        java.lang.String str84 = dateTimeZone43.getName(0L, locale83);
        java.util.Locale locale85 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale86 = java.util.Locale.JAPANESE;
        java.lang.String str87 = locale86.getISO3Language();
        java.lang.String str88 = locale85.getDisplayLanguage(locale86);
        java.lang.String str89 = locale83.getDisplayCountry(locale86);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket((long) 228, chronology7, locale86, (java.lang.Integer) 2922789, 26749000);
        org.joda.time.DateTimeField dateTimeField93 = chronology7.secondOfMinute();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str26, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-2) + "'", int30 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals(locale83.toString(), "2022-02-22t07:25:02.092z__2022-02-22T07:24:30.010Z");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "jpn" + "'", str87, "jpn");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str88, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test8094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8094");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate5 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        boolean boolean15 = dateTimeZone6.equals((java.lang.Object) dateTimeZone13);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) localDate5, dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        boolean boolean28 = dateTimeFieldType18.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.DateTimeZone dateTimeZone31 = chronology24.getZone();
        org.joda.time.DurationField durationField32 = chronology24.centuries();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        int int44 = dateTimeField41.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate52 = localDate46.withYear((int) (byte) 1);
        java.lang.String str53 = dateTimeFormatter45.print((org.joda.time.ReadablePartial) localDate52);
        java.util.Locale locale58 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str59 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDate52, (int) (short) -1, locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = localDate52.getFieldType((int) (short) 1);
        int int62 = localDate52.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime65 = localDate52.toDateTimeAtStartOfDay(dateTimeZone64);
        org.joda.time.Chronology chronology66 = chronology24.withZone(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime17, dateTimeZone64);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime70 = property68.set(27230);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str53, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-1" + "'", str59, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(mutableDateTime70);
    }

    @Test
    public void test8095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8095");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.Interval interval39 = localDate9.toInterval(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime8.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime8.toDateTime(chronology50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime60.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime67 = property65.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate75 = localDate69.withYear((int) (byte) 1);
        java.lang.String str76 = dateTimeFormatter68.print((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        boolean boolean86 = dateTimeZone77.equals((java.lang.Object) dateTimeZone84);
        org.joda.time.DateTime dateTime87 = localDate75.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime67.toDateTime(dateTimeZone84);
        long long90 = dateTimeZone84.nextTransition(1600012620000L);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) dateTime54, dateTimeZone84);
        int int92 = dateTime91.getSecondOfMinute();
        org.joda.time.DateTime dateTime94 = dateTime91.plusMonths(26717309);
        org.joda.time.DateTime dateTime96 = dateTime91.plusDays(26785652);
        org.joda.time.DateTime.Property property97 = dateTime96.weekOfWeekyear();
        org.joda.time.DateTime dateTime99 = dateTime96.minusMonths(26935339);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDate75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str76, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1600012620000L + "'", long90 == 1600012620000L);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test8096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8096");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.Chronology chronology13 = dateTimeFormatter11.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        java.lang.String str15 = chronology13.toString();
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyearOfCentury();
        boolean boolean18 = dateTimeField17.isSupported();
        org.joda.time.DurationField durationField19 = dateTimeField17.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField17.getType();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test8097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8097");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        org.joda.time.DateTime dateTime25 = dateTime19.minusWeeks(0);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.centuryOfEra();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime19.toMutableDateTime(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test8098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8098");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate19.dayOfMonth();
        java.util.Locale locale32 = new java.util.Locale("53");
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = property30.getAsShortText(locale32);
        int int35 = property30.getMaximumValue();
        org.joda.time.LocalDate localDate36 = property30.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property37 = localDate36.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = property37.setCopy(26923609);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26923609 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale32.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22" + "'", str34, "22");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 28 + "'", int35 == 28);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test8099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8099");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        mutableDateTime0.add((long) 26674492);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        int int12 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515242100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=2,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:02 AM +00:00" + "'", str7, "7:34:02 AM +00:00");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
    }

    @Test
    public void test8100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8100");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        int int24 = property23.getMinimumValue();
        long long25 = property23.remainder();
        org.joda.time.DateTime dateTime26 = property23.roundCeilingCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1841642129L + "'", long25 == 1841642129L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test8101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8101");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy(26690377);
        org.joda.time.LocalDate.Property property11 = localDate10.weekyear();
        org.joda.time.LocalDate localDate13 = localDate10.plusMonths(41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate15.withYear((int) (byte) 1);
        java.lang.String str22 = dateTimeFormatter14.print((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDate21.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateTime.Property property34 = dateTime33.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfDay();
        org.joda.time.DateTime dateTime44 = dateTime33.withChronology(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime33.getZone();
        long long48 = dateTimeZone46.convertUTCToLocal((long) 349200000);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) localDate13, dateTimeZone46);
        org.joda.time.LocalDate localDate51 = localDate49.withWeekyear(27048129);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str22, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 349200000L + "'", long48 == 349200000L);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test8102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8102");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        boolean boolean3 = dateTimeFormatter1.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.parse("2022-02-22T07:30:53.501Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:30:53.501Z\" is malformed at \"22-02-22T07:30:53.501Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test8103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8103");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        java.lang.String str8 = localTime7.toString();
        org.joda.time.LocalTime localTime10 = localTime7.minusHours((int) (short) 100);
        org.joda.time.LocalTime localTime12 = localTime7.plusSeconds(4);
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology25 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfHalfday();
        java.util.Locale locale31 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean32 = locale31.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(2L, chronology25, locale31, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.DurationField durationField36 = chronology25.months();
        org.joda.time.DurationField durationField37 = chronology25.months();
        org.joda.time.DateTimeField dateTimeField38 = chronology25.millisOfSecond();
        long long41 = dateTimeField38.set((long) 48, 0);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusMonths((int) '4');
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plus((-48469999L));
        java.lang.String str61 = dateTime60.toString();
        boolean boolean62 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = dateTimeFormatter63.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime65.add(readableDuration66);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Calendar calendar69 = mutableDateTime65.toCalendar(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter63.withLocale(locale68);
        java.util.Calendar calendar71 = dateTime48.toCalendar(locale68);
        java.lang.String str72 = dateTimeField38.getAsShortText((-26701900), locale68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = localTime12.toString("2022-02-22T07:28:11.996Z", locale68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:02.021" + "'", str8, "00:00:02.021");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0003-06-21T18:06:12.375Z" + "'", str61, "0003-06-21T18:06:12.375Z");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimePrinter64);
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645515242374,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=2,MILLISECOND=374,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-62194235157626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=2,MILLISECOND=374,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-26701900" + "'", str72, "-26701900");
    }

    @Test
    public void test8104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8104");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfMonth();
        java.util.Locale locale33 = new java.util.Locale("8", "2022-02-22T07:24:30.100Z", "und");
        java.lang.String str34 = locale33.getDisplayScript();
        int int35 = property29.getMaximumShortTextLength(locale33);
        java.lang.String str36 = locale33.getCountry();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekOfWeekyear();
        long long48 = dateTimeField45.addWrapField((long) ' ', 0);
        java.util.Locale locale52 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale56 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str57 = locale56.getDisplayVariant();
        java.lang.String str58 = locale52.getDisplayCountry(locale56);
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.lang.String str60 = locale59.getDisplayCountry();
        java.lang.String str61 = locale56.getDisplayCountry(locale59);
        int int62 = dateTimeField45.getMaximumShortTextLength(locale56);
        int int63 = dateTimeField45.getMaximumValue();
        long long65 = dateTimeField45.roundHalfFloor((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Calendar calendar70 = mutableDateTime66.toCalendar(locale69);
        boolean boolean71 = mutableDateTime66.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str73 = mutableDateTime66.toString(dateTimeFormatter72);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        boolean boolean76 = dateTimeZone74.equals((java.lang.Object) locale75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter72.withLocale(locale75);
        int int78 = dateTimeField45.getMaximumTextLength(locale75);
        java.lang.String str79 = locale33.getDisplayName(locale75);
        java.lang.String str80 = locale33.getVariant();
        java.lang.String str81 = locale33.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals(locale33.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T07:24:30.100Z" + "'", str36, "2022-02-22T07:24:30.100Z");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 32L + "'", long48 == 32L);
        org.junit.Assert.assertEquals(locale52.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str58, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str61, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 53 + "'", int63 == 53);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-259200000L) + "'", long65 == (-259200000L));
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1645515242390,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=2,MILLISECOND=390,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "7:34:02 AM +00:00" + "'", str73, "7:34:02 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "8 (2022-02-22T07:24:30.100Z,und)" + "'", str79, "8 (2022-02-22T07:24:30.100Z,und)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "und" + "'", str80, "und");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "x-lvariant-und" + "'", str81, "x-lvariant-und");
    }

    @Test
    public void test8105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8105");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        boolean boolean11 = dateTimeFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateTime.Property property16 = dateTime14.year();
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str22 = nameProvider18.getShortName(locale19, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.lang.String str34 = dateTimeField31.getAsText((long) (short) 1, locale33);
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str38 = nameProvider18.getShortName(locale33, "2022-02-22T07:24:30.010Z", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider18);
        java.util.Locale locale40 = null;
        java.lang.String str43 = nameProvider18.getName(locale40, "2022-02-22T07:25:01.303Z", "2022-02-22T07:24:26.534Z");
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale44.getDisplayLanguage(locale45);
        java.lang.String str48 = locale45.getCountry();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology54 = localDate49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekOfWeekyear();
        int int60 = dateTimeField57.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate68 = localDate62.withYear((int) (byte) 1);
        java.lang.String str69 = dateTimeFormatter61.print((org.joda.time.ReadablePartial) localDate68);
        java.util.Locale locale74 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str75 = dateTimeField57.getAsText((org.joda.time.ReadablePartial) localDate68, (int) (short) -1, locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = localDate68.getFieldType((int) (short) 1);
        int int78 = localDate68.getMonthOfYear();
        org.joda.time.LocalDate.Property property79 = localDate68.dayOfMonth();
        java.util.Locale locale81 = new java.util.Locale("53");
        boolean boolean82 = locale81.hasExtensions();
        java.lang.String str83 = property79.getAsShortText(locale81);
        java.lang.String str84 = locale45.getDisplayScript(locale81);
        java.lang.String str87 = nameProvider18.getName(locale45, "weekyear", "java.io.IOException: 0003-06-21T17:56:36.113Z");
        java.util.Locale.Builder builder88 = new java.util.Locale.Builder();
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder90 = builder88.setLocale(locale89);
        java.util.Locale locale91 = builder90.build();
        java.util.Locale locale92 = builder90.build();
        java.lang.String str95 = nameProvider18.getName(locale92, "2022-02-22T07:25:33.896Z", "2022-02-22T14:50:01.000Z");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = property16.setCopy("0003-06-21T18:03:59.709Z", locale92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0003-06-21T18:03:59.709Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "jpn" + "'", str46, "jpn");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str47, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDate68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str69, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale74.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1" + "'", str75, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertEquals(locale81.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "22" + "'", str83, "22");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr");
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test8106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8106");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.minusSeconds(10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int11 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        long long26 = chronology19.add((long) '4', (long) 5999999, (-444));
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 55377, chronology19);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) dateTime8, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime28.withDate(941, 67067, 8745897);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 67067 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-2663999504L) + "'", long26 == (-2663999504L));
    }

    @Test
    public void test8107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8107");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField2 = mutableDateTime1.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        boolean boolean14 = dateTimeFieldType4.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology10.getZone();
        org.joda.time.DurationField durationField18 = chronology10.centuries();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        int int30 = dateTimeField27.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        java.lang.String str39 = dateTimeFormatter31.print((org.joda.time.ReadablePartial) localDate38);
        java.util.Locale locale44 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str45 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDate38, (int) (short) -1, locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDate38.getFieldType((int) (short) 1);
        int int48 = localDate38.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime51 = localDate38.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology10.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField53 = chronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology10.weekOfWeekyear();
        java.util.Locale locale56 = new java.util.Locale("2022-02-22T07:25:54.045Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 293, chronology10, locale56, (java.lang.Integer) 26799215, (-1970));
        mutableDateTime1.setChronology(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(27016);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27016 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals(locale56.toString(), "2022-02-22t07:25:54.045z");
    }

    @Test
    public void test8108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8108");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(4);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(26666877);
        org.joda.time.DateTime.Property property10 = dateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.plusYears(1970);
        org.joda.time.DateTime dateTime13 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime16 = property14.getDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property20 = localDate17.era();
        org.joda.time.LocalDate localDate21 = property20.withMaximumValue();
        org.joda.time.LocalDate localDate22 = property20.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) dateTimeZone30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) localDate22, dateTimeZone30);
        boolean boolean35 = dateTimeZone30.isStandardOffset(63781084800000L);
        org.joda.time.DateTime dateTime36 = dateTime16.withZone(dateTimeZone30);
        org.joda.time.DateTime.Property property37 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime16.minusDays(26767575);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter40.withChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology48.getZone();
        org.joda.time.DurationField durationField53 = chronology48.days();
        org.joda.time.DurationField durationField54 = chronology48.seconds();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime16.toMutableDateTime(chronology48);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfCeiling();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
    }

    @Test
    public void test8109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8109");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        java.util.Locale locale6 = dateTimeFormatter1.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter1.getParser();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter1.withLocale(locale10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter1.getPrinter();
        int int13 = dateTimePrinter12.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter14.getPrinter();
        org.joda.time.Chronology chronology16 = dateTimeFormatter14.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withDefaultYear((int) (byte) 10);
        java.util.Locale locale19 = dateTimeFormatter14.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter14.getParser();
        int int21 = dateTimeParser20.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((int) ' ');
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter22.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.parse("0003-06-21T18:01:33.696Z", dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:01:33.696Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimePrinter12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(dateTimeParser20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimePrinter25);
    }

    @Test
    public void test8110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8110");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.plus((-48469999L));
        org.joda.time.DateTime dateTime13 = dateTime9.plusSeconds(2);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime9, dateTimeZone26);
        java.lang.String str30 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property31 = dateTime9.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7:34:02 AM" + "'", str30, "7:34:02 AM");
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test8111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8111");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate0.withPeriodAdded(readablePeriod15, (-2));
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str19 = dateTimeFieldType18.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int21 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter20.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology29);
        boolean boolean34 = localDate0.isSupported(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate0.withPeriodAdded(readablePeriod35, 812);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "year" + "'", str19, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test8112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8112");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.lang.String str6 = dateTimeFormatter0.print((long) 999);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        boolean boolean8 = dateTimeFormatter0.isParser();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone9.adjustOffset((long) 26710930, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter0.withZone(dateTimeZone9);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withDefaultYear(229);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(writer17, 1645572479999L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Thursday, January 1, 1970" + "'", str6, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 26710930L + "'", long12 == 26710930L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test8113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8113");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZoneUTC();
        int int7 = dateTimeFormatter6.getDefaultYear();
        boolean boolean8 = dateTimeFormatter6.isParser();
        java.io.Writer writer9 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 24, chronology18);
        int int20 = localDate19.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate19.withYear(2022);
        org.joda.time.LocalDate localDate24 = localDate19.plusWeeks(26747924);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        int int36 = dateTimeField33.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate44 = localDate38.withYear((int) (byte) 1);
        java.lang.String str45 = dateTimeFormatter37.print((org.joda.time.ReadablePartial) localDate44);
        java.util.Locale locale50 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str51 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDate44, (int) (short) -1, locale50);
        long long53 = dateTimeField33.roundHalfFloor((long) 31);
        int int54 = dateTimeField33.getMaximumValue();
        long long57 = dateTimeField33.add((long) '#', 97200000);
        java.lang.String str59 = dateTimeField33.getAsShortText((long) 26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = dateTimeField33.getType();
        int int61 = localDate24.get(dateTimeFieldType60);
        org.joda.time.LocalDate localDate63 = localDate24.minusYears(51);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer9, (org.joda.time.ReadablePartial) localDate24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str45, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-1" + "'", str51, "-1");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-259200000L) + "'", long53 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53 + "'", int54 == 53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 58786560000000035L + "'", long57 == 58786560000000035L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 16 + "'", int61 == 16);
        org.junit.Assert.assertNotNull(localDate63);
    }

    @Test
    public void test8114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8114");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime16.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime23 = dateTime20.withField(dateTimeFieldType21, 26666);
        org.joda.time.LocalDate localDate25 = localDate9.withField(dateTimeFieldType21, (int) ' ');
        org.joda.time.LocalDate localDate27 = localDate9.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate9.withFields((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getRangeDurationType();
        org.joda.time.LocalDate.Property property33 = localDate29.property(dateTimeFieldType30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int35 = dateTimeFormatter34.getDefaultYear();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter34.withChronology(chronology43);
        java.lang.Integer int46 = dateTimeFormatter45.getPivotYear();
        org.joda.time.Chronology chronology47 = dateTimeFormatter45.getChronolgy();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType30.getField(chronology47);
        long long50 = dateTimeField48.roundHalfCeiling(28800006L);
        long long53 = dateTimeField48.add(82697223L, (long) 26711816);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-01-01" + "'", str10, "2022-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNull(durationFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2000 + "'", int35 == 2000);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 842943495481097223L + "'", long53 == 842943495481097223L);
    }

    @Test
    public void test8115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8115");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale22 = dateTimeFormatter21.getLocale();
        java.util.Locale locale23 = dateTimeFormatter21.getLocale();
        java.lang.String str24 = dateTime5.toString(dateTimeFormatter21);
        org.joda.time.DateTime.Property property25 = dateTime5.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNull(locale23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "February 22, -0001 7:34:02 AM +00:00" + "'", str24, "February 22, -0001 7:34:02 AM +00:00");
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test8116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8116");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.Integer int1 = dateTimeFormatter0.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 26850);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
    }

    @Test
    public void test8117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8117");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = property7.getAsShortText(locale10);
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.lang.String str26 = dateTimeField21.getAsShortText(8, locale23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        long long38 = dateTimeField35.addWrapField((long) ' ', 0);
        long long40 = dateTimeField35.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDate41.getFieldType(1);
        int int46 = localDate41.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        boolean boolean54 = localDate41.isSupported(durationFieldType51);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField63.getType();
        org.joda.time.LocalDate.Property property65 = localDate41.property(dateTimeFieldType64);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Calendar calendar70 = mutableDateTime66.toCalendar(locale69);
        boolean boolean71 = mutableDateTime66.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str73 = mutableDateTime66.toString(dateTimeFormatter72);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        boolean boolean76 = dateTimeZone74.equals((java.lang.Object) locale75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter72.withLocale(locale75);
        java.lang.String str78 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDate41, locale75);
        org.joda.time.LocalDate localDate80 = localDate41.minusWeeks(0);
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder82 = builder81.clear();
        java.util.Locale.Builder builder83 = builder82.clear();
        java.util.Locale locale84 = builder83.build();
        java.lang.String str85 = locale84.getLanguage();
        boolean boolean86 = locale84.hasExtensions();
        java.lang.String str87 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDate80, locale84);
        java.lang.String str88 = locale84.getDisplayName();
        java.lang.String str89 = locale10.getDisplayLanguage(locale84);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "8" + "'", str26, "8");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32L + "'", long38 == 32L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 345600000L + "'", long40 == 345600000L);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1645515242852,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=2,MILLISECOND=852,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "7:34:02 AM +00:00" + "'", str73, "7:34:02 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "8" + "'", str78, "8");
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "8" + "'", str87, "8");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Italian" + "'", str89, "Italian");
    }

    @Test
    public void test8118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8118");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate23 = localDate18.withYearOfEra(349);
        org.joda.time.LocalDate localDate25 = localDate18.plusMonths(30);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate25.minus(readablePeriod26);
        org.joda.time.LocalDate.Property property28 = localDate25.era();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515242890,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=2,MILLISECOND=890,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:02 AM +00:00" + "'", str7, "7:34:02 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test8119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8119");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate2.plusWeeks(26828677);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        java.lang.String str15 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int19 = dateTimeFormatter7.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime16, "1", 1);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isFixed();
        mutableDateTime16.setZone(dateTimeZone32);
        java.lang.String str38 = dateTimeZone32.getNameKey((long) (byte) 1);
        long long40 = dateTimeZone32.previousTransition((long) (byte) -1);
        org.joda.time.Interval interval41 = localDate6.toInterval(dateTimeZone32);
        org.joda.time.LocalDate localDate43 = localDate6.minusDays(26769591);
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        int int45 = property44.getLeapAmount();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = property44.setCopy(26743877);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26743877 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test8120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8120");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 835, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.centuries();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField25.getType();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDate28.getFieldType(1);
        int int33 = localDate28.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        mutableDateTime34.add(durationFieldType38, (-1));
        boolean boolean41 = localDate28.isSupported(durationFieldType38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDate28.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate28.withPeriodAdded(readablePeriod43, (-2));
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str47 = dateTimeFieldType46.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int49 = dateTimeFormatter48.getDefaultYear();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter48.withChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType46.getField(chronology57);
        boolean boolean62 = localDate28.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDate.Property property63 = localDate28.year();
        java.util.Locale locale67 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale71 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str72 = locale71.getDisplayVariant();
        java.lang.String str73 = locale67.getDisplayCountry(locale71);
        java.lang.String str74 = locale67.getDisplayName();
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.lang.String str76 = locale75.getDisplayCountry();
        java.lang.String str77 = locale67.getDisplayCountry(locale75);
        java.lang.String str78 = locale75.getDisplayScript();
        java.lang.String str79 = property63.getAsShortText(locale75);
        java.lang.String str80 = dateTimeField25.getAsText((long) 27, locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 26927366, chronology11, locale75);
        dateTimeParserBucket81.setOffset((java.lang.Integer) 1091938594);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "year" + "'", str47, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2000 + "'", int49 == 2000);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals(locale67.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale71.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str73, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str74, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale75);
// flaky:         org.junit.Assert.assertEquals(locale75.toString(), "53");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str77, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022" + "'", str79, "2022");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
    }

    @Test
    public void test8121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8121");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField9 = chronology7.halfdays();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 1);
        long long16 = dateTimeZone12.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(1645572479999L, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.Chronology chronology20 = chronology7.withZone(dateTimeZone12);
        java.lang.String str22 = dateTimeZone12.getName((long) 26795);
        int int24 = dateTimeZone12.getOffsetFromLocal((long) 26803864);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        org.joda.time.Chronology chronology27 = dateTimeFormatter25.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withDefaultYear((int) (byte) 10);
        boolean boolean30 = dateTimeFormatter25.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter25.withPivotYear(5999999);
        java.lang.Integer int33 = dateTimeFormatter25.getPivotYear();
        boolean boolean34 = dateTimeZone12.equals((java.lang.Object) int33);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimePrinter26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test8122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8122");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withLocale(locale5);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter7.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "53");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645515243112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=3,MILLISECOND=112,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeParser9);
    }

    @Test
    public void test8123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8123");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter0.withZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        int int35 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime30, "24", (int) '4');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime30.monthOfYear();
        mutableDateTime30.addWeeks((int) 'x');
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime30.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-53) + "'", int35 == (-53));
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test8124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8124");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate15.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = localDate19.toDateTime((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        mutableDateTime20.setRounding(dateTimeField37);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology52 = localDate47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = localDate44.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        long long58 = dateTimeZone53.getMillisKeepLocal(dateTimeZone56, (long) 2);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime0.toMutableDateTime(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime0.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = localDate61.getFieldType(1);
        int int66 = localDate61.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime67.add(readableDuration68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        mutableDateTime67.add(durationFieldType71, (-1));
        boolean boolean74 = localDate61.isSupported(durationFieldType71);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = localDate61.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = localDate61.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        org.joda.time.DateTimeField dateTimeField86 = chronology85.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter77.withChronology(chronology85);
        org.joda.time.DurationField durationField88 = chronology85.seconds();
        org.joda.time.DurationFieldType durationFieldType89 = durationField88.getType();
        boolean boolean90 = localDate61.isSupported(durationFieldType89);
        mutableDateTime60.add(durationFieldType89, 223);
        mutableDateTime60.setMillis((long) 26972472);
        mutableDateTime60.addHours(577);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "53");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515243170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=3,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2L + "'", long58 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test8125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8125");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMillis(24);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withDurationAdded(readableDuration4, 2000);
        java.lang.String str8 = localDateTime0.toString("2022-04-22");
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(27171597);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readablePeriod13);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-04-22" + "'", str8, "2022-04-22");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test8126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8126");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = localDate7.getDayOfYear();
        org.joda.time.LocalDate.Property property21 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.roundCeilingCopy();
        org.joda.time.LocalDate.Property property24 = localDate23.centuryOfEra();
        org.joda.time.LocalDate localDate26 = localDate23.minusDays(26772062);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property34 = localDate27.yearOfEra();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate37 = property34.addWrapFieldToCopy(26690377);
        org.joda.time.LocalDate localDate38 = property34.getLocalDate();
        org.joda.time.LocalDate localDate39 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDate41.getFieldType(1);
        int int46 = localDate41.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        boolean boolean54 = localDate41.isSupported(durationFieldType51);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.Interval interval63 = localDate41.toInterval(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (short) 100, dateTimeZone61);
        long long68 = dateTimeZone61.convertLocalToUTC((long) 30464923, true, (long) 835);
        org.joda.time.Interval interval69 = localDate39.toInterval(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight70 = localDate26.toDateMidnight(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        boolean boolean77 = dateTimeZone74.isFixed();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(2222L, dateTimeZone74);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(28775279L, dateTimeZone74);
        org.joda.time.DateTime dateTime80 = dateMidnight70.toDateTime(dateTimeZone74);
        java.lang.String str81 = dateTimeZone74.getID();
        long long84 = dateTimeZone74.adjustOffset(841644804756586458L, true);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 30464923L + "'", long68 == 30464923L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 841644804756586458L + "'", long84 == 841644804756586458L);
    }

    @Test
    public void test8127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8127");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.yearOfEra();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515243582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=3,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:03 AM +00:00" + "'", str7, "7:34:03 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test8128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8128");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeFormatter42.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withOffsetParsed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property55 = dateTime53.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime56 = property55.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime57 = property55.roundHalfCeilingCopy();
        java.lang.String str58 = dateTimeFormatter44.print((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = dateTimeFormatter44.getPrinter();
        java.lang.String str60 = localDate41.toString(dateTimeFormatter44);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate64 = localDate61.withField(dateTimeFieldType62, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime66.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(22);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate75 = localDate72.withField(dateTimeFieldType73, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDate75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusMonths((int) '4');
        org.joda.time.DateTime dateTime81 = dateTime79.plus((-48469999L));
        java.lang.String str82 = dateTime81.toString();
        int int83 = dateTime71.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime85 = dateTime71.minusMillis(26674);
        boolean boolean86 = localDate41.equals((java.lang.Object) dateTime85);
        org.joda.time.DateTime dateTime88 = dateTime85.plus(31556952000L);
        boolean boolean90 = dateTime88.isAfter((-13305486928L));
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.DateTime dateTime92 = dateTime88.plus(readablePeriod91);
        org.joda.time.DateTime.Property property93 = dateTime88.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = property93.setCopy("2022-02-22T07:28:40.771Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:28:40.771Z\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +00:00" + "'", str58, "Monday, January 1, 0001 12:00:00 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str60, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0003-06-21T18:06:13.599Z" + "'", str82, "0003-06-21T18:06:13.599Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test8129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8129");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        java.lang.String str8 = mutableDateTime7.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime7.add(readableDuration9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        mutableDateTime11.setChronology(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.years();
        org.joda.time.DurationField durationField23 = chronology19.centuries();
        mutableDateTime7.setChronology(chronology19);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(14011341876837L, chronology19, locale25, (java.lang.Integer) 26676320, (int) '#');
        int int32 = dateTimeParser5.parseInto(dateTimeParserBucket29, "0003-06-21T17:56:56.419Z", (int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser5);
        java.lang.StringBuffer stringBuffer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter33.printTo(stringBuffer34, (long) 27112324);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:34:03.616Z" + "'", str8, "2022-02-22T07:34:03.616Z");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jpn" + "'", str26, "jpn");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test8130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8130");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(10);
        int int15 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plus(readablePeriod16);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longDate();
        java.lang.Integer int20 = dateTimeFormatter19.getPivotYear();
        java.lang.String str21 = localDateTime14.toString(dateTimeFormatter19);
        boolean boolean22 = dateTimeFormatter19.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter19.withDefaultYear(26827818);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.parse("7:25:00 AM +00:00", dateTimeFormatter24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"7:25:00 AM +00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "January 1, 2022" + "'", str21, "January 1, 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test8131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8131");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        int int21 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime5.withSecondOfMinute(18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        int int27 = dateTimePrinter26.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter28.getParser();
        int int38 = dateTimeParser37.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser37);
        java.lang.Integer int40 = dateTimeFormatter39.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((java.lang.Object) int40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfWeek();
        boolean boolean43 = dateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime41.addWeekyears(0);
        mutableDateTime41.add((-62194235650000L));
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime41.add(readableDuration48, 26905250);
        mutableDateTime41.addWeekyears(27093079);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimePrinter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 40 + "'", int38 == 40);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test8132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8132");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        boolean boolean23 = dateTime19.isAfter((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime19.plusMinutes(0);
        org.joda.time.DateTime dateTime27 = dateTime19.plusMonths(223);
        int int28 = dateTime19.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 34 + "'", int28 == 34);
    }

    @Test
    public void test8133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8133");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear(5999999);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        mutableDateTime8.add(durationFieldType12, (-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime8.add(readablePeriod15, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime8.minuteOfHour();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(4);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears(26666877);
        org.joda.time.DateTime.Property property29 = dateTime28.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.plusYears(1970);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        int int47 = dateTime46.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        java.lang.String str49 = mutableDateTime48.toString();
        boolean boolean50 = dateTime46.isEqual((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime48.setDayOfWeek((int) (byte) 1);
        boolean boolean53 = dateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        java.lang.String str55 = mutableDateTime54.toString();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        mutableDateTime56.add(durationFieldType60, (-1));
        mutableDateTime54.add(durationFieldType60, 2);
        mutableDateTime48.add(durationFieldType60, 7);
        mutableDateTime8.add(durationFieldType60, (int) (short) 100);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMonths((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime76.plus((-48469999L));
        org.joda.time.DateTime dateTime80 = dateTime76.plusSeconds(2);
        org.joda.time.DateTime dateTime82 = dateTime80.minusSeconds(8);
        org.joda.time.DateTime dateTime84 = dateTime82.plusMinutes(0);
        org.joda.time.DateTime.Property property85 = dateTime82.minuteOfHour();
        int int86 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) dateTime82);
        java.lang.String str87 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime82);
        int int88 = dateTime82.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = dateTime82.withWeekOfWeekyear(27417);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27417 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 34 + "'", int47 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T07:34:03.821Z" + "'", str49, "2022-02-22T07:34:03.821Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T07:34:03.821Z" + "'", str55, "2022-02-22T07:34:03.821Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Sunday, June 22, 0003" + "'", str87, "Sunday, June 22, 0003");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
    }

    @Test
    public void test8134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8134");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        java.lang.String str27 = dateTimeField8.getName();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = dateTimeField8.getAsText((-1L), locale29);
        java.util.Locale locale35 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale39 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str40 = locale39.getDisplayVariant();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getDisplayCountry();
        java.lang.String str44 = locale39.getDisplayCountry(locale42);
        int int45 = dateTimeField8.getMaximumTextLength(locale42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        java.lang.String str50 = dateTimeField8.getAsShortText(26666570, locale48);
        long long52 = dateTimeField8.roundCeiling(999L);
        java.util.Locale locale54 = new java.util.Locale("2022-02-22T07:24:42.113Z");
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        int int66 = dateTimeField63.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        boolean boolean78 = dateTimeZone76.equals((java.lang.Object) locale77);
        java.lang.String str79 = dateTimeZone73.getName((long) 'a', locale77);
        int int80 = dateTimeField63.getMaximumTextLength(locale77);
        java.lang.String str81 = locale54.getDisplayName(locale77);
        int int82 = dateTimeField8.getMaximumShortTextLength(locale77);
        org.joda.time.DurationField durationField83 = dateTimeField8.getDurationField();
        int int85 = durationField83.getValue(0L);
        long long88 = durationField83.subtract(113080L, 9010825);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekOfWeekyear" + "'", str27, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str30, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals(locale35.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str41, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str43, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str44, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "26666570" + "'", str50, "26666570");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 345600000L + "'", long52 == 345600000L);
        org.junit.Assert.assertEquals(locale54.toString(), "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-22t07:24:42.113z" + "'", str81, "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-5449746959886920L) + "'", long88 == (-5449746959886920L));
    }

    @Test
    public void test8135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8135");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        int int15 = dateTimeField12.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        java.util.Locale locale29 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str30 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDate23, (int) (short) -1, locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDate23.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths(40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        int int45 = localDate43.indexOf(dateTimeFieldType44);
        int int46 = localDate23.compareTo((org.joda.time.ReadablePartial) localDate43);
        int int47 = localDate43.getDayOfMonth();
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfWeek();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DurationField durationField51 = chronology48.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(27168434, 27188, 26738915, 26906985, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27168434 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test8136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8136");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter0.withZone(dateTimeZone25);
        java.lang.String str31 = dateTimeFormatter0.print(7200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeFormatter32.getZone();
        java.util.Locale locale34 = dateTimeFormatter32.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTimeFormatter32.parseDateTime("0003-06-21T18:04:32.408Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:04:32.408Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Jan 1, 1970 2:00:00 AM" + "'", str31, "Jan 1, 1970 2:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNull(locale34);
    }

    @Test
    public void test8137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8137");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(8);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMillis(26951707);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate30 = localDate27.withField(dateTimeFieldType28, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(readableInstant31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate30.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        long long44 = dateTimeZone39.getMillisKeepLocal(dateTimeZone42, (long) 2);
        boolean boolean46 = dateTimeZone39.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime22.setZoneRetainFields(dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableDateTime22.add(readablePeriod48, 8);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekOfWeekyear();
        int int62 = dateTimeField59.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate70 = localDate64.withYear((int) (byte) 1);
        java.lang.String str71 = dateTimeFormatter63.print((org.joda.time.ReadablePartial) localDate70);
        java.util.Locale locale76 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str77 = dateTimeField59.getAsText((org.joda.time.ReadablePartial) localDate70, (int) (short) -1, locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDate70.getFieldType((int) (short) 1);
        boolean boolean80 = mutableDateTime22.isSupported(dateTimeFieldType79);
        java.lang.String str81 = dateTimeFieldType79.getName();
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType79.getDurationType();
        java.lang.String str83 = dateTimeFieldType79.toString();
        java.lang.String str84 = dateTimeFieldType79.getName();
        org.joda.time.DateTime.Property property85 = dateTime21.property(dateTimeFieldType79);
        boolean boolean87 = property85.equals((java.lang.Object) "2022-02-22T07:30:20.487Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645515244016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=16,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str71, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale76.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1" + "'", str77, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "monthOfYear" + "'", str81, "monthOfYear");
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "monthOfYear" + "'", str83, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "monthOfYear" + "'", str84, "monthOfYear");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test8138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8138");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(26767575);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(26748000);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        mutableDateTime10.setChronology(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.years();
        org.joda.time.DurationField durationField22 = chronology18.centuries();
        mutableDateTime6.setChronology(chronology18);
        mutableDateTime6.setWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        boolean boolean36 = dateTimeFieldType26.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.minuteOfHour();
        org.joda.time.DateTime dateTime40 = mutableDateTime6.toDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField41 = chronology32.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter5.withChronology(chronology32);
        org.joda.time.DurationField durationField43 = chronology32.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology32.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:34:04.065Z" + "'", str7, "2022-02-22T07:34:04.065Z");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test8139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8139");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DurationField durationField12 = chronology8.halfdays();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test8140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8140");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        int int11 = localDate10.getEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = property22.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate32 = localDate26.withYear((int) (byte) 1);
        java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        boolean boolean43 = dateTimeZone34.equals((java.lang.Object) dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = localDate10.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableDateTime47.add(readablePeriod48, (-53));
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        java.lang.String str52 = mutableDateTime51.toString();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime51.add(readableDuration53);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        mutableDateTime55.setChronology(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.years();
        org.joda.time.DurationField durationField67 = chronology63.centuries();
        mutableDateTime51.setChronology(chronology63);
        long long72 = chronology63.add(841644804756274217L, (long) 26666, 26672);
        org.joda.time.DateTimeField dateTimeField73 = chronology63.halfdayOfDay();
        mutableDateTime47.setChronology(chronology63);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(chronology63);
        boolean boolean77 = mutableDateTime75.isAfter((-12149374248000L));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:34:04.168Z" + "'", str52, "2022-02-22T07:34:04.168Z");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 841644805467509769L + "'", long72 == 841644805467509769L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test8141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8141");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale9);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        java.util.Locale locale13 = dateTimeFormatter11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatter15.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(26747675);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(0L, dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withZone(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = dateTimeFormatter21.parseMillis("2022-02-22T07:33:54.549Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:33:54.549Z\" is malformed at \"22-02-22T07:33:54.549Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515244220,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=220,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:04 AM +00:00" + "'", str7, "7:34:04 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimePrinter16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test8142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8142");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test8143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8143");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(8);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = mutableDateTime16.toCalendar(locale19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        long long38 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) 2);
        boolean boolean40 = dateTimeZone33.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime16.setZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime42 = dateTime13.withZone(dateTimeZone33);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate49 = localDate43.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property50 = localDate43.yearOfEra();
        org.joda.time.LocalDate localDate51 = property50.roundFloorCopy();
        org.joda.time.LocalDate localDate52 = property50.withMaximumValue();
        org.joda.time.LocalDate localDate54 = property50.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean56 = localDate54.isSupported(dateTimeFieldType55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale58 = dateTimeFormatter57.getLocale();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter57.withChronology(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType55.getField(chronology64);
        java.lang.String str67 = dateTimeFieldType55.toString();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType55.getDurationType();
        int int69 = dateTime42.get(dateTimeFieldType55);
        org.joda.time.DateTime.Property property70 = dateTime42.minuteOfDay();
        int int71 = dateTime42.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645515244270,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=270,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "dayOfYear" + "'", str67, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 173 + "'", int69 == 173);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 173 + "'", int71 == 173);
    }

    @Test
    public void test8144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8144");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime16.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime23 = dateTime20.withField(dateTimeFieldType21, 26666);
        org.joda.time.LocalDate localDate25 = localDate9.withField(dateTimeFieldType21, (int) ' ');
        org.joda.time.LocalDate localDate27 = localDate9.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate9.withFields((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getRangeDurationType();
        org.joda.time.LocalDate.Property property33 = localDate29.property(dateTimeFieldType30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int35 = dateTimeFormatter34.getDefaultYear();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter34.withChronology(chronology43);
        java.lang.Integer int46 = dateTimeFormatter45.getPivotYear();
        org.joda.time.Chronology chronology47 = dateTimeFormatter45.getChronolgy();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType30.getField(chronology47);
        org.joda.time.DurationField durationField49 = chronology47.seconds();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.millisOfDay();
        long long52 = dateTimeField50.remainder(4519784000L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-01-01" + "'", str10, "2022-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNull(durationFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2000 + "'", int35 == 2000);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test8145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8145");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate16 = localDate10.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property17 = localDate10.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate10.withPeriodAdded(readablePeriod18, (int) ' ');
        org.joda.time.LocalDate localDate22 = localDate10.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate10.withPeriodAdded(readablePeriod23, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Calendar calendar30 = mutableDateTime26.toCalendar(locale29);
        java.util.Set<java.lang.Character> charSet31 = locale29.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        boolean boolean35 = charSet31.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33);
        charSet31.clear();
        java.util.Locale locale37 = java.util.Locale.CANADA;
        boolean boolean38 = charSet31.contains((java.lang.Object) locale37);
        java.lang.String str39 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate25, locale37);
        java.util.Locale locale41 = new java.util.Locale("53");
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale37.getDisplayVariant(locale41);
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale41.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int47 = dateTimeFormatter46.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser48 = dateTimeFormatter46.getParser();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.DateTime dateTime58 = dateTime55.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology59 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.clockhourOfHalfday();
        java.util.Locale locale65 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean66 = locale65.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(2L, chronology59, locale65, (java.lang.Integer) (-2), (int) 'a');
        java.lang.String str70 = locale65.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter46.withLocale(locale65);
        java.lang.String str72 = locale41.getDisplayCountry(locale65);
        java.lang.String str73 = locale41.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515244344,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=344,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22" + "'", str39, "22");
        org.junit.Assert.assertEquals(locale41.toString(), "53");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "53" + "'", str42, "53");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2000 + "'", int47 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser48);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test8146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8146");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.minusSeconds(10);
        boolean boolean10 = dateTime8.isBefore(2000L);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter12.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Calendar calendar18 = mutableDateTime14.toCalendar(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter12.withLocale(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withZoneUTC();
        java.lang.String str23 = dateTime8.toString(dateTimeFormatter19);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime30.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology34 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfHalfday();
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean41 = locale40.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(2L, chronology34, locale40, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale45 = dateTimeParserBucket44.getLocale();
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Calendar calendar52 = mutableDateTime48.toCalendar(locale51);
        java.util.Set<java.lang.Character> charSet53 = locale51.getExtensionKeys();
        java.lang.String str54 = locale45.getDisplayName(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter19.withLocale(locale51);
        org.joda.time.format.DateTimeParser dateTimeParser56 = dateTimeFormatter19.getParser();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645515244372,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=372,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Monday, February 22, -0001" + "'", str23, "Monday, February 22, -0001");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str47, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645515244372,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=372,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str54, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeParser56);
    }

    @Test
    public void test8147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8147");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = localDate7.getDayOfYear();
        org.joda.time.LocalDate.Property property21 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.withMinimumValue();
        org.joda.time.LocalDate localDate24 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfMonth();
        java.util.Date date26 = localDate24.toDate();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Feb 19 00:00:00 GMT 1");
    }

    @Test
    public void test8148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8148");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("53");
        int int2 = mutableDateTime1.getDayOfMonth();
        long long3 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.weekyear();
        java.lang.Object obj5 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(26700);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.centuryOfEra();
        java.lang.String str11 = mutableDateTime8.toString("18");
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-60494601600000L) + "'", long3 == (-60494601600000L));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "0053-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "0053-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "0053-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "18" + "'", str11, "18");
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test8149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8149");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(26767575);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(26748000);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        mutableDateTime10.setChronology(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.years();
        org.joda.time.DurationField durationField22 = chronology18.centuries();
        mutableDateTime6.setChronology(chronology18);
        mutableDateTime6.setWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        boolean boolean36 = dateTimeFieldType26.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.minuteOfHour();
        org.joda.time.DateTime dateTime40 = mutableDateTime6.toDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField41 = chronology32.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter5.withChronology(chronology32);
        java.lang.StringBuffer stringBuffer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter42.printTo(stringBuffer43, 1343865600022L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:34:04.497Z" + "'", str7, "2022-02-22T07:34:04.497Z");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test8150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8150");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.DateTime.Property property29 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime5.minusYears(0);
        org.joda.time.DateTime dateTime33 = dateTime5.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime35 = dateTime5.plusWeeks(53);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:06:14.511Z" + "'", str18, "0003-06-21T18:06:14.511Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645515244510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=510,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235155490,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=510,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test8151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8151");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property24 = dateTime19.secondOfMinute();
        org.joda.time.DateTime dateTime27 = dateTime19.withDurationAdded((long) 'a', (int) '4');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime33.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = property38.setCopy(26665274);
        org.joda.time.DateTime dateTime42 = property38.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        boolean boolean44 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfMonth();
        org.joda.time.DateTime dateTime47 = dateTime42.plusHours(26807144);
        org.joda.time.DateTime.Property property48 = dateTime42.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test8152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8152");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate21.withPeriodAdded(readablePeriod29, (int) ' ');
        org.joda.time.LocalDate localDate33 = localDate21.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = property44.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField47 = property44.getField();
        org.joda.time.DateTime dateTime49 = property44.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.plus(readableDuration50);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime51.getZone();
        org.joda.time.DateTime dateTime53 = localDate21.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime59.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property64 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property64.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField67 = property64.getField();
        org.joda.time.DateTime dateTime69 = property64.setCopy(26665274);
        org.joda.time.DateTime dateTime70 = property64.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property71 = dateTime70.secondOfDay();
        org.joda.time.DateTime dateTime72 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = dateTime19.minusMillis(26677059);
        int int76 = dateTime19.getYearOfEra();
        org.joda.time.DateTime dateTime78 = dateTime19.minusDays(26743877);
        org.joda.time.DateTime.Property property79 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property80 = dateTime19.yearOfEra();
        org.joda.time.DurationField durationField81 = property80.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test8153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8153");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.minusSeconds(10);
        boolean boolean10 = dateTime8.isBefore(2000L);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter12.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Calendar calendar18 = mutableDateTime14.toCalendar(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter12.withLocale(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withZoneUTC();
        java.lang.String str23 = dateTime8.toString(dateTimeFormatter19);
        org.joda.time.DateTime dateTime25 = dateTime8.plusDays(27);
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645515244666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Monday, February 22, -0001" + "'", str23, "Monday, February 22, -0001");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test8154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8154");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.plus((-48469999L));
        org.joda.time.DateTime dateTime13 = dateTime9.plusSeconds(2);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime9, dateTimeZone26);
        java.lang.String str30 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime9);
        boolean boolean31 = dateTimeFormatter0.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7:34:04 AM" + "'", str30, "7:34:04 AM");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test8155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8155");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (-62135596800000L), 17);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        long long27 = dateTimeField25.roundHalfFloor((long) 26681858);
        org.joda.time.DurationField durationField28 = dateTimeField25.getRangeDurationField();
        long long31 = durationField28.getMillis((long) 26825721, 63776678623L);
        int int34 = durationField28.getDifference(2720L, 314726000L);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515244739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:04 AM +00:00" + "'", str7, "7:34:04 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62135596800000L) + "'", long24 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 70544832508800000L + "'", long31 == 70544832508800000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test8156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8156");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField13 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology9.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey(1648425600000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test8157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8157");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        boolean boolean36 = charSet32.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34);
        charSet32.clear();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        boolean boolean39 = charSet32.contains((java.lang.Object) locale38);
        java.lang.String str40 = locale25.getDisplayCountry(locale38);
        java.util.Set<java.lang.Character> charSet41 = locale38.getExtensionKeys();
        int int42 = charSet41.size();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645515244811,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=811,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str40, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test8158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8158");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 26700463);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate12 = property11.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = property11.withMaximumValue();
        int int14 = localDate13.getEra();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime27 = property25.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        boolean boolean46 = dateTimeZone37.equals((java.lang.Object) dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime27.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = localDate13.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.LocalDate localDate51 = localDate13.minusDays(26823805);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.plus((-48469999L));
        org.joda.time.DateTime dateTime63 = dateTime59.plusSeconds(2);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = localDate67.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((java.lang.Object) dateTime59, dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        java.lang.String str81 = dateTimeZone76.toString();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        boolean boolean85 = dateTimeZone83.equals((java.lang.Object) locale84);
        java.lang.String str86 = dateTimeZone76.getName((long) 26667, locale84);
        long long88 = dateTimeZone76.convertUTCToLocal((long) 26704446);
        org.joda.time.Interval interval89 = localDate51.toInterval(dateTimeZone76);
        boolean boolean90 = dateTimeZone76.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter1.withZone(dateTimeZone76);
        int int92 = dateTimeFormatter91.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime93 = org.joda.time.LocalTime.parse("2022-02-22T07:25:46.147Z", dateTimeFormatter91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:25:46.147Z\" is malformed at \"22-02-22T07:25:46.147Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 26704446L + "'", long88 == 26704446L);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2000 + "'", int92 == 2000);
    }

    @Test
    public void test8159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8159");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime45 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.withMillisOfDay(971);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime53.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property58 = dateTime56.property(dateTimeFieldType57);
        org.joda.time.DateTime dateTime59 = property58.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime60 = property58.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime62 = property58.addToCopy((long) 26676316);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean64 = dateTime62.isSupported(dateTimeFieldType63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDate65.getFieldType(1);
        int int70 = localDate65.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration72 = null;
        mutableDateTime71.add(readableDuration72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getDurationType();
        mutableDateTime71.add(durationFieldType75, (-1));
        boolean boolean78 = localDate65.isSupported(durationFieldType75);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate81 = localDate79.minusMonths((int) (short) -1);
        boolean boolean83 = localDate79.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology84 = localDate79.getChronology();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology86 = chronology84.withZone(dateTimeZone85);
        org.joda.time.DateTimeField dateTimeField87 = chronology84.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField87.getType();
        org.joda.time.LocalDate.Property property89 = localDate65.property(dateTimeFieldType88);
        org.joda.time.LocalDate localDate91 = localDate65.withWeekyear(28);
        org.joda.time.LocalDate.Property property92 = localDate65.dayOfMonth();
        org.joda.time.Chronology chronology93 = localDate65.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField95 = dateTimeFieldType63.getField(chronology93);
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType63.getDurationType();
        org.joda.time.DateTime.Property property97 = dateTime45.property(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:06:14.890Z" + "'", str18, "0003-06-21T18:06:14.890Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645515244889,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=889,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235155111,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=889,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645515244889,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=4,MILLISECOND=889,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:34:04 AM +00:00" + "'", str39, "7:34:04 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7:34:04 AM +00:00" + "'", str44, "7:34:04 AM +00:00");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 22 + "'", int70 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationFieldType96);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test8160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8160");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime.Property property11 = dateTime9.era();
        java.lang.String str12 = property11.toString();
        org.joda.time.DateTime dateTime13 = property11.getDateTime();
        int int14 = dateTime13.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime17 = dateTime13.withField(dateTimeFieldType15, 0);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime23.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime30 = dateTime27.withField(dateTimeFieldType28, 26666);
        org.joda.time.DateTime dateTime32 = dateTime27.minusMonths(24);
        boolean boolean33 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate41 = localDate35.withYear((int) (byte) 1);
        java.lang.String str42 = dateTimeFormatter34.print((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        int int46 = dateTimeFormatter34.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime43, "1", 1);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        boolean boolean62 = dateTimeZone59.isFixed();
        mutableDateTime43.setZone(dateTimeZone59);
        java.lang.String str65 = dateTimeZone59.getNameKey((long) (byte) 1);
        long long67 = dateTimeZone59.previousTransition((long) (byte) -1);
        boolean boolean69 = dateTimeZone59.isStandardOffset(26666877L);
        org.joda.time.DateTime dateTime70 = dateTime17.toDateTime(dateTimeZone59);
        org.joda.time.DateTime.Property property71 = dateTime70.minuteOfHour();
        org.joda.time.DateTime dateTime72 = property71.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime74 = dateTime72.withSecondOfMinute(73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0003-06-21T18:06:15.029Z" + "'", str10, "0003-06-21T18:06:15.029Z");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[era]" + "'", str12, "Property[era]");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 65175 + "'", int14 == 65175);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str42, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2) + "'", int46 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test8161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8161");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withDefaultYear(99);
        boolean boolean22 = dateTimeFormatter15.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter15.withChronology(chronology34);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusDays(4);
        org.joda.time.DateTime dateTime51 = dateTime49.minusYears(26666877);
        org.joda.time.DateTime.Property property52 = dateTime51.weekOfWeekyear();
        org.joda.time.DateTime dateTime54 = dateTime51.plusYears(1970);
        org.joda.time.DateTime dateTime55 = dateTime51.withLaterOffsetAtOverlap();
        int int56 = dateTime51.getEra();
        org.joda.time.DateTime dateTime58 = dateTime51.plusHours((-51));
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfEra(26721);
        java.lang.String str61 = dateTimeFormatter41.print((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "year" + "'", str24, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "4:34:05 AM" + "'", str61, "4:34:05 AM");
    }

    @Test
    public void test8162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8162");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        int int21 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime5.withSecondOfMinute(18);
        org.joda.time.DateTime.Property property25 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime5.withWeekyear(97200000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter28.getPrinter();
        org.joda.time.Chronology chronology30 = dateTimeFormatter28.getChronolgy();
        int int31 = dateTimeFormatter28.getDefaultYear();
        java.lang.String str32 = dateTime5.toString(dateTimeFormatter28);
        org.joda.time.DateTime dateTime34 = dateTime5.minusYears(0);
        org.joda.time.LocalDate localDate35 = dateTime5.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = localDate35.withDayOfMonth(26760322);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26760322 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimePrinter29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Monday, February 22, -0001" + "'", str32, "Monday, February 22, -0001");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test8163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8163");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear(5999999);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        mutableDateTime8.add(durationFieldType12, (-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime8.add(readablePeriod15, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime8.minuteOfHour();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(4);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears(26666877);
        org.joda.time.DateTime.Property property29 = dateTime28.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.plusYears(1970);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        int int47 = dateTime46.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        java.lang.String str49 = mutableDateTime48.toString();
        boolean boolean50 = dateTime46.isEqual((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime48.setDayOfWeek((int) (byte) 1);
        boolean boolean53 = dateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        java.lang.String str55 = mutableDateTime54.toString();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        mutableDateTime56.add(durationFieldType60, (-1));
        mutableDateTime54.add(durationFieldType60, 2);
        mutableDateTime48.add(durationFieldType60, 7);
        mutableDateTime8.add(durationFieldType60, (int) (short) 100);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMonths((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime76.plus((-48469999L));
        org.joda.time.DateTime dateTime80 = dateTime76.plusSeconds(2);
        org.joda.time.DateTime dateTime82 = dateTime80.minusSeconds(8);
        org.joda.time.DateTime dateTime84 = dateTime82.plusMinutes(0);
        org.joda.time.DateTime.Property property85 = dateTime82.minuteOfHour();
        int int86 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) dateTime82);
        java.lang.String str87 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime82);
        java.lang.Appendable appendable88 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable88, 76766000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 34 + "'", int47 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T07:34:05.159Z" + "'", str49, "2022-02-22T07:34:05.159Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T07:34:05.159Z" + "'", str55, "2022-02-22T07:34:05.159Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Sunday, June 22, 0003" + "'", str87, "Sunday, June 22, 0003");
    }

    @Test
    public void test8164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8164");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DurationField durationField13 = chronology9.months();
        long long16 = durationField13.getValueAsLong(1645428409727L, (long) 26774469);
        long long18 = durationField13.getMillis(812);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 625L + "'", long16 == 625L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2135353752000L + "'", long18 == 2135353752000L);
    }

    @Test
    public void test8165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8165");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear(5999999);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter0.getParser();
        int int9 = dateTimeFormatter0.getDefaultYear();
        boolean boolean10 = dateTimeFormatter0.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test8166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8166");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime16.toMutableDateTime(chronology26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType29.getField(chronology32);
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType29.isSupported(chronology34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.hourOfHalfday();
        boolean boolean46 = dateTimeFieldType29.isSupported(chronology42);
        mutableDateTime27.set(dateTimeFieldType29, 18);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableDateTime27.add(readablePeriod49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int52 = dateTimeFormatter51.getDefaultYear();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter51.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.secondOfMinute();
        org.joda.time.DurationField durationField64 = chronology60.months();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField66 = chronology60.millisOfSecond();
        mutableDateTime27.setRounding(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 34 + "'", int15 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:34:05.224Z" + "'", str17, "2022-02-22T07:34:05.224Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2000 + "'", int52 == 2000);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test8167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8167");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.Interval interval39 = localDate9.toInterval(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime8.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime8.toDateTime(chronology50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime60.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime67 = property65.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate75 = localDate69.withYear((int) (byte) 1);
        java.lang.String str76 = dateTimeFormatter68.print((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        boolean boolean86 = dateTimeZone77.equals((java.lang.Object) dateTimeZone84);
        org.joda.time.DateTime dateTime87 = localDate75.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime67.toDateTime(dateTimeZone84);
        long long90 = dateTimeZone84.nextTransition(1600012620000L);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) dateTime54, dateTimeZone84);
        org.joda.time.DateTime.Property property92 = dateTime91.millisOfSecond();
        org.joda.time.DateTime dateTime94 = dateTime91.minusMinutes(26763715);
        org.joda.time.DateTime.Property property95 = dateTime94.dayOfWeek();
        org.joda.time.DateTime dateTime96 = property95.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime98 = property95.addToCopy(59982L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDate75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str76, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
// flaky:         org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1600012620000L + "'", long90 == 1600012620000L);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test8168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8168");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property24 = dateTime19.secondOfMinute();
        org.joda.time.DateTime dateTime26 = dateTime19.plusMillis((-26));
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test8169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8169");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate8.minus(readablePeriod9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDate22.getFieldType(1);
        int int27 = localDate22.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        mutableDateTime28.add(durationFieldType32, (-1));
        boolean boolean35 = localDate22.isSupported(durationFieldType32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDate22.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate22.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale40 = dateTimeFormatter39.getLocale();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter39.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyearOfCentury();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate51.equals((java.lang.Object) (byte) 10);
        int[] intArray60 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int61 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localDate51, intArray60);
        int int62 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDate38, intArray60);
        org.joda.time.LocalDate localDate64 = localDate38.withYear((-1));
        org.joda.time.LocalDate.Property property65 = localDate64.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property65.getFieldType();
        int int67 = localDate10.get(dateTimeFieldType66);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = localDate10.getValue(27141210);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27141210");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 292278993 + "'", int62 == 292278993);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test8170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8170");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        java.util.Locale locale3 = dateTimeFormatter0.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNull(locale3);
    }

    @Test
    public void test8171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8171");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        java.util.Date date54 = localDate14.toDate();
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.fromDateFields(date54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusMinutes((int) (short) 10);
        int int59 = localDateTime58.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.plusDays((-1));
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfDay();
        java.util.Date date63 = localDateTime61.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int65 = localDateTime61.get(dateTimeFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property66 = localDate55.property(dateTimeFieldType64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515245431,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=5,MILLISECOND=431,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:34:05 AM +00:00" + "'", str46, "7:34:05 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Mon Feb 21 07:44:05 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 7 + "'", int65 == 7);
    }

    @Test
    public void test8172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8172");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property9 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        int int12 = localDate11.getEra();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime25 = property23.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        java.lang.String str34 = dateTimeFormatter26.print((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        boolean boolean44 = dateTimeZone35.equals((java.lang.Object) dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDate33.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localDate11.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) 26676070, dateTimeZone42);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfDay();
        mutableDateTime49.setChronology(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setDateTime(248, 2225885, 26887000, 27118189, 26841199, 65015704, 26951243);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27118189 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str34, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test8173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8173");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        int int67 = dateTimeZone31.getOffset((-13305485758L));
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime68.toMutableDateTime();
        mutableDateTime69.setWeekyear((-224));
        mutableDateTime69.setWeekyear((-469));
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime69.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime69.setMillisOfSecond(9095437);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9095437 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test8174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8174");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter5.getChronolgy();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(appendable8, 55540000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test8175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8175");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        mutableDateTime4.setMillis(readableInstant13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17);
        int int21 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "2022-02-22T07:24:42.673Z", (int) '4');
        mutableDateTime4.addMonths((-1036570595));
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Calendar calendar28 = mutableDateTime24.toCalendar(locale27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        mutableDateTime24.setMillis(readableInstant33);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime24.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property36.add(26666);
        org.joda.time.MutableDateTime mutableDateTime40 = property36.getMutableDateTime();
        mutableDateTime40.setMinuteOfHour((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableDateTime40.add(readablePeriod43, 26691926);
        mutableDateTime40.setDate(3600000L);
        boolean boolean48 = mutableDateTime4.equals((java.lang.Object) mutableDateTime40);
        boolean boolean49 = mutableDateTime4.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter50.getPrinter();
        org.joda.time.Chronology chronology52 = dateTimeFormatter50.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter50.withDefaultYear((int) (byte) 10);
        java.util.Locale locale55 = dateTimeFormatter50.getLocale();
        org.joda.time.Chronology chronology56 = dateTimeFormatter50.getChronolgy();
        java.lang.String str57 = mutableDateTime4.toString(dateTimeFormatter50);
        boolean boolean59 = mutableDateTime4.isAfter((-19353599910928L));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645515245523,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=5,MILLISECOND=523,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-53) + "'", int21 == (-53));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645515245523,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=5,MILLISECOND=523,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimePrinter51);
        org.junit.Assert.assertNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNull(chronology56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Wednesday, March 22, -86378861" + "'", str57, "Wednesday, March 22, -86378861");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test8176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8176");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = localDate7.getDayOfYear();
        org.joda.time.LocalDate.Property property21 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.roundCeilingCopy();
        org.joda.time.LocalDate.Property property24 = localDate23.centuryOfEra();
        org.joda.time.LocalDate localDate26 = localDate23.minusDays(26772062);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property34 = localDate27.yearOfEra();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate37 = property34.addWrapFieldToCopy(26690377);
        org.joda.time.LocalDate localDate38 = property34.getLocalDate();
        org.joda.time.LocalDate localDate39 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDate41.getFieldType(1);
        int int46 = localDate41.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        boolean boolean54 = localDate41.isSupported(durationFieldType51);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.Interval interval63 = localDate41.toInterval(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (short) 100, dateTimeZone61);
        long long68 = dateTimeZone61.convertLocalToUTC((long) 30464923, true, (long) 835);
        org.joda.time.Interval interval69 = localDate39.toInterval(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight70 = localDate26.toDateMidnight(dateTimeZone61);
        org.joda.time.LocalDate localDate72 = localDate26.withWeekyear(26769591);
        org.joda.time.LocalDate localDate74 = localDate26.plusWeeks((-50));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 30464923L + "'", long68 == 30464923L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
    }

    @Test
    public void test8177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8177");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withDefaultYear(99);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter21.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        boolean boolean35 = dateTimeFieldType25.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.plus((-48469999L));
        org.joda.time.DateTime dateTime49 = dateTime45.plusSeconds(2);
        org.joda.time.DateTime dateTime51 = dateTime49.minusSeconds(8);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime37.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime54 = property53.roundHalfFloor();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone56);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        mutableDateTime54.setZoneRetainFields(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(360000000L, dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter21.withZone(dateTimeZone58);
        java.lang.Appendable appendable62 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(appendable62, (long) 26668071);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test8178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8178");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 26665274);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(182);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.forPattern("2022-03-22");
        java.lang.String str14 = localDateTime11.toString(dateTimeFormatter13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(8915210);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withDate(9243170, 26865497, 540);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26865497 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7200000 + "'", int6 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-03-22" + "'", str14, "2022-03-22");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test8179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8179");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        org.joda.time.DateTimeField dateTimeField82 = property81.getField();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test8180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8180");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        boolean boolean51 = dateTimeFieldType41.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime20.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime55 = dateTime20.minusMinutes(5);
        int int56 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter0.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26679);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = dateTimeFormatter59.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withOffsetParsed();
        boolean boolean62 = dateTimeFormatter61.isParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.weekOfWeekyear();
        boolean boolean73 = dateTimeFieldType63.isSupported(chronology69);
        org.joda.time.DateTimeField dateTimeField74 = chronology69.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(chronology69);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate79 = localDate76.withField(dateTimeFieldType77, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDate79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime83 = dateTime81.plusMonths((int) '4');
        org.joda.time.DateTime dateTime85 = dateTime83.plus((-48469999L));
        org.joda.time.DateTime dateTime87 = dateTime83.plusSeconds(2);
        org.joda.time.DateTime dateTime89 = dateTime87.minusSeconds(8);
        mutableDateTime75.setMillis((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.ReadableDuration readableDuration91 = null;
        mutableDateTime75.add(readableDuration91, 2022);
        int int96 = dateTimeFormatter61.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime75, "2022-02-22T07:24:40.676Z", 27032);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97200000 + "'", int56 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimePrinter60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-27033) + "'", int96 == (-27033));
    }

    @Test
    public void test8181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8181");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter1.withChronology(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronolgy();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category15);
        java.util.Locale locale18 = java.util.Locale.getDefault(category15);
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 27076180, chronology13, locale18);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test8182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8182");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 26665274);
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy(44);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMonthOfYear(10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.year();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusHours(26909);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withDurationAdded(readableDuration14, 26876466);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("2022-02-22T07:27:43.372Z");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localDateTime16.toString("-0002-02-22T07:29:15.820Z", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
    }

    @Test
    public void test8183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8183");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        long long17 = chronology10.add((long) '4', (long) 5999999, (-444));
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 55377, chronology10);
        org.joda.time.DurationField durationField19 = chronology10.minutes();
        long long22 = durationField19.subtract((long) 26816088, 27030962);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2663999504L) + "'", long17 == (-2663999504L));
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1621830903912L) + "'", long22 == (-1621830903912L));
    }

    @Test
    public void test8184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8184");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int19 = localDate7.getYearOfCentury();
        org.joda.time.LocalDate localDate21 = localDate7.withYear(26668071);
        boolean boolean22 = charSet3.contains((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDate23.getFieldType(1);
        int int28 = localDate23.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime29.add(durationFieldType33, (-1));
        boolean boolean36 = localDate23.isSupported(durationFieldType33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = localDate23.getFieldTypes();
        java.lang.String str39 = localDate23.toString("7");
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(718);
        java.lang.String str42 = dateTimeZone41.getID();
        org.joda.time.DateTime dateTime43 = localDate23.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis(27268320);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Calendar calendar50 = mutableDateTime46.toCalendar(locale49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        mutableDateTime46.setMillis(readableInstant55);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime46.secondOfDay();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime46.add(readableDuration59);
        mutableDateTime46.setMillisOfDay(53);
        mutableDateTime46.addMinutes((-1));
        int int65 = mutableDateTime46.getSecondOfMinute();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property69 = localDate66.era();
        org.joda.time.LocalDate localDate70 = property69.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int72 = localDate70.get(dateTimeFieldType71);
        int int73 = mutableDateTime46.get(dateTimeFieldType71);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        long long85 = chronology79.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.Chronology chronology86 = chronology79.withUTC();
        org.joda.time.Chronology chronology87 = chronology86.withUTC();
        org.joda.time.DurationField durationField88 = chronology87.halfdays();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.era();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType71.getField(chronology87);
        boolean boolean92 = dateTime43.isSupported(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType71.getDurationType();
        boolean boolean94 = localDate7.isSupported(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str1, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7" + "'", str39, "7");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.718" + "'", str42, "+00:00:00.718");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645515245940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=5,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-48469999L) + "'", long85 == (-48469999L));
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test8185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8185");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        java.lang.String str27 = dateTimeField8.getName();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = dateTimeField8.getAsText((-1L), locale29);
        java.util.Locale locale36 = new java.util.Locale("", "2022-02-22T07:26:47.393Z", "2022-02-22T07:29:23.412Z");
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField8.getAsShortText((long) 26759158, locale36);
        java.lang.String str39 = locale36.toLanguageTag();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekOfWeekyear" + "'", str27, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str30, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals(locale36.toString(), "_2022-02-22T07:26:47.393Z_2022-02-22T07:29:23.412Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:26:47.393Z (2022-02-22T07:29:23.412Z)" + "'", str37, "2022-02-22T07:26:47.393Z (2022-02-22T07:29:23.412Z)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
    }

    @Test
    public void test8186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8186");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        mutableDateTime22.addSeconds(365);
        mutableDateTime22.setMillisOfSecond(151);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime22.minuteOfHour();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime22.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test8187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8187");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        java.util.Locale locale16 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean17 = locale16.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(2L, chronology10, locale16, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime21.setZoneRetainFields(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime21.add(readablePeriod47, 8);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        int int61 = dateTimeField58.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        java.lang.String str70 = dateTimeFormatter62.print((org.joda.time.ReadablePartial) localDate69);
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate69, (int) (short) -1, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDate69.getFieldType((int) (short) 1);
        boolean boolean79 = mutableDateTime21.isSupported(dateTimeFieldType78);
        dateTimeParserBucket20.saveField(dateTimeFieldType78, 100);
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 26665274);
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 203908000);
        org.joda.time.Chronology chronology86 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone87 = dateTimeParserBucket20.getZone();
        org.joda.time.DateTime dateTime88 = org.joda.time.DateTime.now(dateTimeZone87);
        org.joda.time.LocalDate localDate89 = org.joda.time.LocalDate.now(dateTimeZone87);
        java.lang.String str91 = dateTimeZone87.getNameKey((-62194235306124L));
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645515246191,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=6,MILLISECOND=191,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str70, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "UTC" + "'", str91, "UTC");
    }

    @Test
    public void test8188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8188");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime9.add(readablePeriod16, (int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime9.setChronology(chronology19);
        int int21 = mutableDateTime9.getYearOfEra();
        int int24 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "+00:00", 26676039);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTimeFormatter0.parseDateTime("0001-02-19T07:28:41.728Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0001-02-19T07:28:41.728Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-26676040) + "'", int24 == (-26676040));
    }

    @Test
    public void test8189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8189");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.Interval interval42 = localDate31.toInterval();
        org.joda.time.LocalDate localDate44 = localDate31.minusWeeks(26788659);
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        java.util.Date date46 = localDate44.toDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Mon Feb 22 00:00:00 GMT 513414");
    }

    @Test
    public void test8190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8190");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate9.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 2);
        boolean boolean25 = dateTimeZone18.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime1.setZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 27, dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        boolean boolean46 = dateTimeZone37.equals((java.lang.Object) dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate49 = localDate35.minusYears(2000);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        int int51 = localDate50.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.plus((-48469999L));
        org.joda.time.DateTime dateTime63 = dateTime59.plusSeconds(2);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = localDate67.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((java.lang.Object) dateTime59, dateTimeZone76);
        org.joda.time.Interval interval80 = localDate50.toInterval(dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        java.lang.String str82 = mutableDateTime81.toString();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        boolean boolean85 = dateTimeZone83.equals((java.lang.Object) locale84);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(dateTimeZone83);
        mutableDateTime81.setZoneRetainFields(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDate50.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate(dateTimeZone83);
        org.joda.time.DateTime dateTime90 = localDate49.toDateTimeAtCurrentTime(dateTimeZone83);
        java.util.TimeZone timeZone91 = dateTimeZone83.toTimeZone();
        long long93 = dateTimeZone18.getMillisKeepLocal(dateTimeZone83, (long) 79499997);
        java.util.Locale.Builder builder94 = new java.util.Locale.Builder();
        java.util.Locale locale95 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder96 = builder94.setLocale(locale95);
        boolean boolean97 = dateTimeZone83.equals((java.lang.Object) locale95);
        java.lang.String str98 = locale95.getDisplayCountry();
        java.lang.String str99 = locale95.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645515246342,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=6,MILLISECOND=342,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T07:34:06.342Z" + "'", str82, "2022-02-22T07:34:06.342Z");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(timeZone91);
        org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 79499997L + "'", long93 == 79499997L);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "fr");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "French" + "'", str99, "French");
    }

    @Test
    public void test8191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8191");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField12.getType();
        org.joda.time.DurationField durationField14 = dateTimeField12.getDurationField();
        long long17 = durationField14.getDifferenceAsLong((-132761063L), (long) 26815);
        long long20 = durationField14.add((long) 940, 26882471);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 848328847056000940L + "'", long20 == 848328847056000940L);
    }

    @Test
    public void test8192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8192");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale6 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str7 = locale3.getDisplayName(locale6);
        java.util.Locale.setDefault(category2, locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.ReadableInstant readableInstant10 = null;
        java.lang.String str11 = dateTimeFormatter0.print(readableInstant10);
        boolean boolean12 = dateTimeFormatter0.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = dateTimeFormatter0.parseLocalDate("2022-02-22T07:27:07.466Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:07.466Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale6.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "February 22, 2022 7:34:06 AM +00:00" + "'", str11, "February 22, 2022 7:34:06 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8193");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = dateTime5.getMinuteOfHour();
        org.joda.time.DateTime.Property property17 = dateTime5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        boolean boolean20 = dateTimeField18.isLeap((long) 26963000);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515246431,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=6,MILLISECOND=431,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:34:06 AM +00:00" + "'", str14, "7:34:06 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 34 + "'", int16 == 34);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test8194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8194");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        boolean boolean21 = dateTimeFieldType11.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology17.getZone();
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfHalfday();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology17);
        int int28 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTime dateTime29 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        long long41 = dateTimeField38.addWrapField((long) ' ', 0);
        long long43 = dateTimeField38.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDate44.getFieldType(1);
        int int49 = localDate44.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime50.add(readableDuration51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        mutableDateTime50.add(durationFieldType54, (-1));
        boolean boolean57 = localDate44.isSupported(durationFieldType54);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField66.getType();
        org.joda.time.LocalDate.Property property68 = localDate44.property(dateTimeFieldType67);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Calendar calendar73 = mutableDateTime69.toCalendar(locale72);
        boolean boolean74 = mutableDateTime69.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str76 = mutableDateTime69.toString(dateTimeFormatter75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        boolean boolean79 = dateTimeZone77.equals((java.lang.Object) locale78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter75.withLocale(locale78);
        java.lang.String str81 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDate44, locale78);
        int int82 = localDate44.getYear();
        boolean boolean83 = localDate10.isAfter((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTime dateTime84 = localDate10.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate86 = localDate10.minusDays(0);
        org.joda.time.LocalDate.Property property87 = localDate86.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 345600000L + "'", long43 == 345600000L);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645515246492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=6,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "7:34:06 AM +00:00" + "'", str76, "7:34:06 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "8" + "'", str81, "8");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
    }

    @Test
    public void test8195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8195");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter0.getPrinter();
        int int5 = dateTimePrinter4.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        boolean boolean8 = dateTimeFormatter6.isParser();
        boolean boolean9 = dateTimeFormatter6.isParser();
        boolean boolean10 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZoneUTC();
        boolean boolean12 = dateTimeFormatter11.isParser();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.Chronology chronology19 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = property23.setCopy(26669470);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTime();
        java.lang.String str28 = dateTimeFormatter11.print((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter11.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withYear((int) (byte) 1);
        java.lang.String str38 = dateTimeFormatter30.print((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter30.getParser();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime46.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology50 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfHalfday();
        java.util.Locale locale56 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean57 = locale56.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(2L, chronology50, locale56, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale61 = dateTimeParserBucket60.getLocale();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate65 = localDate62.withField(dateTimeFieldType63, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDate65.toDateTime(readableInstant66);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate70 = localDate68.minusMonths((int) (short) -1);
        boolean boolean72 = localDate68.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology73 = localDate68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology75 = chronology73.withZone(dateTimeZone74);
        org.joda.time.DateTime dateTime76 = localDate65.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        long long79 = dateTimeZone74.getMillisKeepLocal(dateTimeZone77, (long) 2);
        dateTimeParserBucket60.setZone(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone81 = dateTimeParserBucket60.getZone();
        org.joda.time.Chronology chronology82 = dateTimeParserBucket60.getChronology();
        int int85 = dateTimeParser39.parseInto(dateTimeParserBucket60, "2022-02-22T07:24:54.005Z", 2021);
        int int88 = dateTimeParser29.parseInto(dateTimeParserBucket60, "0003-06-21T18:05:04.449Z", 47462021);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb 22, 26669470" + "'", str28, "Feb 22, 26669470");
        org.junit.Assert.assertNotNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str38, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 2L + "'", long79 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-2022) + "'", int85 == (-2022));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-47462022) + "'", int88 == (-47462022));
    }

    @Test
    public void test8196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8196");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.setCopy((int) ' ');
        org.joda.time.DateTime dateTime31 = property27.addWrapFieldToCopy(257);
        int int32 = dateTime31.getEra();
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        org.joda.time.DateTime.Property property34 = dateTime31.year();
        org.joda.time.DateTime dateTime36 = property34.addToCopy(30592032);
        org.joda.time.DateTime dateTime37 = property34.withMinimumValue();
        int int38 = dateTime37.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 627 + "'", int38 == 627);
    }

    @Test
    public void test8197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8197");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        java.lang.String str7 = dateTimeFormatter1.print((long) 999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.parse("2022-02-22T07:26:33.416Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:26:33.416Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Thursday, January 1, 1970" + "'", str7, "Thursday, January 1, 1970");
    }

    @Test
    public void test8198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8198");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.LocalDate localDate21 = localDate7.minusYears(2000);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        int int23 = localDate22.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.plus((-48469999L));
        org.joda.time.DateTime dateTime35 = dateTime31.plusSeconds(2);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate39.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) dateTime31, dateTimeZone48);
        org.joda.time.Interval interval52 = localDate22.toInterval(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        java.lang.String str54 = mutableDateTime53.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        boolean boolean57 = dateTimeZone55.equals((java.lang.Object) locale56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone55);
        mutableDateTime53.setZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = localDate22.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime62 = localDate21.toDateTimeAtCurrentTime(dateTimeZone55);
        java.util.TimeZone timeZone63 = dateTimeZone55.toTimeZone();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTime(readableInstant69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTime dateTime79 = localDate68.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        long long82 = dateTimeZone77.getMillisKeepLocal(dateTimeZone80, (long) 2);
        int int84 = dateTimeZone80.getStandardOffset((long) 5);
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime((java.lang.Object) "0003-06-21T17:56:36.113Z", dateTimeZone80);
        int int86 = mutableDateTime85.getCenturyOfEra();
        boolean boolean87 = dateTimeZone55.equals((java.lang.Object) mutableDateTime85);
        org.joda.time.DateTime dateTime88 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay89 = dateTime88.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval52);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:34:06.668Z" + "'", str54, "2022-02-22T07:34:06.668Z");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 2L + "'", long82 == 2L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(yearMonthDay89);
    }

    @Test
    public void test8199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8199");
        java.util.Locale locale3 = new java.util.Locale("2022-02-22T07:24:35.112Z", "22", "DurationField[weeks]");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getDisplayLanguage();
        boolean boolean6 = locale3.hasExtensions();
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str11 = nameProvider7.getShortName(locale8, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.util.Locale locale15 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale19 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str20 = locale19.getDisplayVariant();
        java.lang.String str21 = locale15.getDisplayCountry(locale19);
        java.lang.String str22 = locale15.getDisplayName();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale15.getDisplayCountry(locale23);
        java.util.Locale locale29 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.util.Locale.setDefault(locale29);
        java.lang.String str31 = locale15.getDisplayScript(locale29);
        java.lang.String str34 = nameProvider7.getShortName(locale15, "2022-02-22T07:24:38.645Z", "0003-06-21T17:56:46.777Z");
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Calendar calendar39 = mutableDateTime35.toCalendar(locale38);
        java.lang.String str42 = nameProvider7.getName(locale38, "2022-02-22T07:24:42.756Z", "2095-02-25");
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Calendar calendar47 = mutableDateTime43.toCalendar(locale46);
        boolean boolean48 = mutableDateTime43.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str50 = mutableDateTime43.toString(dateTimeFormatter49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        boolean boolean53 = dateTimeZone51.equals((java.lang.Object) locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter49.withLocale(locale52);
        java.lang.String str57 = nameProvider7.getShortName(locale52, "2022-02-22T07:24:32.073Z", "2022-02-22T07:24:47.762Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate65 = localDate59.withYear((int) (byte) 1);
        java.lang.String str66 = dateTimeFormatter58.print((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.format.DateTimeParser dateTimeParser67 = dateTimeFormatter58.getParser();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.Chronology chronology75 = dateTime74.getChronology();
        org.joda.time.DateTime dateTime77 = dateTime74.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology78 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.millisOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.clockhourOfHalfday();
        java.util.Locale locale84 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean85 = locale84.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket(2L, chronology78, locale84, (java.lang.Integer) (-2), (int) 'a');
        int int91 = dateTimeParser67.parseInto(dateTimeParserBucket88, "", 4);
        java.util.Locale locale92 = dateTimeParserBucket88.getLocale();
        java.util.Locale locale93 = locale92.stripExtensions();
        java.lang.String str96 = nameProvider7.getName(locale93, "2022-02-22T07:25:22.559Z", "2022-02-22T07:25:09.971Z");
        java.lang.String str97 = locale3.getDisplayName(locale93);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:24:35.112z_22_DurationField[weeks]");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22t07:24:35.112z" + "'", str5, "2022-02-22t07:24:35.112z");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals(locale15.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str21, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str22, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str24, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str25, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645515246786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=6,MILLISECOND=786,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645515246786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=6,MILLISECOND=786,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "10:34:06 AM +27:00" + "'", str50, "10:34:06 AM +27:00");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str66, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser67);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-5) + "'", int91 == (-5));
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "2022-02-22t07:24:35.112z (22,DurationField[weeks])" + "'", str97, "2022-02-22t07:24:35.112z (22,DurationField[weeks])");
    }

    @Test
    public void test8200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8200");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        java.lang.String str16 = localDate0.toString("7");
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(718);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.DateTime dateTime20 = localDate0.toDateTimeAtMidnight(dateTimeZone18);
        java.util.Date date21 = localDate0.toDate();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale27 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale31 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str32 = locale31.getDisplayVariant();
        java.lang.String str33 = locale27.getDisplayCountry(locale31);
        java.lang.String str34 = locale27.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.lang.String str36 = locale35.getDisplayCountry();
        java.lang.String str37 = locale27.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter23.withLocale(locale27);
        int int39 = dateTimeFormatter38.getDefaultYear();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("");
        java.lang.String str42 = timeZone41.getID();
        java.lang.String str43 = timeZone41.getID();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        boolean boolean45 = timeZone41.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter38.withZone(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter38.withDefaultYear(30580);
        java.lang.String str50 = localDate22.toString(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.718" + "'", str19, "+00:00:00.718");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 23 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str33, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str34, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str36, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str37, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GMT" + "'", str42, "GMT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GMT" + "'", str43, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str50, "\ufffd\ufffd\ufffd\ufffd");
    }

    @Test
    public void test8201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8201");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        int int32 = localDate31.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((-48469999L));
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds(2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateTime40, dateTimeZone57);
        org.joda.time.Interval interval61 = localDate31.toInterval(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        java.lang.String str63 = mutableDateTime62.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        boolean boolean66 = dateTimeZone64.equals((java.lang.Object) locale65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(dateTimeZone64);
        mutableDateTime62.setZoneRetainFields(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = localDate31.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 26673922, dateTimeZone64);
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfMonth();
        org.joda.time.DateTime dateTime73 = dateTime70.plus((long) 26790);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime70.toMutableDateTimeISO();
        mutableDateTime9.setTime((org.joda.time.ReadableInstant) mutableDateTime74);
        boolean boolean77 = mutableDateTime9.isEqual(0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval61);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-23T10:34:06.872+27:00" + "'", str63, "2022-02-23T10:34:06.872+27:00");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test8202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8202");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime6 = property3.addCopy(0);
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime6.withMillisOfDay(26839292);
        int int11 = localTime10.getMinuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale13 = dateTimeFormatter12.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter12.getZone();
        java.lang.String str15 = localTime10.toString(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27 + "'", int11 == 27);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 7:27:19 AM " + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 7:27:19 AM ");
    }

    @Test
    public void test8203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8203");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (-62135596800000L), 17);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology20.eras();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515246979,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=6,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10:34:06 AM +27:00" + "'", str7, "10:34:06 AM +27:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62135596800000L) + "'", long24 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test8204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8204");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        boolean boolean3 = mutableDateTime1.isEqualNow();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        int int13 = mutableDateTime1.get(dateTimeField12);
        java.lang.String str14 = mutableDateTime1.toString();
        boolean boolean15 = mutableDateTime1.isEqualNow();
        int int16 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime25.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology29 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfHalfday();
        java.util.Locale locale35 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean36 = locale35.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(2L, chronology29, locale35, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, 30);
        int int43 = dateTimeParserBucket39.getOffset();
        int int44 = dateTimeParserBucket39.getOffset();
        dateTimeParserBucket39.setPivotYear((java.lang.Integer) 0);
        java.util.Locale locale47 = dateTimeParserBucket39.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = mutableDateTime1.toString("7:29:15 AM ", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-02T02:59:59.999+27:00" + "'", str14, "1970-01-02T02:59:59.999+27:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_PROPERTY[MILLISOFDAY]");
    }

    @Test
    public void test8205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8205");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        boolean boolean20 = dateTimeFieldType10.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology16);
        mutableDateTime22.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int28 = dateTimeFormatter27.getDefaultYear();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter27.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType25.getField(chronology36);
        mutableDateTime22.setChronology(chronology36);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(chronology36);
        org.joda.time.DateTime dateTime43 = dateTime5.withChronology(chronology36);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(0L);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalTime localTime48 = localTime45.withPeriodAdded(readablePeriod46, 11);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalTime localTime50 = localTime45.plus(readablePeriod49);
        org.joda.time.LocalTime.Property property51 = localTime50.millisOfDay();
        int[] intArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            chronology36.validate((org.joda.time.ReadablePartial) localTime50, intArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "year" + "'", str26, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test8206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8206");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        boolean boolean23 = dateTimeZone21.equals((java.lang.Object) locale22);
        java.lang.String str24 = dateTimeZone18.getName((long) 'a', locale22);
        int int25 = dateTimeField8.getMaximumTextLength(locale22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        long long37 = dateTimeField34.addWrapField((long) ' ', 0);
        long long39 = dateTimeField34.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDate40.getFieldType(1);
        int int45 = localDate40.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        mutableDateTime46.add(durationFieldType50, (-1));
        boolean boolean53 = localDate40.isSupported(durationFieldType50);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = dateTimeField62.getType();
        org.joda.time.LocalDate.Property property64 = localDate40.property(dateTimeFieldType63);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime65.add(readableDuration66);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Calendar calendar69 = mutableDateTime65.toCalendar(locale68);
        boolean boolean70 = mutableDateTime65.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str72 = mutableDateTime65.toString(dateTimeFormatter71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        boolean boolean75 = dateTimeZone73.equals((java.lang.Object) locale74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter71.withLocale(locale74);
        java.lang.String str77 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate40, locale74);
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder80 = builder78.setLocale(locale79);
        java.util.Locale locale81 = builder78.build();
        java.lang.String str82 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDate40, locale81);
        java.lang.String str84 = dateTimeField8.getAsShortText(0L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+27:00" + "'", str24, "+27:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 345600000L + "'", long39 == 345600000L);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 23 + "'", int45 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645515247124,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=7,MILLISECOND=124,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "10:34:07 AM +27:00" + "'", str72, "10:34:07 AM +27:00");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "8" + "'", str77, "8");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "8" + "'", str82, "8");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1" + "'", str84, "1");
    }

    @Test
    public void test8207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8207");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str7 = property3.getAsText(locale6);
        org.joda.time.LocalTime localTime9 = property3.addCopy(30844800000L);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalTime localTime12 = property10.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = property10.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localTime14.toString("7:25:33 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10799999" + "'", str7, "10799999");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2" + "'", str11, "2");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test8208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8208");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime6 = property3.addCopy(0);
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime9 = localTime6.minusHours(26707597);
        org.joda.time.LocalTime localTime11 = localTime6.minusMillis((-1645514694));
        java.lang.String str13 = localTime11.toString("07:33:26 +00:00");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "07:33:26 +00:00" + "'", str13, "07:33:26 +00:00");
    }

    @Test
    public void test8209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8209");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.String str11 = locale4.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone17);
        int int21 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime18, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.minuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundFloor();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property23.set("2022-02-22T07:32:25.121Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:32:25.121Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str10, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str11, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str14, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-51) + "'", int21 == (-51));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test8210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8210");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("0003-06-21t17:56:43.932z (2022-02-22T07:24:48.118Z,7:24:34 AM +00:00)");
        int int2 = timeZone1.getRawOffset();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDate3.getFieldType(1);
        int int8 = localDate3.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        boolean boolean16 = localDate3.isSupported(durationFieldType13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDate3.getFieldTypes();
        java.lang.String str19 = localDate3.toString("7");
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(718);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.DateTime dateTime23 = localDate3.toDateTimeAtMidnight(dateTimeZone21);
        java.util.Date date24 = localDate3.toDate();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        boolean boolean26 = timeZone1.inDaylightTime(date24);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "7" + "'", str19, "7");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.718" + "'", str22, "+00:00:00.718");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Wed Feb 23 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test8211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8211");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.secondOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundFloorCopy();
        org.joda.time.LocalDate localDate16 = property14.withMaximumValue();
        org.joda.time.LocalDate localDate18 = property14.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean20 = localDate18.isSupported(dateTimeFieldType19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale22 = dateTimeFormatter21.getLocale();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter21.withChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType19.getField(chronology28);
        mutableDateTime5.setChronology(chronology28);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale37 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale41 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str42 = locale41.getDisplayVariant();
        java.lang.String str43 = locale37.getDisplayCountry(locale41);
        java.lang.String str44 = locale37.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale45.getDisplayCountry();
        java.lang.String str47 = locale37.getDisplayCountry(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter33.withLocale(locale37);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone50);
        int int54 = dateTimeFormatter48.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime51, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        mutableDateTime56.add(durationFieldType60, (-1));
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableDateTime56.add(readablePeriod63, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime56.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime67 = property66.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime68 = mutableDateTime67.toMutableDateTimeISO();
        mutableDateTime68.setTime((long) 26666335);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        mutableDateTime68.setZoneRetainFields(dateTimeZone72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((java.lang.Object) 2419226666L, dateTimeZone72);
        mutableDateTime51.setZoneRetainFields(dateTimeZone72);
        boolean boolean76 = dateTimeZone72.isFixed();
        mutableDateTime32.setZoneRetainFields(dateTimeZone72);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter3.withZone(dateTimeZone72);
        java.util.TimeZone timeZone80 = dateTimeZone72.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals(locale37.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str43, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str44, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str47, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-51) + "'", int54 == (-51));
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test8212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8212");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = localDate7.getDayOfYear();
        org.joda.time.LocalDate.Property property21 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate24 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property32 = localDate25.yearOfEra();
        org.joda.time.LocalDate localDate33 = property32.roundFloorCopy();
        org.joda.time.LocalDate localDate34 = property32.withMaximumValue();
        org.joda.time.LocalDate localDate36 = property32.addWrapFieldToCopy(26666877);
        org.joda.time.LocalDate localDate38 = property32.addToCopy(59);
        org.joda.time.LocalDate.Property property39 = localDate38.era();
        org.joda.time.LocalDate localDate41 = localDate38.plusMonths(51);
        org.joda.time.LocalDate localDate43 = localDate38.minusWeeks(26706026);
        org.joda.time.LocalDate localDate45 = localDate38.minusMonths(26833053);
        boolean boolean46 = localDate24.isBefore((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate localDate48 = localDate38.plusYears(27076985);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54 + "'", int20 == 54);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    public void test8213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8213");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.Interval interval39 = localDate9.toInterval(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime8.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime8.toDateTime(chronology50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime60.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime67 = property65.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate75 = localDate69.withYear((int) (byte) 1);
        java.lang.String str76 = dateTimeFormatter68.print((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        boolean boolean86 = dateTimeZone77.equals((java.lang.Object) dateTimeZone84);
        org.joda.time.DateTime dateTime87 = localDate75.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime67.toDateTime(dateTimeZone84);
        long long90 = dateTimeZone84.nextTransition(1600012620000L);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) dateTime54, dateTimeZone84);
        org.joda.time.DateTime.Property property92 = dateTime91.millisOfSecond();
        org.joda.time.DateTime dateTime94 = dateTime91.minusMinutes(26763715);
        org.joda.time.ReadableDuration readableDuration95 = null;
        org.joda.time.DateTime dateTime97 = dateTime94.withDurationAdded(readableDuration95, 27188985);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDate75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str76, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1600012620000L + "'", long90 == 1600012620000L);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test8214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8214");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer4, (long) 27091959);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test8215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8215");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.LocalDate localDate19 = dateTime14.toLocalDate();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate20.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate20.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.LocalDate localDate32 = localDate20.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate34 = localDate20.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology36 = dateTimeFormatter35.getChronolgy();
        java.lang.String str37 = localDate20.toString(dateTimeFormatter35);
        java.util.Locale locale38 = dateTimeFormatter35.getLocale();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeFormatter35.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter35.withDefaultYear(99);
        boolean boolean42 = dateTimeFormatter35.isOffsetParsed();
        java.lang.String str43 = localDate19.toString(dateTimeFormatter35);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime49.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property54 = dateTime52.property(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = property54.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime56 = property54.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate64 = localDate58.withYear((int) (byte) 1);
        java.lang.String str65 = dateTimeFormatter57.print((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        boolean boolean75 = dateTimeZone66.equals((java.lang.Object) dateTimeZone73);
        org.joda.time.DateTime dateTime76 = localDate64.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.DateTime dateTime77 = dateTime56.toDateTime(dateTimeZone73);
        long long79 = dateTimeZone73.nextTransition(1600012620000L);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(dateTimeZone73);
        org.joda.time.DateTime dateTime81 = localDate19.toDateTimeAtCurrentTime(dateTimeZone73);
        boolean boolean82 = dateTimeZone73.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 34 + "'", int15 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-23T10:34:07.518+27:00" + "'", str17, "2022-02-23T10:34:07.518+27:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(chronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str37, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str43, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDate64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str65, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1600012620000L + "'", long79 == 1600012620000L);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test8216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8216");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        int int10 = localDate9.getEra();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property21 = dateTime19.property(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime23 = property21.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        boolean boolean42 = dateTimeZone33.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime23.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = localDate9.toDateTimeAtMidnight(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = dateTime45.withYearOfCentury(26681221);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26681221 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test8217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8217");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.year();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 29, chronology10);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField18 = chronology10.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test8218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8218");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime5.withYearOfEra(26680);
        int int47 = dateTime5.getDayOfWeek();
        org.joda.time.DateTime dateTime48 = dateTime5.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime5.withDurationAdded(readableDuration49, 462);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime5.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-22T21:06:17.786+27:00" + "'", str18, "0003-06-22T21:06:17.786+27:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645515247785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=7,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235152215,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=7,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645515247785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=7,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "10:34:07 AM +27:00" + "'", str39, "10:34:07 AM +27:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10:34:07 AM +27:00" + "'", str44, "10:34:07 AM +27:00");
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
    }

    @Test
    public void test8219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8219");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        org.joda.time.ReadableInstant readableInstant3 = null;
        java.lang.String str4 = dateTimeFormatter0.print(readableInstant3);
        boolean boolean5 = dateTimeFormatter0.isPrinter();
        int int6 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Wednesday, February 23, 2022" + "'", str4, "Wednesday, February 23, 2022");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(dateTimeZone7);
    }

    @Test
    public void test8220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8220");
        java.util.Locale locale2 = new java.util.Locale("7:24:59 AM +00:00", "fr");
        java.lang.String str3 = locale2.getISO3Country();
        boolean boolean4 = locale2.hasExtensions();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        boolean boolean10 = mutableDateTime5.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str12 = mutableDateTime5.toString(dateTimeFormatter11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property20 = localDate13.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate13.withPeriodAdded(readablePeriod21, (int) ' ');
        java.lang.String str24 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology25.add(readablePeriod26, (-62135596800000L), 17);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.dayOfMonth();
        int int32 = dateTimeField30.get((long) (-26682));
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        long long54 = dateTimeField51.addWrapField((long) ' ', 0);
        java.util.Locale locale58 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale62 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str63 = locale62.getDisplayVariant();
        java.lang.String str64 = locale58.getDisplayCountry(locale62);
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = locale65.getDisplayCountry();
        java.lang.String str67 = locale62.getDisplayCountry(locale65);
        int int68 = dateTimeField51.getMaximumShortTextLength(locale62);
        int int69 = dateTimeField42.getMaximumTextLength(locale62);
        java.lang.String str70 = locale62.getDisplayName();
        java.lang.String str71 = dateTimeField30.getAsShortText(67254, locale62);
        java.lang.String str72 = locale2.getDisplayLanguage(locale62);
        org.junit.Assert.assertEquals(locale2.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FRA" + "'", str3, "FRA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645515247842,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=7,MILLISECOND=842,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10:34:07 AM +27:00" + "'", str12, "10:34:07 AM +27:00");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-62135596800000L) + "'", long29 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 32L + "'", long54 == 32L);
        org.junit.Assert.assertEquals(locale58.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str64, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str67, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str70, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "67254" + "'", str71, "67254");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "7:24:59 am +00:00" + "'", str72, "7:24:59 am +00:00");
    }

    @Test
    public void test8221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8221");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTime dateTime42 = localDate41.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.withDurationAdded(readableDuration44, 26);
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfSecond();
        org.joda.time.DateTime dateTime48 = property47.withMinimumValue();
        org.joda.time.DateTime dateTime50 = dateTime48.minusYears(86340);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear((-183729));
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 23 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test8222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8222");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        boolean boolean2 = mutableDateTime0.isAfterNow();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.addWrapField(83);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime5.add(readablePeriod6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale9 = dateTimeFormatter8.getLocale();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter8.getZone();
        java.lang.String str12 = dateTimeFormatter8.print((long) 32);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter8.withZone(dateTimeZone14);
        mutableDateTime5.setZone(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "January 2, 1970 3:00:00 AM +27:00" + "'", str12, "January 2, 1970 3:00:00 AM +27:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test8223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8223");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = chronology11.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.dayOfYear();
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str21 = nameProvider17.getShortName(locale18, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = dateTimeZone25.getName(0L, locale27);
        java.util.Locale.setDefault(category22, locale27);
        java.lang.String str32 = nameProvider17.getShortName(locale27, "", "2022-02-22T07:24:31.270Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(694252944000L, chronology11, locale27, (java.lang.Integer) 26692066);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(26731217);
        dateTimeParserBucket34.setZone(dateTimeZone36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(55494000L, dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+27:00" + "'", str28, "+27:00");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test8224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8224");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime12.withHourOfDay((int) (short) 10);
        org.joda.time.Instant instant36 = dateTime12.toInstant();
        org.joda.time.DateTime.Property property37 = dateTime12.dayOfMonth();
        org.joda.time.DateTime.Property property38 = dateTime12.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime12.withMillisOfSecond(27008897);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27008897 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test8225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8225");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        java.util.Locale locale15 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale19 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str20 = locale19.getDisplayVariant();
        java.lang.String str21 = locale15.getDisplayCountry(locale19);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale19.getDisplayCountry(locale22);
        int int25 = dateTimeField8.getMaximumShortTextLength(locale19);
        int int26 = dateTimeField8.getMaximumValue();
        long long28 = dateTimeField8.roundHalfFloor((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        boolean boolean34 = mutableDateTime29.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str36 = mutableDateTime29.toString(dateTimeFormatter35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        boolean boolean39 = dateTimeZone37.equals((java.lang.Object) locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter35.withLocale(locale38);
        int int41 = dateTimeField8.getMaximumTextLength(locale38);
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider43);
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str48 = nameProvider43.getName(locale45, "French", "2022-02-22T07:24:40.386Z");
        java.lang.String str49 = dateTimeField8.getAsShortText(26666, locale45);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTime dateTime60 = dateTime57.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology61 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfHalfday();
        java.util.Locale locale67 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean68 = locale67.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(2L, chronology61, locale67, (java.lang.Integer) (-2), (int) 'a');
        java.lang.String str72 = locale67.toLanguageTag();
        java.util.Set<java.lang.String> strSet73 = locale67.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet74 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str75 = dateTimeField8.getAsText(2026, locale67);
        java.util.Locale locale78 = new java.util.Locale("");
        java.lang.String str79 = dateTimeField8.getAsText(113338L, locale78);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals(locale15.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str21, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str24, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-259200000L) + "'", long28 == (-259200000L));
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645515248004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=8,MILLISECOND=4,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "10:34:08 AM +27:00" + "'", str36, "10:34:08 AM +27:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "26666" + "'", str49, "26666");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals(locale67.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "und" + "'", str72, "und");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2026" + "'", str75, "2026");
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
    }

    @Test
    public void test8226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8226");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = localDate10.plusMonths(26768061);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, 26710730);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = property27.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withYear((int) (byte) 1);
        java.lang.String str38 = dateTimeFormatter30.print((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        boolean boolean48 = dateTimeZone39.equals((java.lang.Object) dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime29.toDateTime(dateTimeZone46);
        long long52 = dateTimeZone46.nextTransition(1600012620000L);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone46);
        org.joda.time.DateTime dateTime54 = localDate13.toDateTimeAtMidnight(dateTimeZone46);
        boolean boolean55 = dateTimeZone46.isFixed();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str38, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1600012620000L + "'", long52 == 1600012620000L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test8227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8227");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate19.centuryOfEra();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusDays(4);
        org.joda.time.DateTime dateTime42 = dateTime40.minusYears(26666877);
        org.joda.time.DateTime.Property property43 = dateTime42.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = dateTime42.plusYears(1970);
        org.joda.time.DateTime dateTime46 = dateTime42.withLaterOffsetAtOverlap();
        int int47 = dateTime42.getEra();
        org.joda.time.DateTime.Property property48 = dateTime42.yearOfEra();
        org.joda.time.DateTime dateTime50 = dateTime42.withMinuteOfHour(30);
        org.joda.time.DateTime dateTime52 = dateTime42.plusMinutes(519);
        int int53 = property32.getDifference((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDate localDate54 = property32.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 266668 + "'", int53 == 266668);
        org.junit.Assert.assertNotNull(localDate54);
    }

    @Test
    public void test8228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8228");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        boolean boolean3 = mutableDateTime0.isAfterNow();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime9.minusSeconds(10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        boolean boolean22 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate25.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate29 = localDate25.plusWeeks(1);
        boolean boolean30 = dateTime12.equals((java.lang.Object) 1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Calendar calendar35 = mutableDateTime31.toCalendar(locale34);
        boolean boolean36 = mutableDateTime31.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str38 = mutableDateTime31.toString(dateTimeFormatter37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate45 = localDate39.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate39.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate39.withPeriodAdded(readablePeriod47, (int) ' ');
        java.lang.String str50 = dateTimeFormatter37.print((org.joda.time.ReadablePartial) localDate49);
        boolean boolean51 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.Chronology chronology52 = dateTimeFormatter37.getChronology();
        java.lang.String str53 = dateTime12.toString(dateTimeFormatter37);
        org.joda.time.DateTime dateTime55 = dateTime12.withYearOfEra(8708530);
        long long56 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime12.plusDays(30663508);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime12);
        int int60 = dateTime12.getDayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645515248102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=8,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10:34:08 AM +27:00" + "'", str38, "10:34:08 AM +27:00");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str50, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(chronology52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "10:33:58 AM +27:00" + "'", str53, "10:33:58 AM +27:00");
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-62194235161898L) + "'", long56 == (-62194235161898L));
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test8229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8229");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = dateTimeFormatter0.parseLocalDateTime("DateTimeField[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[minuteOfHour]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test8230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8230");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        boolean boolean3 = dateTimeFormatter1.isParser();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale8 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str9 = locale5.getDisplayName(locale8);
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2022-02-22T07:25:26.985");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category4, locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter1.withLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.parse("0003-06-21T18:02:36.016Z", dateTimeFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:02:36.016Z\" is malformed at \"03-06-21T18:02:36.016Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale8.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English" + "'", str9, "English");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test8231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8231");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        boolean boolean23 = dateTime19.isAfter((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime19.plusMinutes(0);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        int int32 = localDate29.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate34 = localDate29.minus(readablePeriod33);
        int int35 = localDate29.getWeekOfWeekyear();
        int int36 = localDate29.getYearOfEra();
        org.joda.time.LocalDate.Property property37 = localDate29.centuryOfEra();
        org.joda.time.LocalDate localDate39 = property37.addWrapFieldToCopy(3);
        int int40 = localDate39.getDayOfYear();
        org.joda.time.DateTime dateTime41 = dateTime25.withFields((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfHour();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DurationField durationField53 = chronology49.minutes();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime41, chronology49);
        org.joda.time.DurationField durationField55 = chronology49.years();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53 + "'", int40 == 53);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test8232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8232");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        long long14 = dateTimeField11.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekOfWeekyear();
        boolean boolean27 = dateTimeFieldType17.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology23.getZone();
        org.joda.time.DurationField durationField31 = chronology23.centuries();
        java.util.Locale locale33 = new java.util.Locale("53");
        java.lang.String str34 = locale33.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology23, locale33);
        java.lang.String str36 = locale33.getDisplayScript();
        java.lang.String str37 = dateTimeField11.getAsText((-1), locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter1.withLocale(locale33);
        int int39 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter1.withOffsetParsed();
        java.lang.Integer int41 = dateTimeFormatter40.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.parse("0003-06-21T18:03:24.545Z", dateTimeFormatter40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:03:24.545Z\" is malformed at \"03-06-21T18:03:24.545Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals(locale33.toString(), "53");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1" + "'", str37, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(int41);
    }

    @Test
    public void test8233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8233");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        boolean boolean19 = dateTimeFormatter15.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.Chronology chronology21 = dateTimeFormatter20.getChronolgy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
    }

    @Test
    public void test8234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8234");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.lang.String str6 = dateTimeFormatter0.print((long) 999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter7.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(26895021);
        java.util.Locale locale11 = dateTimeFormatter10.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Thursday, January 1, 1970" + "'", str6, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
    }

    @Test
    public void test8235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8235");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = localDate7.getDayOfYear();
        org.joda.time.LocalDate.Property property21 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.roundCeilingCopy();
        org.joda.time.LocalDate.Property property24 = localDate23.centuryOfEra();
        org.joda.time.LocalDate localDate26 = localDate23.minusDays(26772062);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property34 = localDate27.yearOfEra();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate37 = property34.addWrapFieldToCopy(26690377);
        org.joda.time.LocalDate localDate38 = property34.getLocalDate();
        org.joda.time.LocalDate localDate39 = property34.roundCeilingCopy();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDate41.getFieldType(1);
        int int46 = localDate41.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        boolean boolean54 = localDate41.isSupported(durationFieldType51);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.Interval interval63 = localDate41.toInterval(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (short) 100, dateTimeZone61);
        long long68 = dateTimeZone61.convertLocalToUTC((long) 30464923, true, (long) 835);
        org.joda.time.Interval interval69 = localDate39.toInterval(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight70 = localDate26.toDateMidnight(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone74);
        java.util.TimeZone timeZone76 = dateTimeZone74.toTimeZone();
        boolean boolean77 = dateTimeZone74.isFixed();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(2222L, dateTimeZone74);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(28775279L, dateTimeZone74);
        org.joda.time.DateTime dateTime80 = dateMidnight70.toDateTime(dateTimeZone74);
        org.joda.time.DateTime.Property property81 = dateTime80.secondOfDay();
        org.joda.time.DateTime.Property property82 = dateTime80.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(interval63);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-5535077L) + "'", long68 == (-5535077L));
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test8236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8236");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withDefaultYear((-2022));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear(0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("53");
        int int12 = mutableDateTime11.getDayOfMonth();
        long long13 = mutableDateTime11.getMillis();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Calendar calendar18 = mutableDateTime14.toCalendar(locale17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        mutableDateTime14.setMillis(readableInstant23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.add(26666);
        org.joda.time.MutableDateTime mutableDateTime30 = property26.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime32 = property26.addWrapField(1);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.getMutableDateTime();
        boolean boolean35 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeField dateTimeField36 = mutableDateTime11.getRoundingField();
        java.lang.Object obj37 = mutableDateTime11.clone();
        int int40 = dateTimeFormatter7.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime11, "2022-02-22T07:27:08.550Z", 936);
        int int41 = mutableDateTime11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60494637600000L) + "'", long13 == (-60494637600000L));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645515248336,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=336,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(dateTimeField36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "0053-01-01T00:00:00.000+10:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "0053-01-01T00:00:00.000+10:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "0053-01-01T00:00:00.000+10:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-937) + "'", int40 == (-937));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test8237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8237");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone2);
        mutableDateTime0.setZoneRetainFields(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str9 = dateTimeFieldType8.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int11 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology19);
        java.lang.String str25 = dateTimeField23.getAsShortText((long) 17);
        mutableDateTime0.setRounding(dateTimeField23);
        boolean boolean27 = mutableDateTime0.isEqualNow();
        int int28 = mutableDateTime0.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        mutableDateTime29.setMillis(readableInstant38);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime29.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundFloor();
        int int43 = property41.get();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate46.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate50 = localDate46.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        mutableDateTime51.add(durationFieldType55, (-1));
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime51.weekOfWeekyear();
        org.joda.time.DateTime dateTime59 = localDate50.toDateTime((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField68.getType();
        mutableDateTime51.setRounding(dateTimeField68);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime51.secondOfMinute();
        long long72 = property41.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.weekyear();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime0.setMinuteOfDay(25);
        int int77 = mutableDateTime0.getWeekOfWeekyear();
        int int78 = mutableDateTime0.getSecondOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T17:34:08.352+10:00" + "'", str1, "2022-02-22T17:34:08.352+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "year" + "'", str9, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50400 + "'", int28 == 50400);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645515248352,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=352,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 63248 + "'", int43 == 63248);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 113648L + "'", long72 == 113648L);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 53 + "'", int77 == 53);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 50400 + "'", int78 == 50400);
    }

    @Test
    public void test8238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8238");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.property(dateTimeFieldType21);
        java.lang.String str23 = dateTimeFieldType21.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType24.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology30);
        mutableDateTime36.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology50);
        mutableDateTime36.setChronology(chronology50);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(chronology50);
        org.joda.time.DurationField durationField57 = chronology50.millis();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = chronology50.add(readablePeriod58, (long) 30461931, 46);
        org.joda.time.DurationField durationField62 = chronology50.years();
        boolean boolean63 = dateTimeFieldType21.isSupported(chronology50);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology50.add(readablePeriod64, 70125687792000035L, 26718940);
        org.joda.time.DateTimeField dateTimeField68 = chronology50.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 34 + "'", int15 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:34:08.389+10:00" + "'", str17, "2022-02-22T17:34:08.389+10:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hourOfHalfday" + "'", str23, "hourOfHalfday");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "year" + "'", str40, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 30461931L + "'", long61 == 30461931L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 70125687792000035L + "'", long67 == 70125687792000035L);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test8239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8239");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.roundHalfEven();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test8240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8240");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter0.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter0.getParser();
        java.lang.Integer int6 = dateTimeFormatter0.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test8241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8241");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        org.joda.time.tz.NameProvider nameProvider4 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str8 = nameProvider4.getShortName(locale5, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.util.Locale locale12 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale16 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str17 = locale16.getDisplayVariant();
        java.lang.String str18 = locale12.getDisplayCountry(locale16);
        java.lang.String str19 = locale12.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.lang.String str21 = locale20.getDisplayCountry();
        java.lang.String str22 = locale12.getDisplayCountry(locale20);
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.util.Locale.setDefault(locale26);
        java.lang.String str28 = locale12.getDisplayScript(locale26);
        java.lang.String str31 = nameProvider4.getShortName(locale12, "2022-02-22T07:24:38.645Z", "0003-06-21T17:56:46.777Z");
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        java.lang.String str39 = nameProvider4.getName(locale35, "2022-02-22T07:24:42.756Z", "2095-02-25");
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Calendar calendar44 = mutableDateTime40.toCalendar(locale43);
        boolean boolean45 = mutableDateTime40.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str47 = mutableDateTime40.toString(dateTimeFormatter46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        boolean boolean50 = dateTimeZone48.equals((java.lang.Object) locale49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter46.withLocale(locale49);
        java.lang.String str54 = nameProvider4.getShortName(locale49, "2022-02-22T07:24:32.073Z", "2022-02-22T07:24:47.762Z");
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        mutableDateTime55.add(durationFieldType59, (-1));
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime55.weekOfWeekyear();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        int int64 = property62.getMaximumTextLength(locale63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime72 = dateTime70.plusMonths((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime70.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime75.add(readableDuration76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType78.getDurationType();
        mutableDateTime75.add(durationFieldType79, (-1));
        org.joda.time.DateTime dateTime83 = dateTime70.withFieldAdded(durationFieldType79, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.DateTime dateTime86 = dateTime70.withDurationAdded(readableDuration84, 1);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale89 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str90 = dateTimeZone87.getName(0L, locale89);
        java.util.Calendar calendar91 = dateTime86.toCalendar(locale89);
        java.lang.String str92 = locale63.getDisplayLanguage(locale89);
        java.lang.String str93 = locale89.toLanguageTag();
        java.lang.String str96 = nameProvider4.getName(locale89, "2022-02-22T07:24:55.865Z", "2022-02-22T07:24:43.422Z");
        java.util.Locale.Builder builder97 = builder2.setLocale(locale89);
        java.util.Locale.Builder builder98 = builder97.clear();
        java.util.Locale.Builder builder99 = builder98.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(nameProvider4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals(locale12.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str18, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str19, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str21, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str22, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645515248487,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=487,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645515248487,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=487,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "5:34:08 PM +10:00" + "'", str47, "5:34:08 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+10:00" + "'", str90, "+10:00");
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=-62194235151513,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=487,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "anglais" + "'", str92, "anglais");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "fr-CA" + "'", str93, "fr-CA");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test8242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8242");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readablePeriod34);
        org.joda.time.DateTime.Property property36 = dateTime33.secondOfDay();
        org.joda.time.DateTime dateTime37 = property36.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime43.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology47 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime56.plus((-48469999L));
        org.joda.time.DateTime dateTime60 = dateTime56.plusSeconds(2);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate64 = localDate61.withField(dateTimeFieldType62, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTime(readableInstant65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = localDate64.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) dateTime56, dateTimeZone73);
        org.joda.time.MutableDateTime mutableDateTime77 = org.joda.time.MutableDateTime.now(dateTimeZone73);
        java.lang.String str78 = dateTimeZone73.toString();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        boolean boolean82 = dateTimeZone80.equals((java.lang.Object) locale81);
        java.lang.String str83 = dateTimeZone73.getName((long) 26667, locale81);
        org.joda.time.Chronology chronology84 = chronology47.withZone(dateTimeZone73);
        java.util.TimeZone timeZone85 = dateTimeZone73.toTimeZone();
        org.joda.time.DateTime dateTime86 = dateTime37.toDateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime88 = dateTime37.withMillis((long) 507);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.DateTime dateTime91 = dateTime88.withPeriodAdded(readablePeriod89, 26881862);
        org.joda.time.DateTime dateTime93 = dateTime88.minusMonths(26839);
        int int94 = dateTime93.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+10:00" + "'", str83, "+10:00");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-267) + "'", int94 == (-267));
    }

    @Test
    public void test8243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8243");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        java.lang.String str11 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        int int13 = dateTimeParser12.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser12);
        int int15 = dateTimePrinter1.estimatePrintedLength();
        int int16 = dateTimePrinter1.estimatePrintedLength();
        int int17 = dateTimePrinter1.estimatePrintedLength();
        int int18 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter20.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter23.withOffsetParsed();
        org.joda.time.Chronology chronology25 = dateTimeFormatter23.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter23.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser26);
        java.io.Writer writer28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((-1L), dateTimeZone30);
        org.joda.time.LocalTime localTime33 = localTime31.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property34 = localTime31.millisOfDay();
        int int35 = localTime31.getHourOfDay();
        org.joda.time.LocalTime localTime37 = localTime31.minusMillis(2021);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = new java.util.Locale("7:24:59 AM +00:00", "fr");
        java.util.Locale.setDefault(category38, locale41);
        java.util.Locale locale43 = java.util.Locale.getDefault(category38);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category38, locale44);
        java.util.Locale locale46 = java.util.Locale.getDefault(category38);
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter1.printTo(writer28, (org.joda.time.ReadablePartial) localTime31, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str11, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateTimeParser22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeParser26);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale41.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet47);
    }

    @Test
    public void test8244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8244");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.parse("2022-02-22T07:32:19.850Z", dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:32:19.850Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
    }

    @Test
    public void test8245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8245");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate29 = localDate27.minusDays(7);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((-1L), dateTimeZone31);
        org.joda.time.LocalTime localTime34 = localTime32.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property35 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime36 = property35.roundFloorCopy();
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int39 = dateTimeFormatter38.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = localTime36.toDateTimeToday(dateTimeZone40);
        org.joda.time.LocalTime.Property property45 = localTime36.secondOfMinute();
        org.joda.time.LocalTime localTime46 = property45.roundFloorCopy();
        org.joda.time.LocalTime localTime48 = localTime46.minusHours(479);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = localDate27.compareTo((org.joda.time.ReadablePartial) localTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
    }

    @Test
    public void test8246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8246");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = mutableDateTime15.toCalendar(locale37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime15.monthOfYear();
        java.lang.String str40 = mutableDateTime15.toString();
        java.lang.Object obj41 = mutableDateTime15.clone();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515248635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=635,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62131076751365,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=635,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0001-02-22T17:34:08.635+10:00" + "'", str40, "0001-02-22T17:34:08.635+10:00");
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "0001-02-22T17:34:08.635+10:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "0001-02-22T17:34:08.635+10:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "0001-02-22T17:34:08.635+10:00");
    }

    @Test
    public void test8247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8247");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property55 = dateTime53.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime57 = property55.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField58 = property55.getField();
        org.joda.time.DateTime dateTime60 = property55.setCopy(26665274);
        org.joda.time.DateTime dateTime61 = property55.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime62 = property55.roundFloorCopy();
        org.joda.time.DateTime dateTime63 = property55.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property64 = dateTime63.secondOfDay();
        java.lang.String str65 = dateTimeFormatter43.print((org.joda.time.ReadableInstant) dateTime63);
        java.io.Writer writer66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate70 = localDate67.withField(dateTimeFieldType68, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDate70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusMonths((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.plus((-48469999L));
        org.joda.time.DateTime dateTime78 = dateTime74.plusSeconds(2);
        org.joda.time.DateTime.Property property79 = dateTime74.yearOfCentury();
        org.joda.time.DateTime dateTime80 = dateTime74.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter43.printTo(writer66, (org.joda.time.ReadableInstant) dateTime80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-22T04:06:18.662+10:00" + "'", str18, "0003-06-22T04:06:18.662+10:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645515248661,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=661,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235151339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=661,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645515248662,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=662,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "5:34:08 PM +10:00" + "'", str39, "5:34:08 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "5:34:08 PM +10:00" + "'", str44, "5:34:08 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "12:00:00 AM +10:00" + "'", str65, "12:00:00 AM +10:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test8248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8248");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readablePeriod8);
        int int10 = localDateTime7.getYearOfCentury();
        org.joda.time.Chronology chronology11 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusMillis(1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay(53);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekyear(26679);
        int int18 = localDateTime17.size();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusDays(26729167);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusMinutes((-53));
        java.lang.String str23 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Chronology chronology24 = dateTimeFormatter2.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Tuesday, February 18, 26679 12:52:59 AM " + "'", str23, "Tuesday, February 18, 26679 12:52:59 AM ");
        org.junit.Assert.assertNull(chronology24);
    }

    @Test
    public void test8249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8249");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(dateTimeZone3);
    }

    @Test
    public void test8250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8250");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMinutes(865);
        int int10 = localDateTime9.getYearOfEra();
        java.lang.String str12 = localDateTime9.toString("+27:00");
        int int13 = localDateTime9.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+27:00" + "'", str12, "+27:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test8251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8251");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        boolean boolean6 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter1.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        boolean boolean13 = mutableDateTime8.isBeforeNow();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.util.Calendar calendar21 = mutableDateTime17.toCalendar(locale20);
        boolean boolean22 = mutableDateTime17.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str24 = mutableDateTime17.toString(dateTimeFormatter23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime17.property(dateTimeFieldType25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        mutableDateTime27.setMillis(readableInstant36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime27.secondOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate42.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate46 = localDate42.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime47.weekOfWeekyear();
        org.joda.time.DateTime dateTime55 = localDate46.toDateTime((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField64.getType();
        mutableDateTime47.setRounding(dateTimeField64);
        mutableDateTime27.setMillis((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate71 = localDate68.withField(dateTimeFieldType69, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime27.property(dateTimeFieldType69);
        boolean boolean73 = mutableDateTime17.isSupported(dateTimeFieldType69);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime16.addDays(26672);
        int int79 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime16, "0003-06-21T17:56:51.078Z", 26668);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTimeFormatter1.getZone();
        boolean boolean81 = dateTimeFormatter1.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser82 = dateTimeFormatter1.getParser();
        boolean boolean83 = dateTimeFormatter1.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.parse("2022-12-27T00:00:00.019Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-12-27T00:00:00.019Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645515248777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=777,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645515248777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=777,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "5:34:08 PM +10:00" + "'", str24, "5:34:08 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645515248778,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=778,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-26669) + "'", int79 == (-26669));
        org.junit.Assert.assertNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeParser82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test8252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8252");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 24, chronology8);
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate12 = localDate9.withYear(2022);
        org.joda.time.LocalDate localDate14 = localDate9.minusDays(26744760);
        org.joda.time.LocalDate.Property property15 = localDate9.dayOfWeek();
        org.joda.time.LocalDate localDate17 = localDate9.plusMonths(0);
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        org.joda.time.LocalDate localDate20 = property18.roundCeilingCopy();
        int int21 = localDate20.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        boolean boolean27 = mutableDateTime22.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str29 = mutableDateTime22.toString(dateTimeFormatter28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime22.property(dateTimeFieldType30);
        java.lang.String str32 = dateTimeFieldType30.toString();
        boolean boolean33 = localDate20.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645515248826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=826,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5:34:08 PM +10:00" + "'", str29, "5:34:08 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "monthOfYear" + "'", str32, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test8253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8253");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        boolean boolean3 = dateTimeFormatter1.isParser();
        boolean boolean4 = dateTimeFormatter1.isParser();
        boolean boolean5 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.parse("0003-06-21T18:04:45.704Z", dateTimeFormatter6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:04:45.704Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test8254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8254");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        long long20 = chronology14.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime(chronology14);
        int int22 = dateTime6.getSecondOfMinute();
        org.joda.time.DateTime.Property property23 = dateTime6.minuteOfHour();
        org.joda.time.LocalDate localDate24 = dateTime6.toLocalDate();
        org.joda.time.DateTime.Property property25 = dateTime6.millisOfSecond();
        org.joda.time.DateTime.Property property26 = dateTime6.minuteOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.yearOfEra();
        org.joda.time.DateTime dateTime37 = dateTime6.withChronology(chronology33);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        long long41 = dateTimeZone38.nextTransition((-3600000000L));
        java.util.Locale locale46 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.util.Locale.setDefault(locale46);
        java.lang.String str48 = locale46.getCountry();
        java.lang.String str49 = dateTimeZone38.getShortName((long) 26696, locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:25:54.045Z", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:25:54.045Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-48469999L) + "'", long20 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3600000000L) + "'", long41 == (-3600000000L));
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str48, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test8255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8255");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime9.add(readablePeriod16, (int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime9.setChronology(chronology19);
        int int21 = mutableDateTime9.getYearOfEra();
        int int24 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "+00:00", 26676039);
        int int25 = mutableDateTime9.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Calendar calendar30 = mutableDateTime26.toCalendar(locale29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        mutableDateTime26.setMillis(readableInstant35);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime26.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        int int40 = property38.get();
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        int int44 = dateTimeField41.getDifference((long) (-1), 100L);
        java.util.Locale locale47 = new java.util.Locale("7:24:30 AM +00:00");
        java.lang.String str48 = dateTimeField41.getAsShortText(43, locale47);
        int int49 = mutableDateTime9.get(dateTimeField41);
        java.lang.String str50 = mutableDateTime9.toString();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate57 = localDate51.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property58 = localDate51.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate61 = localDate51.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.LocalDate localDate63 = localDate51.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        org.joda.time.DateTime dateTime73 = dateTime70.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology74 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.clockhourOfHalfday();
        java.util.Locale locale80 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean81 = locale80.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(2L, chronology74, locale80, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale85 = dateTimeParserBucket84.getLocale();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        dateTimeParserBucket84.setZone(dateTimeZone87);
        org.joda.time.DateTimeZone dateTimeZone89 = dateTimeParserBucket84.getZone();
        org.joda.time.DateTimeZone dateTimeZone90 = dateTimeParserBucket84.getZone();
        org.joda.time.Interval interval91 = localDate51.toInterval(dateTimeZone90);
        java.util.TimeZone timeZone92 = dateTimeZone90.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.forTimeZone(timeZone92);
        mutableDateTime9.setZone(dateTimeZone93);
        long long97 = dateTimeZone93.convertLocalToUTC((-1116011223360L), false);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-26676040) + "'", int24 == (-26676040));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515248904,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=904,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 63248 + "'", int40 == 63248);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "7:24:30 am +00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "43" + "'", str48, "43");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 63248 + "'", int49 == 63248);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:34:08.903+10:00" + "'", str50, "2022-02-22T17:34:08.903+10:00");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertEquals(locale80.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(timeZone92);
        org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1116011223360L) + "'", long97 == (-1116011223360L));
    }

    @Test
    public void test8256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8256");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        int int13 = dateTimeFormatter11.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter11.getPrinter();
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusMillis(24);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withDurationAdded(readableDuration20, 2000);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear(26676946);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withSecondOfMinute((int) (short) 10);
        int int27 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.yearOfEra();
        org.joda.time.DurationField durationField38 = chronology35.halfdays();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate46 = localDate40.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property47 = localDate40.yearOfEra();
        org.joda.time.LocalDate localDate48 = property47.roundFloorCopy();
        org.joda.time.LocalDate localDate49 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property50 = localDate49.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate52 = localDate49.minus(readablePeriod51);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime54.add(readableDuration55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getDurationType();
        mutableDateTime54.add(durationFieldType58, (-1));
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime54.weekOfWeekyear();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        int int63 = property61.getMaximumTextLength(locale62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMonths((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime69.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime74.add(readableDuration75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getDurationType();
        mutableDateTime74.add(durationFieldType78, (-1));
        org.joda.time.DateTime dateTime82 = dateTime69.withFieldAdded(durationFieldType78, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime85 = dateTime69.withDurationAdded(readableDuration83, 1);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = dateTimeZone86.getName(0L, locale88);
        java.util.Calendar calendar90 = dateTime85.toCalendar(locale88);
        java.lang.String str91 = locale62.getDisplayLanguage(locale88);
        java.lang.String str92 = locale88.toLanguageTag();
        boolean boolean93 = locale88.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket94 = new org.joda.time.format.DateTimeParserBucket((long) (-17715688), chronology53, locale88);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket((-62194235727419L), chronology35, locale88);
        java.lang.String str96 = locale88.getDisplayScript();
        java.lang.String str98 = locale88.getExtension('u');
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter14.printTo(stringBuffer15, (org.joda.time.ReadablePartial) localDateTime22, locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+10:00" + "'", str89, "+10:00");
        org.junit.Assert.assertNotNull(calendar90);
// flaky:         org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-62194235151067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=933,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "anglais" + "'", str91, "anglais");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fr-CA" + "'", str92, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test8257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8257");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property32 = localDate30.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        mutableDateTime33.setMillis(readableInstant42);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime33.secondOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate48.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate48.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutableDateTime53.add(readableDuration54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        mutableDateTime53.add(durationFieldType57, (-1));
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.DateTime dateTime61 = localDate52.toDateTime((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField70.getType();
        mutableDateTime53.setRounding(dateTimeField70);
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate77 = localDate74.withField(dateTimeFieldType75, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime33.property(dateTimeFieldType75);
        java.lang.String str79 = dateTimeFieldType75.toString();
        org.joda.time.LocalDate localDate81 = localDate30.withField(dateTimeFieldType75, 26712958);
        org.joda.time.LocalDate localDate83 = localDate81.minusMonths(27216155);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645515248954,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=8,MILLISECOND=954,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "year" + "'", str79, "year");
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
    }

    @Test
    public void test8258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8258");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime15.weekyear();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime15.dayOfYear();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.add(999);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515249013,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=13,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test8259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8259");
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        boolean boolean10 = mutableDateTime5.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str12 = mutableDateTime5.toString(dateTimeFormatter11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property20 = localDate13.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate13.withPeriodAdded(readablePeriod21, (int) ' ');
        java.lang.String str24 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.Chronology chronology25 = localDate23.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(724, 974000, 578, 26788469, 24, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26788469 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645515249035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=35,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "5:34:09 PM +10:00" + "'", str12, "5:34:09 PM +10:00");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test8260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8260");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate23 = localDate18.withYearOfEra(349);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate23.plus(readablePeriod24);
        org.joda.time.LocalDate.Property property26 = localDate25.year();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        mutableDateTime28.add(durationFieldType32, (-1));
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableDateTime28.add(readablePeriod35, (int) (short) 10);
        org.joda.time.Chronology chronology38 = null;
        mutableDateTime28.setChronology(chronology38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime46.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology50 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.millisOfDay();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 835, chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.hourOfDay();
        int int54 = mutableDateTime28.get(dateTimeField53);
        mutableDateTime28.addHours(26728552);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime28.dayOfWeek();
        int int58 = property26.getDifference((org.joda.time.ReadableInstant) mutableDateTime28);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515249047,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=47,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "5:34:09 PM +10:00" + "'", str7, "5:34:09 PM +10:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 17 + "'", int54 == 17);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-4722) + "'", int58 == (-4722));
    }

    @Test
    public void test8261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8261");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean27 = locale26.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(2L, chronology20, locale26, (java.lang.Integer) (-2), (int) 'a');
        int int33 = dateTimeParser9.parseInto(dateTimeParserBucket30, "", 4);
        java.util.Locale locale34 = dateTimeParserBucket30.getLocale();
        java.lang.Integer int35 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket30.getChronology();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5) + "'", int33 == (-5));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test8262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8262");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.halfdays();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 26793681, chronology7);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime.Property property22 = dateTime20.era();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime20.withChronology(chronology28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime33 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale35 = dateTimeFormatter34.getLocale();
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = locale37.getISO3Country();
        java.util.Locale locale40 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str41 = locale37.getDisplayName(locale40);
        java.util.Locale.setDefault(category36, locale37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter34.withLocale(locale37);
        org.joda.time.ReadableInstant readableInstant44 = null;
        java.lang.String str45 = dateTimeFormatter34.print(readableInstant44);
        java.lang.String str47 = dateTimeFormatter34.print((long) (-469));
        java.lang.String str49 = dateTimeFormatter34.print((-70742900507456109L));
        java.lang.String str50 = dateTime33.toString(dateTimeFormatter34);
        java.lang.Appendable appendable51 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter34.printTo(appendable51, (long) 26981590);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0003-06-22T04:06:19.124+10:00" + "'", str21, "0003-06-22T04:06:19.124+10:00");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals(locale40.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "February 22, 2022 5:34:09 PM +10:00" + "'", str45, "February 22, 2022 5:34:09 PM +10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "January 1, 1970 9:59:59 AM +10:00" + "'", str47, "January 1, 1970 9:59:59 AM +10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "September 22, -2239784 5:29:03 PM +10:00" + "'", str49, "September 22, -2239784 5:29:03 PM +10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "January 1, 1970 7:34:09 AM +00:00" + "'", str50, "January 1, 1970 7:34:09 AM +00:00");
    }

    @Test
    public void test8263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8263");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.roundHalfCeilingCopy();
        java.lang.String str16 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property17 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType20.getField(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(chronology23);
        org.joda.time.DateTime.Property property26 = dateTime19.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +10:00" + "'", str16, "Monday, January 1, 0001 12:00:00 AM +10:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test8264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8264");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        org.joda.time.LocalDate.Property property24 = localDate0.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate26 = localDate0.withWeekyear(28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int39 = dateTimeFormatter27.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime36, "1", 1);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate43.toDateTimeAtCurrentTime(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter27.withZone(dateTimeZone52);
        org.joda.time.Interval interval57 = localDate0.toInterval(dateTimeZone52);
        org.joda.time.LocalDate.Property property58 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate59 = property58.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime60 = localDate59.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime62 = dateTime60.plusDays(203908000);
        org.joda.time.DateTime dateTime64 = dateTime60.plusDays(26826791);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-2) + "'", int39 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test8265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8265");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeFormatter42.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withOffsetParsed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property55 = dateTime53.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime56 = property55.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime57 = property55.roundHalfCeilingCopy();
        java.lang.String str58 = dateTimeFormatter44.print((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = dateTimeFormatter44.getPrinter();
        java.lang.String str60 = localDate41.toString(dateTimeFormatter44);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate64 = localDate61.withField(dateTimeFieldType62, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime66.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(22);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate75 = localDate72.withField(dateTimeFieldType73, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDate75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusMonths((int) '4');
        org.joda.time.DateTime dateTime81 = dateTime79.plus((-48469999L));
        java.lang.String str82 = dateTime81.toString();
        int int83 = dateTime71.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime85 = dateTime71.minusMillis(26674);
        boolean boolean86 = localDate41.equals((java.lang.Object) dateTime85);
        org.joda.time.DateTime dateTime88 = dateTime85.plus((long) 26724);
        org.joda.time.DateTime.Property property89 = dateTime88.minuteOfHour();
        long long90 = property89.remainder();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +10:00" + "'", str58, "Monday, January 1, 0001 12:00:00 AM +10:00");
        org.junit.Assert.assertNotNull(dateTimePrinter59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str60, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0003-06-22T04:06:19.308+10:00" + "'", str82, "0003-06-22T04:06:19.308+10:00");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
// flaky:         org.junit.Assert.assertTrue("'" + long90 + "' != '" + 9357L + "'", long90 == 9357L);
    }

    @Test
    public void test8266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8266");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology11.days();
        org.joda.time.DurationField durationField20 = chronology11.millis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test8267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8267");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale9);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        java.util.Locale locale13 = dateTimeFormatter11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withOffsetParsed();
        java.util.Locale locale17 = new java.util.Locale("2022-02-22T07:24:51.835Z");
        java.lang.String str18 = locale17.toLanguageTag();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter11.withLocale(locale17);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter11.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter11.withOffsetParsed();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515249364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=364,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "5:34:09 PM +10:00" + "'", str7, "5:34:09 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals(locale17.toString(), "2022-02-22t07:24:51.835z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeParser20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test8268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8268");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.minusSeconds(10);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime14.withWeekyear((int) (byte) 1);
        boolean boolean18 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate21.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate25 = localDate21.plusWeeks(1);
        boolean boolean26 = dateTime8.equals((java.lang.Object) 1);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        boolean boolean32 = mutableDateTime27.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str34 = mutableDateTime27.toString(dateTimeFormatter33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate41 = localDate35.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property42 = localDate35.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate35.withPeriodAdded(readablePeriod43, (int) ' ');
        java.lang.String str46 = dateTimeFormatter33.print((org.joda.time.ReadablePartial) localDate45);
        boolean boolean47 = dateTimeFormatter33.isOffsetParsed();
        org.joda.time.Chronology chronology48 = dateTimeFormatter33.getChronology();
        java.lang.String str49 = dateTime8.toString(dateTimeFormatter33);
        org.joda.time.DateTime dateTime50 = dateTime8.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime50.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645515249419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=419,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "5:34:09 PM +10:00" + "'", str34, "5:34:09 PM +10:00");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str46, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(chronology48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "5:33:59 PM +10:00" + "'", str49, "5:33:59 PM +10:00");
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test8269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8269");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property32 = localDate30.year();
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test8270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8270");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        java.lang.String str11 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser12);
        int int15 = dateTimeParser12.estimateParsedLength();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfHalfday();
        java.util.Locale locale32 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean33 = locale32.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(2L, chronology26, locale32, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, 30);
        int int40 = dateTimeParserBucket36.getOffset();
        int int41 = dateTimeParserBucket36.getOffset();
        java.lang.Object obj42 = dateTimeParserBucket36.saveState();
        int int45 = dateTimeParser12.parseInto(dateTimeParserBucket36, "2022-02-22T07:32:35.077Z", 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str11, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test8271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8271");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        int int6 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 26673604);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.Chronology chronology13 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        mutableDateTime8.setChronology(chronology13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime8.secondOfDay();
        int int19 = dateTimeFormatter5.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime8, "2022-02-22T07:27:45.121Z", 26690377);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime8.setZone(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-26690378) + "'", int19 == (-26690378));
    }

    @Test
    public void test8272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8272");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        org.joda.time.DurationField durationField39 = dateTimeField37.getRangeDurationField();
        org.joda.time.DurationField durationField40 = dateTimeField37.getRangeDurationField();
        int int41 = dateTime5.get(dateTimeField37);
        org.joda.time.DateTime dateTime43 = dateTime5.minusMillis(26668);
        org.joda.time.DateTime.Property property44 = dateTime5.millisOfDay();
        org.joda.time.DurationField durationField45 = property44.getDurationField();
        org.joda.time.DateTime dateTime46 = property44.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-22T04:06:19.695+10:00" + "'", str18, "0003-06-22T04:06:19.695+10:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645515249694,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=694,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235150306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=694,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test8273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8273");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26700463);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate5.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate9 = localDate5.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = localDate9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField27.getType();
        mutableDateTime10.setRounding(dateTimeField27);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime10.secondOfMinute();
        mutableDateTime10.setTime((long) 26675582);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime10.era();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.Chronology chronology40 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfDay();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology40);
        mutableDateTime10.setChronology(chronology40);
        int int47 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "2022-02-22T07:26:28.156Z", 26779240);
        int int48 = mutableDateTime10.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-26779241) + "'", int47 == (-26779241));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test8274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8274");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = locale5.getVariant();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        long long18 = dateTimeField15.addWrapField((long) ' ', 0);
        long long20 = dateTimeField15.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDate21.getFieldType(1);
        int int26 = localDate21.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        boolean boolean34 = localDate21.isSupported(durationFieldType31);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        org.joda.time.LocalDate.Property property45 = localDate21.property(dateTimeFieldType44);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Calendar calendar50 = mutableDateTime46.toCalendar(locale49);
        boolean boolean51 = mutableDateTime46.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str53 = mutableDateTime46.toString(dateTimeFormatter52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        boolean boolean56 = dateTimeZone54.equals((java.lang.Object) locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter52.withLocale(locale55);
        java.lang.String str58 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDate21, locale55);
        java.lang.String str59 = locale5.getDisplayCountry(locale55);
        java.util.Locale.Builder builder60 = builder0.setLocale(locale55);
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder63 = builder61.setLocale(locale62);
        java.util.Locale locale64 = builder61.build();
        java.util.Locale locale65 = builder61.build();
        java.util.Locale.Builder builder66 = builder61.clear();
        java.util.Locale locale67 = builder61.build();
        java.util.Locale.Builder builder68 = builder60.setLocale(locale67);
        java.util.Locale.Builder builder69 = builder60.clearExtensions();
        java.util.Locale.Builder builder70 = builder69.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder72 = builder69.setVariant("1970-01-29");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1970-01-29 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 345600000L + "'", long20 == 345600000L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645515249762,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=762,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "5:34:09 PM +10:00" + "'", str53, "5:34:09 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "8" + "'", str58, "8");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test8275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8275");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = builder6.build();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        long long20 = dateTimeField17.addWrapField((long) ' ', 0);
        long long22 = dateTimeField17.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDate23.getFieldType(1);
        int int28 = localDate23.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime29.add(durationFieldType33, (-1));
        boolean boolean36 = localDate23.isSupported(durationFieldType33);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField45.getType();
        org.joda.time.LocalDate.Property property47 = localDate23.property(dateTimeFieldType46);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Calendar calendar52 = mutableDateTime48.toCalendar(locale51);
        boolean boolean53 = mutableDateTime48.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str55 = mutableDateTime48.toString(dateTimeFormatter54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        boolean boolean58 = dateTimeZone56.equals((java.lang.Object) locale57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter54.withLocale(locale57);
        java.lang.String str60 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDate23, locale57);
        java.lang.String str61 = locale57.getCountry();
        java.util.Locale.Builder builder62 = builder6.setLocale(locale57);
        java.util.Locale locale63 = builder62.build();
        java.lang.String str64 = locale63.getDisplayName();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 345600000L + "'", long22 == 345600000L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645515249827,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=9,MILLISECOND=827,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "5:34:09 PM +10:00" + "'", str55, "5:34:09 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "8" + "'", str60, "8");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English" + "'", str64, "English");
    }

    @Test
    public void test8276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8276");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded((long) 26666570, (int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime21.plus(readableDuration26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.minus(readablePeriod29);
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime27.minusMinutes((-19));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test8277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8277");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        java.lang.String str31 = dateTimeZone25.getNameKey((long) (byte) 1);
        long long33 = dateTimeZone25.previousTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(dateTimeZone25);
        boolean boolean37 = dateTimeZone25.isStandardOffset(55577000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test8278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8278");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        mutableDateTime77.setMillis((-62131077316268L));
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        mutableDateTime77.add(readablePeriod84);
        int int86 = mutableDateTime77.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime77.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime89 = property87.add(26815414);
        int int90 = mutableDateTime89.getYearOfCentury();
        mutableDateTime89.addHours(26774496);
        int int93 = mutableDateTime89.getHourOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 732 + "'", int86 == 732);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test8279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8279");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.String str11 = locale4.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.Chronology chronology16 = dateTimeFormatter0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeFormatter0.parseMillis("2022-12-22T00:59:35.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-12-22T00:59:35.000Z\" is malformed at \"22-12-22T00:59:35.000Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str10, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str11, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str14, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
    }

    @Test
    public void test8280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8280");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullTime();
        java.lang.Integer int2 = dateTimeFormatter1.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.parse("2030-03-22T07:26:04.557", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2030-03-22T07:26:04.557\" is malformed at \"30-03-22T07:26:04.557\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test8281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8281");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property4 = localDate1.era();
        org.joda.time.Interval interval5 = localDate1.toInterval();
        org.joda.time.LocalDate.Property property6 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate8 = localDate1.plusDays(59);
        org.joda.time.LocalDate.Property property9 = localDate1.weekyear();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology18);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfWeek();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime.Property property33 = dateTime31.era();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter35.withChronology(chronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        org.joda.time.DateTime dateTime47 = dateTime34.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate19.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = localDate11.toDateMidnight(dateTimeZone46);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 27188483, dateTimeZone46);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0003-06-22T04:06:20.065+10:00" + "'", str32, "0003-06-22T04:06:20.065+10:00");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
    }

    @Test
    public void test8282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8282");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(10);
        int int14 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plus(readablePeriod15);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.longDate();
        java.lang.Integer int19 = dateTimeFormatter18.getPivotYear();
        java.lang.String str20 = localDateTime13.toString(dateTimeFormatter18);
        boolean boolean21 = dateTimeFormatter18.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withDefaultYear(26827818);
        java.lang.StringBuffer stringBuffer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(stringBuffer24, 79499997L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "January 1, 2022" + "'", str20, "January 1, 2022");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test8283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8283");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(26667, 3, 27);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(20);
        java.lang.String str7 = localDate5.toString("23");
        int int8 = localDate5.getCenturyOfEra();
        org.joda.time.LocalDate localDate10 = localDate5.withYearOfEra(59777);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23" + "'", str7, "23");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 266 + "'", int8 == 266);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test8284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8284");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime33.withLaterOffsetAtOverlap();
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime.Property property36 = dateTime34.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test8285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8285");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.plus((-48469999L));
        org.joda.time.DateTime dateTime14 = dateTime10.plusSeconds(2);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate18.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) dateTime10, dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        java.lang.String str32 = dateTimeZone27.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        boolean boolean36 = dateTimeZone34.equals((java.lang.Object) locale35);
        java.lang.String str37 = dateTimeZone27.getName((long) 26667, locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter0.withZone(dateTimeZone27);
        java.lang.Appendable appendable39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime45.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime50.add(readableDuration51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        mutableDateTime50.add(durationFieldType54, (-1));
        org.joda.time.DateTime dateTime58 = dateTime45.withFieldAdded(durationFieldType54, (int) (byte) 1);
        org.joda.time.DateTime.Property property59 = dateTime58.minuteOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy(295);
        org.joda.time.DateTime dateTime63 = property59.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable39, (org.joda.time.ReadableInstant) dateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test8286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8286");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        org.joda.time.LocalDate.Property property24 = localDate0.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate26 = property24.addToCopy(26678886);
        org.joda.time.LocalDate localDate28 = localDate26.minusDays(52);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime34.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property39 = dateTime37.property(dateTimeFieldType38);
        org.joda.time.LocalDate localDate41 = localDate28.withField(dateTimeFieldType38, (-26726620));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale43 = dateTimeFormatter42.getLocale();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeFormatter42.getZone();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime45.add(readableDuration46);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Calendar calendar49 = mutableDateTime45.toCalendar(locale48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = dateTimeField58.getAsText((long) (short) 1, locale60);
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale60);
        java.lang.String str64 = locale48.getDisplayLanguage(locale60);
        java.lang.String str65 = locale60.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter42.withLocale(locale60);
        java.util.Locale locale67 = dateTimeFormatter66.getLocale();
        java.lang.String str68 = localDate41.toString(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645515250195,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=10,MILLISECOND=195,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertNotNull(strSet62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str68, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
    }

    @Test
    public void test8287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8287");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property12.add(60000L);
        org.joda.time.MutableDateTime mutableDateTime18 = property12.roundCeiling();
        mutableDateTime18.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.hourOfDay();
        boolean boolean45 = dateTime41.isAfter((-48469999L));
        org.joda.time.DateTime dateTime47 = dateTime41.minusYears(27268320);
        long long48 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableDateTime mutableDateTime49 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property21.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime52 = property21.addWrapField(8708530);
        mutableDateTime52.addSeconds(26803864);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime52.setMillisOfSecond(27071812);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27071812 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515250232,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=10,MILLISECOND=232,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 63776678630L + "'", long48 == 63776678630L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
    }

    @Test
    public void test8288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8288");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DurationField durationField13 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.era();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str20 = nameProvider16.getShortName(locale17, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = dateTimeField29.getAsText((long) (short) 1, locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str36 = nameProvider16.getShortName(locale31, "2022-02-22T07:24:30.010Z", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        java.util.Locale locale38 = new java.util.Locale("-1");
        java.lang.String str41 = nameProvider16.getShortName(locale38, "7:26:15 AM +00:00", "2022-02-22T07:24:49.601Z");
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = locale42.getISO3Country();
        java.util.Locale locale45 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        java.lang.String str46 = locale42.getDisplayName(locale45);
        java.lang.String str49 = nameProvider16.getName(locale42, "15:23:34.000", "7:24:51 AM +00:00");
        java.lang.String str50 = dateTimeField14.getAsShortText(0L, locale42);
        java.lang.String str51 = locale42.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals(locale38.toString(), "-1");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals(locale45.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "English" + "'", str46, "English");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AD" + "'", str50, "AD");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
    }

    @Test
    public void test8289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8289");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        java.util.Date date54 = localDate14.toDate();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate56 = localDate14.minus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate59 = localDate14.withPeriodAdded(readablePeriod57, (-100024));
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Interval interval61 = localDate14.toInterval(dateTimeZone60);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515250289,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=34,SECOND=10,MILLISECOND=289,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "5:34:10 PM +10:00" + "'", str46, "5:34:10 PM +10:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(interval61);
    }

    @Test
    public void test8290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8290");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate19.withCenturyOfEra(24);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.LocalDate localDate35 = property34.withMaximumValue();
        org.joda.time.LocalDate localDate36 = property34.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear(179);
        org.joda.time.LocalDate.Property property39 = localDate36.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test8291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8291");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.lang.String str6 = dateTimeFormatter0.print((long) 999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter7.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(26895021);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter7.withPivotYear(17733);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Thursday, January 1, 1970" + "'", str6, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test8292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8292");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.setCopy((int) ' ');
        org.joda.time.DateTime.Property property30 = dateTime29.year();
        long long31 = property30.remainder();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4520050481L + "'", long31 == 4520050481L);
    }

    @Test
    public void test8293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8293");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.property(dateTimeFieldType21);
        java.lang.String str23 = dateTimeFieldType21.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType24.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology30);
        mutableDateTime36.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology50);
        mutableDateTime36.setChronology(chronology50);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(chronology50);
        org.joda.time.DurationField durationField57 = chronology50.millis();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = chronology50.add(readablePeriod58, (long) 30461931, 46);
        org.joda.time.DurationField durationField62 = chronology50.years();
        boolean boolean63 = dateTimeFieldType21.isSupported(chronology50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale65 = dateTimeFormatter64.getLocale();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter64.withChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType21.getField(chronology71);
        java.lang.String str74 = chronology71.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 34 + "'", int15 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:34:10.493Z" + "'", str17, "2022-02-22T07:34:10.493Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hourOfHalfday" + "'", str23, "hourOfHalfday");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "year" + "'", str40, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 30461931L + "'", long61 == 30461931L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(locale65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ISOChronology[UTC]" + "'", str74, "ISOChronology[UTC]");
    }

    @Test
    public void test8294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8294");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        boolean boolean6 = mutableDateTime1.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str8 = mutableDateTime1.toString(dateTimeFormatter7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate15 = localDate9.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate9.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate9.withPeriodAdded(readablePeriod17, (int) ' ');
        java.lang.String str20 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.joda.time.DateTime.Property property24 = dateTime22.weekOfWeekyear();
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645515250531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=10,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7:34:10 AM +00:00" + "'", str8, "7:34:10 AM +00:00");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test8295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8295");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property10.roundHalfEvenCopy();
        org.joda.time.DurationField durationField16 = property10.getLeapDurationField();
        org.joda.time.DateTime dateTime17 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths(514275);
        java.lang.String str22 = dateTime20.toString("May 19, 26676319");
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10AM-42855 19, 26676319" + "'", str22, "10AM-42855 19, 26676319");
    }

    @Test
    public void test8296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8296");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        java.util.Locale locale17 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean18 = locale17.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(2L, chronology11, locale17, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale22 = dateTimeParserBucket21.getLocale();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        dateTimeParserBucket21.setZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket21.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket21.getZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1970, dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate30.withYear((int) (byte) 1);
        java.lang.String str37 = dateTimeFormatter29.print((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        boolean boolean47 = dateTimeZone38.equals((java.lang.Object) dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate36.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTime.Property property49 = dateTime48.weekOfWeekyear();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.DateTime dateTime59 = dateTime48.withChronology(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime48.toDateTime();
        org.joda.time.DateTime dateTime62 = dateTime60.plusDays(26668899);
        org.joda.time.DateTime.Property property63 = dateTime62.millisOfDay();
        int int64 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime62);
        int int66 = dateTimeZone27.getOffset(3570606170908717L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str37, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test8297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8297");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property7.roundFloorCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumTime();
        boolean boolean14 = dateTimeFormatter13.isParser();
        boolean boolean15 = dateTimeFormatter13.isOffsetParsed();
        java.lang.String str16 = localDate12.toString(dateTimeFormatter13);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter13.getPrinter();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime23.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property28 = dateTime26.property(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime30 = property28.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        java.lang.String str39 = dateTimeFormatter31.print((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        boolean boolean49 = dateTimeZone40.equals((java.lang.Object) dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate38.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime30.toDateTime(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readablePeriod52);
        org.joda.time.DateTime.Property property54 = dateTime51.secondOfDay();
        org.joda.time.DateTime dateTime55 = property54.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTime();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate60 = localDate57.withField(dateTimeFieldType58, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMonths((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime64.plus((-48469999L));
        org.joda.time.DateTime dateTime68 = dateTime64.plusSeconds(2);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate77 = localDate75.minusMonths((int) (short) -1);
        boolean boolean79 = localDate75.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology80 = localDate75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology82 = chronology80.withZone(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = localDate72.toDateTimeAtCurrentTime(dateTimeZone81);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((java.lang.Object) dateTime64, dateTimeZone81);
        org.joda.time.MutableDateTime mutableDateTime85 = org.joda.time.MutableDateTime.now(dateTimeZone81);
        java.lang.String str86 = dateTimeZone81.toString();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        boolean boolean90 = dateTimeZone88.equals((java.lang.Object) locale89);
        java.lang.String str91 = dateTimeZone81.getName((long) 26667, locale89);
        java.util.Calendar calendar92 = dateTime55.toCalendar(locale89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter13.withLocale(locale89);
        java.lang.Integer int94 = dateTimeFormatter93.getPivotYear();
        boolean boolean95 = dateTimeFormatter93.isOffsetParsed();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str16, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "UTC" + "'", str86, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=-62135596800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertNull(int94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test8298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8298");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 26795, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.parse("0003-06-21T17:56:57.446Z");
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter8.getPrinter();
        boolean boolean10 = dateTimeFormatter8.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withPivotYear(28);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone16.getOffset(readableInstant17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter12.withZone(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property23.addToCopy((long) 26665274);
        int int26 = localDateTime25.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks(182);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone30);
        java.util.TimeZone timeZone32 = dateTimeZone30.toTimeZone();
        boolean boolean33 = dateTimeZone30.isFixed();
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone30);
        long long36 = dateTimeZone16.getMillisKeepLocal(dateTimeZone30, (long) 26666);
        long long39 = dateTimeZone30.adjustOffset(841644804756344625L, false);
        java.util.TimeZone timeZone40 = dateTimeZone30.toTimeZone();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 7200000, dateTimeZone30);
        mutableDateTime5.setZone(dateTimeZone30);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone30);
        java.lang.String str45 = dateTimeZone30.getName((long) 27013245);
        org.joda.time.DateTime dateTime46 = localDateTime2.toDateTime(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime2.withMinuteOfHour(26805635);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26805635 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimePrinter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7200000 + "'", int26 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 26666L + "'", long36 == 26666L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 841644804756344625L + "'", long39 == 841644804756344625L);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test8299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8299");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = localDate2.plusYears(26);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        int int18 = dateTimeField15.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        java.lang.String str27 = dateTimeFormatter19.print((org.joda.time.ReadablePartial) localDate26);
        java.util.Locale locale32 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str33 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDate26, (int) (short) -1, locale32);
        java.lang.String str34 = localDate4.toString("\u30d5\u30e9\u30f3\u30b9\u8a9e", locale32);
        org.joda.time.Interval interval35 = localDate4.toInterval();
        org.joda.time.LocalDate.Property property36 = localDate4.weekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str27, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str34, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test8300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8300");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        boolean boolean35 = dateTimeZone26.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        long long49 = chronology43.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime51 = dateTime36.withChronology(chronology43);
        org.joda.time.DurationField durationField52 = chronology43.halfdays();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 26701949, chronology43);
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfEra();
        org.joda.time.LocalDate.Property property55 = localDate53.weekyear();
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645515250896,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=10,MILLISECOND=896,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-48469999L) + "'", long49 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test8301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8301");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        mutableDateTime0.setChronology(chronology10);
        mutableDateTime0.addMinutes(86399999);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        boolean boolean20 = mutableDateTime15.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str22 = mutableDateTime15.toString(dateTimeFormatter21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property30 = localDate23.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate23.withPeriodAdded(readablePeriod31, (int) ' ');
        java.lang.String str34 = dateTimeFormatter21.print((org.joda.time.ReadablePartial) localDate33);
        boolean boolean35 = dateTimeFormatter21.isOffsetParsed();
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.getDefault(category36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter21.withLocale(locale38);
        org.joda.time.Chronology chronology40 = dateTimeFormatter21.getChronology();
        java.lang.String str41 = mutableDateTime0.toString(dateTimeFormatter21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = dateTimeFormatter21.parseLocalDateTime("27341799");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"27341799\" is malformed at \"341799\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645515250968,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=10,MILLISECOND=968,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7:34:10 AM +00:00" + "'", str22, "7:34:10 AM +00:00");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str34, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(chronology40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7:33:10 AM +00:00" + "'", str41, "7:33:10 AM +00:00");
    }

    @Test
    public void test8302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8302");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime12.withHourOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(26700937);
        org.joda.time.DateTime dateTime39 = dateTime35.plus(274784715646018115L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test8303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8303");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded(readableDuration23, 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.DateTime dateTime29 = dateTime25.withFieldAdded(durationFieldType27, 182);
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.DateTime dateTime31 = property30.roundCeilingCopy();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(4);
        org.joda.time.DateTime dateTime41 = dateTime39.minusYears(26666877);
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        org.joda.time.DateTime dateTime44 = dateTime41.plusYears(1970);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        int int60 = dateTime59.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime();
        java.lang.String str62 = mutableDateTime61.toString();
        boolean boolean63 = dateTime59.isEqual((org.joda.time.ReadableInstant) mutableDateTime61);
        mutableDateTime61.setDayOfWeek((int) (byte) 1);
        boolean boolean66 = dateTime41.isAfter((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property70 = localDate67.era();
        org.joda.time.DateTime dateTime71 = localDate67.toDateTimeAtMidnight();
        boolean boolean72 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = dateTime41.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.DateTime dateTime77 = dateTime41.withPeriodAdded(readablePeriod75, 0);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime80 = dateTime41.withPeriodAdded(readablePeriod78, 8978966);
        int int81 = property30.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 34 + "'", int60 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T07:34:11.117Z" + "'", str62, "2022-02-22T07:34:11.117Z");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test8304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8304");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.LocalDate.Property property4 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy(26696);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime15 = dateTime12.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        java.lang.String str28 = dateTimeFormatter20.print((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        boolean boolean38 = dateTimeZone29.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime19.toDateTime(dateTimeZone36);
        long long42 = dateTimeZone36.nextTransition(1600012620000L);
        boolean boolean44 = dateTimeZone36.isStandardOffset(3600052L);
        org.joda.time.DateTime dateTime45 = localDate6.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str28, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1600012620000L + "'", long42 == 1600012620000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test8305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8305");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate10.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone19.getMillisKeepLocal(dateTimeZone22, (long) 2);
        boolean boolean26 = dateTimeZone19.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime2.setZoneRetainFields(dateTimeZone19);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 27, dateTimeZone19);
        org.joda.time.LocalDate localDate30 = localDate28.withYearOfCentury(23);
        org.joda.time.LocalDate.Property property31 = localDate28.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeFormatter32.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime40.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.DateTime dateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime47 = property45.roundHalfCeilingCopy();
        java.lang.String str48 = dateTimeFormatter34.print((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter34.getPrinter();
        int int50 = dateTimePrinter49.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = dateTimeFormatter51.getPrinter();
        org.joda.time.Chronology chronology53 = dateTimeFormatter51.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter51.withDefaultYear((int) (byte) 10);
        java.util.Locale locale56 = dateTimeFormatter51.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser57 = dateTimeFormatter51.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser57);
        int int59 = dateTimeFormatter58.getDefaultYear();
        java.lang.String str60 = localDate28.toString(dateTimeFormatter58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.parse("2022-02-22T07:27:52.274Z", dateTimeFormatter58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:52.274Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645515251258,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=11,MILLISECOND=258,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +00:00" + "'", str48, "Monday, January 1, 0001 12:00:00 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimePrinter52);
        org.junit.Assert.assertNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(dateTimeParser57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2000 + "'", int59 == 2000);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str60, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
    }

    @Test
    public void test8306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8306");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale33 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = locale37.getDisplayVariant();
        java.lang.String str39 = locale33.getDisplayCountry(locale37);
        java.lang.String str40 = locale33.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.lang.String str42 = locale41.getDisplayCountry();
        java.lang.String str43 = locale33.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter29.withLocale(locale33);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone46);
        int int50 = dateTimeFormatter44.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime47, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime52.add(readableDuration53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        mutableDateTime52.add(durationFieldType56, (-1));
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableDateTime52.add(readablePeriod59, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime52.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime63.toMutableDateTimeISO();
        mutableDateTime64.setTime((long) 26666335);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        mutableDateTime64.setZoneRetainFields(dateTimeZone68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) 2419226666L, dateTimeZone68);
        mutableDateTime47.setZoneRetainFields(dateTimeZone68);
        boolean boolean72 = dateTimeZone68.isFixed();
        mutableDateTime28.setZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime75.add(readableDuration76);
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.util.Calendar calendar79 = mutableDateTime75.toCalendar(locale78);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate83 = localDate80.withField(dateTimeFieldType81, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = localDate83.toDateTime(readableInstant84);
        mutableDateTime75.setMillis(readableInstant84);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime75.secondOfDay();
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableDateTime75.add(readableDuration88);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        mutableDateTime75.add(readablePeriod90, 23);
        int int93 = dateTimeZone68.getOffset((org.joda.time.ReadableInstant) mutableDateTime75);
        mutableDateTime75.add(50425L);
        boolean boolean96 = mutableDateTime75.isAfterNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals(locale33.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str39, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str40, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str43, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-51) + "'", int50 == (-51));
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1645515251282,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=11,MILLISECOND=282,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test8307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8307");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        java.util.Locale locale6 = dateTimeFormatter4.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        boolean boolean8 = dateTimeFormatter4.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test8308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8308");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        boolean boolean51 = dateTimeFieldType41.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime20.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime55 = dateTime20.minusMinutes(5);
        int int56 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter0.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate65 = localDate59.withYear((int) (byte) 1);
        java.lang.String str66 = dateTimeFormatter58.print((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime();
        int int70 = dateTimeFormatter58.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime67, "1", 1);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate74 = localDate71.withField(dateTimeFieldType72, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDate74.toDateTime(readableInstant75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = localDate74.toDateTimeAtCurrentTime(dateTimeZone83);
        boolean boolean86 = dateTimeZone83.isFixed();
        mutableDateTime67.setZone(dateTimeZone83);
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate(dateTimeZone83);
        org.joda.time.DateTime dateTime89 = localDate88.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property90 = localDate88.monthOfYear();
        java.lang.String str91 = dateTimeFormatter57.print((org.joda.time.ReadablePartial) localDate88);
        org.joda.time.LocalDate localDate93 = localDate88.minusWeeks(26827131);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = localDate88.toString("7:26:21 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97200000 + "'", int56 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str66, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-2) + "'", int70 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str91, "\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(localDate93);
    }

    @Test
    public void test8309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8309");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26700463);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(26701949);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter4.getPrinter();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.plus((-48469999L));
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds(2);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate21.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateTime13, dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfMonth();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime41.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property46 = dateTime44.property(dateTimeFieldType45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime52.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime57.add(readableDuration58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getDurationType();
        mutableDateTime57.add(durationFieldType61, (-1));
        org.joda.time.DateTime dateTime65 = dateTime52.withFieldAdded(durationFieldType61, (int) (byte) 1);
        int int66 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean68 = dateTime52.isBefore((long) 2000);
        boolean boolean69 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate73 = localDate70.withField(dateTimeFieldType71, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTime(readableInstant74);
        org.joda.time.Chronology chronology76 = dateTime75.getChronology();
        org.joda.time.DateTime dateTime78 = dateTime75.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property80 = dateTime78.property(dateTimeFieldType79);
        org.joda.time.DateTime dateTime82 = property80.setCopy(26665274);
        org.joda.time.DateTime dateTime84 = property80.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime85 = dateTime84.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.DateTime dateTime87 = dateTime84.minus(readableDuration86);
        org.joda.time.DateTime dateTime89 = dateTime87.plus(4346713034L);
        int int90 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) dateTime87);
        java.lang.String str91 = dateTimeFormatter4.print((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        mutableDateTime34.add(readablePeriod92);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "7:34:11 AM +00:00" + "'", str91, "7:34:11 AM +00:00");
    }

    @Test
    public void test8310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8310");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.plus((-48469999L));
        org.joda.time.DateTime dateTime23 = dateTime19.plusSeconds(2);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        java.lang.String str41 = dateTimeZone36.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        boolean boolean45 = dateTimeZone43.equals((java.lang.Object) locale44);
        java.lang.String str46 = dateTimeZone36.getName((long) 26667, locale44);
        org.joda.time.Chronology chronology47 = chronology10.withZone(dateTimeZone36);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(113156L, chronology47);
        org.joda.time.LocalDate.Property property49 = localDate48.weekyear();
        int int50 = property49.getMinimumValueOverall();
        org.joda.time.LocalDate localDate51 = property49.getLocalDate();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDate localDate54 = localDate51.withPeriodAdded(readablePeriod52, (-26));
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate62 = localDate59.withField(dateTimeFieldType60, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = dateTime64.getChronology();
        org.joda.time.DateTime dateTime67 = dateTime64.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology68 = dateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.clockhourOfHalfday();
        java.util.Locale locale74 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean75 = locale74.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(2L, chronology68, locale74, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale79 = dateTimeParserBucket78.getLocale();
        long long82 = dateTimeParserBucket78.computeMillis(false, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        dateTimeParserBucket78.setOffset((java.lang.Integer) 52);
        int int85 = dateTimeParserBucket78.getOffset();
        org.joda.time.Chronology chronology86 = dateTimeParserBucket78.getChronology();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) 912, chronology86);
        org.joda.time.DurationField durationField88 = chronology86.seconds();
        java.util.Locale locale90 = new java.util.Locale("-0001-02-26T07:24:29.559Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) 26741967, chronology86, locale90);
        java.lang.String str92 = localDate54.toString("27094", locale90);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-292275054) + "'", int50 == (-292275054));
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals(locale74.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 2L + "'", long82 == 2L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertEquals(locale90.toString(), "-0001-02-26t07:24:29.559z");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "27094" + "'", str92, "27094");
    }

    @Test
    public void test8311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8311");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        org.joda.time.ReadableInstant readableInstant3 = null;
        java.lang.String str4 = dateTimeFormatter0.print(readableInstant3);
        boolean boolean5 = dateTimeFormatter0.isPrinter();
        int int6 = dateTimeFormatter0.getDefaultYear();
        boolean boolean7 = dateTimeFormatter0.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tuesday, February 22, 2022" + "'", str4, "Tuesday, February 22, 2022");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test8312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8312");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.plus(readablePeriod27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.plus((long) 182);
        int int38 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime37.minusHours(26676115);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate48 = localDate42.withYear((int) (byte) 1);
        java.lang.String str49 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int53 = dateTimeFormatter41.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime50, "1", 1);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate57.toDateTimeAtCurrentTime(dateTimeZone66);
        boolean boolean69 = dateTimeZone66.isFixed();
        mutableDateTime50.setZone(dateTimeZone66);
        long long72 = dateTimeZone66.convertUTCToLocal((long) 22);
        org.joda.time.DateTime dateTime73 = dateTime40.withZoneRetainFields(dateTimeZone66);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        long long85 = chronology79.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.Chronology chronology86 = chronology79.withUTC();
        org.joda.time.DateTimeField dateTimeField87 = chronology79.clockhourOfHalfday();
        org.joda.time.DateTime dateTime88 = dateTime40.withChronology(chronology79);
        org.joda.time.DurationField durationField89 = chronology79.hours();
        org.joda.time.DateTime dateTime90 = dateTime28.withChronology(chronology79);
        org.joda.time.DateTimeField dateTimeField91 = chronology79.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField92 = chronology79.year();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str49, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-2) + "'", int53 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 22L + "'", long72 == 22L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-48469999L) + "'", long85 == (-48469999L));
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test8313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8313");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = mutableDateTime15.toCalendar(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime46);
        int int53 = dateTime46.getEra();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekOfWeekyear();
        boolean boolean65 = dateTimeFieldType55.isSupported(chronology61);
        org.joda.time.DateTimeField dateTimeField66 = chronology61.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.DateTimeZone dateTimeZone68 = chronology61.getZone();
        org.joda.time.DurationField durationField69 = chronology61.centuries();
        org.joda.time.DateTimeField dateTimeField70 = chronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField71 = chronology61.era();
        org.joda.time.DateTimeField dateTimeField72 = chronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField73 = chronology61.year();
        org.joda.time.DurationField durationField74 = chronology61.weeks();
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField76 = chronology61.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField77 = chronology61.secondOfMinute();
        mutableDateTime54.setChronology(chronology61);
        mutableDateTime54.addWeeks(27799769);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515251870,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=11,MILLISECOND=870,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62131076748130,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=11,MILLISECOND=870,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test8314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8314");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter14.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType12.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        long long28 = chronology21.add(259260000L, (long) 295, (int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter29.withChronology(chronology37);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.plus((-48469999L));
        org.joda.time.DateTime dateTime53 = dateTime49.plusSeconds(2);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate57.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) dateTime49, dateTimeZone66);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = chronology76.weekOfWeekyear();
        boolean boolean80 = dateTimeFieldType70.isSupported(chronology76);
        org.joda.time.DateTimeField dateTimeField81 = chronology76.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime49.toMutableDateTime(chronology76);
        org.joda.time.DateTime dateTime84 = dateTime49.minusMinutes(5);
        int int85 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter29.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology87 = chronology21.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology88 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 259288615L + "'", long28 == 259288615L);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97200000 + "'", int85 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test8315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8315");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = dateTime5.getMinuteOfHour();
        org.joda.time.DateTime.Property property17 = dateTime5.hourOfDay();
        int int18 = dateTime5.getDayOfYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.halfdayOfDay();
        org.joda.time.DateTime dateTime31 = dateTime5.toDateTime(chronology26);
        org.joda.time.DateTime.Property property32 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTime.Property property33 = dateTime31.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515252011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:34:12 AM +00:00" + "'", str14, "7:34:12 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 34 + "'", int16 == 34);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test8316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8316");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        long long17 = chronology10.add((long) '4', (long) 5999999, (-444));
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 55377, chronology10);
        org.joda.time.DurationField durationField19 = chronology10.minutes();
        java.lang.String str20 = durationField19.getName();
        long long23 = durationField19.add((long) 86340, 26902849);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2663999504L) + "'", long17 == (-2663999504L));
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "minutes" + "'", str20, "minutes");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1614171026340L + "'", long23 == 1614171026340L);
    }

    @Test
    public void test8317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8317");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet2 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet2, charArray1);
        java.util.Spliterator<java.lang.Character> charSpliterator4 = charSet2.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream8 = languageRangeList6.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap9);
        boolean boolean11 = charSet2.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6);
        charSet2.clear();
        java.lang.Object[] objArray13 = charSet2.toArray();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Calendar calendar18 = mutableDateTime14.toCalendar(locale17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        mutableDateTime14.setMillis(readableInstant23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withYear((int) (byte) 1);
        java.lang.String str38 = dateTimeFormatter30.print((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        boolean boolean48 = dateTimeZone39.equals((java.lang.Object) dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtCurrentTime(dateTimeZone46);
        mutableDateTime29.setMillis((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        long long62 = chronology56.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(chronology56);
        org.joda.time.DateTime dateTime64 = dateTime49.withChronology(chronology56);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = dateTime49.toDateTime(chronology65);
        org.joda.time.DateTime dateTime68 = dateTime49.plusDays(26666335);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime49.toMutableDateTime();
        boolean boolean70 = charSet2.equals((java.lang.Object) mutableDateTime69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate77 = localDate71.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property78 = localDate71.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDate localDate81 = localDate71.withPeriodAdded(readablePeriod79, (int) ' ');
        org.joda.time.LocalDate.Property property82 = localDate71.dayOfWeek();
        org.joda.time.LocalDate localDate84 = property82.addToCopy(26666);
        java.lang.String str85 = localDate84.toString();
        org.joda.time.LocalDate.Property property86 = localDate84.weekyear();
        boolean boolean87 = charSet2.remove((java.lang.Object) localDate84);
        org.joda.time.LocalDate localDate89 = localDate84.withYear(30795054);
        int int90 = localDate89.getYear();
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSpliterator4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeStream8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645515252082,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=82,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str38, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-48469999L) + "'", long62 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2095-02-25" + "'", str85, "2095-02-25");
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 30795054 + "'", int90 == 30795054);
    }

    @Test
    public void test8318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8318");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 2000);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        mutableDateTime1.addHours(30903953);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate11 = localDate5.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property12 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate16 = property12.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale20 = dateTimeFormatter19.getLocale();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter19.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        java.lang.String str29 = dateTimeFieldType17.toString();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType17.getDurationType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType17.getDurationType();
        mutableDateTime1.add(durationFieldType31, 1439);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfYear" + "'", str29, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
    }

    @Test
    public void test8319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8319");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime7.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.weekOfWeekyear();
        mutableDateTime7.addDays(203908000);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.add(2226303);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515252182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:34:12 AM +00:00" + "'", str14, "7:34:12 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test8320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8320");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.util.Locale locale5 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter0.getParser();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withLocale(locale9);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter0.getPrinter();
        int int12 = dateTimePrinter11.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.Chronology chronology15 = dateTimeFormatter13.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withDefaultYear((int) (byte) 10);
        java.util.Locale locale18 = dateTimeFormatter13.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter13.getParser();
        int int20 = dateTimeParser19.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate28 = localDate22.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate22.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate22.withPeriodAdded(readablePeriod30, (int) ' ');
        org.joda.time.LocalDate localDate34 = localDate22.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate36 = localDate22.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology38 = dateTimeFormatter37.getChronolgy();
        java.lang.String str39 = localDate22.toString(dateTimeFormatter37);
        java.util.Locale locale40 = dateTimeFormatter37.getLocale();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter37.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeFormatter37.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser43);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "7:24:30 am +00:00_23:59:00.000_0003-06-21T17:56:38.696Z");
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "7:24:30 am +00:00_23:59:00.000_0003-06-21T17:56:38.696Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(dateTimeParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(chronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeParser43);
    }

    @Test
    public void test8321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8321");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.plusDays(86399999);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515252251,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=251,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:34:12 AM +00:00" + "'", str46, "7:34:12 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test8322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8322");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        mutableDateTime0.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfMonth();
        org.joda.time.DateTime dateTime10 = mutableDateTime0.toDateTime();
        mutableDateTime0.addMillis(59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        boolean boolean15 = dateTimeFormatter13.isParser();
        boolean boolean16 = dateTimeFormatter13.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withOffsetParsed();
        org.joda.time.Chronology chronology18 = dateTimeFormatter13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter13.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withDefaultYear(26803864);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter19.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime0.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test8323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8323");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property24 = dateTime19.secondOfMinute();
        org.joda.time.DateTime dateTime27 = dateTime19.withDurationAdded((long) 'a', (int) '4');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime33.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = property38.setCopy(26665274);
        org.joda.time.DateTime dateTime42 = property38.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        boolean boolean44 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfMonth();
        org.joda.time.DateTime dateTime46 = property45.getDateTime();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime54.plus((-48469999L));
        org.joda.time.DateTime dateTime58 = dateTime54.plusSeconds(2);
        org.joda.time.DateTime.Property property59 = dateTime54.yearOfCentury();
        org.joda.time.DateTime dateTime60 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime61 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime60.minusHours(56);
        org.joda.time.DateTime.Property property65 = dateTime60.monthOfYear();
        org.joda.time.DateTime.Property property66 = dateTime60.year();
        org.joda.time.DateTime dateTime67 = property66.withMaximumValue();
        boolean boolean68 = dateTime46.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime46.minus(readableDuration69);
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder71.clear();
        java.util.Locale.Builder builder73 = builder72.clear();
        java.util.Locale locale74 = builder73.build();
        java.lang.String str75 = locale74.getLanguage();
        boolean boolean76 = locale74.hasExtensions();
        java.util.Locale locale77 = locale74.stripExtensions();
        java.lang.String str78 = locale77.toLanguageTag();
        boolean boolean79 = dateTime46.equals((java.lang.Object) str78);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime46.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "und" + "'", str78, "und");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutableDateTime80);
    }

    @Test
    public void test8324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8324");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale29 = new java.util.Locale("2022-02-22T07:26:10.110Z");
        java.lang.String str30 = locale29.getISO3Country();
        java.lang.String str31 = dateTimeField26.getAsText(1672294059000L, locale29);
        java.util.Locale.setDefault(locale29);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals(locale29.toString(), "2022-02-22t07:26:10.110z");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AD" + "'", str31, "AD");
    }

    @Test
    public void test8325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8325");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int8 = localTime5.indexOf(dateTimeFieldType7);
        org.joda.time.LocalTime localTime10 = localTime5.plusMillis(20);
        org.joda.time.LocalTime.Property property11 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime13 = localTime5.withMillisOfDay(26700937);
        org.joda.time.LocalTime localTime15 = localTime5.plusHours(27040320);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = localTime15.toString("2022-02-22T07:28:27.677Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:26:10.110z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515252477,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=477,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test8326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8326");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded(readableDuration23, 2022);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis(26673922);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 30464925);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.millis();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate.Property property38 = localDate37.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.LocalDate localDate40 = property38.getLocalDate();
        org.joda.time.LocalDate localDate42 = property38.addToCopy(39);
        org.joda.time.LocalDate localDate43 = property38.withMaximumValue();
        int int44 = localDate43.size();
        int int45 = localDate43.getYearOfEra();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property49 = localDate46.era();
        org.joda.time.LocalDate localDate50 = property49.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate51 = property49.roundFloorCopy();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate55.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        long long69 = dateTimeZone64.getMillisKeepLocal(dateTimeZone67, (long) 2);
        boolean boolean71 = dateTimeZone64.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        org.joda.time.DateTime dateTime72 = localDate51.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.LocalDate.Property property73 = localDate51.year();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        java.lang.String str82 = dateTimeZone80.getID();
        org.joda.time.Interval interval83 = localDate51.toInterval(dateTimeZone80);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone80);
        boolean boolean85 = localDate43.equals((java.lang.Object) dateTime84);
        org.joda.time.DateTime dateTime86 = dateTime29.withFields((org.joda.time.ReadablePartial) localDate43);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 2L + "'", long69 == 2L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "UTC" + "'", str82, "UTC");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test8327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8327");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) property26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test8328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8328");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.Interval interval42 = localDate31.toInterval();
        org.joda.time.LocalDate localDate44 = localDate31.minusWeeks(26788659);
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        java.lang.String str46 = property45.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[monthOfYear]" + "'", str46, "Property[monthOfYear]");
    }

    @Test
    public void test8329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8329");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean27 = locale26.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(2L, chronology20, locale26, (java.lang.Integer) (-2), (int) 'a');
        int int33 = dateTimeParser9.parseInto(dateTimeParserBucket30, "", 4);
        java.util.Locale locale34 = dateTimeParserBucket30.getLocale();
        java.lang.Integer int35 = dateTimeParserBucket30.getOffsetInteger();
        long long38 = dateTimeParserBucket30.computeMillis(true, "millisOfDay");
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        mutableDateTime39.setMillis(readableInstant48);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime39.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property51.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime54 = property51.add(26666);
        org.joda.time.MutableDateTime mutableDateTime55 = property51.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime57 = property51.addWrapField(1);
        org.joda.time.MutableDateTime mutableDateTime58 = property51.roundHalfFloor();
        boolean boolean59 = dateTimeParserBucket30.restoreState((java.lang.Object) mutableDateTime58);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.era();
        boolean boolean63 = mutableDateTime61.isEqualNow();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.weekOfWeekyear();
        int int73 = mutableDateTime61.get(dateTimeField72);
        int int75 = dateTimeField72.getMaximumValue((long) 26675084);
        dateTimeParserBucket30.saveField(dateTimeField72, 26711083);
        int int78 = dateTimeParserBucket30.getOffset();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5) + "'", int33 == (-5));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515252641,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=641,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 53 + "'", int75 == 53);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test8330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8330");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 17);
        java.lang.String str18 = dateTimeField15.toString();
        long long20 = dateTimeField15.remainder((long) 5999998);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[year]" + "'", str18, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 5999998L + "'", long20 == 5999998L);
    }

    @Test
    public void test8331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8331");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(10);
        int int15 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plus(readablePeriod16);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longDate();
        java.lang.Integer int20 = dateTimeFormatter19.getPivotYear();
        java.lang.String str21 = localDateTime14.toString(dateTimeFormatter19);
        boolean boolean22 = dateTimeFormatter19.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter19.withDefaultYear(26827818);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter19.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.parse("0001-01-01T00:00:00.000Z", dateTimeFormatter25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0001-01-01T00:00:00.000Z\" is malformed at \"01-01-01T00:00:00.000Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(int20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1 janvier 2022" + "'", str21, "1 janvier 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test8332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8332");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        mutableDateTime0.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        long long23 = dateTimeField20.addWrapField((long) ' ', 0);
        long long25 = dateTimeField20.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDate26.getFieldType(1);
        int int31 = localDate26.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        mutableDateTime32.add(durationFieldType36, (-1));
        boolean boolean39 = localDate26.isSupported(durationFieldType36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField48.getType();
        org.joda.time.LocalDate.Property property50 = localDate26.property(dateTimeFieldType49);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Calendar calendar55 = mutableDateTime51.toCalendar(locale54);
        boolean boolean56 = mutableDateTime51.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str58 = mutableDateTime51.toString(dateTimeFormatter57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        boolean boolean61 = dateTimeZone59.equals((java.lang.Object) locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter57.withLocale(locale60);
        java.lang.String str63 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate26, locale60);
        org.joda.time.LocalDate localDate65 = localDate26.minusWeeks(0);
        java.util.Date date66 = localDate26.toDate();
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.fromDateFields(date66);
        org.joda.time.LocalDate localDate68 = org.joda.time.LocalDate.fromDateFields(date66);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.LocalDate localDate70 = localDate68.withFields(readablePartial69);
        int int71 = localDate68.getDayOfYear();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("DateTimeField[yearOfCentury]");
        java.lang.String str75 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDate68, 67072, locale74);
        int int76 = localDate68.size();
        org.joda.time.Chronology chronology77 = localDate68.getChronology();
        org.joda.time.LocalDate.Property property78 = localDate68.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 345600000L + "'", long25 == 345600000L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645515252747,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=747,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "07:34:12 +00:00" + "'", str58, "07:34:12 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "8" + "'", str63, "8");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 53 + "'", int71 == 53);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "67072" + "'", str75, "67072");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test8333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8333");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime3.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate6.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.withMaximumValue();
        int int16 = localDate15.getEra();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = property27.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withYear((int) (byte) 1);
        java.lang.String str38 = dateTimeFormatter30.print((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        boolean boolean48 = dateTimeZone39.equals((java.lang.Object) dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate37.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime29.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = localDate15.toDateTimeAtMidnight(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone46);
        long long54 = dateTimeZone46.convertUTCToLocal(1728000000L);
        mutableDateTime3.setZoneRetainFields(dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime3.add(readableDuration56, (-1036570594));
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = localDate59.getFieldType(1);
        int int64 = localDate59.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime65.add(readableDuration66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        mutableDateTime65.add(durationFieldType69, (-1));
        boolean boolean72 = localDate59.isSupported(durationFieldType69);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate75 = localDate73.minusMonths((int) (short) -1);
        boolean boolean77 = localDate73.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology78 = localDate73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology80 = chronology78.withZone(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField81 = chronology78.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = dateTimeField81.getType();
        org.joda.time.LocalDate.Property property83 = localDate59.property(dateTimeFieldType82);
        org.joda.time.LocalDate localDate85 = localDate59.withWeekyear(28);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str87 = dateTimeFieldType86.getName();
        org.joda.time.LocalDate.Property property88 = localDate59.property(dateTimeFieldType86);
        org.joda.time.LocalDate localDate90 = localDate59.withWeekyear(13);
        org.joda.time.Chronology chronology91 = localDate90.getChronology();
        mutableDateTime3.setChronology(chronology91);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.052" + "'", str2, "+00:00:00.052");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str38, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1728000000L + "'", long54 == 1728000000L);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "year" + "'", str87, "year");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    public void test8334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8334");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        int int5 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int8 = timeZone1.getOffset((long) 26679);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(1);
        int int14 = localDate9.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        mutableDateTime15.add(durationFieldType19, (-1));
        boolean boolean22 = localDate9.isSupported(durationFieldType19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDate9.getFieldTypes();
        java.lang.String str25 = localDate9.toString("7");
        org.joda.time.DateMidnight dateMidnight26 = localDate9.toDateMidnight();
        org.joda.time.LocalDate localDate28 = localDate9.minusMonths(99);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime42.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property47 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology54 = localDate49.getChronology();
        org.joda.time.Chronology chronology55 = localDate49.getChronology();
        long long59 = chronology55.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime48.toDateTime(chronology55);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(1L, chronology55, locale61, (java.lang.Integer) 718, 33);
        java.lang.String str66 = dateTimeZone32.getShortName(4260279330L, locale61);
        long long69 = dateTimeZone32.adjustOffset(0L, false);
        org.joda.time.Interval interval70 = localDate28.toInterval(dateTimeZone32);
        java.util.TimeZone timeZone71 = dateTimeZone32.toTimeZone();
        boolean boolean72 = timeZone1.hasSameRules(timeZone71);
        boolean boolean73 = timeZone1.observesDaylightTime();
        int int74 = timeZone1.getRawOffset();
        java.lang.String str75 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7" + "'", str25, "7");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 200L + "'", long59 == 200L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Heure de Greenwich" + "'", str75, "Heure de Greenwich");
    }

    @Test
    public void test8335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8335");
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        int int30 = dateTimeField27.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        java.lang.String str39 = dateTimeFormatter31.print((org.joda.time.ReadablePartial) localDate38);
        java.util.Locale locale44 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str45 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDate38, (int) (short) -1, locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDate38.getFieldType((int) (short) 1);
        int int48 = localDate38.getMonthOfYear();
        org.joda.time.LocalDate.Property property49 = localDate38.dayOfMonth();
        java.util.Locale locale51 = new java.util.Locale("53");
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = property49.getAsShortText(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 28862, chronology15, locale51, (java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(27766946, 26809, 27131, 26669663, 26980510, (-82697001), 27209579, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26669663 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals(locale51.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "22" + "'", str53, "22");
    }

    @Test
    public void test8336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8336");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        mutableDateTime21.setMillis(readableInstant30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime21.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property33.add((-2));
        org.joda.time.MutableDateTime mutableDateTime37 = property33.roundHalfEven();
        mutableDateTime37.setSecondOfDay(27);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime37.copy();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDate41.getFieldType(1);
        int int46 = localDate41.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        boolean boolean54 = localDate41.isSupported(durationFieldType51);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        mutableDateTime55.add(durationFieldType59, (-1));
        boolean boolean62 = localDate41.isSupported(durationFieldType59);
        mutableDateTime40.add(durationFieldType59, 1970);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime40.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime67 = property65.add(0L);
        boolean boolean68 = localDate18.equals((java.lang.Object) property65);
        org.joda.time.MutableDateTime mutableDateTime69 = property65.getMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutableDateTime69.add(readablePeriod70);
        java.util.Locale locale74 = new java.util.Locale("2022-02-22T07:25:13.265Z", "2022-02-22T07:24:47.689Z");
        java.util.Calendar calendar75 = mutableDateTime69.toCalendar(locale74);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515252949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:34:12 +00:00" + "'", str7, "07:34:12 +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645515252949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertEquals(locale74.toString(), "2022-02-22t07:25:13.265z_2022-02-22T07:24:47.689Z");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1645488028970,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=28,MILLISECOND=970,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test8337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8337");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Calendar calendar13 = mutableDateTime9.toCalendar(locale12);
        boolean boolean14 = mutableDateTime9.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str16 = mutableDateTime9.toString(dateTimeFormatter15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime9.property(dateTimeFieldType17);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Calendar calendar23 = mutableDateTime19.toCalendar(locale22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        mutableDateTime19.setMillis(readableInstant28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.secondOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate34.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        mutableDateTime39.add(durationFieldType43, (-1));
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime39.weekOfWeekyear();
        org.joda.time.DateTime dateTime47 = localDate38.toDateTime((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField56.getType();
        mutableDateTime39.setRounding(dateTimeField56);
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime19.property(dateTimeFieldType61);
        boolean boolean65 = mutableDateTime9.isSupported(dateTimeFieldType61);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime68 = mutableDateTime9.toDateTime();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime9.millisOfSecond();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515252988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=988,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645515252989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=989,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "07:34:12 +00:00" + "'", str16, "07:34:12 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515252989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=12,MILLISECOND=989,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test8338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8338");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.millisOfSecond();
        org.joda.time.LocalTime localTime2 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        int int15 = dateTimeField12.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        java.util.Locale locale29 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str30 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDate23, (int) (short) -1, locale29);
        java.lang.String str31 = dateTimeField12.getName();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.lang.String str34 = locale33.getDisplayCountry();
        java.lang.String str35 = dateTimeField12.getAsText((-1L), locale33);
        java.util.Locale locale39 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale43 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str44 = locale43.getDisplayVariant();
        java.lang.String str45 = locale39.getDisplayCountry(locale43);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = locale46.getDisplayCountry();
        java.lang.String str48 = locale43.getDisplayCountry(locale46);
        int int49 = dateTimeField12.getMaximumTextLength(locale46);
        java.util.Set<java.lang.String> strSet50 = locale46.getUnicodeLocaleAttributes();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.lang.String str62 = dateTimeField59.getAsText((long) (short) 1, locale61);
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale61);
        java.lang.String str65 = locale46.getDisplayVariant(locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = localTime2.toString("0003-06-21T17:57:55.997Z", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekOfWeekyear" + "'", str31, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str34, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertEquals(locale39.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str45, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str47, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str48, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
// flaky:         org.junit.Assert.assertEquals(locale61.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test8339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8339");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.String str11 = locale4.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone17);
        int int21 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime18, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.minuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime18.add(readablePeriod24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime18.secondOfMinute();
        mutableDateTime18.add((long) 26697661);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str10, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str11, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str13, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str14, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-51) + "'", int21 == (-51));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test8340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8340");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        long long13 = dateTimeField10.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology22.getZone();
        org.joda.time.DurationField durationField30 = chronology22.centuries();
        java.util.Locale locale32 = new java.util.Locale("53");
        java.lang.String str33 = locale32.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology22, locale32);
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = dateTimeField10.getAsText((-1), locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter0.withLocale(locale32);
        int int38 = dateTimeFormatter0.getDefaultYear();
        int int39 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.Chronology chronology41 = dateTimeFormatter40.getChronolgy();
        org.joda.time.Chronology chronology42 = dateTimeFormatter40.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals(locale32.toString(), "53");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(chronology41);
        org.junit.Assert.assertNull(chronology42);
    }

    @Test
    public void test8341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8341");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(4);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(26666877);
        org.joda.time.DateTime.Property property10 = dateTime9.weekOfWeekyear();
        int int11 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Calendar calendar17 = mutableDateTime13.toCalendar(locale16);
        boolean boolean18 = mutableDateTime13.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str20 = mutableDateTime13.toString(dateTimeFormatter19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime13.property(dateTimeFieldType21);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Calendar calendar27 = mutableDateTime23.toCalendar(locale26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        mutableDateTime23.setMillis(readableInstant32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime23.secondOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate38.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate42 = localDate38.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        mutableDateTime43.add(durationFieldType47, (-1));
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = localDate42.toDateTime((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = dateTimeField60.getType();
        mutableDateTime43.setRounding(dateTimeField60);
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime23.property(dateTimeFieldType65);
        boolean boolean69 = mutableDateTime13.isSupported(dateTimeFieldType65);
        boolean boolean70 = dateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.dayOfWeek();
        int int83 = dateTimeField81.getMinimumValue((long) 519);
        long long85 = dateTimeField81.roundHalfCeiling(31526179368000L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setRounding(dateTimeField81, 27189857);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 27189857");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 454 + "'", int11 == 454);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645515253193,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=193,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "07:34:13 +00:00" + "'", str20, "07:34:13 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645515253194,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=194,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 31526150400000L + "'", long85 == 31526150400000L);
    }

    @Test
    public void test8342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8342");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 26709138);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        mutableDateTime2.setMillis(readableInstant11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate25 = localDate19.withYear((int) (byte) 1);
        java.lang.String str26 = dateTimeFormatter18.print((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        boolean boolean36 = dateTimeZone27.equals((java.lang.Object) dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) dateTime37);
        java.util.Locale locale39 = null;
        java.util.Calendar calendar40 = mutableDateTime17.toCalendar(locale39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime17.monthOfYear();
        java.lang.String str42 = mutableDateTime17.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean44 = mutableDateTime17.isSupported(dateTimeFieldType43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property45 = localTime1.property(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645515253219,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=219,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str26, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-62131076746781,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=219,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0001-02-22T07:34:13.219Z" + "'", str42, "0001-02-22T07:34:13.219Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test8343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8343");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long17 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 2);
        boolean boolean19 = dateTimeZone12.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        boolean boolean20 = dateTimeZone12.isFixed();
        boolean boolean21 = dateTimeZone12.isFixed();
        java.lang.String str23 = dateTimeZone12.getShortName(27045093L);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        java.lang.String str34 = dateTimeFormatter26.print((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        int int38 = dateTimeFormatter26.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime35, "1", 1);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = localDate42.toDateTimeAtCurrentTime(dateTimeZone51);
        boolean boolean54 = dateTimeZone51.isFixed();
        mutableDateTime35.setZone(dateTimeZone51);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(113209L, dateTimeZone51);
        org.joda.time.DateTime dateTime59 = dateTime57.withYear(0);
        org.joda.time.DateTime dateTime61 = dateTime59.minus(70125687792000035L);
        boolean boolean62 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration64 = null;
        mutableDateTime63.add(readableDuration64);
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Calendar calendar67 = mutableDateTime63.toCalendar(locale66);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate71 = localDate68.withField(dateTimeFieldType69, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDate71.toDateTime(readableInstant72);
        mutableDateTime63.setMillis(readableInstant72);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime63.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime76 = property75.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime78 = property75.add(26666);
        org.joda.time.MutableDateTime mutableDateTime79 = property75.getMutableDateTime();
        mutableDateTime79.setMinuteOfHour((int) (byte) 0);
        mutableDateTime79.addWeekyears((int) (byte) -1);
        org.joda.time.Chronology chronology84 = mutableDateTime79.getChronology();
        org.joda.time.DateTime dateTime85 = dateTime61.toDateTime(chronology84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = dateTime61.toString("2022-02-22T07:30:00.797Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str34, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2) + "'", int38 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645515253235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test8344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8344");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime20.withTime(64712, 0, 26863084, 26806059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64712 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test8345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8345");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter1.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property11.setCopy(27);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localTime13.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter5.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear(26706685);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test8346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8346");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology6.getZone();
        org.joda.time.DurationField durationField14 = chronology6.centuries();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        int int26 = dateTimeField23.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDate34, (int) (short) -1, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDate34.getFieldType((int) (short) 1);
        int int44 = localDate34.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime47 = localDate34.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.Chronology chronology48 = chronology6.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField49 = chronology48.years();
        org.joda.time.DurationFieldType durationFieldType50 = durationField49.getType();
        boolean boolean51 = durationField49.isPrecise();
        int int53 = durationField49.getValue(841644804756447630L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 26670662 + "'", int53 == 26670662);
    }

    @Test
    public void test8347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8347");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology13 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfHalfday();
        java.util.Locale locale19 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean20 = locale19.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(2L, chronology13, locale19, (java.lang.Integer) (-2), (int) 'a');
        long long24 = dateTimeParserBucket23.computeMillis();
        int int25 = dateTimeParserBucket23.getOffset();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.yearOfEra();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(26681221L, chronology33);
        boolean boolean38 = dateTimeParserBucket23.restoreState((java.lang.Object) chronology33);
        long long41 = dateTimeParserBucket23.computeMillis(false, "7:24:54 AM +00:00");
        dateTimeParserBucket23.setOffset(26717887);
        int int46 = dateTimeParser2.parseInto(dateTimeParserBucket23, "0003-06-21T18:01:41.438Z", 27029626);
        int int47 = dateTimeParser2.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2L + "'", long41 == 2L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-27029627) + "'", int46 == (-27029627));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 40 + "'", int47 == 40);
    }

    @Test
    public void test8348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8348");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        java.lang.String str27 = dateTimeField8.getName();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = dateTimeField8.getAsText((-1L), locale29);
        java.util.Locale locale35 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale39 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str40 = locale39.getDisplayVariant();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getDisplayCountry();
        java.lang.String str44 = locale39.getDisplayCountry(locale42);
        int int45 = dateTimeField8.getMaximumTextLength(locale42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        java.lang.String str50 = dateTimeField8.getAsShortText(26666570, locale48);
        long long52 = dateTimeField8.roundCeiling(999L);
        java.util.Locale locale54 = new java.util.Locale("2022-02-22T07:24:42.113Z");
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        int int66 = dateTimeField63.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        boolean boolean78 = dateTimeZone76.equals((java.lang.Object) locale77);
        java.lang.String str79 = dateTimeZone73.getName((long) 'a', locale77);
        int int80 = dateTimeField63.getMaximumTextLength(locale77);
        java.lang.String str81 = locale54.getDisplayName(locale77);
        int int82 = dateTimeField8.getMaximumShortTextLength(locale77);
        org.joda.time.DurationField durationField83 = dateTimeField8.getDurationField();
        int int85 = durationField83.getValue(0L);
        long long88 = durationField83.getDifferenceAsLong(27015058L, (long) 27234);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekOfWeekyear" + "'", str27, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals(locale35.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str41, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str44, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "26666570" + "'", str50, "26666570");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 345600000L + "'", long52 == 345600000L);
        org.junit.Assert.assertEquals(locale54.toString(), "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-22t07:24:42.113z" + "'", str81, "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test8349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8349");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withLocale(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear(50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withDefaultYear(1439681);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        long long30 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 2);
        int int32 = dateTimeZone28.getStandardOffset((long) 5);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) "0003-06-21T17:56:36.113Z", dateTimeZone28);
        mutableDateTime33.addMinutes(3892039);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        mutableDateTime36.setMillisOfSecond(352);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime36.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfCeiling();
        java.lang.String str41 = dateTimeFormatter11.print((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Calendar calendar46 = mutableDateTime42.toCalendar(locale45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        mutableDateTime42.setMillis(readableInstant51);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime42.secondOfDay();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime42.add(readableDuration55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime42.yearOfCentury();
        int int58 = mutableDateTime42.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime59.add(readableDuration60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.secondOfDay();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime59.add(readableDuration63);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime65.add(readableDuration66);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Calendar calendar69 = mutableDateTime65.toCalendar(locale68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate73 = localDate70.withField(dateTimeFieldType71, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTime(readableInstant74);
        mutableDateTime65.setMillis(readableInstant74);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime65.secondOfDay();
        org.joda.time.ReadableDuration readableDuration78 = null;
        mutableDateTime65.add(readableDuration78);
        mutableDateTime65.setMillisOfDay(53);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        mutableDateTime65.setZoneRetainFields(dateTimeZone83);
        long long86 = dateTimeZone83.previousTransition((long) 26673604);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime59, dateTimeZone83);
        mutableDateTime42.setZoneRetainFields(dateTimeZone83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter11.withZone(dateTimeZone83);
        boolean boolean90 = dateTimeFormatter89.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime92 = dateTimeFormatter89.parseLocalTime("2022-02-22T07:28:42.751Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:42.751Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645515253552,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=552,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2L + "'", long30 == 2L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "lundi 1 novembre 0010" + "'", str41, "lundi 1 novembre 0010");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645515253552,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=552,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 34 + "'", int58 == 34);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645515253552,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=552,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 26673604L + "'", long86 == 26673604L);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test8350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8350");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DurationField durationField12 = chronology8.halfdays();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DurationField durationField14 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test8351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8351");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        int int54 = localDate14.getYearOfCentury();
        org.joda.time.LocalDate.Property property55 = localDate14.year();
        org.joda.time.DateTime dateTime56 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        java.lang.String str65 = dateTimeZone63.getID();
        org.joda.time.DateTime dateTime66 = localDate14.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate.Property property67 = localDate14.monthOfYear();
        org.joda.time.LocalDate.Property property68 = localDate14.dayOfMonth();
        org.joda.time.LocalDate.Property property69 = localDate14.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = localDate14.toString("0003-06-21T17:58:02.129Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515253587,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=587,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "07:34:13 +00:00" + "'", str46, "07:34:13 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test8352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8352");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.year();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 29, chronology10);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfEven();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test8353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8353");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate24.plus(readablePeriod26);
        org.joda.time.LocalDate.Property property28 = localDate27.weekOfWeekyear();
        org.joda.time.LocalDate localDate30 = property28.addToCopy((-1036570595));
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime37.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology41 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        java.util.Locale locale47 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean48 = locale47.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(2L, chronology41, locale47, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale52 = dateTimeParserBucket51.getLocale();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        dateTimeParserBucket51.setZone(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket51.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket51.getZone();
        dateTimeParserBucket51.setOffset(34);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket51.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeParserBucket51.getZone();
        java.lang.String str63 = dateTimeZone61.getShortName((-292275054L));
        long long67 = dateTimeZone61.convertLocalToUTC(0L, true, (long) 27025652);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) property28, dateTimeZone61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test8354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8354");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 24, chronology8);
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        boolean boolean30 = dateTimeZone21.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate19.toDateTimeAtCurrentTime(dateTimeZone28);
        int int32 = dateTime31.getYearOfCentury();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate39 = localDate33.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property40 = localDate33.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate33.withPeriodAdded(readablePeriod41, (int) ' ');
        org.joda.time.LocalDate localDate45 = localDate33.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate49 = localDate46.withField(dateTimeFieldType47, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DateTime dateTime54 = dateTime51.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property56 = dateTime54.property(dateTimeFieldType55);
        org.joda.time.DateTime dateTime58 = property56.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField59 = property56.getField();
        org.joda.time.DateTime dateTime61 = property56.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.plus(readableDuration62);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        org.joda.time.DateTime dateTime65 = localDate33.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate69 = localDate66.withField(dateTimeFieldType67, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDate69.toDateTime(readableInstant70);
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        org.joda.time.DateTime dateTime74 = dateTime71.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property76 = dateTime74.property(dateTimeFieldType75);
        org.joda.time.DateTime dateTime78 = property76.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField79 = property76.getField();
        org.joda.time.DateTime dateTime81 = property76.setCopy(26665274);
        org.joda.time.DateTime dateTime82 = property76.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property83 = dateTime82.secondOfDay();
        org.joda.time.DateTime dateTime84 = localDate33.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean85 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Instant instant86 = dateTime31.toInstant();
        org.joda.time.DateTime dateTime87 = localDate9.toDateTime((org.joda.time.ReadableInstant) instant86);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test8355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8355");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.DurationField durationField10 = property7.getDurationField();
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property7.roundFloorCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumTime();
        boolean boolean14 = dateTimeFormatter13.isParser();
        boolean boolean15 = dateTimeFormatter13.isOffsetParsed();
        java.lang.String str16 = localDate12.toString(dateTimeFormatter13);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter13.getPrinter();
        int int18 = dateTimeFormatter13.getDefaultYear();
        java.util.Locale locale19 = dateTimeFormatter13.getLocale();
        java.lang.StringBuffer stringBuffer20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(4);
        org.joda.time.DateTime dateTime30 = dateTime28.minusYears(26666877);
        org.joda.time.DateTime.Property property31 = dateTime30.weekOfWeekyear();
        org.joda.time.DateTime dateTime33 = dateTime30.plusYears(1970);
        org.joda.time.DateTime dateTime34 = dateTime30.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        org.joda.time.Chronology chronology36 = dateTime34.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime34.plusSeconds(2838);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(stringBuffer20, (org.joda.time.ReadableInstant) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str16, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test8356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8356");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology9.months();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology23 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfHalfday();
        java.util.Locale locale29 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean30 = locale29.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(2L, chronology23, locale29, (java.lang.Integer) (-2), (int) 'a');
        java.lang.String str34 = locale29.toLanguageTag();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weeks();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.era();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 26666877, chronology42, locale45, (java.lang.Integer) 7200000);
        java.lang.String str49 = locale29.getDisplayScript(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology9, locale45, (java.lang.Integer) 26666570, 26708670);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 999, chronology9);
        org.joda.time.Instant instant54 = mutableDateTime53.toInstant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale56 = dateTimeFormatter55.getLocale();
        java.util.Locale locale57 = dateTimeFormatter55.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter55.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter55.withDefaultYear(0);
        java.lang.String str61 = mutableDateTime53.toString(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1 janvier 1970 00:00:00 +00:00" + "'", str61, "1 janvier 1970 00:00:00 +00:00");
    }

    @Test
    public void test8357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8357");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = localDate2.plusYears(26);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        int int18 = dateTimeField15.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        java.lang.String str27 = dateTimeFormatter19.print((org.joda.time.ReadablePartial) localDate26);
        java.util.Locale locale32 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str33 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDate26, (int) (short) -1, locale32);
        java.lang.String str34 = localDate4.toString("\u30d5\u30e9\u30f3\u30b9\u8a9e", locale32);
        java.lang.String str35 = locale32.getDisplayName();
        java.lang.String str36 = locale32.getISO3Language();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime42 = localDate39.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate50 = localDate44.withYear((int) (byte) 1);
        java.lang.String str51 = dateTimeFormatter43.print((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime();
        int int55 = dateTimeFormatter43.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime52, "1", 1);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate59.toDateTimeAtCurrentTime(dateTimeZone68);
        boolean boolean71 = dateTimeZone68.isFixed();
        mutableDateTime52.setZone(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = dateTime42.toDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime75 = dateTime73.minusHours(26666877);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime();
        java.lang.String str77 = mutableDateTime76.toString();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration79 = null;
        mutableDateTime78.add(readableDuration79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType81.getDurationType();
        mutableDateTime78.add(durationFieldType82, (-1));
        mutableDateTime76.add(durationFieldType82, 2);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime76.dayOfYear();
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime76.secondOfMinute();
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime76.weekyear();
        org.joda.time.ReadableDuration readableDuration90 = null;
        mutableDateTime76.add(readableDuration90, 26813056);
        int int93 = dateTime73.compareTo((org.joda.time.ReadableInstant) mutableDateTime76);
        boolean boolean94 = locale32.equals((java.lang.Object) mutableDateTime76);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str27, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str34, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str35, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str51, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-2) + "'", int55 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-22T07:34:13.778Z" + "'", str77, "2022-02-22T07:34:13.778Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test8358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8358");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        int int11 = localDate10.getEra();
        java.util.Locale locale14 = new java.util.Locale("-1");
        java.util.Locale.setDefault(locale14);
        java.lang.String str16 = localDate10.toString("00:00:02.021", locale14);
        java.lang.String str17 = locale14.getDisplayScript();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals(locale14.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "00:00:02.021" + "'", str16, "00:00:02.021");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test8359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8359");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withPivotYear(26738810);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.Chronology chronology10 = dateTimeFormatter8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((-1L), dateTimeZone12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        java.lang.String str15 = property14.toString();
        org.joda.time.LocalTime localTime17 = property14.addCopy(0);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.DateTime dateTime19 = localTime17.toDateTimeToday();
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter8.withChronology(chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("2022-02-22T07:26:49.811Z", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:26:49.811Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[millisOfDay]" + "'", str15, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test8360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8360");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        boolean boolean35 = dateTimeZone26.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        long long49 = chronology43.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime51 = dateTime36.withChronology(chronology43);
        org.joda.time.DurationField durationField52 = chronology43.halfdays();
        org.joda.time.DurationField durationField53 = chronology43.months();
        org.joda.time.DateTimeField dateTimeField54 = chronology43.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 462, chronology43);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology43);
        java.lang.String str57 = chronology43.toString();
        org.joda.time.DurationField durationField58 = chronology43.hours();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645515253850,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=13,MILLISECOND=850,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-48469999L) + "'", long49 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[UTC]" + "'", str57, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test8361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8361");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfYear();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder16 = builder14.setLocale(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale12.getDisplayLanguage(locale15);
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale15.getDisplayName(locale19);
        java.lang.String str21 = locale19.getDisplayName();
        java.lang.String str22 = locale19.getCountry();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleAttributes();
        int int24 = property11.getMaximumShortTextLength(locale19);
        java.lang.String str25 = locale19.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "anglais" + "'", str18, "anglais");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str20, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese" + "'", str21, "Japanese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test8362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8362");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        java.lang.String str6 = dateTimeFormatter0.print(26704309L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Thursday, January 1, 1970" + "'", str6, "Thursday, January 1, 1970");
    }

    @Test
    public void test8363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8363");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        int int21 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime5.withSecondOfMinute(18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter25.getPrinter();
        int int27 = dateTimePrinter26.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter28.getParser();
        int int38 = dateTimeParser37.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser37);
        java.lang.Integer int40 = dateTimeFormatter39.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((java.lang.Object) int40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfWeek();
        boolean boolean43 = dateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTime.Property property44 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime5.plusWeeks(27010175);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimePrinter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 40 + "'", int38 == 40);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test8364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8364");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '4', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        int int6 = charSet4.size();
        java.util.Iterator<java.lang.Character> charItor7 = charSet4.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream11 = languageRangeList9.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream12 = languageRangeList9.parallelStream();
        boolean boolean13 = charSet4.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Calendar calendar18 = mutableDateTime14.toCalendar(locale17);
        java.util.Set<java.lang.Character> charSet19 = locale17.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        boolean boolean23 = charSet19.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21);
        charSet19.clear();
        java.lang.reflect.AnnotatedElement[] annotatedElementArray25 = new java.lang.reflect.AnnotatedElement[] {};
        java.lang.reflect.AnnotatedElement[] annotatedElementArray26 = charSet19.toArray(annotatedElementArray25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream30 = languageRangeList28.stream();
        java.lang.String[] strArray36 = new java.lang.String[] { "1", "United States", "0003-06-21T17:56:36.113Z", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd", "2022-02-22T07:24:26.474Z" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList37, filteringMode39);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream41 = languageRangeList28.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap42);
        org.joda.time.tz.Provider provider44 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider44);
        org.joda.time.DateTimeZone.setProvider(provider44);
        java.util.Set<java.lang.String> strSet47 = provider44.getAvailableIDs();
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags(languageRangeList43, (java.util.Collection<java.lang.String>) strSet47);
        boolean boolean49 = charSet19.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43);
        boolean boolean50 = charSet4.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property52 = localTime51.millisOfSecond();
        org.joda.time.LocalTime.Property property53 = localTime51.millisOfSecond();
        org.joda.time.LocalTime localTime55 = property53.addWrapFieldToCopy((int) '4');
        org.joda.time.LocalTime localTime56 = property53.roundCeilingCopy();
        org.joda.time.LocalTime localTime58 = localTime56.plusSeconds(31);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalTime localTime60 = localTime58.minus(readablePeriod59);
        org.joda.time.LocalTime localTime62 = localTime58.plusMinutes(26788469);
        org.joda.time.LocalTime localTime64 = localTime62.minusSeconds(26666335);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((-1L), dateTimeZone66);
        org.joda.time.LocalTime localTime69 = localTime67.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property70 = localTime67.millisOfDay();
        org.joda.time.LocalTime localTime71 = property70.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime72 = property70.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((-1L), dateTimeZone74);
        org.joda.time.LocalTime localTime77 = localTime75.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property78 = localTime75.millisOfDay();
        org.joda.time.LocalTime localTime79 = property78.withMinimumValue();
        int int80 = localTime79.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str82 = localTime79.toString(dateTimeFormatter81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property84 = localTime79.property(dateTimeFieldType83);
        int int85 = localTime72.get(dateTimeFieldType83);
        int int86 = localTime64.compareTo((org.joda.time.ReadablePartial) localTime72);
        org.joda.time.LocalTime localTime88 = localTime64.plusSeconds((-1062945));
        org.joda.time.LocalTime.Property property89 = localTime88.minuteOfHour();
        boolean boolean90 = charSet4.remove((java.lang.Object) localTime88);
        java.util.Spliterator<java.lang.Character> charSpliterator91 = charSet4.spliterator();
        java.util.Spliterator<java.lang.Character> charSpliterator92 = charSet4.spliterator();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(charItor7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeStream11);
        org.junit.Assert.assertNotNull(languageRangeStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645515254016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=16,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(annotatedElementArray25);
        org.junit.Assert.assertNotNull(annotatedElementArray26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeStream30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeStream41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(provider44);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str82, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 23 + "'", int85 == 23);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(charSpliterator91);
        org.junit.Assert.assertNotNull(charSpliterator92);
    }

    @Test
    public void test8365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8365");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate19.withCenturyOfEra(24);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) '4');
        org.joda.time.LocalDate localDate37 = localDate33.minusMonths(26980510);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test8366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8366");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        java.lang.String str16 = localDate0.toString("7");
        org.joda.time.DateMidnight dateMidnight17 = localDate0.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter18.getPrinter();
        boolean boolean20 = dateTimeFormatter18.isParser();
        boolean boolean21 = dateTimeFormatter18.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        java.lang.String str24 = dateMidnight17.toString(dateTimeFormatter22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withZoneUTC();
        org.joda.time.Chronology chronology26 = dateTimeFormatter25.getChronology();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimePrinter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Feb 22, 2022" + "'", str24, "Feb 22, 2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(chronology26);
    }

    @Test
    public void test8367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8367");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        java.lang.String str3 = timeZone1.getID();
        java.lang.String str4 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        int int8 = timeZone7.getRawOffset();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime14.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime21 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime22 = property19.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime23 = property19.roundHalfFloorCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        boolean boolean42 = dateTimeZone33.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime.Property property44 = dateTime43.weekOfWeekyear();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime43.withChronology(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime43.toDateTime();
        long long56 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        java.util.Date date57 = dateTime43.toDate();
        boolean boolean58 = timeZone7.inDaylightTime(date57);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Thu Feb 24 07:34:14 GMT 1");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test8368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8368");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property33 = dateTime31.property(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = property33.setCopy(26665274);
        org.joda.time.DateTime dateTime37 = property33.addToCopy((int) (byte) 100);
        org.joda.time.DateTime dateTime38 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.minus(readableDuration39);
        boolean boolean41 = dateMidnight22.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property42 = dateTime40.era();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test8369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8369");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime12.withHourOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime36 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test8370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8370");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        mutableDateTime0.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfMonth();
        org.joda.time.DateTime dateTime10 = mutableDateTime0.toDateTime();
        boolean boolean11 = mutableDateTime0.isAfterNow();
        java.lang.Object obj12 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.secondOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate22 = localDate16.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property23 = localDate16.yearOfEra();
        org.joda.time.LocalDate localDate24 = property23.roundFloorCopy();
        org.joda.time.LocalDate localDate25 = property23.withMaximumValue();
        org.joda.time.LocalDate localDate27 = property23.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean29 = localDate27.isSupported(dateTimeFieldType28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale31 = dateTimeFormatter30.getLocale();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter30.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        mutableDateTime14.setChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.hours();
        org.joda.time.DateTime dateTime42 = mutableDateTime0.toDateTime(chronology37);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("");
        java.lang.String str46 = timeZone45.getID();
        java.lang.String str47 = timeZone45.getID();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(1600416240000L, dateTimeZone48);
        mutableDateTime0.setZone(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-12-27T07:34:14.227Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-12-27T07:34:14.227Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-12-27T07:34:14.227Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GMT" + "'", str46, "GMT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GMT" + "'", str47, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone48);
    }

    @Test
    public void test8371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8371");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter14.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType12.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        long long28 = chronology21.add(259260000L, (long) 295, (int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter29.withChronology(chronology37);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.plus((-48469999L));
        org.joda.time.DateTime dateTime53 = dateTime49.plusSeconds(2);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate57.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) dateTime49, dateTimeZone66);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = chronology76.weekOfWeekyear();
        boolean boolean80 = dateTimeFieldType70.isSupported(chronology76);
        org.joda.time.DateTimeField dateTimeField81 = chronology76.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime49.toMutableDateTime(chronology76);
        org.joda.time.DateTime dateTime84 = dateTime49.minusMinutes(5);
        int int85 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter29.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology87 = chronology21.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology88 = chronology21.withUTC();
        org.joda.time.DateTimeZone dateTimeZone89 = chronology88.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = chronology88.getDateTimeMillis(30, 8921457, 0, 27232);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8921457 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 259288615L + "'", long28 == 259288615L);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97200000 + "'", int85 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
    }

    @Test
    public void test8372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8372");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology7);
        mutableDateTime10.addMonths(26675972);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime10.add(readableDuration13, 26811882);
        boolean boolean16 = mutableDateTime10.isBeforeNow();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate19.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate30 = localDate24.withYear((int) (byte) 1);
        java.lang.String str31 = dateTimeFormatter23.print((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int35 = dateTimeFormatter23.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime32, "1", 1);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate39.toDateTimeAtCurrentTime(dateTimeZone48);
        boolean boolean51 = dateTimeZone48.isFixed();
        mutableDateTime32.setZone(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime22.toDateTime(dateTimeZone48);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate56.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate60 = localDate56.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime61.add(readableDuration62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType64.getDurationType();
        mutableDateTime61.add(durationFieldType65, (-1));
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime61.weekOfWeekyear();
        org.joda.time.DateTime dateTime69 = localDate60.toDateTime((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = dateTimeField78.getType();
        mutableDateTime61.setRounding(dateTimeField78);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime61.secondOfMinute();
        int int82 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) mutableDateTime61);
        int int84 = dateTimeZone48.getOffset((-13305485758L));
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime85.set(dateTimeFieldType86, (int) (short) -1);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime10.property(dateTimeFieldType86);
        java.lang.String str90 = dateTimeFieldType86.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str31, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-2) + "'", int35 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "year" + "'", str90, "year");
    }

    @Test
    public void test8373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8373");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("26996");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 26996");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test8374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8374");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        boolean boolean3 = dateTimeFormatter0.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test8375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8375");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.weekyear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        int int19 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate21 = localDate17.plusWeeks(26828677);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        int int34 = dateTimeFormatter22.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime31, "1", 1);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate38.toDateTimeAtCurrentTime(dateTimeZone47);
        boolean boolean50 = dateTimeZone47.isFixed();
        mutableDateTime31.setZone(dateTimeZone47);
        java.lang.String str53 = dateTimeZone47.getNameKey((long) (byte) 1);
        long long55 = dateTimeZone47.previousTransition((long) (byte) -1);
        org.joda.time.Interval interval56 = localDate21.toInterval(dateTimeZone47);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder58.clear();
        java.util.Locale.Builder builder60 = builder59.clear();
        java.util.Locale locale61 = builder60.build();
        org.joda.time.tz.NameProvider nameProvider62 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider62);
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str67 = nameProvider62.getName(locale64, "French", "2022-02-22T07:24:40.386Z");
        java.util.Locale.Builder builder68 = builder60.setLocale(locale64);
        java.util.Locale locale69 = builder68.build();
        java.lang.String str70 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDate21, 971978, locale69);
        long long73 = dateTimeField14.add((long) 26863, 26669663);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2) + "'", int34 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(nameProvider62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "971978" + "'", str70, "971978");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 841613275641626863L + "'", long73 == 841613275641626863L);
    }

    @Test
    public void test8376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8376");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        java.lang.String str16 = localDate0.toString("7");
        org.joda.time.DateMidnight dateMidnight17 = localDate0.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter18.getPrinter();
        boolean boolean20 = dateTimeFormatter18.isParser();
        boolean boolean21 = dateTimeFormatter18.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        java.lang.String str24 = dateMidnight17.toString(dateTimeFormatter22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        boolean boolean58 = dateTimeZone49.isFixed();
        long long60 = dateTimeZone49.convertUTCToLocal((long) (short) 10);
        java.util.TimeZone timeZone61 = dateTimeZone49.toTimeZone();
        java.time.ZoneId zoneId62 = timeZone61.toZoneId();
        timeZone61.setRawOffset(2000);
        java.util.TimeZone.setDefault(timeZone61);
        java.time.ZoneId zoneId66 = timeZone61.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight17.toMutableDateTime(dateTimeZone67);
        long long70 = dateTimeZone67.convertUTCToLocal((-87L));
        java.util.TimeZone timeZone71 = dateTimeZone67.toTimeZone();
        java.lang.String str72 = timeZone71.getDisplayName();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimePrinter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Feb 22, 2022" + "'", str24, "Feb 22, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertNotNull(zoneId66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-87L) + "'", long70 == (-87L));
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Coordinated Universal Time" + "'", str72, "Coordinated Universal Time");
    }

    @Test
    public void test8377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8377");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfMonth();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime35.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property40 = dateTime38.property(dateTimeFieldType39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime46.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        mutableDateTime51.add(durationFieldType55, (-1));
        org.joda.time.DateTime dateTime59 = dateTime46.withFieldAdded(durationFieldType55, (int) (byte) 1);
        int int60 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean62 = dateTime46.isBefore((long) 2000);
        boolean boolean63 = mutableDateTime28.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeField dateTimeField64 = mutableDateTime28.getRoundingField();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime28.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str67 = dateTimeFieldType66.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int69 = dateTimeFormatter68.getDefaultYear();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology77.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter68.withChronology(chronology77);
        org.joda.time.DateTimeField dateTimeField80 = chronology77.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType66.getField(chronology77);
        org.joda.time.DateTimeField dateTimeField82 = chronology77.monthOfYear();
        org.joda.time.DateTimeField dateTimeField83 = chronology77.weekyear();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology77);
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime84.getZone();
        mutableDateTime28.setZone(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(dateTimeField64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "year" + "'", str67, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2000 + "'", int69 == 2000);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
    }

    @Test
    public void test8378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8378");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.Chronology chronology4 = dateTimeFormatter0.getChronolgy();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        mutableDateTime5.setMillis(readableInstant14);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime5.secondOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate20.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate20.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        mutableDateTime25.add(durationFieldType29, (-1));
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.weekOfWeekyear();
        org.joda.time.DateTime dateTime33 = localDate24.toDateTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField42.getType();
        mutableDateTime25.setRounding(dateTimeField42);
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime5.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        mutableDateTime47.setMillis(readableInstant56);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime47.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.roundFloor();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime60);
        int int64 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime60, "Tuesday, February 22, 2022 7:27:09 AM +00:00", 366);
        org.joda.time.Instant instant65 = mutableDateTime60.toInstant();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645515254497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=497,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645515254497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=497,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-367) + "'", int64 == (-367));
        org.junit.Assert.assertNotNull(instant65);
    }

    @Test
    public void test8379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8379");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField14.getType();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test8380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8380");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter0.getPrinter();
        java.io.Writer writer5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate6.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate6.withPeriodAdded(readablePeriod14, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate6.plus(readablePeriod17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime24.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology28 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekyearOfCentury();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate32.withPeriodAdded(readablePeriod40, (int) ' ');
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths(26763043);
        int int45 = localDate44.getEra();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Calendar calendar50 = mutableDateTime46.toCalendar(locale49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        mutableDateTime46.setMillis(readableInstant55);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime46.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundFloor();
        int int60 = property58.get();
        org.joda.time.DateTimeField dateTimeField61 = property58.getField();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.Chronology chronology68 = localDate62.getChronology();
        long long72 = chronology68.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField73 = chronology68.weekyear();
        org.joda.time.DateTimeField dateTimeField74 = chronology68.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology68.clockhourOfDay();
        java.util.Locale locale79 = new java.util.Locale("100", "fr");
        java.lang.String str80 = dateTimeField75.getAsShortText((long) 49, locale79);
        java.lang.String str81 = locale79.toLanguageTag();
        java.lang.String str82 = property58.getAsText(locale79);
        java.lang.String str83 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDate44, locale79);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter4.printTo(writer5, (org.joda.time.ReadablePartial) localDate6, locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645515254549,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=549,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 27254 + "'", int60 == 27254);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 200L + "'", long72 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertEquals(locale79.toString(), "100_FR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "24" + "'", str80, "24");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "und-FR" + "'", str81, "und-FR");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "27254" + "'", str82, "27254");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "32" + "'", str83, "32");
    }

    @Test
    public void test8381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8381");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        java.lang.String str10 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 26711083);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear(405);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str10, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test8382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8382");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        java.util.Set<java.lang.Character> charSet27 = locale25.getExtensionKeys();
        java.lang.Object[] objArray28 = charSet27.toArray();
        java.lang.Character[] charArray30 = new java.lang.Character[] { '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet31 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet31, charArray30);
        java.util.Spliterator<java.lang.Character> charSpliterator33 = charSet31.spliterator();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Calendar calendar38 = mutableDateTime34.toCalendar(locale37);
        java.util.Set<java.lang.Character> charSet39 = locale37.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        boolean boolean43 = charSet39.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream47 = languageRangeList45.stream();
        java.lang.String[] strArray53 = new java.lang.String[] { "1", "United States", "0003-06-21T17:56:36.113Z", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd", "2022-02-22T07:24:26.474Z" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList54, filteringMode56);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList54, filteringMode58);
        boolean boolean60 = charSet31.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41);
        java.util.Spliterator<java.lang.Character> charSpliterator61 = charSet31.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList67);
        boolean boolean70 = charSet31.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63);
        boolean boolean71 = charSet27.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63);
        java.lang.Object obj72 = null;
        boolean boolean73 = charSet27.equals(obj72);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime74.add(readableDuration75);
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.util.Calendar calendar78 = mutableDateTime74.toCalendar(locale77);
        java.util.Set<java.lang.Character> charSet79 = locale77.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        boolean boolean83 = charSet79.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81);
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream87 = languageRangeList85.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap88 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList89 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, strMap88);
        boolean boolean90 = charSet79.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap91 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList92 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, strMap91);
        boolean boolean93 = charSet27.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap94 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList95 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, strMap94);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charSpliterator33);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "100_FR");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645515254610,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=610,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeStream47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode58.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(charSpliterator61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "100_FR");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1645515254611,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=611,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(languageRangeStream87);
        org.junit.Assert.assertNotNull(languageRangeList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(languageRangeList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(languageRangeList95);
    }

    @Test
    public void test8383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8383");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate1.withPeriodAdded(readablePeriod9, (int) ' ');
        org.joda.time.LocalDate localDate13 = localDate1.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate15 = localDate1.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        java.lang.String str18 = localDate1.toString(dateTimeFormatter16);
        java.util.Locale locale19 = dateTimeFormatter16.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.parse("0003-06-21T18:05:25.502Z", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:05:25.502Z\" is malformed at \"03-06-21T18:05:25.502Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str18, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale19);
    }

    @Test
    public void test8384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8384");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(10);
        int int14 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plus(readablePeriod15);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.longDate();
        java.lang.Integer int19 = dateTimeFormatter18.getPivotYear();
        java.lang.String str20 = localDateTime13.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology21 = dateTimeFormatter18.getChronolgy();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.centuryOfEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfCeiling();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 8);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.era();
        int int32 = dateTimeFormatter18.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime25, "2022-02-22T07:25:04.903Z", 223);
        java.lang.StringBuffer stringBuffer33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minus(readablePeriod41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusHours(26682333);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(stringBuffer33, (org.joda.time.ReadablePartial) localDateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "January 1, 2022" + "'", str20, "January 1, 2022");
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-224) + "'", int32 == (-224));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test8385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8385");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        boolean boolean3 = mutableDateTime0.isAfterNow();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime9.minusSeconds(10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        boolean boolean22 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate25.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate29 = localDate25.plusWeeks(1);
        boolean boolean30 = dateTime12.equals((java.lang.Object) 1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Calendar calendar35 = mutableDateTime31.toCalendar(locale34);
        boolean boolean36 = mutableDateTime31.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str38 = mutableDateTime31.toString(dateTimeFormatter37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate45 = localDate39.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate39.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate39.withPeriodAdded(readablePeriod47, (int) ' ');
        java.lang.String str50 = dateTimeFormatter37.print((org.joda.time.ReadablePartial) localDate49);
        boolean boolean51 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.Chronology chronology52 = dateTimeFormatter37.getChronology();
        java.lang.String str53 = dateTime12.toString(dateTimeFormatter37);
        org.joda.time.DateTime dateTime55 = dateTime12.withYearOfEra(8708530);
        long long56 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime12.plusDays(30663508);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime12);
        java.lang.Object obj60 = mutableDateTime0.clone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "100_FR");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645515254719,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=719,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7:34:14 AM +00:00" + "'", str38, "7:34:14 AM +00:00");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str50, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(chronology52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "7:34:04 AM +00:00" + "'", str53, "7:34:04 AM +00:00");
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-62194235155281L) + "'", long56 == (-62194235155281L));
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "-0001-02-22T07:34:04.719Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "-0001-02-22T07:34:04.719Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "-0001-02-22T07:34:04.719Z");
    }

    @Test
    public void test8386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8386");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet2 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet2, charArray1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.plus((-48469999L));
        java.lang.String str14 = dateTime13.toString();
        boolean boolean15 = charSet2.contains((java.lang.Object) str14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfHalfday();
        java.util.Locale locale32 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean33 = locale32.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(2L, chronology26, locale32, (java.lang.Integer) (-2), (int) 'a');
        boolean boolean37 = charSet2.contains((java.lang.Object) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter38.getPrinter();
        org.joda.time.Chronology chronology40 = dateTimeFormatter38.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter38.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withZoneUTC();
        boolean boolean44 = charSet2.equals((java.lang.Object) dateTimeFormatter38);
        boolean boolean46 = charSet2.add((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0003-06-21T18:06:24.756Z" + "'", str14, "0003-06-21T18:06:24.756Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimePrinter39);
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test8387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8387");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        long long22 = dateTimeZone17.getMillisKeepLocal(dateTimeZone20, (long) 2);
        boolean boolean24 = dateTimeZone17.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime0.add(readablePeriod26, 8);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        int int40 = dateTimeField37.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate48 = localDate42.withYear((int) (byte) 1);
        java.lang.String str49 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localDate48);
        java.util.Locale locale54 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str55 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDate48, (int) (short) -1, locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = localDate48.getFieldType((int) (short) 1);
        boolean boolean58 = mutableDateTime0.isSupported(dateTimeFieldType57);
        mutableDateTime0.addDays(27447011);
        boolean boolean62 = mutableDateTime0.isEqual((long) (-26701900));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "100_FR");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515254780,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=780,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str49, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1" + "'", str55, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test8388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8388");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.withWeekyear(19);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate38 = localDate36.withDayOfYear((int) (byte) 1);
        boolean boolean39 = dateTimeZone31.equals((java.lang.Object) localDate38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.millis();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.LocalDate.Property property48 = localDate47.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property48.getFieldType();
        int int50 = localDate38.get(dateTimeFieldType49);
        org.joda.time.DateTime.Property property51 = dateTime29.property(dateTimeFieldType49);
        org.joda.time.DateTime dateTime53 = dateTime29.minusWeeks(26996417);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2021 + "'", int50 == 2021);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test8389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8389");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime7.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale20 = dateTimeFormatter19.getLocale();
        java.util.Locale locale21 = dateTimeFormatter19.getLocale();
        boolean boolean22 = dateTimeFormatter19.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Calendar calendar27 = mutableDateTime23.toCalendar(locale26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        mutableDateTime23.setMillis(readableInstant32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime23.secondOfDay();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime23.add(readableDuration36);
        int int40 = dateTimeFormatter19.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime23, "2022-02-22T07:24:42.673Z", (int) '4');
        mutableDateTime23.addMonths((-1036570595));
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDate45.getFieldType(1);
        int int50 = localDate45.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        mutableDateTime51.add(durationFieldType55, (-1));
        boolean boolean58 = localDate45.isSupported(durationFieldType55);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.Interval interval67 = localDate45.toInterval(dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(dateTimeZone65);
        mutableDateTime68.setYear(182);
        mutableDateTime68.add(841644804756274217L);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone74);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        mutableDateTime68.setZone(dateTimeZone76);
        mutableDateTime68.setDayOfYear(30);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime68.millisOfSecond();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime68.millisOfDay();
        org.joda.time.Chronology chronology82 = mutableDateTime68.getChronology();
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(10886399L, chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.year();
        long long86 = dateTimeField84.roundHalfFloor((long) 26878732);
        int int87 = mutableDateTime23.get(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515254839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=839,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:34:14 AM +00:00" + "'", str14, "7:34:14 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645515254839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=14,MILLISECOND=839,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-53) + "'", int40 == (-53));
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-86378861) + "'", int87 == (-86378861));
    }

    @Test
    public void test8390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8390");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter11.withChronology(chronology49);
        int int51 = dateTimeFormatter50.getDefaultYear();
        java.lang.Integer int52 = dateTimeFormatter50.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = chronology61.clockhourOfDay();
        mutableDateTime53.setChronology(chronology61);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        org.joda.time.DateTime dateTime73 = dateTime70.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology74 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.clockhourOfHalfday();
        java.util.Locale locale80 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean81 = locale80.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(2L, chronology74, locale80, (java.lang.Integer) (-2), (int) 'a');
        mutableDateTime53.setChronology(chronology74);
        org.joda.time.DateTimeField dateTimeField86 = chronology74.secondOfDay();
        org.joda.time.DateTimeField dateTimeField87 = chronology74.centuryOfEra();
        org.joda.time.Chronology chronology88 = chronology74.withUTC();
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate(chronology88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter50.withChronology(chronology88);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertEquals(locale80.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
    }

    @Test
    public void test8391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8391");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        long long17 = chronology10.add((long) '4', (long) 5999999, (-444));
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 55377, chronology10);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) chronology10, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2663999504L) + "'", long17 == (-2663999504L));
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test8392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8392");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter1.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property11.setCopy(27);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localTime13.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter5.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter5.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter5.withPivotYear((java.lang.Integer) (-26700464));
        int int23 = dateTimeFormatter22.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNull(dateTimePrinter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2000 + "'", int23 == 2000);
    }

    @Test
    public void test8393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8393");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfHalfday();
        java.util.Locale locale20 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean21 = locale20.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(2L, chronology14, locale20, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale25 = dateTimeParserBucket24.getLocale();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        dateTimeParserBucket24.setZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket24.getZone();
        dateTimeParserBucket24.setOffset(34);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket24.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter0.withZone(dateTimeZone33);
        java.lang.String str36 = dateTimeFormatter0.print((-1645514822L));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "December 12, 1969 10:54:45 PM +00:00" + "'", str36, "December 12, 1969 10:54:45 PM +00:00");
    }

    @Test
    public void test8394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8394");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        java.lang.String str10 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 26738210);
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        java.lang.StringBuffer stringBuffer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(stringBuffer16, (long) 350);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str10, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
    }

    @Test
    public void test8395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8395");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology24);
        long long29 = mutableDateTime28.getMillis();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 1);
        long long36 = dateTimeZone32.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1645572479999L, dateTimeZone32);
        java.lang.String str38 = dateTimeZone32.getID();
        java.util.TimeZone timeZone39 = dateTimeZone32.toTimeZone();
        int int41 = timeZone39.getOffset((-19353599951L));
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        mutableDateTime28.setZone(dateTimeZone42);
        mutableDateTime28.addSeconds(9022052);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645515255166L + "'", long29 == 1645515255166L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
    }

    @Test
    public void test8396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8396");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 865);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter11.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int53 = dateTimeFormatter52.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser54 = dateTimeFormatter52.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter55.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser57 = dateTimeFormatter55.getParser();
        java.io.Writer writer58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter55.printTo(writer58, readableInstant59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimePrinter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2000 + "'", int53 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeParser57);
    }

    @Test
    public void test8397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8397");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale9);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        java.util.Locale locale13 = dateTimeFormatter11.getLocale();
        java.lang.String str14 = locale13.getISO3Country();
        java.lang.String str15 = locale13.toLanguageTag();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515255236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:15 AM +00:00" + "'", str7, "7:34:15 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
    }

    @Test
    public void test8398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8398");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("");
        java.time.ZoneId zoneId40 = timeZone39.toZoneId();
        boolean boolean41 = timeZone37.hasSameRules(timeZone39);
        timeZone39.setID("Coordinated Universal Time");
        timeZone39.setID("0003-06-21T17:59:11.376Z");
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.time.ZoneId zoneId51 = timeZone47.toZoneId();
        boolean boolean52 = timeZone39.hasSameRules(timeZone47);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test8399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8399");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Calendar calendar13 = mutableDateTime9.toCalendar(locale12);
        boolean boolean14 = mutableDateTime9.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str16 = mutableDateTime9.toString(dateTimeFormatter15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime9.property(dateTimeFieldType17);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Calendar calendar23 = mutableDateTime19.toCalendar(locale22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        mutableDateTime19.setMillis(readableInstant28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.secondOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate34.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate38 = localDate34.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        mutableDateTime39.add(durationFieldType43, (-1));
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime39.weekOfWeekyear();
        org.joda.time.DateTime dateTime47 = localDate38.toDateTime((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField56.getType();
        mutableDateTime39.setRounding(dateTimeField56);
        mutableDateTime19.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime19.property(dateTimeFieldType61);
        boolean boolean65 = mutableDateTime9.isSupported(dateTimeFieldType61);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime8.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime69 = property67.add(26748455);
        org.joda.time.Chronology chronology70 = mutableDateTime69.getChronology();
        mutableDateTime69.add((long) 26869396);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515255294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645515255294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:34:15 AM +00:00" + "'", str16, "7:34:15 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515255294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test8400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8400");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime7.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.weekOfWeekyear();
        mutableDateTime7.addDays(203908000);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = property21.set(26961822);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26961822 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515255330,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=330,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:34:15 AM +00:00" + "'", str14, "7:34:15 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test8401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8401");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withDefaultYear(0);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter5.getParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        boolean boolean18 = dateTimeFieldType8.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone21 = chronology14.getZone();
        org.joda.time.DurationField durationField22 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField23 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField25 = chronology14.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter5.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        boolean boolean31 = dateTimeZone29.equals((java.lang.Object) locale30);
        java.lang.String str32 = locale30.toLanguageTag();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter28.withLocale(locale30);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en" + "'", str32, "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test8402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8402");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology11.days();
        long long22 = durationField19.add((long) 653, 725);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 62640000653L + "'", long22 == 62640000653L);
    }

    @Test
    public void test8403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8403");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.withWeekyear(19);
        int int30 = dateTime29.getYearOfCentury();
        org.joda.time.DateTime dateTime31 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property32 = dateTime29.era();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate36.toDateTimeAtCurrentTime(dateTimeZone45);
        int int48 = dateTime47.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        java.lang.String str50 = mutableDateTime49.toString();
        boolean boolean51 = dateTime47.isEqual((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.dayOfMonth();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime49.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getRangeDurationType();
        int int57 = mutableDateTime49.get(dateTimeFieldType54);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime49.yearOfCentury();
        mutableDateTime49.setMillisOfSecond(173);
        boolean boolean61 = dateTime29.isEqual((org.joda.time.ReadableInstant) mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 34 + "'", int48 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:34:15.388Z" + "'", str50, "2022-02-22T07:34:15.388Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test8404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8404");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter1.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology9.getZone();
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.DurationField durationField15 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfWeek();
        java.util.Locale locale20 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 26755076, chronology9, locale20);
        long long22 = dateTimeParserBucket21.computeMillis();
        long long23 = dateTimeParserBucket21.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale20.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 26755076L + "'", long22 == 26755076L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 26755076L + "'", long23 == 26755076L);
    }

    @Test
    public void test8405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8405");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.minusSeconds(10);
        boolean boolean10 = dateTime8.isBefore(2000L);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfHalfday();
        java.util.Locale locale28 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean29 = locale28.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(2L, chronology22, locale28, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale33 = dateTimeParserBucket32.getLocale();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        dateTimeParserBucket32.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket32.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket32.getZone();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1970, dateTimeZone38);
        long long41 = dateTimeZone38.convertUTCToLocal((long) 26666877);
        java.lang.String str43 = dateTimeZone38.getShortName((long) (-26669));
        int int45 = dateTimeZone38.getOffsetFromLocal((long) 30);
        org.joda.time.DateTime dateTime46 = dateTime8.withZone(dateTimeZone38);
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder51 = builder49.setLocale(locale50);
        java.lang.String str52 = locale48.getDisplayName(locale50);
        java.util.Locale locale53 = locale50.stripExtensions();
        java.util.Set<java.lang.Character> charSet54 = locale50.getExtensionKeys();
        java.lang.String str55 = dateTime46.toString("26", locale50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime46.withSecondOfMinute(26818727);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26818727 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 26666877L + "'", long41 == 26666877L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais" + "'", str52, "fran\347ais");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "26" + "'", str55, "26");
    }

    @Test
    public void test8406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8406");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter15.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        java.lang.String str22 = mutableDateTime21.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        boolean boolean25 = dateTimeZone23.equals((java.lang.Object) locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone23);
        mutableDateTime21.setZoneRetainFields(dateTimeZone23);
        boolean boolean29 = mutableDateTime21.isEqual((long) 1970);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 26666570);
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        int int33 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int36 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime21, "2022-02-22T07:24:44.296Z", 5999999);
        mutableDateTime21.setDate((long) (-7587));
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.dayOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:34:15.532Z" + "'", str22, "2022-02-22T07:34:15.532Z");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-6000000) + "'", int36 == (-6000000));
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test8407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8407");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property20 = dateTime5.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime21.setZoneRetainFields(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime21.add(readablePeriod47, 8);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        int int61 = dateTimeField58.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        java.lang.String str70 = dateTimeFormatter62.print((org.joda.time.ReadablePartial) localDate69);
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate69, (int) (short) -1, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDate69.getFieldType((int) (short) 1);
        boolean boolean79 = mutableDateTime21.isSupported(dateTimeFieldType78);
        int int80 = dateTime5.get(dateTimeFieldType78);
        org.joda.time.DateTime dateTime82 = dateTime5.plusWeeks(513332);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime84 = dateTime5.minus(readablePeriod83);
        org.joda.time.DateTime dateTime86 = dateTime5.plusMonths(193);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:06:25.582Z" + "'", str18, "0003-06-21T18:06:25.582Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645515255581,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=581,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str70, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test8408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8408");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate1.withPeriodAdded(readablePeriod9, (int) ' ');
        org.joda.time.LocalDate localDate13 = localDate1.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate1.withPeriodAdded(readablePeriod14, (int) (byte) 0);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        boolean boolean28 = dateTimeZone26.equals((java.lang.Object) locale27);
        java.lang.String str29 = dateTimeZone23.getName((long) 'a', locale27);
        org.joda.time.DateTime dateTime30 = localDate1.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.DateTime dateTime33 = dateTime30.minusWeeks(26677059);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate40 = localDate34.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property41 = localDate34.yearOfEra();
        org.joda.time.LocalDate localDate42 = property41.roundFloorCopy();
        org.joda.time.LocalDate localDate43 = property41.withMaximumValue();
        org.joda.time.LocalDate localDate45 = property41.addWrapFieldToCopy(26666877);
        org.joda.time.LocalDate.Property property46 = localDate45.yearOfCentury();
        org.joda.time.DateTime dateTime47 = dateTime30.withFields((org.joda.time.ReadablePartial) localDate45);
        java.lang.String str48 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str48, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNull(dateTimeZone49);
    }

    @Test
    public void test8409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8409");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        mutableDateTime12.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int18 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology26);
        mutableDateTime12.setChronology(chronology26);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DurationField durationField33 = chronology26.millis();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology26.add(readablePeriod34, (long) 30461931, 46);
        org.joda.time.DurationField durationField38 = chronology26.years();
        java.lang.String str39 = chronology26.toString();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.setDate(345600000L);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime48.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property53 = dateTime51.property(dateTimeFieldType52);
        org.joda.time.DateTime dateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime55 = property53.roundFloorCopy();
        org.joda.time.DateTime dateTime56 = property53.roundHalfEvenCopy();
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate64 = localDate58.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property65 = localDate58.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDate localDate68 = localDate58.withPeriodAdded(readablePeriod66, (int) ' ');
        org.joda.time.LocalDate localDate70 = localDate58.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate73 = localDate58.withPeriodAdded(readablePeriod71, (int) (byte) 0);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        boolean boolean85 = dateTimeZone83.equals((java.lang.Object) locale84);
        java.lang.String str86 = dateTimeZone80.getName((long) 'a', locale84);
        org.joda.time.DateTime dateTime87 = localDate58.toDateTimeAtMidnight(dateTimeZone80);
        long long90 = dateTimeZone80.convertLocalToUTC(259260000L, false);
        mutableDateTime40.setZoneRetainFields(dateTimeZone80);
        java.lang.String str92 = dateTimeZone80.getID();
        int int94 = dateTimeZone80.getStandardOffset((long) 757);
        org.joda.time.Chronology chronology95 = chronology26.withZone(dateTimeZone80);
        org.joda.time.LocalDate localDate96 = org.joda.time.LocalDate.now(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 30461931L + "'", long37 == 30461931L);
        org.junit.Assert.assertNotNull(durationField38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 259260000L + "'", long90 == 259260000L);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "UTC" + "'", str92, "UTC");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(localDate96);
    }

    @Test
    public void test8410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8410");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        java.lang.Integer int13 = dateTimeFormatter12.getPivotYear();
        org.joda.time.Chronology chronology14 = dateTimeFormatter12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.monthOfYear();
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(27820800000L, chronology14, locale16, (java.lang.Integer) 26710614, 26706);
        dateTimeParserBucket19.setOffset((java.lang.Integer) 2122);
        java.util.Locale locale22 = dateTimeParserBucket19.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        java.util.Locale locale27 = new java.util.Locale("2022-02-22T07:24:44.157Z", "Property[yearOfEra]");
        boolean boolean28 = locale27.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeParserBucket19.saveField(dateTimeFieldType23, "2022-02-22T07:29:52.479Z", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-22t07:24:44.157z_PROPERTY[YEAROFERA]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test8411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8411");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime20.yearOfCentury();
        boolean boolean47 = mutableDateTime20.isBefore(26694655L);
        mutableDateTime20.addHours(26946);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((-1L));
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.Chronology chronology61 = localDate55.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.secondOfDay();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology61);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 1, chronology61, locale65);
        org.joda.time.DateTimeZone dateTimeZone67 = chronology61.getZone();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(841671371520000010L, chronology61);
        long long72 = chronology61.add((long) 26680129, (long) 9, (-17715688));
        org.joda.time.DateTime dateTime73 = dateTime52.withChronology(chronology61);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((-525601L), chronology61);
        mutableDateTime20.setTime((org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515255774,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=774,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-132761063L) + "'", long72 == (-132761063L));
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test8412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8412");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        java.util.Locale locale13 = new java.util.Locale("53");
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale10.getDisplayLanguage(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter0.withLocale(locale10);
        java.io.Writer writer17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        mutableDateTime18.add(durationFieldType22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableDateTime18.add(readablePeriod25, (int) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        mutableDateTime18.setChronology(chronology28);
        mutableDateTime18.setDayOfWeek(5);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime18.secondOfDay();
        mutableDateTime18.addMonths((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(writer17, (org.joda.time.ReadableInstant) mutableDateTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515255816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=816,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale13.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22t07:24:26.446z" + "'", str15, "2022-02-22t07:24:26.446z");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test8413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8413");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology6);
        int int10 = dateTime9.getMinuteOfHour();
        int int11 = dateTime9.getSecondOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfEra(26856861);
        java.lang.Character[] charArray15 = new java.lang.Character[] { '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet16 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet16, charArray15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime25.plus((-48469999L));
        java.lang.String str28 = dateTime27.toString();
        boolean boolean29 = charSet16.contains((java.lang.Object) str28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime36.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology40 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        java.util.Locale locale46 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean47 = locale46.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(2L, chronology40, locale46, (java.lang.Integer) (-2), (int) 'a');
        boolean boolean51 = charSet16.contains((java.lang.Object) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = dateTimeFormatter52.getPrinter();
        org.joda.time.Chronology chronology54 = dateTimeFormatter52.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter52.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter52.withZoneUTC();
        boolean boolean58 = charSet16.equals((java.lang.Object) dateTimeFormatter52);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate62 = localDate59.withField(dateTimeFieldType60, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTime(readableInstant63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology70 = localDate65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = localDate62.toDateTimeAtCurrentTime(dateTimeZone71);
        int int74 = dateTime73.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime();
        java.lang.String str76 = mutableDateTime75.toString();
        boolean boolean77 = dateTime73.isEqual((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        org.joda.time.MutableDateTime mutableDateTime86 = mutableDateTime75.toMutableDateTime(chronology85);
        org.joda.time.DurationField durationField87 = chronology85.halfdays();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter52.withChronology(chronology85);
        int int89 = dateTimeFormatter52.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter52.withDefaultYear(53388);
        java.lang.String str92 = dateTime13.toString(dateTimeFormatter91);
        org.joda.time.DateTime dateTime93 = dateTime13.toDateTime();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 34 + "'", int10 == 34);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27255 + "'", int11 == 27255);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0003-06-21T18:06:25.831Z" + "'", str28, "0003-06-21T18:06:25.831Z");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimePrinter53);
        org.junit.Assert.assertNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 34 + "'", int74 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-22T07:34:15.830Z" + "'", str76, "2022-02-22T07:34:15.830Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2000 + "'", int89 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Tuesday, February 22, 26856861" + "'", str92, "Tuesday, February 22, 26856861");
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test8414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8414");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = property10.setCopy(26665274);
        boolean boolean14 = dateTime12.isBefore((-62194235722082L));
        org.joda.time.DateTime dateTime16 = dateTime12.withMillis((long) 26701143);
        org.joda.time.DateTime dateTime18 = dateTime12.plusYears(26762033);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate21.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate32 = localDate26.withYear((int) (byte) 1);
        java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        int int37 = dateTimeFormatter25.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "1", 1);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        mutableDateTime34.setZone(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = dateTime24.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime57 = dateTime55.withYear(2022);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime60 = dateTime55.withPeriodAdded(readablePeriod58, 31);
        org.joda.time.DateTime dateTime61 = dateTime55.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime63 = dateTime61.plusDays(20);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        org.joda.time.DateTime dateTime65 = dateTime18.toDateTime(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-2) + "'", int37 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test8415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8415");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        mutableDateTime4.setMillis(readableInstant13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17);
        int int21 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "2022-02-22T07:24:42.673Z", (int) '4');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime.Property property33 = dateTime31.era();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekOfWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime31.withChronology(chronology39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(33);
        java.lang.String str46 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter0.withDefaultYear(26673922);
        boolean boolean50 = dateTimeFormatter49.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatter49.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645515255990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=15,MILLISECOND=990,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-53) + "'", int21 == (-53));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0003-06-21T18:06:25.991Z" + "'", str32, "0003-06-21T18:06:25.991Z");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "July 6, 2021 7:34:15 AM +00:00" + "'", str46, "July 6, 2021 7:34:15 AM +00:00");
        org.junit.Assert.assertNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeParser51);
    }

    @Test
    public void test8416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8416");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        int int11 = localDate10.getEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = property22.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate32 = localDate26.withYear((int) (byte) 1);
        java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        boolean boolean43 = dateTimeZone34.equals((java.lang.Object) dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = localDate10.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableDateTime47.add(readablePeriod48, (-53));
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        java.lang.String str52 = mutableDateTime51.toString();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime51.add(readableDuration53);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        mutableDateTime55.setChronology(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.years();
        org.joda.time.DurationField durationField67 = chronology63.centuries();
        mutableDateTime51.setChronology(chronology63);
        long long72 = chronology63.add(841644804756274217L, (long) 26666, 26672);
        org.joda.time.DateTimeField dateTimeField73 = chronology63.halfdayOfDay();
        mutableDateTime47.setChronology(chronology63);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.hourOfDay();
        mutableDateTime75.addMinutes(26988957);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:34:16.018Z" + "'", str52, "2022-02-22T07:34:16.018Z");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 841644805467509769L + "'", long72 == 841644805467509769L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test8417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8417");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        org.joda.time.LocalDate.Property property54 = localDate53.weekOfWeekyear();
        org.joda.time.LocalDate localDate56 = localDate53.plusYears(9);
        org.joda.time.DateMidnight dateMidnight57 = localDate53.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone58 = dateMidnight57.getZone();
        int int59 = dateMidnight57.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = dateMidnight57.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight57.getZone();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645515256174,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=174,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:34:16 AM +00:00" + "'", str46, "7:34:16 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
    }

    @Test
    public void test8418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8418");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.Interval interval39 = localDate9.toInterval(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime8.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime8.toDateTime(chronology50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = localDate58.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        long long72 = dateTimeZone67.getMillisKeepLocal(dateTimeZone70, (long) 2);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        boolean boolean75 = dateTimeZone73.equals((java.lang.Object) locale74);
        long long77 = dateTimeZone70.getMillisKeepLocal(dateTimeZone73, (long) 2000);
        org.joda.time.DateTime dateTime78 = dateTime8.toDateTime(dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.plus(readableDuration79);
        org.joda.time.DateTime.Property property81 = dateTime78.dayOfYear();
        org.joda.time.DateTime.Property property82 = dateTime78.weekyear();
        org.joda.time.DateTime dateTime84 = dateTime78.plusHours(126);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 2L + "'", long72 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2000L + "'", long77 == 2000L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test8419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8419");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.yearOfEra();
        long long16 = dateTimeField13.set((long) 26902304, 27186146);
        long long18 = dateTimeField13.roundHalfCeiling(1645515011656L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 857849737246102304L + "'", long16 == 857849737246102304L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1640995200000L + "'", long18 == 1640995200000L);
    }

    @Test
    public void test8420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8420");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        java.util.Locale locale3 = dateTimeFormatter0.getLocale();
        boolean boolean4 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter0.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
    }

    @Test
    public void test8421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8421");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.String str11 = locale4.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone17);
        int int21 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime18, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.minuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime18.add(readablePeriod24);
        java.util.GregorianCalendar gregorianCalendar26 = mutableDateTime18.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar26);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str10, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str11, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str13, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str14, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-51) + "'", int21 == (-51));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test8422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8422");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter0.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = mutableDateTime16.toCalendar(locale19);
        boolean boolean21 = mutableDateTime16.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str23 = mutableDateTime16.toString(dateTimeFormatter22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime16.property(dateTimeFieldType24);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Calendar calendar30 = mutableDateTime26.toCalendar(locale29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        mutableDateTime26.setMillis(readableInstant35);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime26.secondOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate41.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate45 = localDate41.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        mutableDateTime46.add(durationFieldType50, (-1));
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.DateTime dateTime54 = localDate45.toDateTime((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField63.getType();
        mutableDateTime46.setRounding(dateTimeField63);
        mutableDateTime26.setMillis((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate70 = localDate67.withField(dateTimeFieldType68, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime26.property(dateTimeFieldType68);
        boolean boolean72 = mutableDateTime16.isSupported(dateTimeFieldType68);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime15.addDays(26672);
        int int78 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "0003-06-21T17:56:51.078Z", 26668);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime15.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime81 = property79.set("2021-02-23T14:00:10.000Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2021-02-23T14:00:10.000Z\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515256360,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=360,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645515256360,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=360,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7:34:16 AM +00:00" + "'", str23, "7:34:16 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515256360,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=360,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-26669) + "'", int78 == (-26669));
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test8423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8423");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        java.lang.String str4 = dateTimeFormatter0.print(26712102L);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = dateTimeFormatter0.parseMillis("2022-02-22T07:28:18.475Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:18.475Z\" is malformed at \"22-02-22T07:28:18.475Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7:25:12 AM +00:00" + "'", str4, "7:25:12 AM +00:00");
    }

    @Test
    public void test8424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8424");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = localTime6.minusMinutes(1);
        org.joda.time.LocalTime localTime10 = localTime8.minusMinutes(26669470);
        org.joda.time.LocalTime localTime12 = localTime8.plusMillis(26684956);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy(989);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        java.util.Locale locale24 = new java.util.Locale("2030-03-22T07:25:13.335");
        java.lang.String str25 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDate22, locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = localTime15.toString("2022-02-22T07:24:32.198Z", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale24.toString(), "2030-03-22t07:25:13.335");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Feb" + "'", str25, "Feb");
    }

    @Test
    public void test8425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8425");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("7:30:11 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test8426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8426");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeZone2);
    }

    @Test
    public void test8427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8427");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        boolean boolean20 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.Chronology chronology21 = dateTimeFormatter6.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        org.joda.time.DateTime dateTime33 = dateTime29.plusSeconds(2);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableDateTime34.add(readablePeriod36, (int) (short) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime34.add(readableDuration39);
        java.lang.String str41 = dateTimeFormatter6.print((org.joda.time.ReadableInstant) mutableDateTime34);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime34.setMillisOfDay((-16820344));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16820344 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515256521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:16 AM +00:00" + "'", str7, "7:34:16 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7:34:18 AM +00:00" + "'", str41, "7:34:18 AM +00:00");
    }

    @Test
    public void test8428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8428");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology11.getZone();
        boolean boolean18 = dateTimeZone16.equals((java.lang.Object) 2L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test8429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8429");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(26667, 3, 27);
        org.joda.time.LocalDate localDate5 = localDate3.withDayOfYear(20);
        java.lang.String str7 = localDate5.toString("23");
        java.util.Date date8 = localDate5.toDate();
        org.joda.time.LocalDate localDate10 = localDate5.minusWeeks(26670662);
        int int11 = localDate5.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23" + "'", str7, "23");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Jan 20 00:00:00 GMT 26667");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 266 + "'", int11 == 266);
    }

    @Test
    public void test8430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8430");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        int int21 = dateTime5.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime5.withDurationAdded(readableDuration22, 26674);
        org.joda.time.Instant instant25 = dateTime5.toInstant();
        org.joda.time.DateTime dateTime27 = dateTime5.minusSeconds(26666335);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        boolean boolean46 = dateTimeZone37.equals((java.lang.Object) dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate49 = localDate35.minusYears(2000);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        int int51 = localDate50.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.plus((-48469999L));
        org.joda.time.DateTime dateTime63 = dateTime59.plusSeconds(2);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = localDate67.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((java.lang.Object) dateTime59, dateTimeZone76);
        org.joda.time.Interval interval80 = localDate50.toInterval(dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        java.lang.String str82 = mutableDateTime81.toString();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        boolean boolean85 = dateTimeZone83.equals((java.lang.Object) locale84);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(dateTimeZone83);
        mutableDateTime81.setZoneRetainFields(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDate50.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate(dateTimeZone83);
        org.joda.time.DateTime dateTime90 = localDate49.toDateTimeAtCurrentTime(dateTimeZone83);
        java.lang.String str91 = dateTimeZone83.toString();
        org.joda.time.DateTime dateTime92 = dateTime27.toDateTime(dateTimeZone83);
        long long95 = dateTimeZone83.convertLocalToUTC(113441L, true);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T07:34:16.580Z" + "'", str82, "2022-02-22T07:34:16.580Z");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "UTC" + "'", str91, "UTC");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 113441L + "'", long95 == 113441L);
    }

    @Test
    public void test8431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8431");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Calendar calendar7 = mutableDateTime3.toCalendar(locale6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekOfWeekyear();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = dateTimeField16.getAsText((long) (short) 1, locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale18);
        java.lang.String str22 = locale6.getDisplayLanguage(locale18);
        java.lang.String str23 = locale18.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter0.withLocale(locale18);
        org.joda.time.Chronology chronology25 = dateTimeFormatter24.getChronology();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(1814400999L);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfWeek();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 26718709, chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        boolean boolean44 = dateTimeFieldType34.isSupported(chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.weekyearOfCentury();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology56 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.clockhourOfHalfday();
        java.util.Locale locale62 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean63 = locale62.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(2L, chronology56, locale62, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale67 = dateTimeParserBucket66.getLocale();
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        int int70 = dateTimeField45.getMaximumShortTextLength(locale68);
        java.lang.String str71 = locale68.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 26705262, chronology30, locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter24.withLocale(locale68);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645515256627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(strSet20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22t07:24:26.446z" + "'", str22, "2022-02-22t07:24:26.446z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str69, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "French (Canada)" + "'", str71, "French (Canada)");
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
    }

    @Test
    public void test8432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8432");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter14.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType12.getField(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.centuries();
        org.joda.time.DurationField durationField25 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.weekyear();
        long long30 = chronology21.add((long) 26798572, (long) (-36), 26705748);
        java.lang.String str31 = chronology21.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-934608356L) + "'", long30 == (-934608356L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
    }

    @Test
    public void test8433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8433");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale9);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        java.util.Locale locale13 = dateTimeFormatter11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatter15.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(26747675);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(0L, dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withZone(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = dateTimeFormatter21.parseLocalTime("2022-02-22T07:31:15.084Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:31:15.084Z\" is malformed at \"22-02-22T07:31:15.084Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515256785,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=785,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:16 AM +00:00" + "'", str7, "7:34:16 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimePrinter16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test8434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8434");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Calendar calendar17 = mutableDateTime13.toCalendar(locale16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        mutableDateTime13.setMillis(readableInstant22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime13.secondOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate28.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate32 = localDate28.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        mutableDateTime33.add(durationFieldType37, (-1));
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.DateTime dateTime41 = localDate32.toDateTime((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        mutableDateTime33.setRounding(dateTimeField50);
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate57.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        long long71 = dateTimeZone66.getMillisKeepLocal(dateTimeZone69, (long) 2);
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime13.toMutableDateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime73 = dateTime12.withZoneRetainFields(dateTimeZone66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate77 = localDate75.minusMonths((int) (short) -1);
        boolean boolean79 = localDate75.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate81 = localDate75.withYear((int) (byte) 1);
        java.lang.String str82 = dateTimeFormatter74.print((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate86 = localDate84.minusMonths((int) (short) -1);
        boolean boolean88 = localDate84.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology89 = localDate84.getChronology();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology91 = chronology89.withZone(dateTimeZone90);
        boolean boolean92 = dateTimeZone83.equals((java.lang.Object) dateTimeZone90);
        org.joda.time.DateTime dateTime93 = localDate81.toDateTimeAtCurrentTime(dateTimeZone90);
        org.joda.time.DateTime dateTime94 = dateTime12.withZone(dateTimeZone90);
        org.joda.time.DateTime.Property property95 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime96 = property95.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime97 = dateTime96.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645515256810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=16,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2L + "'", long71 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDate81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str82, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(chronology91);
// flaky:         org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(mutableDateTime97);
    }

    @Test
    public void test8435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8435");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField17 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test8436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8436");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate24.plus(readablePeriod26);
        int int28 = localDate27.getDayOfMonth();
        org.joda.time.LocalDate localDate30 = localDate27.minusYears(27224572);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 18 + "'", int28 == 18);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test8437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8437");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property67 = dateTime66.hourOfDay();
        org.joda.time.DateTime dateTime68 = property67.getDateTime();
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now(chronology69);
        org.joda.time.DateMidnight dateMidnight71 = localDate70.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test8438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8438");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.hourOfDay();
        int int11 = property10.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.add(26735920L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 26718709);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusHours(6000014);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfDay();
        int int19 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515257007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=7,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:17 AM +00:00" + "'", str7, "7:34:17 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test8439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8439");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.lang.String str6 = dateTimeFormatter0.print((long) 999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        boolean boolean8 = dateTimeFormatter0.isParser();
        boolean boolean9 = dateTimeFormatter0.isOffsetParsed();
        boolean boolean10 = dateTimeFormatter0.isOffsetParsed();
        boolean boolean11 = dateTimeFormatter0.isParser();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter0.withChronology(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Thursday, January 1, 1970" + "'", str6, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test8440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8440");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:24:27.293Z", chronology10);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("0003-06-21T17:57:58.461Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale16, (java.lang.Integer) 26880271, 28862);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Calendar calendar24 = mutableDateTime20.toCalendar(locale23);
        boolean boolean25 = mutableDateTime20.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str27 = mutableDateTime20.toString(dateTimeFormatter26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime20.property(dateTimeFieldType28);
        org.joda.time.MutableDateTime mutableDateTime31 = property29.addWrapField(26675582);
        org.joda.time.MutableDateTime mutableDateTime32 = property29.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        mutableDateTime36.add(durationFieldType40, (-1));
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime36.weekOfWeekyear();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        int int45 = property43.getMaximumTextLength(locale44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate49 = localDate46.withField(dateTimeFieldType47, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime51.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        mutableDateTime56.add(durationFieldType60, (-1));
        org.joda.time.DateTime dateTime64 = dateTime51.withFieldAdded(durationFieldType60, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime67 = dateTime51.withDurationAdded(readableDuration65, 1);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale70 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str71 = dateTimeZone68.getName(0L, locale70);
        java.util.Calendar calendar72 = dateTime67.toCalendar(locale70);
        java.lang.String str73 = locale44.getDisplayLanguage(locale70);
        java.lang.String str74 = locale70.toLanguageTag();
        boolean boolean75 = locale70.hasExtensions();
        java.lang.String str76 = dateTimeField34.getAsText(8745897, locale70);
        java.lang.String str77 = locale70.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(845033397722761057L, chronology10, locale70, (java.lang.Integer) 26802720, 531);
        int int81 = dateTimeParserBucket80.getOffset();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "0003-06-21t17:56:43.932z_2022-02-22T07:24:48.118Z_7:24:34 AM +00:00");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645515257038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7:34:17 AM +00:00" + "'", str27, "7:34:17 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-62194235142961,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "anglais" + "'", str73, "anglais");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fr-CA" + "'", str74, "fr-CA");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "8745897" + "'", str76, "8745897");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "CA" + "'", str77, "CA");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test8441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8441");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime7.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.weekOfWeekyear();
        mutableDateTime7.addDays(203908000);
        mutableDateTime7.addMonths(8776993);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.secondOfDay();
        org.joda.time.DurationField durationField33 = chronology29.days();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology29);
        java.lang.String str36 = mutableDateTime7.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "0003-06-21t17:56:43.932z_2022-02-22T07:24:48.118Z_7:24:34 AM +00:00");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645515257065,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=65,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:34:17 AM +00:00" + "'", str14, "7:34:17 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1291719-05-16T07:34:17.065Z" + "'", str36, "1291719-05-16T07:34:17.065Z");
    }

    @Test
    public void test8442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8442");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate16 = localDate10.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property17 = localDate10.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate10.withPeriodAdded(readablePeriod18, (int) ' ');
        org.joda.time.LocalDate localDate22 = localDate10.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate10.withPeriodAdded(readablePeriod23, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Calendar calendar30 = mutableDateTime26.toCalendar(locale29);
        java.util.Set<java.lang.Character> charSet31 = locale29.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        boolean boolean35 = charSet31.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33);
        charSet31.clear();
        java.util.Locale locale37 = java.util.Locale.CANADA;
        boolean boolean38 = charSet31.contains((java.lang.Object) locale37);
        java.lang.String str39 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate25, locale37);
        org.joda.time.Chronology chronology40 = localDate25.getChronology();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusWeeks(26792055);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTime41.withDayOfYear(385);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 385 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "0003-06-21t17:56:43.932z_2022-02-22T07:24:48.118Z_7:24:34 AM +00:00");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515257083,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=83,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22" + "'", str39, "22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test8443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8443");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.era();
        java.lang.String str8 = localDateTime2.toString("-1");
        int int9 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.era();
        int int11 = property10.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime13 = property10.addWrapFieldToCopy(26957375);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 24, chronology22);
        int int24 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate26 = localDate23.withYear(2022);
        org.joda.time.LocalDate localDate28 = localDate23.plusWeeks(26747924);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        int int40 = dateTimeField37.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate48 = localDate42.withYear((int) (byte) 1);
        java.lang.String str49 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localDate48);
        java.util.Locale locale54 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str55 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDate48, (int) (short) -1, locale54);
        long long57 = dateTimeField37.roundHalfFloor((long) 31);
        int int58 = dateTimeField37.getMaximumValue();
        long long61 = dateTimeField37.add((long) '#', 97200000);
        java.lang.String str63 = dateTimeField37.getAsShortText((long) 26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField37.getType();
        int int65 = localDate28.get(dateTimeFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime67 = localDateTime13.withField(dateTimeFieldType64, (-1045061279));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1045061279 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1" + "'", str8, "-1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str49, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1" + "'", str55, "-1");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-259200000L) + "'", long57 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 53 + "'", int58 == 53);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 58786560000000035L + "'", long61 == 58786560000000035L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 16 + "'", int65 == 16);
    }

    @Test
    public void test8444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8444");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        long long13 = dateTimeField10.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology22.getZone();
        org.joda.time.DurationField durationField30 = chronology22.centuries();
        java.util.Locale locale32 = new java.util.Locale("53");
        java.lang.String str33 = locale32.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology22, locale32);
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = dateTimeField10.getAsText((-1), locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter0.withLocale(locale32);
        int int38 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Calendar calendar44 = mutableDateTime40.toCalendar(locale43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology52 = localDate47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekOfWeekyear();
        boolean boolean56 = dateTimeFieldType46.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology52.getZone();
        org.joda.time.DurationField durationField60 = chronology52.centuries();
        org.joda.time.DateTimeField dateTimeField61 = chronology52.hourOfHalfday();
        org.joda.time.DurationField durationField62 = chronology52.millis();
        org.joda.time.DateTime dateTime63 = mutableDateTime40.toDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField64 = chronology52.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter0.withChronology(chronology52);
        org.joda.time.Chronology chronology66 = dateTimeFormatter65.getChronolgy();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals(locale32.toString(), "53");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645515257173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test8445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8445");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.lang.String str6 = dateTimeFormatter0.print((long) 999);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter0.getZone();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Calendar calendar13 = mutableDateTime9.toCalendar(locale12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        mutableDateTime9.setMillis(readableInstant18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime9.secondOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate24.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate28 = localDate24.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime29.add(durationFieldType33, (-1));
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime37 = localDate28.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        mutableDateTime29.setRounding(dateTimeField46);
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime9.property(dateTimeFieldType51);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.setTime((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        mutableDateTime9.setDate(readableInstant57);
        org.joda.time.Instant instant59 = mutableDateTime9.toInstant();
        mutableDateTime9.setDate((long) 1229142);
        int int64 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "0003-06-21T18:01:01.605Z", 26896541);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Thursday, January 1, 1970" + "'", str6, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645515257207,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=207,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-26896542) + "'", int64 == (-26896542));
    }

    @Test
    public void test8446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8446");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = property10.setCopy(26665274);
        boolean boolean14 = dateTime12.isBefore((-62194235722082L));
        org.joda.time.DateTime dateTime16 = dateTime12.withSecondOfMinute(49);
        org.joda.time.DateTime dateTime18 = dateTime12.minusDays(26728552);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfYear();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((int) (byte) -1, 5, 2, 1, 1, chronology29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        int int33 = localDate32.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.plus((-48469999L));
        org.joda.time.DateTime dateTime45 = dateTime41.plusSeconds(2);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate49 = localDate46.withField(dateTimeFieldType47, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTime(readableInstant50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = localDate49.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) dateTime41, dateTimeZone58);
        org.joda.time.Interval interval62 = localDate32.toInterval(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = dateTime31.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime65 = dateTime63.minusSeconds(6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter67 = dateTimeFormatter66.getPrinter();
        boolean boolean68 = dateTimeFormatter66.isParser();
        boolean boolean69 = dateTimeFormatter66.isParser();
        boolean boolean70 = dateTimeFormatter66.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter66.withZoneUTC();
        boolean boolean72 = dateTimeFormatter71.isParser();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate75 = localDate73.minusMonths((int) (short) -1);
        boolean boolean77 = localDate73.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology78 = localDate73.getChronology();
        org.joda.time.Chronology chronology79 = localDate73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.secondOfDay();
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(chronology79);
        org.joda.time.DateTime.Property property83 = dateTime82.year();
        org.joda.time.DateTime dateTime84 = property83.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime86 = property83.setCopy(26669470);
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime86.toMutableDateTime();
        java.lang.String str88 = dateTimeFormatter71.print((org.joda.time.ReadableInstant) mutableDateTime87);
        boolean boolean89 = dateTime63.isEqual((org.joda.time.ReadableInstant) mutableDateTime87);
        org.joda.time.DateTime.Property property90 = dateTime63.hourOfDay();
        int int91 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime63);
        java.lang.Class<?> wildcardClass92 = dateTime63.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimePrinter67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Feb 22, 26669470" + "'", str88, "Feb 22, 26669470");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test8447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8447");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = dateTimeZone13.getName(0L, locale15);
        org.joda.time.Chronology chronology17 = chronology5.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField18 = chronology5.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        boolean boolean30 = dateTimeFieldType20.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology26.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.weekyear();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property38 = localDate37.dayOfYear();
        int int39 = localDate37.getCenturyOfEra();
        org.joda.time.LocalDate localDate41 = localDate37.plusWeeks(26828677);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate49 = localDate43.withYear((int) (byte) 1);
        java.lang.String str50 = dateTimeFormatter42.print((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        int int54 = dateTimeFormatter42.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime51, "1", 1);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = localDate58.toDateTimeAtCurrentTime(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isFixed();
        mutableDateTime51.setZone(dateTimeZone67);
        java.lang.String str73 = dateTimeZone67.getNameKey((long) (byte) 1);
        long long75 = dateTimeZone67.previousTransition((long) (byte) -1);
        org.joda.time.Interval interval76 = localDate41.toInterval(dateTimeZone67);
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder78.clear();
        java.util.Locale.Builder builder80 = builder79.clear();
        java.util.Locale locale81 = builder80.build();
        org.joda.time.tz.NameProvider nameProvider82 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider82);
        java.util.Locale locale84 = java.util.Locale.ITALY;
        java.lang.String str87 = nameProvider82.getName(locale84, "French", "2022-02-22T07:24:40.386Z");
        java.util.Locale.Builder builder88 = builder80.setLocale(locale84);
        java.util.Locale locale89 = builder88.build();
        java.lang.String str90 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate41, 971978, locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = dateTimeField18.getAsText((-18485), locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -18485");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str50, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-2) + "'", int54 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "UTC" + "'", str73, "UTC");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(nameProvider82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "971978" + "'", str90, "971978");
    }

    @Test
    public void test8448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8448");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfYear();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str20 = nameProvider16.getShortName(locale17, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = dateTimeZone24.getName(0L, locale26);
        java.util.Locale.setDefault(category21, locale26);
        java.lang.String str31 = nameProvider16.getShortName(locale26, "", "2022-02-22T07:24:31.270Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(694252944000L, chronology10, locale26, (java.lang.Integer) 26692066);
        org.joda.time.DateTimeField dateTimeField34 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology10.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test8449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8449");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        int int3 = dateTimeFormatter0.getDefaultYear();
        java.lang.String str5 = dateTimeFormatter0.print(86399999L);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter0.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Thursday, January 1, 1970" + "'", str5, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeParser6);
    }

    @Test
    public void test8450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8450");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-26706027));
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        mutableDateTime15.setMillis(readableInstant24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime15.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property27.add(26666);
        org.joda.time.MutableDateTime mutableDateTime32 = property27.addWrapField(2000);
        mutableDateTime32.setDate(480032L);
        boolean boolean35 = dateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.hourOfDay();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime32.year();
        int int40 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime32, "2022-02-22T07:29:24.077Z", 206);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645515257448,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=448,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-207) + "'", int40 == (-207));
    }

    @Test
    public void test8451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8451");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear(26719692);
        java.lang.Appendable appendable4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate11 = localDate5.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property12 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property12.roundHalfFloorCopy();
        int int15 = property12.get();
        java.lang.String str16 = property12.getAsString();
        org.joda.time.LocalDate localDate17 = property12.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.toString();
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate26.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime29 = localDate26.toDateTimeAtStartOfDay();
        int int30 = localDate26.size();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate33.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate33.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        mutableDateTime38.add(durationFieldType42, (-1));
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime38.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = localDate37.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        boolean boolean47 = localDate26.isBefore((org.joda.time.ReadablePartial) localDate37);
        int int48 = localDate37.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean50 = localDate37.isSupported(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType49.getRangeDurationType();
        int int52 = localDate17.get(dateTimeFieldType49);
        int int53 = localDate17.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable4, (org.joda.time.ReadablePartial) localDate17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test8452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8452");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property9 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property9.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale17 = dateTimeFormatter16.getLocale();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter16.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType14.getField(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.centuries();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(2L, chronology23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(9223372036854775807L, chronology23);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property36 = localDate29.yearOfEra();
        org.joda.time.LocalDate localDate37 = property36.roundFloorCopy();
        org.joda.time.LocalDate localDate38 = property36.withMaximumValue();
        org.joda.time.LocalDate localDate40 = property36.addWrapFieldToCopy(26666877);
        org.joda.time.LocalDate localDate42 = property36.addToCopy(59);
        org.joda.time.LocalDate localDate43 = property36.roundCeilingCopy();
        org.joda.time.LocalDate localDate45 = property36.addToCopy(26676316);
        org.joda.time.LocalDate localDate47 = localDate45.withCenturyOfEra(28);
        org.joda.time.LocalDate localDate49 = localDate47.plusMonths(26783168);
        int int50 = localDate49.getCenturyOfEra();
        int[] intArray52 = chronology23.get((org.joda.time.ReadablePartial) localDate49, 55669000L);
        org.joda.time.DurationField durationField53 = chronology23.minutes();
        java.lang.String str54 = durationField53.toString();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22347 + "'", int50 == 22347);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DurationField[minutes]" + "'", str54, "DurationField[minutes]");
    }

    @Test
    public void test8453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8453");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter12.getParser();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology32 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfHalfday();
        java.util.Locale locale38 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean39 = locale38.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(2L, chronology32, locale38, (java.lang.Integer) (-2), (int) 'a');
        int int45 = dateTimeParser21.parseInto(dateTimeParserBucket42, "", 4);
        java.util.Locale locale46 = dateTimeParserBucket42.getLocale();
        java.lang.Integer int47 = dateTimeParserBucket42.getOffsetInteger();
        java.util.Locale locale48 = dateTimeParserBucket42.getLocale();
        java.lang.String str49 = locale48.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = localTime9.toString("2022-02-22T07:26:47.188Z", locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-5) + "'", int45 == (-5));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
    }

    @Test
    public void test8454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8454");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        mutableDateTime0.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        long long23 = dateTimeField20.addWrapField((long) ' ', 0);
        long long25 = dateTimeField20.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDate26.getFieldType(1);
        int int31 = localDate26.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        mutableDateTime32.add(durationFieldType36, (-1));
        boolean boolean39 = localDate26.isSupported(durationFieldType36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField48.getType();
        org.joda.time.LocalDate.Property property50 = localDate26.property(dateTimeFieldType49);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Calendar calendar55 = mutableDateTime51.toCalendar(locale54);
        boolean boolean56 = mutableDateTime51.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str58 = mutableDateTime51.toString(dateTimeFormatter57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        boolean boolean61 = dateTimeZone59.equals((java.lang.Object) locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter57.withLocale(locale60);
        java.lang.String str63 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate26, locale60);
        org.joda.time.LocalDate localDate65 = localDate26.minusWeeks(0);
        java.util.Date date66 = localDate26.toDate();
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.fromDateFields(date66);
        org.joda.time.LocalDate localDate68 = org.joda.time.LocalDate.fromDateFields(date66);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.LocalDate localDate70 = localDate68.withFields(readablePartial69);
        int int71 = localDate68.getDayOfYear();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("DateTimeField[yearOfCentury]");
        java.lang.String str75 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDate68, 67072, locale74);
        org.joda.time.DateTime dateTime76 = localDate68.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property77 = dateTime76.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 345600000L + "'", long25 == 345600000L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645515257562,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=562,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "7:34:17 AM +00:00" + "'", str58, "7:34:17 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "8" + "'", str63, "8");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 53 + "'", int71 == 53);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "67072" + "'", str75, "67072");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test8455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8455");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime19.withChronology(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime19.minus((long) (-26706027));
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra(26995);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(30663508);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test8456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8456");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Calendar calendar7 = mutableDateTime3.toCalendar(locale6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekOfWeekyear();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = dateTimeField16.getAsText((long) (short) 1, locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale18);
        java.lang.String str22 = locale6.getDisplayLanguage(locale18);
        java.lang.String str23 = locale18.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter0.withLocale(locale18);
        org.joda.time.Chronology chronology25 = dateTimeFormatter24.getChronology();
        boolean boolean26 = dateTimeFormatter24.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645515257608,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=608,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(strSet20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test8457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8457");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.roundHalfCeilingCopy();
        int int13 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime.Property property14 = localTime2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.LocalTime localTime16 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime19 = localTime17.plusHours(30474099);
        org.joda.time.DateTime dateTime20 = localTime19.toDateTimeToday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter21.withChronology(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.seconds();
        org.joda.time.DurationField durationField33 = chronology29.halfdays();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.DurationField durationField35 = chronology29.months();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate38.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate42 = localDate38.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        mutableDateTime43.add(durationFieldType47, (-1));
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = localDate42.toDateTime((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.LocalDate localDate53 = localDate42.minusDays((int) (short) 0);
        int int54 = localDate42.getYearOfCentury();
        org.joda.time.LocalDate.Property property55 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate57 = property55.addToCopy((-26683163));
        org.joda.time.LocalDate localDate58 = property55.getLocalDate();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate62 = localDate59.withField(dateTimeFieldType60, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = dateTime64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.minutes();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.LocalDate localDate69 = localDate67.withYear(52);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate71 = localDate67.minus(readablePeriod70);
        org.joda.time.LocalDate localDate73 = localDate67.plusMonths(2021);
        int[] intArray74 = localDate73.getValues();
        chronology29.validate((org.joda.time.ReadablePartial) localDate58, intArray74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) localDate58);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = localTime19.compareTo((org.joda.time.ReadablePartial) localDate58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2190, 7, 22]");
    }

    @Test
    public void test8458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8458");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        org.joda.time.LocalDate localDate13 = property7.addToCopy(26753906);
        org.joda.time.LocalDate localDate15 = property7.addToCopy(26688680);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.lang.String str19 = localDate15.toString("12", locale17);
        java.lang.String str20 = locale17.getVariant();
        java.lang.String str21 = locale17.getDisplayVariant();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "12" + "'", str19, "12");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test8459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8459");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) locale1);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        boolean boolean9 = mutableDateTime4.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str11 = mutableDateTime4.toString(dateTimeFormatter10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate12.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property19 = localDate12.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate12.withPeriodAdded(readablePeriod20, (int) ' ');
        java.lang.String str23 = dateTimeFormatter10.print((org.joda.time.ReadablePartial) localDate22);
        boolean boolean24 = dateTimeFormatter10.isOffsetParsed();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter10.withLocale(locale27);
        boolean boolean29 = locale27.hasExtensions();
        java.lang.String str30 = dateTimeZone0.getName(212L, locale27);
        java.util.Locale locale31 = locale27.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645515257665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=665,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "7:34:17 AM +00:00" + "'", str11, "7:34:17 AM +00:00");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str23, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "hi!_PROPERTY[MILLISOFDAY]");
    }

    @Test
    public void test8460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8460");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.getDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillis((long) 26764083);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        mutableDateTime46.add(durationFieldType50, (-1));
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime46.weekOfWeekyear();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        int int55 = property53.getMaximumTextLength(locale54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMonths((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime61.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.DateTime dateTime74 = dateTime61.withFieldAdded(durationFieldType70, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime77 = dateTime61.withDurationAdded(readableDuration75, 1);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale80 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str81 = dateTimeZone78.getName(0L, locale80);
        java.util.Calendar calendar82 = dateTime77.toCalendar(locale80);
        java.lang.String str83 = locale54.getDisplayLanguage(locale80);
        java.lang.String str84 = dateTimeZone41.getName((long) 26666335, locale80);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate(dateTimeZone41);
        org.joda.time.DateTime dateTime86 = dateTime28.withZone(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=-62194235142317,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=683,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "anglais" + "'", str83, "anglais");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test8461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8461");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DurationField durationField10 = chronology6.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate12.withYear((int) (byte) 1);
        java.lang.String str19 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        boolean boolean29 = dateTimeZone20.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate18.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.LocalDate localDate32 = localDate18.minusYears(2000);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        int int34 = localDate33.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.Interval interval63 = localDate33.toInterval(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime();
        java.lang.String str65 = mutableDateTime64.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        boolean boolean68 = dateTimeZone66.equals((java.lang.Object) locale67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(dateTimeZone66);
        mutableDateTime64.setZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = localDate33.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(dateTimeZone66);
        org.joda.time.DateTime dateTime73 = localDate32.toDateTimeAtCurrentTime(dateTimeZone66);
        java.util.TimeZone timeZone74 = dateTimeZone66.toTimeZone();
        org.joda.time.Chronology chronology75 = chronology6.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField76 = chronology6.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval63);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T07:34:17.734Z" + "'", str65, "2022-02-22T07:34:17.734Z");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test8462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8462");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("53");
        int int2 = mutableDateTime1.getDayOfMonth();
        mutableDateTime1.addWeekyears(50);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        java.lang.String str6 = mutableDateTime5.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) locale8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone7);
        mutableDateTime5.setZoneRetainFields(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime5.weekyear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime5.add(readableDuration13);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16, 20);
        org.joda.time.Chronology chronology19 = mutableDateTime1.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        java.lang.String str28 = dateTimeFormatter20.print((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        boolean boolean38 = dateTimeZone29.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        int int40 = dateTime39.getYearOfCentury();
        boolean boolean42 = dateTime39.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property43 = dateTime39.monthOfYear();
        org.joda.time.DateTime.Property property44 = dateTime39.secondOfMinute();
        boolean boolean45 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = mutableDateTime1.toString(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:34:17.853Z" + "'", str6, "2022-02-22T07:34:17.853Z");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str28, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0103-01-03T07:34:17.853Z" + "'", str47, "0103-01-03T07:34:17.853Z");
    }

    @Test
    public void test8463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8463");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.roundHalfCeilingCopy();
        java.lang.String str16 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter2.getPrinter();
        int int18 = dateTimePrinter17.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter19.getPrinter();
        int int21 = dateTimePrinter20.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter22.getParser();
        int int32 = dateTimeParser31.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatter34.getPrinter();
        org.joda.time.Chronology chronology36 = dateTimeFormatter34.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter34.withDefaultYear((int) (byte) 10);
        java.util.Locale locale39 = dateTimeFormatter34.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter34.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser40);
        int int42 = dateTimeParser40.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = dateTimeFormatter44.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate53 = localDate47.withYear((int) (byte) 1);
        java.lang.String str54 = dateTimeFormatter46.print((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.format.DateTimeParser dateTimeParser55 = dateTimeFormatter46.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter45, dateTimeParser55);
        int int57 = dateTimeParser55.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser55);
        java.lang.StringBuffer stringBuffer59 = null;
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter17.printTo(stringBuffer59, readablePartial60, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +00:00" + "'", str16, "Monday, January 1, 0001 12:00:00 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimePrinter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 40 + "'", int32 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimePrinter35);
        org.junit.Assert.assertNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(dateTimeParser40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 40 + "'", int42 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimePrinter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str54, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 40 + "'", int57 == 40);
    }

    @Test
    public void test8464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8464");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate17 = localDate11.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(localTime20);
        boolean boolean22 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime9.getHourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime9.centuryOfEra();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime30.minusSeconds(10);
        boolean boolean35 = dateTime33.isBefore(2000L);
        org.joda.time.DateTime.Property property36 = dateTime33.millisOfSecond();
        int int37 = dateTime33.getYearOfEra();
        boolean boolean38 = property24.equals((java.lang.Object) dateTime33);
        org.joda.time.DateTime dateTime39 = property24.withMinimumValue();
        org.joda.time.DateTime dateTime40 = property24.withMinimumValue();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMillis(26805635);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTime42.toString("2022-02-22T07:30:56.829Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0003-06-21T18:06:27.944Z" + "'", str10, "0003-06-21T18:06:27.944Z");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 18 + "'", int23 == 18);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test8465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8465");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str9 = localTime6.toString(dateTimeFormatter8);
        org.joda.time.LocalTime.Property property10 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test8466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8466");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime12 = dateTime9.withField(dateTimeFieldType10, 26666);
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfDay(7200000);
        org.joda.time.DateTime dateTime17 = dateTime12.plusSeconds(0);
        org.joda.time.DateTime dateTime19 = dateTime12.minusMinutes(26700463);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        boolean boolean26 = mutableDateTime21.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str28 = mutableDateTime21.toString(dateTimeFormatter27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property36 = localDate29.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate29.withPeriodAdded(readablePeriod37, (int) ' ');
        java.lang.String str40 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate39);
        org.joda.time.Chronology chronology41 = localDate39.getChronology();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology41.add(readablePeriod42, (-62135596800000L), 17);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology56 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.clockhourOfHalfday();
        java.util.Locale locale62 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean63 = locale62.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(2L, chronology56, locale62, (java.lang.Integer) (-2), (int) 'a');
        java.lang.String str67 = locale62.toLanguageTag();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.Chronology chronology75 = dateTime74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.weeks();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.era();
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 26666877, chronology75, locale78, (java.lang.Integer) 7200000);
        java.lang.String str82 = locale62.getDisplayScript(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(113148L, chronology41, locale78, (java.lang.Integer) 1970);
        org.joda.time.DateTimeField dateTimeField85 = chronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField86 = chronology41.year();
        org.joda.time.DateTime dateTime87 = dateTime12.withChronology(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645515257975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=17,MILLISECOND=975,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:34:17 AM +00:00" + "'", str28, "7:34:17 AM +00:00");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str40, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-62135596800000L) + "'", long45 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "und" + "'", str67, "und");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test8467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8467");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 38090);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = dateTimeField60.getAsText((long) (short) 1, locale62);
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale62);
        java.lang.String str66 = locale50.getDisplayLanguage(locale62);
        java.lang.String str67 = locale62.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter37.withLocale(locale62);
        boolean boolean69 = dateTimeFormatter37.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate77 = localDate71.withYear((int) (byte) 1);
        java.lang.String str78 = dateTimeFormatter70.print((org.joda.time.ReadablePartial) localDate77);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate82 = localDate80.minusMonths((int) (short) -1);
        boolean boolean84 = localDate80.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology85 = localDate80.getChronology();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology87 = chronology85.withZone(dateTimeZone86);
        boolean boolean88 = dateTimeZone79.equals((java.lang.Object) dateTimeZone86);
        org.joda.time.DateTime dateTime89 = localDate77.toDateTimeAtCurrentTime(dateTimeZone86);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter37.withZone(dateTimeZone86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime92 = dateTimeFormatter90.parseLocalDateTime("\u5e74\u6708\u65e5\u661f\u671f\u56db");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970?1?1? ???\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515258097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=18,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645515258098,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=18,MILLISECOND=98,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(strSet64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDate77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str78, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology87);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
    }

    @Test
    public void test8468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8468");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        boolean boolean55 = dateTimeFieldType45.isSupported(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology51);
        mutableDateTime57.addMillis((int) (short) 10);
        int int62 = dateTimeFormatter37.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime57, "1970", 8);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = dateTimeFormatter37.getPrinter();
        java.lang.Appendable appendable64 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter37.printTo(appendable64, (long) (-17733263));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515258140,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=18,MILLISECOND=140,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-9) + "'", int62 == (-9));
        org.junit.Assert.assertNotNull(dateTimePrinter63);
    }

    @Test
    public void test8469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8469");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        int int10 = mutableDateTime0.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.dayOfMonth();
        mutableDateTime0.addMinutes(26770610);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        boolean boolean25 = dateTimeFieldType15.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone28 = chronology21.getZone();
        org.joda.time.DurationField durationField29 = chronology21.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = chronology21.year();
        org.joda.time.DurationField durationField34 = chronology21.weeks();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology21);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale36.getDisplayLanguage(locale37);
        java.lang.String str40 = locale37.getCountry();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.weekOfWeekyear();
        int int52 = dateTimeField49.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate60 = localDate54.withYear((int) (byte) 1);
        java.lang.String str61 = dateTimeFormatter53.print((org.joda.time.ReadablePartial) localDate60);
        java.util.Locale locale66 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str67 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) localDate60, (int) (short) -1, locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDate60.getFieldType((int) (short) 1);
        int int70 = localDate60.getMonthOfYear();
        org.joda.time.LocalDate.Property property71 = localDate60.dayOfMonth();
        java.util.Locale locale73 = new java.util.Locale("53");
        boolean boolean74 = locale73.hasExtensions();
        java.lang.String str75 = property71.getAsShortText(locale73);
        java.lang.String str76 = locale37.getDisplayScript(locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((-13305486928L), chronology21, locale37);
        org.joda.time.DurationField durationField78 = chronology21.months();
        mutableDateTime0.setChronology(chronology21);
        org.joda.time.DurationField durationField80 = chronology21.months();
        // The following exception was thrown during execution in test generation
        try {
            long long83 = durationField80.add(19353600000L, 841761092158402837L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 841761092158402837");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27258158 + "'", int10 == 27258158);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "jpn" + "'", str38, "jpn");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str39, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str61, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale66.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1" + "'", str67, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertEquals(locale73.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "22" + "'", str75, "22");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test8470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8470");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField17 = chronology13.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate25 = localDate19.withYear((int) (byte) 1);
        java.lang.String str26 = dateTimeFormatter18.print((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        boolean boolean36 = dateTimeZone27.equals((java.lang.Object) dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate39 = localDate25.minusYears(2000);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        int int41 = localDate40.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.plus((-48469999L));
        org.joda.time.DateTime dateTime53 = dateTime49.plusSeconds(2);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate57.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((java.lang.Object) dateTime49, dateTimeZone66);
        org.joda.time.Interval interval70 = localDate40.toInterval(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime();
        java.lang.String str72 = mutableDateTime71.toString();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        boolean boolean75 = dateTimeZone73.equals((java.lang.Object) locale74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(dateTimeZone73);
        mutableDateTime71.setZoneRetainFields(dateTimeZone73);
        org.joda.time.DateTime dateTime78 = localDate40.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(dateTimeZone73);
        org.joda.time.DateTime dateTime80 = localDate39.toDateTimeAtCurrentTime(dateTimeZone73);
        java.util.TimeZone timeZone81 = dateTimeZone73.toTimeZone();
        org.joda.time.Chronology chronology82 = chronology13.withZone(dateTimeZone73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(99, 27036129, 540, 540, 289181, 26834310, 27062301, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 540 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str26, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval70);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T07:34:18.183Z" + "'", str72, "2022-02-22T07:34:18.183Z");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(timeZone81);
        org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test8471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8471");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear((int) (short) 1);
        java.lang.String str7 = dateTimeFormatter5.print((long) 80829999);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withZone(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 27012928);
        java.lang.Integer int12 = dateTimeFormatter5.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "January 1, 1970 10:27:09 PM +00:00" + "'", str7, "January 1, 1970 10:27:09 PM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test8472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8472");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str9 = localTime6.toString(dateTimeFormatter8);
        org.joda.time.LocalTime.Property property10 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test8473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8473");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        int int17 = dateTimeField15.getMaximumValue(0L);
        int int18 = dateTimeField15.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField15.getType();
        long long22 = dateTimeField15.set(0L, 59560701);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1879492015324800000L + "'", long22 == 1879492015324800000L);
    }

    @Test
    public void test8474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8474");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        int int37 = dateTimeField34.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate45 = localDate39.withYear((int) (byte) 1);
        java.lang.String str46 = dateTimeFormatter38.print((org.joda.time.ReadablePartial) localDate45);
        java.util.Locale locale51 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str52 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate45, (int) (short) -1, locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = localDate45.getFieldType((int) (short) 1);
        int int55 = localDate45.getMonthOfYear();
        org.joda.time.LocalDate.Property property56 = localDate45.dayOfMonth();
        boolean boolean57 = localDate24.isAfter((org.joda.time.ReadablePartial) localDate45);
        int int58 = localDate24.getYearOfCentury();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property62 = localDate61.dayOfYear();
        org.joda.time.LocalDate localDate63 = property62.withMaximumValue();
        boolean boolean64 = localDate24.equals((java.lang.Object) localDate63);
        org.joda.time.LocalDate localDate66 = localDate24.withYear(26783169);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate68 = localDate24.plus(readablePeriod67);
        org.joda.time.LocalDate localDate70 = localDate24.minusDays(26801314);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate72 = localDate24.withWeekOfWeekyear(322);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 322 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str46, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1" + "'", str52, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
    }

    @Test
    public void test8475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8475");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        java.lang.String str23 = dateTimeField9.getName();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate30 = localDate24.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property31 = localDate24.yearOfEra();
        org.joda.time.LocalDate localDate32 = property31.roundFloorCopy();
        org.joda.time.LocalDate localDate33 = property31.roundFloorCopy();
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime40.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime47 = dateTime44.withField(dateTimeFieldType45, 26666);
        org.joda.time.LocalDate localDate49 = localDate33.withField(dateTimeFieldType45, (int) ' ');
        org.joda.time.LocalDate localDate51 = localDate33.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate53 = localDate51.withWeekyear(7);
        org.joda.time.LocalDate.Property property54 = localDate53.year();
        java.util.Locale locale58 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale62 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str63 = locale62.getDisplayVariant();
        java.lang.String str64 = locale58.getDisplayCountry(locale62);
        java.lang.String str65 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate53, locale58);
        java.util.Locale locale66 = locale58.stripExtensions();
        java.lang.String str67 = locale58.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet68 = locale58.getExtensionKeys();
        int int69 = charSet68.size();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyearOfCentury" + "'", str23, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-01-01" + "'", str34, "2022-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals(locale58.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str64, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "7" + "'", str65, "7");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22t07:24:26.446z" + "'", str67, "2022-02-22t07:24:26.446z");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test8476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8476");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.isFixed();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime17.weekOfWeekyear();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        int int26 = property24.getMaximumTextLength(locale25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate30 = localDate27.withField(dateTimeFieldType28, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        mutableDateTime37.add(durationFieldType41, (-1));
        org.joda.time.DateTime dateTime45 = dateTime32.withFieldAdded(durationFieldType41, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = dateTime32.withDurationAdded(readableDuration46, 1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str52 = dateTimeZone49.getName(0L, locale51);
        java.util.Calendar calendar53 = dateTime48.toCalendar(locale51);
        java.lang.String str54 = locale25.getDisplayLanguage(locale51);
        java.lang.String str55 = dateTimeZone12.getName((long) 26666335, locale51);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(dateTimeZone12);
        int int57 = localDate56.getDayOfMonth();
        org.joda.time.DateTime dateTime58 = localDate56.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = localDate56.toString("2022-02-22T07:33:34.043Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62194235141678,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=18,MILLISECOND=322,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "anglais" + "'", str54, "anglais");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test8477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8477");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded((long) 26666570, (int) (byte) -1);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfDay();
        java.lang.String str27 = property26.getName();
        org.joda.time.DateTime dateTime28 = property26.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfDay" + "'", str27, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test8478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8478");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        org.joda.time.LocalDate.Property property24 = localDate0.property(dateTimeFieldType23);
        org.joda.time.LocalDate.Property property25 = localDate0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        org.joda.time.LocalDate localDate27 = property25.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 27218);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate41 = localDate35.withYear((int) (byte) 1);
        java.lang.String str42 = dateTimeFormatter34.print((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        boolean boolean52 = dateTimeZone43.equals((java.lang.Object) dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate55 = localDate41.minusYears(2000);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        int int57 = localDate56.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate61 = localDate58.withField(dateTimeFieldType59, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.plus((-48469999L));
        org.joda.time.DateTime dateTime69 = dateTime65.plusSeconds(2);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate73 = localDate70.withField(dateTimeFieldType71, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTime(readableInstant74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate78 = localDate76.minusMonths((int) (short) -1);
        boolean boolean80 = localDate76.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology81 = localDate76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology83 = chronology81.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime84 = localDate73.toDateTimeAtCurrentTime(dateTimeZone82);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate((java.lang.Object) dateTime65, dateTimeZone82);
        org.joda.time.Interval interval86 = localDate56.toInterval(dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime();
        java.lang.String str88 = mutableDateTime87.toString();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        boolean boolean91 = dateTimeZone89.equals((java.lang.Object) locale90);
        org.joda.time.LocalDate localDate92 = new org.joda.time.LocalDate(dateTimeZone89);
        mutableDateTime87.setZoneRetainFields(dateTimeZone89);
        org.joda.time.DateTime dateTime94 = localDate56.toDateTimeAtCurrentTime(dateTimeZone89);
        org.joda.time.LocalDate localDate95 = new org.joda.time.LocalDate(dateTimeZone89);
        org.joda.time.DateTime dateTime96 = localDate55.toDateTimeAtCurrentTime(dateTimeZone89);
        mutableDateTime32.setZone(dateTimeZone89);
        org.joda.time.DateTime dateTime98 = localDate30.toDateTimeAtCurrentTime(dateTimeZone89);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str42, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(interval86);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-22T07:34:18.372Z" + "'", str88, "2022-02-22T07:34:18.372Z");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test8479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8479");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.getDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.plus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears(27131438);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test8480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8480");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("26722");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        boolean boolean9 = mutableDateTime4.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str11 = mutableDateTime4.toString(dateTimeFormatter10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime4.property(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime4.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime4.copy();
        mutableDateTime4.addMillis((int) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate21.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        long long35 = dateTimeZone30.getMillisKeepLocal(dateTimeZone33, (long) 2);
        int int37 = dateTimeZone33.getStandardOffset((long) 5);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        mutableDateTime4.setZoneRetainFields(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        java.lang.String str41 = mutableDateTime40.toString();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        mutableDateTime42.add(durationFieldType46, (-1));
        mutableDateTime40.add(durationFieldType46, 2);
        mutableDateTime40.addHours(19);
        boolean boolean53 = mutableDateTime40.isBeforeNow();
        mutableDateTime40.addMillis(26773778);
        int int56 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight58 = localDate1.toDateMidnight(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645515258508,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=18,MILLISECOND=508,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "7:34:18 AM +00:00" + "'", str11, "7:34:18 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:34:18.508Z" + "'", str41, "2022-02-22T07:34:18.508Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test8481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8481");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.hourOfDay();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515258560,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=18,MILLISECOND=560,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:34:18 AM +00:00" + "'", str7, "7:34:18 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test8482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8482");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate21.withPeriodAdded(readablePeriod29, (int) ' ');
        org.joda.time.LocalDate localDate33 = localDate21.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = property44.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField47 = property44.getField();
        org.joda.time.DateTime dateTime49 = property44.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.plus(readableDuration50);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime51.getZone();
        org.joda.time.DateTime dateTime53 = localDate21.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime59.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property64 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property64.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField67 = property64.getField();
        org.joda.time.DateTime dateTime69 = property64.setCopy(26665274);
        org.joda.time.DateTime dateTime70 = property64.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property71 = dateTime70.secondOfDay();
        org.joda.time.DateTime dateTime72 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = dateTime19.minusMillis(26677059);
        int int76 = dateTime19.getYearOfEra();
        org.joda.time.DateTime dateTime78 = dateTime19.minusDays(26743877);
        org.joda.time.DateTime.Property property79 = dateTime19.monthOfYear();
        org.joda.time.DateTime dateTime80 = property79.withMaximumValue();
        org.joda.time.DateTime dateTime81 = property79.getDateTime();
        org.joda.time.DateTime dateTime83 = dateTime81.withYearOfCentury(73);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test8483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8483");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime9.add(readablePeriod16, (int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime9.setChronology(chronology19);
        int int21 = mutableDateTime9.getYearOfEra();
        int int24 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "+00:00", 26676039);
        int int25 = mutableDateTime9.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Calendar calendar30 = mutableDateTime26.toCalendar(locale29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        mutableDateTime26.setMillis(readableInstant35);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime26.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        int int40 = property38.get();
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        int int44 = dateTimeField41.getDifference((long) (-1), 100L);
        java.util.Locale locale47 = new java.util.Locale("7:24:30 AM +00:00");
        java.lang.String str48 = dateTimeField41.getAsShortText(43, locale47);
        int int49 = mutableDateTime9.get(dateTimeField41);
        long long51 = dateTimeField41.remainder((long) 26864582);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) long51);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-26676040) + "'", int24 == (-26676040));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515258739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=18,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 27258 + "'", int40 == 27258);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "7:24:30 am +00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "43" + "'", str48, "43");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 27258 + "'", int49 == 27258);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 582L + "'", long51 == 582L);
    }

    @Test
    public void test8484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8484");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        java.lang.String str12 = durationField11.getName();
        boolean boolean13 = durationField11.isSupported();
        long long16 = durationField11.subtract((long) 27170888, 26679);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "seconds" + "'", str12, "seconds");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 491888L + "'", long16 == 491888L);
    }

    @Test
    public void test8485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8485");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str3 = dateTimeFieldType2.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int5 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter4.withChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType2.getField(chronology13);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology13.getZone();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = locale29.getDisplayVariant();
        java.lang.String str32 = dateTimeField27.getAsShortText(8, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 30488630, chronology13, locale29);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 71, chronology13);
        mutableDateTime34.setTime(26675084L);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime42.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property47 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = property47.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime49 = property47.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime51 = property47.addToCopy((long) 26676316);
        org.joda.time.DateTime dateTime52 = property47.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime54 = property47.addToCopy(238);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        mutableDateTime34.setZone(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "year" + "'", str3, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str30, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "8" + "'", str32, "8");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
    }

    @Test
    public void test8486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8486");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.addWrapField(26690);
        int int84 = mutableDateTime83.getRoundingMode();
        org.joda.time.Chronology chronology85 = null;
        mutableDateTime83.setChronology(chronology85);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test8487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8487");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime9.add(readablePeriod16, (int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime9.setChronology(chronology19);
        int int21 = mutableDateTime9.getYearOfEra();
        int int24 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "+00:00", 26676039);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMonths((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime38.plus((-48469999L));
        org.joda.time.DateTime dateTime42 = dateTime38.plusSeconds(2);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology54 = localDate49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate46.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) dateTime38, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime30.toMutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime59.set(dateTimeFieldType61, (int) (short) 100);
        boolean boolean64 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime59);
        mutableDateTime9.setWeekyear(117060000);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime9.year();
        org.joda.time.MutableDateTime mutableDateTime69 = property67.addWrapField(514275);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-26676040) + "'", int24 == (-26676040));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime69);
    }

    @Test
    public void test8488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8488");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        boolean boolean55 = dateTimeFieldType45.isSupported(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology51);
        mutableDateTime57.addMillis((int) (short) 10);
        int int62 = dateTimeFormatter37.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime57, "1970", 8);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = dateTimeFormatter37.getPrinter();
        java.io.Writer writer64 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 36);
        org.joda.time.DateTime dateTime67 = localDate66.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter37.printTo(writer64, (org.joda.time.ReadablePartial) localDate66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515259097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-9) + "'", int62 == (-9));
        org.junit.Assert.assertNotNull(dateTimePrinter63);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test8489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8489");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter11.withChronology(chronology49);
        int int51 = dateTimeFormatter50.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser52 = dateTimeFormatter50.getParser();
        int int53 = dateTimeParser52.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 40 + "'", int53 == 40);
    }

    @Test
    public void test8490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8490");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology24 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfHalfday();
        java.util.Locale locale30 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean31 = locale30.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(2L, chronology24, locale30, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale35 = dateTimeParserBucket34.getLocale();
        java.util.Locale locale36 = java.util.Locale.US;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 26678886, chronology7, locale35, (java.lang.Integer) 26667, 0);
        long long42 = dateTimeParserBucket40.computeMillis(true);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket40.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate51 = localDate45.withYear((int) (byte) 1);
        java.lang.String str52 = dateTimeFormatter44.print((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        int int56 = dateTimeFormatter44.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime53, "1", 1);
        int int57 = mutableDateTime53.getEra();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate64 = localDate58.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property65 = localDate58.yearOfEra();
        org.joda.time.LocalDate localDate66 = property65.roundFloorCopy();
        org.joda.time.LocalDate localDate67 = property65.withMaximumValue();
        org.joda.time.LocalDate localDate69 = property65.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean71 = localDate69.isSupported(dateTimeFieldType70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime53.property(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType70.getRangeDurationType();
        dateTimeParserBucket40.saveField(dateTimeFieldType70, 0);
        int int76 = dateTimeParserBucket40.getOffset();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 26678886L + "'", long42 == 26678886L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDate51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str52, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2) + "'", int56 == (-2));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test8491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8491");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime20.add(readableDuration45);
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime20.getZone();
        int int48 = mutableDateTime20.getEra();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime50 = mutableDateTime20.toDateTimeISO();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515259311,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=311,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test8492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8492");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate2.plusWeeks(26828677);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        java.lang.String str15 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int19 = dateTimeFormatter7.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime16, "1", 1);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isFixed();
        mutableDateTime16.setZone(dateTimeZone32);
        java.lang.String str38 = dateTimeZone32.getNameKey((long) (byte) 1);
        long long40 = dateTimeZone32.previousTransition((long) (byte) -1);
        org.joda.time.Interval interval41 = localDate6.toInterval(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Calendar calendar46 = mutableDateTime42.toCalendar(locale45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        mutableDateTime42.setMillis(readableInstant51);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime42.secondOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMonths((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime62.plus((-48469999L));
        int int65 = dateTime62.getEra();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime62.minus(readablePeriod66);
        boolean boolean68 = mutableDateTime42.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime42.yearOfEra();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime42.weekOfWeekyear();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate78 = localDate72.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property79 = localDate72.yearOfEra();
        org.joda.time.LocalDate localDate80 = property79.roundFloorCopy();
        org.joda.time.LocalDate localDate81 = property79.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property82 = localDate81.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDate localDate84 = localDate81.minus(readablePeriod83);
        org.joda.time.Chronology chronology85 = localDate84.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.years();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(26127360000000000L, chronology85);
        org.joda.time.DateTimeZone dateTimeZone88 = chronology85.getZone();
        org.joda.time.MutableDateTime mutableDateTime89 = mutableDateTime42.toMutableDateTime(dateTimeZone88);
        int int90 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) mutableDateTime42);
        java.lang.String str92 = dateTimeZone32.getShortName((-366928L));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2) + "'", int19 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645515259387,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=387,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+00:00" + "'", str92, "+00:00");
    }

    @Test
    public void test8493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8493");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime0.add(readablePeriod6, (int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale10 = dateTimeFormatter9.getLocale();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter9.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Calendar calendar16 = mutableDateTime12.toCalendar(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = dateTimeField25.getAsText((long) (short) 1, locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale27);
        java.lang.String str31 = locale15.getDisplayLanguage(locale27);
        java.lang.String str32 = locale27.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter9.withLocale(locale27);
        org.joda.time.Chronology chronology34 = dateTimeFormatter33.getChronology();
        boolean boolean35 = mutableDateTime0.equals((java.lang.Object) dateTimeFormatter33);
        java.lang.StringBuffer stringBuffer36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(4);
        org.joda.time.DateTime dateTime46 = dateTime44.minusYears(26666877);
        org.joda.time.DateTime.Property property47 = dateTime46.weekOfWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime46.plusYears(1970);
        org.joda.time.DateTime dateTime50 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property51 = dateTime46.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime46.withMillisOfSecond(6);
        org.joda.time.DateTime dateTime55 = dateTime53.plus((-62194235701421L));
        org.joda.time.DateTime dateTime57 = dateTime55.withYear(23);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter33.printTo(stringBuffer36, (org.joda.time.ReadableInstant) dateTime57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645515259435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645515259435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(strSet29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test8494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8494");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime13 = dateTime10.withField(dateTimeFieldType11, 26666);
        int int14 = dateTime13.getYear();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime13.withCenturyOfEra(50);
        int int19 = dateTime13.getDayOfYear();
        org.joda.time.DateTime.Property property20 = dateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        boolean boolean26 = mutableDateTime21.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str28 = mutableDateTime21.toString(dateTimeFormatter27);
        java.lang.String str29 = dateTime13.toString(dateTimeFormatter27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        mutableDateTime31.setChronology(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.years();
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType30.getField(chronology39);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter27.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 26989253);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 24, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        long long61 = dateTimeField59.remainder(86400000L);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology68 = localDate63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology70 = chronology68.withZone(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.minuteOfHour();
        java.util.Locale locale77 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.lang.String str78 = dateTimeField72.getAsShortText((long) (byte) -1, locale77);
        java.util.Locale locale79 = locale77.stripExtensions();
        java.util.Locale locale83 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale87 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str88 = locale87.getDisplayVariant();
        java.lang.String str89 = locale83.getDisplayCountry(locale87);
        java.lang.String str90 = locale83.getDisplayName();
        java.util.Locale locale91 = java.util.Locale.getDefault();
        java.lang.String str92 = locale91.getDisplayCountry();
        java.lang.String str93 = locale83.getDisplayCountry(locale91);
        java.lang.String str94 = locale91.getDisplayScript();
        java.lang.String str95 = locale79.getDisplayCountry(locale91);
        java.lang.String str96 = dateTimeField59.getAsShortText(63, locale91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter27.withLocale(locale91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = org.joda.time.DateTime.parse("2022-02-22T07:29:52.000Z", dateTimeFormatter97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:29:52.000Z\" is malformed at \"22-02-22T07:29:52.000Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26666 + "'", int14 == 26666);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645515259451,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=451,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:34:19 AM +00:00" + "'", str28, "7:34:19 AM +00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7:34:19 AM +00:00" + "'", str29, "7:34:19 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 86400000L + "'", long61 == 86400000L);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals(locale77.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "59" + "'", str78, "59");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale83.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale87.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str89, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str90, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale91);
// flaky:         org.junit.Assert.assertEquals(locale91.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str92, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str93, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str95, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "63" + "'", str96, "63");
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
    }

    @Test
    public void test8495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8495");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(26767575);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(26748000);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        mutableDateTime10.setChronology(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.years();
        org.joda.time.DurationField durationField22 = chronology18.centuries();
        mutableDateTime6.setChronology(chronology18);
        mutableDateTime6.setWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        boolean boolean36 = dateTimeFieldType26.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.minuteOfHour();
        org.joda.time.DateTime dateTime40 = mutableDateTime6.toDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField41 = chronology32.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter5.withChronology(chronology32);
        boolean boolean43 = dateTimeFormatter5.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:34:19.548Z" + "'", str7, "2022-02-22T07:34:19.548Z");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test8496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8496");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        java.lang.String str29 = localDate19.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str31 = dateTimeFieldType30.getName();
        boolean boolean32 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property33 = localDate19.weekyear();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        int int35 = localDate34.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate37 = localDate34.withYearOfEra(27);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(26666335);
        int int40 = localDate37.getYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        long long44 = dateTimeZone42.nextTransition(2222L);
        org.joda.time.DateTime dateTime45 = localDate37.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        java.lang.String str47 = property46.getName();
        boolean boolean48 = property33.equals((java.lang.Object) property46);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0001-02-22" + "'", str29, "0001-02-22");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "era" + "'", str31, "era");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 27 + "'", int40 == 27);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2222L + "'", long44 == 2222L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "minuteOfHour" + "'", str47, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test8497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8497");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear((int) (short) 1);
        java.lang.String str7 = dateTimeFormatter5.print((long) 80829999);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withZone(dateTimeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property13 = localDate10.era();
        org.joda.time.LocalDate localDate14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate15 = property13.roundFloorCopy();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate19.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone28.getMillisKeepLocal(dateTimeZone31, (long) 2);
        boolean boolean35 = dateTimeZone28.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        org.joda.time.DateTime dateTime36 = localDate15.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.LocalDate.Property property37 = localDate15.year();
        org.joda.time.DateTime dateTime38 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Calendar calendar44 = mutableDateTime40.toCalendar(locale43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        mutableDateTime40.setMillis(readableInstant49);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime40.secondOfDay();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate55.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate59 = localDate55.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration61 = null;
        mutableDateTime60.add(readableDuration61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType63.getDurationType();
        mutableDateTime60.add(durationFieldType64, (-1));
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime60.weekOfWeekyear();
        org.joda.time.DateTime dateTime68 = localDate59.toDateTime((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology74 = localDate69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = dateTimeField77.getType();
        mutableDateTime60.setRounding(dateTimeField77);
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.MutableDateTime mutableDateTime81 = mutableDateTime40.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime81.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        int int86 = dateTimeZone84.getOffsetFromLocal((long) 26672);
        mutableDateTime81.setZone(dateTimeZone84);
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime38.toMutableDateTime(dateTimeZone84);
        org.joda.time.DateTimeZone dateTimeZone89 = mutableDateTime88.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter9.withZone(dateTimeZone89);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = dateTimeFormatter90.parseMillis("July 6, 2021 7:26:05 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"July 6, 2021 7:26:05 AM +00:00\" is malformed at \"+00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "January 1, 1970 10:27:09 PM +00:00" + "'", str7, "January 1, 1970 10:27:09 PM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645515259614,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=614,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
    }

    @Test
    public void test8498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8498");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        boolean boolean11 = dateTimeFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        boolean boolean13 = dateTimeField12.isLenient();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate16.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate20 = localDate16.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        mutableDateTime21.add(durationFieldType25, (-1));
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.DateTime dateTime29 = localDate20.toDateTime((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.LocalDate localDate31 = localDate20.minusDays((int) (short) 0);
        int int32 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDate20);
        boolean boolean33 = dateTimeField12.isSupported();
        boolean boolean34 = dateTimeField12.isLenient();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Calendar calendar39 = mutableDateTime35.toCalendar(locale38);
        boolean boolean40 = mutableDateTime35.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str42 = mutableDateTime35.toString(dateTimeFormatter41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate49 = localDate43.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property50 = localDate43.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate53 = localDate43.withPeriodAdded(readablePeriod51, (int) ' ');
        java.lang.String str54 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localDate53);
        boolean boolean55 = dateTimeFormatter41.isOffsetParsed();
        java.util.Locale.Category category56 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter41.withLocale(locale58);
        java.lang.String str60 = locale58.getScript();
        java.lang.String str61 = locale58.getCountry();
        int int62 = dateTimeField12.getMaximumTextLength(locale58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = org.joda.time.format.DateTimeFormat.patternForStyle("0003-06-21T17:58:25.041Z", locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 0003-06-21T17:58:25.041Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645515259644,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=644,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "7:34:19 AM +00:00" + "'", str42, "7:34:19 AM +00:00");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str54, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.FORMAT + "'", category56.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str61, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test8499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8499");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property20 = dateTime5.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime21.setZoneRetainFields(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime21.add(readablePeriod47, 8);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        int int61 = dateTimeField58.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        java.lang.String str70 = dateTimeFormatter62.print((org.joda.time.ReadablePartial) localDate69);
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate69, (int) (short) -1, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDate69.getFieldType((int) (short) 1);
        boolean boolean79 = mutableDateTime21.isSupported(dateTimeFieldType78);
        int int80 = dateTime5.get(dateTimeFieldType78);
        org.joda.time.DateTime.Property property81 = dateTime5.year();
        org.joda.time.DateTime dateTime82 = property81.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:06:29.706Z" + "'", str18, "0003-06-21T18:06:29.706Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "2022-02-22t07:24:27.241z_0003-06-21T17:56:51.905Z");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645515259705,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=34,SECOND=19,MILLISECOND=705,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str70, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test8500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test8500");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        java.lang.String str33 = dateTimeField31.getAsText(1645514882812L);
        int int34 = dateTimeField31.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(110);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(dateTimeZone36);
        org.joda.time.LocalTime localTime39 = localTime37.minusSeconds(912);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime47.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology51 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfHalfday();
        java.util.Locale locale57 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean58 = locale57.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(2L, chronology51, locale57, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.DurationField durationField62 = chronology51.months();
        org.joda.time.DateTimeField dateTimeField63 = chronology51.secondOfMinute();
        org.joda.time.DurationField durationField64 = chronology51.halfdays();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate71 = localDate65.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property72 = localDate65.yearOfEra();
        org.joda.time.LocalDate localDate73 = property72.roundFloorCopy();
        org.joda.time.LocalDate localDate74 = property72.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property75 = localDate74.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDate localDate78 = localDate74.withPeriodAdded(readablePeriod76, 26671);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDate localDate80 = localDate78.minus(readablePeriod79);
        int[] intArray82 = chronology51.get((org.joda.time.ReadablePartial) localDate80, (long) 203908000);
        java.util.Locale.Builder builder84 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder85 = builder84.clear();
        java.util.Locale.Builder builder86 = builder84.clearExtensions();
        java.util.Locale.Builder builder87 = builder86.clearExtensions();
        java.util.Locale locale88 = builder87.build();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = dateTimeField31.set((org.joda.time.ReadablePartial) localTime39, 538, intArray82, "2021-05-08T07:37:27.011", locale88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2021-05-08T07:37:27.011\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22" + "'", str33, "22");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 31 + "'", int34 == 31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1970, 1, 3]");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
    }
}

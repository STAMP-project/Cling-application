import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(28);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone8.getOffset(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withZone(dateTimeZone8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsShortText((long) 26666768, locale22);
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str28 = nameProvider24.getShortName(locale25, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.lang.String str29 = locale22.getDisplayCountry(locale25);
        boolean boolean30 = locale25.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter4.withLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = dateTimeFormatter4.parseLocalDate("2022-02-22T07:27:32.560Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:32.560Z\" is malformed at \"22-02-22T07:27:32.560Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7" + "'", str23, "7");
        org.junit.Assert.assertNotNull(nameProvider24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNull(str28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        int int21 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime5.minuteOfHour();
        org.joda.time.LocalDate localDate23 = dateTime5.toLocalDate();
        org.joda.time.DateTime.Property property24 = dateTime5.millisOfSecond();
        org.joda.time.DateTime.Property property25 = dateTime5.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.parse("53");
        int int28 = mutableDateTime27.getDayOfMonth();
        long long29 = mutableDateTime27.getMillis();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Calendar calendar34 = mutableDateTime30.toCalendar(locale33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        mutableDateTime30.setMillis(readableInstant39);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime30.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime45 = property42.add(26666);
        org.joda.time.MutableDateTime mutableDateTime46 = property42.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime48 = property42.addWrapField(1);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.getMutableDateTime();
        boolean boolean51 = mutableDateTime27.isBefore((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        long long63 = chronology57.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str68 = dateTimeZone65.getName(0L, locale67);
        org.joda.time.Chronology chronology69 = chronology57.withZone(dateTimeZone65);
        mutableDateTime27.setZoneRetainFields(dateTimeZone65);
        boolean boolean71 = mutableDateTime27.isAfterNow();
        boolean boolean72 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter74 = dateTimeFormatter73.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime75.add(readableDuration76);
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.util.Calendar calendar79 = mutableDateTime75.toCalendar(locale78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter73.withLocale(locale78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter80.withPivotYear(50);
        java.lang.String str83 = dateTime5.toString(dateTimeFormatter82);
        java.lang.StringBuffer stringBuffer84 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter82.printTo(stringBuffer84, 1232340473088000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60494601600000L) + "'", long29 == (-60494601600000L));
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514945168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=5,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-48469999L) + "'", long63 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimePrinter74);
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1645514945168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=5,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "lundi 22 f\351vrier -0001" + "'", str83, "lundi 22 f\351vrier -0001");
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.String str11 = locale4.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter0.withLocale(locale4);
        int int16 = dateTimeFormatter15.getDefaultYear();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("");
        java.lang.String str19 = timeZone18.getID();
        java.lang.String str20 = timeZone18.getID();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean22 = timeZone18.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter15.withZone(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        java.lang.String str54 = dateTimeZone49.toString();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        boolean boolean58 = dateTimeZone56.equals((java.lang.Object) locale57);
        java.lang.String str59 = dateTimeZone49.getName((long) 26667, locale57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter15.withZone(dateTimeZone49);
        java.lang.String str62 = dateTimeFormatter60.print((long) 785);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str10, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str11, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str14, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2000 + "'", int16 == 2000);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GMT" + "'", str20, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1/1/70 12:00 AM" + "'", str62, "1/1/70 12:00 AM");
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        int int5 = dateTimePrinter4.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter6.getParser();
        int int16 = dateTimeParser15.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter18.getPrinter();
        org.joda.time.Chronology chronology20 = dateTimeFormatter18.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withDefaultYear((int) (byte) 10);
        java.util.Locale locale23 = dateTimeFormatter18.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser24);
        int int26 = dateTimeParser24.estimateParsedLength();
        int int27 = dateTimeParser24.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser24);
        int int29 = dateTimePrinter2.estimatePrintedLength();
        int int30 = dateTimePrinter2.estimatePrintedLength();
        java.io.Writer writer31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.yearOfEra();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        org.joda.time.LocalDate localDate41 = property39.withMaximumValue();
        org.joda.time.LocalDate localDate43 = property39.addWrapFieldToCopy(26700);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 24, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekyearOfCentury();
        long long56 = dateTimeField54.remainder(86400000L);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.minuteOfHour();
        java.util.Locale locale72 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.lang.String str73 = dateTimeField67.getAsShortText((long) (byte) -1, locale72);
        java.util.Locale locale74 = locale72.stripExtensions();
        java.util.Locale locale78 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale82 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str83 = locale82.getDisplayVariant();
        java.lang.String str84 = locale78.getDisplayCountry(locale82);
        java.lang.String str85 = locale78.getDisplayName();
        java.util.Locale locale86 = java.util.Locale.getDefault();
        java.lang.String str87 = locale86.getDisplayCountry();
        java.lang.String str88 = locale78.getDisplayCountry(locale86);
        java.lang.String str89 = locale86.getDisplayScript();
        java.lang.String str90 = locale74.getDisplayCountry(locale86);
        java.lang.String str91 = dateTimeField54.getAsShortText(63, locale86);
        java.lang.String str92 = locale86.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter2.printTo(writer31, (org.joda.time.ReadablePartial) localDate43, locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimePrinter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNotNull(dateTimeParser24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 40 + "'", int26 == 40);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86400000L + "'", long56 == 86400000L);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals(locale72.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "59" + "'", str73, "59");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale78.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale82.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str84, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str85, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale86);
// flaky:         org.junit.Assert.assertEquals(locale86.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str88, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str90, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "63" + "'", str91, "63");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        boolean boolean23 = dateTime19.isAfter((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime19.plus(16134216940826667L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime19.withWeekOfWeekyear(26740063);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26740063 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.dayOfMonth();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.dayOfWeek();
        mutableDateTime16.addMillis(26784302);
        org.joda.time.Chronology chronology23 = mutableDateTime16.getChronology();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime16.add(readableDuration24, 26669922);
        java.util.Locale locale28 = null;
        java.lang.String str29 = mutableDateTime16.toString("50422", locale28);
        org.joda.time.Chronology chronology30 = mutableDateTime16.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29 + "'", int15 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:29:05.517Z" + "'", str17, "2022-02-22T07:29:05.517Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "50422" + "'", str29, "50422");
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = mutableDateTime15.toCalendar(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime46.withEra((-1036570595));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1036570595 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514945566,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=5,MILLISECOND=566,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62131077054434,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=5,MILLISECOND=566,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder31 = builder29.setLocale(locale30);
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = dateTimeField26.getAsShortText(2022L, locale28);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 24, chronology42);
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.LocalDate localDate45 = property44.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = dateTimeZone46.getName(0L, locale48);
        java.lang.String str50 = locale48.getDisplayLanguage();
        int int51 = property44.getMaximumTextLength(locale48);
        java.lang.String str52 = locale28.getDisplayLanguage(locale48);
        boolean boolean53 = locale28.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fran\347ais" + "'", str32, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ap. J.-C." + "'", str33, "ap. J.-C.");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fran\347ais" + "'", str50, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais" + "'", str52, "fran\347ais");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        mutableDateTime12.setTime((long) 26666335);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.minuteOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate22 = localDate16.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property23 = localDate16.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate16.withPeriodAdded(readablePeriod24, (int) ' ');
        org.joda.time.LocalDate localDate28 = localDate16.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate16.withPeriodAdded(readablePeriod29, (int) (byte) 0);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime37.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property42 = dateTime40.property(dateTimeFieldType41);
        int int43 = localDate31.get(dateTimeFieldType41);
        java.lang.String str44 = localDate31.toString();
        org.joda.time.LocalDate localDate46 = localDate31.withWeekOfWeekyear(9);
        int int47 = localDate46.getDayOfWeek();
        org.joda.time.LocalDate localDate49 = localDate46.withWeekyear(366);
        int int50 = localDate46.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int52 = dateTimeFormatter51.getDefaultYear();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter51.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekyearOfCentury();
        org.joda.time.DurationField durationField64 = dateTimeField63.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType65 = durationField64.getType();
        boolean boolean66 = localDate46.isSupported(durationFieldType65);
        mutableDateTime12.add(durationFieldType65, 26674);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime12.year();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology77.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.minuteOfHour();
        java.util.Locale locale84 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.lang.String str85 = dateTimeField79.getAsShortText((long) (byte) -1, locale84);
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.lang.String str87 = locale84.getDisplayCountry(locale86);
        java.lang.String str88 = locale86.getVariant();
        java.lang.String str89 = locale86.toLanguageTag();
        int int90 = property69.getMaximumShortTextLength(locale86);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22" + "'", str44, "2022-02-22");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2000 + "'", int52 == 2000);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals(locale84.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "59" + "'", str85, "59");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str87, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "de" + "'", str89, "de");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale22 = dateTimeFormatter21.getLocale();
        java.util.Locale locale23 = dateTimeFormatter21.getLocale();
        java.lang.String str24 = dateTime5.toString(dateTimeFormatter21);
        org.joda.time.DateTime.Property property25 = dateTime5.millisOfDay();
        org.joda.time.DateTime dateTime26 = property25.getDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNull(locale23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "22 f\351vrier -0001 07:29:05 +00:00" + "'", str24, "22 f\351vrier -0001 07:29:05 +00:00");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(4);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(26666877);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("53");
        int int12 = mutableDateTime11.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime11.add(readablePeriod13, 26668);
        boolean boolean16 = dateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime9.plus(readableDuration17);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Calendar calendar23 = mutableDateTime19.toCalendar(locale22);
        boolean boolean24 = mutableDateTime19.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str26 = mutableDateTime19.toString(dateTimeFormatter25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime19.property(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((-1L), dateTimeZone30);
        org.joda.time.LocalTime localTime33 = localTime31.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property34 = localTime31.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((-1L), dateTimeZone36);
        org.joda.time.LocalTime localTime39 = localTime37.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property40 = localTime37.millisOfDay();
        org.joda.time.LocalTime localTime41 = property40.roundHalfCeilingCopy();
        int int42 = localTime31.compareTo((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.LocalTime.Property property43 = localTime31.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property43.getFieldType();
        int int45 = mutableDateTime19.get(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = dateTime9.withField(dateTimeFieldType44, 26756981);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26756981 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514945838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=5,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "7:29:05 AM +00:00" + "'", str26, "7:29:05 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 29 + "'", int45 == 29);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        long long20 = chronology14.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime(chronology14);
        int int22 = dateTime6.getSecondOfMinute();
        org.joda.time.DateTime.Property property23 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime6.withSecondOfMinute(18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter26.getPrinter();
        int int28 = dateTimePrinter27.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate30.withYear((int) (byte) 1);
        java.lang.String str37 = dateTimeFormatter29.print((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter29.getParser();
        int int39 = dateTimeParser38.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser38);
        java.lang.Integer int41 = dateTimeFormatter40.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((java.lang.Object) int41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfWeek();
        boolean boolean44 = dateTime6.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        mutableDateTime42.addWeekyears(0);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        mutableDateTime47.setMillis(readableInstant56);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime47.secondOfDay();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate62.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate66 = localDate62.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime67.add(readableDuration68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        mutableDateTime67.add(durationFieldType71, (-1));
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime67.weekOfWeekyear();
        org.joda.time.DateTime dateTime75 = localDate66.toDateTime((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate78 = localDate76.minusMonths((int) (short) -1);
        boolean boolean80 = localDate76.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology81 = localDate76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology83 = chronology81.withZone(dateTimeZone82);
        org.joda.time.DateTimeField dateTimeField84 = chronology81.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = dateTimeField84.getType();
        mutableDateTime67.setRounding(dateTimeField84);
        mutableDateTime47.setMillis((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.MutableDateTime mutableDateTime88 = mutableDateTime47.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        mutableDateTime47.setZoneRetainFields(dateTimeZone90);
        mutableDateTime42.setZoneRetainFields(dateTimeZone90);
        org.joda.time.MutableDateTime mutableDateTime93 = new org.joda.time.MutableDateTime(obj0, dateTimeZone90);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-48469999L) + "'", long20 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimePrinter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 40 + "'", int28 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str37, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 40 + "'", int39 == 40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645514945868,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=5,MILLISECOND=868,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.year();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = chronology9.get(readablePeriod15, 16148186799000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        int int11 = localDate10.getEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = property22.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate32 = localDate26.withYear((int) (byte) 1);
        java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        boolean boolean43 = dateTimeZone34.equals((java.lang.Object) dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = localDate10.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableDateTime47.add(readablePeriod48, (-53));
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        java.lang.String str52 = mutableDateTime51.toString();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime51.add(readableDuration53);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        mutableDateTime55.setChronology(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.years();
        org.joda.time.DurationField durationField67 = chronology63.centuries();
        mutableDateTime51.setChronology(chronology63);
        long long72 = chronology63.add(841644804756274217L, (long) 26666, 26672);
        org.joda.time.DateTimeField dateTimeField73 = chronology63.halfdayOfDay();
        mutableDateTime47.setChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField75 = chronology63.secondOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology63.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:29:06.113Z" + "'", str52, "2022-02-22T07:29:06.113Z");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 841644805467509769L + "'", long72 == 841644805467509769L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate6 = localDate2.plusWeeks(1);
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter8.getPrinter();
        boolean boolean10 = dateTimeFormatter8.isParser();
        boolean boolean11 = dateTimeFormatter8.isParser();
        java.lang.String str12 = localDate6.toString(dateTimeFormatter8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate6.withDayOfMonth(64863);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64863 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimePrinter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Mar 29, 2022" + "'", str12, "Mar 29, 2022");
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.getVariant();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        long long14 = dateTimeField11.addWrapField((long) ' ', 0);
        long long16 = dateTimeField11.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDate17.getFieldType(1);
        int int22 = localDate17.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        mutableDateTime23.add(durationFieldType27, (-1));
        boolean boolean30 = localDate17.isSupported(durationFieldType27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField39.getType();
        org.joda.time.LocalDate.Property property41 = localDate17.property(dateTimeFieldType40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Calendar calendar46 = mutableDateTime42.toCalendar(locale45);
        boolean boolean47 = mutableDateTime42.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str49 = mutableDateTime42.toString(dateTimeFormatter48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        boolean boolean52 = dateTimeZone50.equals((java.lang.Object) locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter48.withLocale(locale51);
        java.lang.String str54 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDate17, locale51);
        java.lang.String str55 = locale1.getDisplayCountry(locale51);
        java.lang.String str56 = locale51.getDisplayVariant();
        java.util.Locale.setDefault(locale51);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "53");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 345600000L + "'", long16 == 345600000L);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "53");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645514946270,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=6,MILLISECOND=270,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "7:29:06 AM +00:00" + "'", str49, "7:29:06 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "8" + "'", str54, "8");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate21.withPeriodAdded(readablePeriod29, (int) ' ');
        org.joda.time.LocalDate localDate33 = localDate21.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = property44.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField47 = property44.getField();
        org.joda.time.DateTime dateTime49 = property44.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.plus(readableDuration50);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime51.getZone();
        org.joda.time.DateTime dateTime53 = localDate21.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime59.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property64 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property64.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField67 = property64.getField();
        org.joda.time.DateTime dateTime69 = property64.setCopy(26665274);
        org.joda.time.DateTime dateTime70 = property64.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property71 = dateTime70.secondOfDay();
        org.joda.time.DateTime dateTime72 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = dateTime19.minusMillis(26677059);
        int int76 = dateTime19.getYearOfEra();
        org.joda.time.DateTime dateTime78 = dateTime19.minusDays(26743877);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime81 = dateTime78.withPeriodAdded(readablePeriod79, 26776636);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        java.lang.String str9 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        boolean boolean19 = dateTimeZone10.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate8.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate localDate22 = localDate8.minusYears(2000);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 26674492, chronology23, locale24);
        org.joda.time.DurationField durationField27 = chronology23.millis();
        long long30 = durationField27.getMillis((long) 26842, (-841587551397070940L));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 26842L + "'", long30 == 26842L);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1L), dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property13 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMinimumValue();
        int int15 = localTime14.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str17 = localTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property19 = localTime14.property(dateTimeFieldType18);
        int int20 = localTime7.get(dateTimeFieldType18);
        org.joda.time.LocalTime localTime22 = localTime7.minusMinutes(26880271);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter0.getPrinter();
        java.lang.StringBuffer stringBuffer12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusMillis(24);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = property17.getLocalDateTime();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        boolean boolean35 = dateTimeZone32.isFixed();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        mutableDateTime37.add(durationFieldType41, (-1));
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime37.weekOfWeekyear();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        int int46 = property44.getMaximumTextLength(locale45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime52.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime57.add(readableDuration58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getDurationType();
        mutableDateTime57.add(durationFieldType61, (-1));
        org.joda.time.DateTime dateTime65 = dateTime52.withFieldAdded(durationFieldType61, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime68 = dateTime52.withDurationAdded(readableDuration66, 1);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale71 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str72 = dateTimeZone69.getName(0L, locale71);
        java.util.Calendar calendar73 = dateTime68.toCalendar(locale71);
        java.lang.String str74 = locale45.getDisplayLanguage(locale71);
        java.lang.String str75 = dateTimeZone32.getName((long) 26666335, locale71);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter11.printTo(stringBuffer12, (org.joda.time.ReadablePartial) localDateTime19, locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=-62194235453275,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=6,MILLISECOND=725,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "anglais" + "'", str74, "anglais");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        long long13 = dateTimeField10.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology22.getZone();
        org.joda.time.DurationField durationField30 = chronology22.centuries();
        java.util.Locale locale32 = new java.util.Locale("53");
        java.lang.String str33 = locale32.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology22, locale32);
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = dateTimeField10.getAsText((-1), locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter0.withLocale(locale32);
        int int38 = dateTimeFormatter0.getDefaultYear();
        int int39 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.weeks();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 100, chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter0.withChronology(chronology47);
        java.lang.Appendable appendable52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = localDate53.getFieldType(1);
        int int58 = localDate53.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime59.add(readableDuration60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getDurationType();
        mutableDateTime59.add(durationFieldType63, (-1));
        boolean boolean66 = localDate53.isSupported(durationFieldType63);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = chronology72.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField75.getType();
        org.joda.time.LocalDate.Property property77 = localDate53.property(dateTimeFieldType76);
        org.joda.time.LocalDate localDate79 = property77.addToCopy(26678886);
        org.joda.time.LocalDate localDate81 = localDate79.minusDays(52);
        int int82 = localDate81.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable52, (org.joda.time.ReadablePartial) localDate81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals(locale32.toString(), "53");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        mutableDateTime0.setChronology(chronology10);
        mutableDateTime0.setDayOfWeek(5);
        mutableDateTime0.addMillis((int) 'x');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime0.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        boolean boolean35 = dateTimeZone26.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        int int37 = dateTime36.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        boolean boolean40 = dateTime36.isAfter((-48469999L));
        org.joda.time.DateTime dateTime42 = dateTime36.minusYears(27268320);
        int int43 = dateTime36.getYear();
        org.joda.time.DateTime.Property property44 = dateTime36.minuteOfHour();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime49 = property46.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setTime(26699, (-5), 556, 59726);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26699 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property32 = localDate30.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        mutableDateTime33.setMillis(readableInstant42);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime33.secondOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate48.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate52 = localDate48.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutableDateTime53.add(readableDuration54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        mutableDateTime53.add(durationFieldType57, (-1));
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.DateTime dateTime61 = localDate52.toDateTime((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField70.getType();
        mutableDateTime53.setRounding(dateTimeField70);
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate77 = localDate74.withField(dateTimeFieldType75, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime33.property(dateTimeFieldType75);
        java.lang.String str79 = dateTimeFieldType75.toString();
        org.joda.time.LocalDate localDate81 = localDate30.withField(dateTimeFieldType75, 26712958);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = localDate81.getFieldTypes();
        int int83 = localDate81.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514947188,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=7,MILLISECOND=188,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "year" + "'", str79, "year");
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 267129 + "'", int83 == 267129);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        mutableDateTime0.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfMonth();
        org.joda.time.DateTime dateTime10 = mutableDateTime0.toDateTime();
        boolean boolean11 = mutableDateTime0.isAfterNow();
        java.lang.Object obj12 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.secondOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate22 = localDate16.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property23 = localDate16.yearOfEra();
        org.joda.time.LocalDate localDate24 = property23.roundFloorCopy();
        org.joda.time.LocalDate localDate25 = property23.withMaximumValue();
        org.joda.time.LocalDate localDate27 = property23.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean29 = localDate27.isSupported(dateTimeFieldType28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale31 = dateTimeFormatter30.getLocale();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter30.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        mutableDateTime14.setChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.hours();
        org.joda.time.DateTime dateTime42 = mutableDateTime0.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.weekOfWeekyear();
        int int44 = dateTimeField43.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-12-27T07:29:07.384Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-12-27T07:29:07.384Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-12-27T07:29:07.384Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str7 = property3.getAsText(locale6);
        org.joda.time.LocalTime localTime9 = property3.addCopy(30844800000L);
        org.joda.time.LocalTime localTime10 = property3.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        boolean boolean22 = dateTimeFieldType12.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.hourOfHalfday();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField26 = chronology18.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = dateTimeFormatter27.getPrinter();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronolgy();
        int int30 = dateTimeFormatter27.getDefaultYear();
        java.lang.Integer int31 = dateTimeFormatter27.getPivotYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        boolean boolean44 = dateTimeFieldType34.isSupported(chronology40);
        org.joda.time.DateTimeField dateTimeField45 = chronology40.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.DateTimeZone dateTimeZone47 = chronology40.getZone();
        org.joda.time.DurationField durationField48 = chronology40.centuries();
        java.util.Locale locale50 = new java.util.Locale("53");
        java.lang.String str51 = locale50.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology40, locale50);
        java.util.Locale locale56 = new java.util.Locale("java.io.IOException", "2022-02-22T07:24:32.198Z", "0003-06-21T17:56:37.850Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 38090, chronology40, locale56, (java.lang.Integer) 54, 0);
        java.util.Locale locale60 = dateTimeParserBucket59.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter27.withLocale(locale60);
        int int62 = dateTimeField26.getMaximumTextLength(locale60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime63 = property3.setCopy("2022-02-22T07:28:23.285Z", locale60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:28:23.285Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "86399999" + "'", str7, "86399999");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimePrinter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2000 + "'", int30 == 2000);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertEquals(locale50.toString(), "53");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals(locale56.toString(), "java.io.ioexception_2022-02-22T07:24:32.198Z_0003-06-21T17:56:37.850Z");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "java.io.ioexception_2022-02-22T07:24:32.198Z_0003-06-21T17:56:37.850Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale16 = dateTimeFormatter15.getLocale();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter15.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType13.getField(chronology22);
        org.joda.time.DurationField durationField25 = chronology22.centuries();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(2L, chronology22);
        org.joda.time.DateMidnight dateMidnight27 = localDate26.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        boolean boolean46 = dateTimeZone37.equals((java.lang.Object) dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate49 = localDate35.minusYears(2000);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        int int51 = localDate50.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.plus((-48469999L));
        org.joda.time.DateTime dateTime63 = dateTime59.plusSeconds(2);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = localDate67.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((java.lang.Object) dateTime59, dateTimeZone76);
        org.joda.time.Interval interval80 = localDate50.toInterval(dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        java.lang.String str82 = mutableDateTime81.toString();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        boolean boolean85 = dateTimeZone83.equals((java.lang.Object) locale84);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(dateTimeZone83);
        mutableDateTime81.setZoneRetainFields(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDate50.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate(dateTimeZone83);
        org.joda.time.DateTime dateTime90 = localDate49.toDateTimeAtCurrentTime(dateTimeZone83);
        java.lang.String str91 = dateTimeZone83.toString();
        org.joda.time.LocalDate localDate92 = org.joda.time.LocalDate.now(dateTimeZone83);
        org.joda.time.DateMidnight dateMidnight93 = localDate26.toDateMidnight(dateTimeZone83);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T07:29:07.595Z" + "'", str82, "2022-02-22T07:29:07.595Z");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "UTC" + "'", str91, "UTC");
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(dateMidnight93);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.minus((-1228953L));
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readablePeriod23);
        java.lang.Object obj25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj25, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        boolean boolean34 = dateTime24.equals((java.lang.Object) dateTimeField33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime24.withDayOfWeek(26668903);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26668903 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime7.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        boolean boolean29 = dateTimeFieldType19.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology25);
        mutableDateTime31.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        mutableDateTime31.add(durationFieldType35, (int) (byte) 1);
        mutableDateTime7.add(durationFieldType35, 26);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime7.copy();
        boolean boolean41 = mutableDateTime40.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514947933,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=7,MILLISECOND=933,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:29:07 AM +00:00" + "'", str14, "7:29:07 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        java.lang.String str4 = dateTimeFormatter0.print(26712102L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(38090);
        java.io.Writer writer7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate11.toDateTimeAtCurrentTime(dateTimeZone20);
        int int23 = dateTime22.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        java.lang.String str25 = mutableDateTime24.toString();
        boolean boolean26 = dateTime22.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime24.toMutableDateTime(chronology34);
        mutableDateTime35.setSecondOfDay(32);
        mutableDateTime35.setHourOfDay((int) (short) 1);
        java.lang.Object obj40 = mutableDateTime35.clone();
        mutableDateTime35.addMonths(26672631);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        int int54 = dateTimeField51.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate62 = localDate56.withYear((int) (byte) 1);
        java.lang.String str63 = dateTimeFormatter55.print((org.joda.time.ReadablePartial) localDate62);
        java.util.Locale locale68 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str69 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDate62, (int) (short) -1, locale68);
        long long71 = dateTimeField51.roundHalfFloor((long) 31);
        int int72 = dateTimeField51.getMaximumValue();
        long long75 = dateTimeField51.add((long) '#', 97200000);
        java.lang.String str77 = dateTimeField51.getAsShortText((long) 26666877);
        int int79 = dateTimeField51.getLeapAmount(19045L);
        int int80 = mutableDateTime35.get(dateTimeField51);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer7, (org.joda.time.ReadableInstant) mutableDateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7:25:12 AM +00:00" + "'", str4, "7:25:12 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 29 + "'", int23 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:29:08.069Z" + "'", str25, "2022-02-22T07:29:08.069Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "2022-02-22T01:00:32.069Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "2022-02-22T01:00:32.069Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "2022-02-22T01:00:32.069Z");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDate62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str63, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1" + "'", str69, "-1");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-259200000L) + "'", long71 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 58786560000000035L + "'", long75 == 58786560000000035L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 21 + "'", int80 == 21);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate17 = localDate11.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate11.withPeriodAdded(readablePeriod19, (int) ' ');
        org.joda.time.LocalDate localDate23 = localDate11.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate11.withPeriodAdded(readablePeriod24, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        boolean boolean36 = charSet32.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34);
        charSet32.clear();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        boolean boolean39 = charSet32.contains((java.lang.Object) locale38);
        java.lang.String str40 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDate26, locale38);
        org.joda.time.Chronology chronology41 = localDate26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 12, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.halfdayOfDay();
        long long45 = dateTimeField43.roundCeiling((long) 27);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514948155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=155,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22" + "'", str40, "22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 43200000L + "'", long45 == 43200000L);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("2022-02-22T07:27:48.658Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:27:48.658Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        mutableDateTime18.add(durationFieldType22, (-1));
        mutableDateTime18.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime18.dayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime18.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.addWrapField((-2));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate36.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        long long50 = dateTimeZone32.getMillisKeepLocal(dateTimeZone45, 10L);
        mutableDateTime30.setZone(dateTimeZone32);
        org.joda.time.DateTime dateTime52 = localDate0.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime53.withEra(26856503);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26856503 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getISO3Language();
        java.lang.String str48 = locale45.getDisplayLanguage(locale46);
        java.lang.String str49 = locale46.getCountry();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        int int61 = dateTimeField58.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        java.lang.String str70 = dateTimeFormatter62.print((org.joda.time.ReadablePartial) localDate69);
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate69, (int) (short) -1, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDate69.getFieldType((int) (short) 1);
        int int79 = localDate69.getMonthOfYear();
        org.joda.time.LocalDate.Property property80 = localDate69.dayOfMonth();
        java.util.Locale locale82 = new java.util.Locale("53");
        boolean boolean83 = locale82.hasExtensions();
        java.lang.String str84 = property80.getAsShortText(locale82);
        java.lang.String str85 = locale46.getDisplayScript(locale82);
        java.util.Locale locale87 = new java.util.Locale("53");
        java.lang.String str88 = locale87.getDisplayScript();
        java.lang.String str89 = locale46.getDisplayLanguage(locale87);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter43.withLocale(locale87);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter90.withPivotYear(26681221);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = dateTimeFormatter92.parseMillis("2022-02-22T07:26:04.125Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:26:04.125Z\" is malformed at \"22-02-22T07:26:04.125Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:18.245Z" + "'", str18, "0003-06-21T18:01:18.245Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514948244,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=244,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235451756,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=244,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514948244,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=244,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:29:08 AM +00:00" + "'", str39, "7:29:08 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7:29:08 AM +00:00" + "'", str44, "7:29:08 AM +00:00");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "jpn" + "'", str47, "jpn");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str48, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str70, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertEquals(locale82.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "22" + "'", str84, "22");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals(locale87.toString(), "53");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Japanese" + "'", str89, "Japanese");
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology8);
        boolean boolean10 = dateTimeFormatter1.isParser();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate12.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property19 = localDate12.yearOfEra();
        org.joda.time.LocalDate localDate20 = property19.roundFloorCopy();
        org.joda.time.LocalDate localDate21 = property19.withMaximumValue();
        int int22 = localDate21.getEra();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property33 = dateTime31.property(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = property33.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime35 = property33.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate43 = localDate37.withYear((int) (byte) 1);
        java.lang.String str44 = dateTimeFormatter36.print((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        boolean boolean54 = dateTimeZone45.equals((java.lang.Object) dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDate43.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime35.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = localDate21.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone52);
        java.lang.String str59 = dateTimeFormatter1.print((org.joda.time.ReadableInstant) mutableDateTime58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.parse("2022-02-22T07:25:06.677Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:25:06.677Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str44, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "January 1, 1970 12:00:00 AM +00:00" + "'", str59, "January 1, 1970 12:00:00 AM +00:00");
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(26666335);
        int int15 = localDateTime14.size();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withPeriodAdded(readablePeriod16, (int) '4');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withPeriodAdded(readablePeriod19, (int) '#');
        java.lang.String str22 = dateTimeFormatter5.print((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minus(readableDuration23);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Tuesday, September 13, 2072" + "'", str22, "Tuesday, September 13, 2072");
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str9 = localTime6.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property11 = localTime6.property(dateTimeFieldType10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Calendar calendar16 = mutableDateTime12.toCalendar(locale15);
        mutableDateTime12.addYears(26684956);
        boolean boolean19 = mutableDateTime12.isEqualNow();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.minutes();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate30 = localDate28.withYear(52);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate28.minus(readablePeriod31);
        org.joda.time.LocalDate.Property property33 = localDate32.yearOfCentury();
        org.joda.time.LocalDate.Property property34 = localDate32.dayOfWeek();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDate35.getFieldType(1);
        int int40 = localDate35.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime41.add(readableDuration42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        mutableDateTime41.add(durationFieldType45, (-1));
        boolean boolean48 = localDate35.isSupported(durationFieldType45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDate35.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate52 = localDate35.withPeriodAdded(readablePeriod50, (-2));
        int int53 = localDate52.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime59.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime66 = dateTime63.withField(dateTimeFieldType64, 26666);
        int int67 = localDate52.get(dateTimeFieldType64);
        int int68 = localDate32.indexOf(dateTimeFieldType64);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime12.property(dateTimeFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime71 = localTime6.withField(dateTimeFieldType64, (-26779241));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514948330,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=330,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        java.lang.Integer int2 = dateTimeFormatter0.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = dateTimeFormatter0.parseMillis("2022-02-22T07:27:07.273Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:07.273Z\" is malformed at \"22-02-22T07:27:07.273Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale11 = dateTimeFormatter10.getLocale();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter10.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate20.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate20.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.LocalDate localDate32 = localDate20.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate20.withPeriodAdded(readablePeriod33, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Calendar calendar40 = mutableDateTime36.toCalendar(locale39);
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        boolean boolean45 = charSet41.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43);
        charSet41.clear();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        boolean boolean48 = charSet41.contains((java.lang.Object) locale47);
        java.lang.String str49 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDate35, locale47);
        java.util.Locale locale51 = new java.util.Locale("53");
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.lang.String str53 = locale47.getDisplayVariant(locale51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime54 = property5.setCopy("0003-06-21T18:01:05.340Z", locale51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0003-06-21T18:01:05.340Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514948359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=359,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "22" + "'", str49, "22");
        org.junit.Assert.assertEquals(locale51.toString(), "53");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "53" + "'", str52, "53");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        java.util.Locale locale2 = new java.util.Locale("53");
        boolean boolean3 = locale2.hasExtensions();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        java.lang.String str5 = locale2.getCountry();
        java.lang.String str6 = locale2.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = org.joda.time.format.DateTimeFormat.patternForStyle("23", locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style character: 2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "und" + "'", str6, "und");
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property13.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property13.addWrapField(1);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.getMutableDateTime();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate28 = localDate22.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate22.yearOfEra();
        org.joda.time.LocalDate localDate30 = property29.roundFloorCopy();
        org.joda.time.LocalDate localDate31 = property29.withMaximumValue();
        org.joda.time.LocalDate localDate33 = property29.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean35 = localDate33.isSupported(dateTimeFieldType34);
        mutableDateTime21.set(dateTimeFieldType34, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter38.getPrinter();
        org.joda.time.Chronology chronology40 = dateTimeFormatter38.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter38.withDefaultYear((int) (byte) 10);
        boolean boolean43 = dateTimeFormatter38.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = dateTimeFormatter38.getPrinter();
        java.lang.String str45 = mutableDateTime21.toString(dateTimeFormatter38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 38090);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Calendar calendar52 = mutableDateTime48.toCalendar(locale51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.lang.String str64 = dateTimeField61.getAsText((long) (short) 1, locale63);
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale63);
        java.lang.String str67 = locale51.getDisplayLanguage(locale63);
        java.lang.String str68 = locale63.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter38.withLocale(locale63);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate73 = localDate70.withField(dateTimeFieldType71, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime77 = dateTime75.plusMonths((int) '4');
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        long long89 = chronology83.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime90 = dateTime75.toDateTime(chronology83);
        org.joda.time.DateTime dateTime92 = dateTime75.plusSeconds(0);
        org.joda.time.Chronology chronology93 = dateTime75.getChronology();
        org.joda.time.DateTime.Property property94 = dateTime75.yearOfCentury();
        org.joda.time.DateTime dateTime95 = dateTime75.withLaterOffsetAtOverlap();
        long long96 = dateTime95.getMillis();
        java.lang.String str97 = dateTimeFormatter38.print((org.joda.time.ReadableInstant) dateTime95);
        boolean boolean98 = dateTimeFormatter38.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime99 = org.joda.time.LocalDateTime.parse("-0001-02-22T07:28:19.740Z", dateTimeFormatter38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-0001-02-22T07:28:19.740Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514948394,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=394,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimePrinter39);
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Friday, February 4, 2022" + "'", str45, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514948395,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertNotNull(strSet65);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-48469999L) + "'", long89 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTime95);
// flaky:         org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-62194235451605L) + "'", long96 == (-62194235451605L));
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Monday, February 22, -0001" + "'", str97, "Monday, February 22, -0001");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plus((-48469999L));
        java.lang.String str19 = dateTime18.toString();
        boolean boolean20 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Calendar calendar27 = mutableDateTime23.toCalendar(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter21.withLocale(locale26);
        java.util.Calendar calendar29 = dateTime6.toCalendar(locale26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime6.withDurationAdded(readableDuration30, 100);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        boolean boolean38 = mutableDateTime33.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str40 = mutableDateTime33.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter39.withLocale(locale42);
        java.lang.String str45 = dateTime6.toString(dateTimeFormatter44);
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale46.getDisplayLanguage(locale47);
        java.lang.String str50 = locale47.getCountry();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekOfWeekyear();
        int int62 = dateTimeField59.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate70 = localDate64.withYear((int) (byte) 1);
        java.lang.String str71 = dateTimeFormatter63.print((org.joda.time.ReadablePartial) localDate70);
        java.util.Locale locale76 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str77 = dateTimeField59.getAsText((org.joda.time.ReadablePartial) localDate70, (int) (short) -1, locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDate70.getFieldType((int) (short) 1);
        int int80 = localDate70.getMonthOfYear();
        org.joda.time.LocalDate.Property property81 = localDate70.dayOfMonth();
        java.util.Locale locale83 = new java.util.Locale("53");
        boolean boolean84 = locale83.hasExtensions();
        java.lang.String str85 = property81.getAsShortText(locale83);
        java.lang.String str86 = locale47.getDisplayScript(locale83);
        java.util.Locale locale88 = new java.util.Locale("53");
        java.lang.String str89 = locale88.getDisplayScript();
        java.lang.String str90 = locale47.getDisplayLanguage(locale88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter44.withLocale(locale88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter91.withPivotYear(26681221);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime94 = org.joda.time.LocalDateTime.parse("0003-06-21T17:59:29.796Z", dateTimeFormatter91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T17:59:29.796Z\" is malformed at \"03-06-21T17:59:29.796Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0003-06-21T18:01:18.447Z" + "'", str19, "0003-06-21T18:01:18.447Z");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514948446,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=446,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-62194235451554,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=446,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514948446,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=446,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:29:08 AM +00:00" + "'", str40, "7:29:08 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:29:08 AM +00:00" + "'", str45, "7:29:08 AM +00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "jpn" + "'", str48, "jpn");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str49, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str71, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale76.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1" + "'", str77, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals(locale83.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "22" + "'", str85, "22");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals(locale88.toString(), "53");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Japanese" + "'", str90, "Japanese");
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        boolean boolean55 = dateTimeFieldType45.isSupported(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology51);
        mutableDateTime57.addMillis((int) (short) 10);
        int int62 = dateTimeFormatter37.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime57, "1970", 8);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology64 = dateTimeFormatter37.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = dateTimeFormatter37.parseLocalDateTime("7:25:47 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"7:25:47 AM +00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514948517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=517,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-9) + "'", int62 == (-9));
        org.junit.Assert.assertNotNull(dateTimePrinter63);
        org.junit.Assert.assertNull(chronology64);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder3 = builder1.setLocale(locale2);
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale5 = builder1.build();
        java.util.Locale.Builder builder6 = builder1.clear();
        java.util.Locale locale7 = builder1.build();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale.Builder builder9 = builder1.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:25:33.291Z", locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:25:33.291Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter0.withZone(dateTimeZone25);
        boolean boolean30 = dateTimeZone25.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        java.lang.String str7 = dateTimeFormatter1.print((long) 999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withZoneUTC();
        boolean boolean9 = dateTimeFormatter1.isParser();
        boolean boolean10 = dateTimeFormatter1.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.parse("2022-02-22T07:26:12.363Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:26:12.363Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Thursday, January 1, 1970" + "'", str7, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        int int6 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter5.getParser();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate5 = property3.roundFloorCopy();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate9.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 2);
        boolean boolean25 = dateTimeZone18.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        org.joda.time.DateTime dateTime26 = localDate5.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDate27.getFieldType(1);
        int int32 = localDate27.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        mutableDateTime33.add(durationFieldType37, (-1));
        boolean boolean40 = localDate27.isSupported(durationFieldType37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate47 = localDate41.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property48 = localDate41.yearOfEra();
        org.joda.time.LocalDate localDate49 = property48.roundFloorCopy();
        org.joda.time.LocalDate localDate50 = property48.withMaximumValue();
        org.joda.time.LocalDate localDate52 = property48.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean54 = localDate52.isSupported(dateTimeFieldType53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale56 = dateTimeFormatter55.getLocale();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter55.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType53.getField(chronology62);
        boolean boolean65 = localDate27.isSupported(dateTimeFieldType53);
        int int66 = dateTime26.get(dateTimeFieldType53);
        org.joda.time.Chronology chronology67 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime26.minusMillis(26786746);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property12.set(100);
        org.joda.time.MutableDateTime mutableDateTime19 = property12.add(6);
        mutableDateTime19.setMinuteOfDay(57);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.addWrapField(26795);
        int int26 = mutableDateTime25.getRoundingMode();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate32 = localDate30.plusYears(26);
        int int33 = localDate32.getCenturyOfEra();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        int int46 = dateTimeField43.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate54 = localDate48.withYear((int) (byte) 1);
        java.lang.String str55 = dateTimeFormatter47.print((org.joda.time.ReadablePartial) localDate54);
        java.util.Locale locale60 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str61 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDate54, (int) (short) -1, locale60);
        java.lang.String str62 = localDate32.toString("\u30d5\u30e9\u30f3\u30b9\u8a9e", locale60);
        java.lang.String str63 = locale60.getDisplayName();
        java.lang.String str64 = locale60.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = mutableDateTime25.toString("2022-02-22T07:24:42.019Z", locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514948915,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=8,MILLISECOND=915,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str55, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale60.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1" + "'", str61, "-1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str62, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str63, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate21.withPeriodAdded(readablePeriod29, (int) ' ');
        org.joda.time.LocalDate localDate33 = localDate21.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = property44.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField47 = property44.getField();
        org.joda.time.DateTime dateTime49 = property44.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.plus(readableDuration50);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime51.getZone();
        org.joda.time.DateTime dateTime53 = localDate21.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime59.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property64 = dateTime62.property(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = property64.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField67 = property64.getField();
        org.joda.time.DateTime dateTime69 = property64.setCopy(26665274);
        org.joda.time.DateTime dateTime70 = property64.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property71 = dateTime70.secondOfDay();
        org.joda.time.DateTime dateTime72 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = dateTime19.minusMillis(26677059);
        int int76 = dateTime19.getYearOfEra();
        org.joda.time.DateTime dateTime78 = dateTime19.minusDays(26743877);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime80 = dateTime19.minus(readablePeriod79);
        org.joda.time.DateTime dateTime83 = dateTime80.withDurationAdded((-1152060667199901L), 151);
        int int84 = dateTime80.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfWeek();
        int int4 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusMinutes(26666768);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus(readableDuration7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plusMinutes(26700);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDateTime2.toString("2022-02-22T07:25:49.977Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMillis(8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withSecondOfMinute(39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        boolean boolean18 = dateTimeFormatter16.isParser();
        java.lang.String str19 = localDateTime11.toString(dateTimeFormatter16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = dateTimeFormatter16.parseLocalDate("2022-02-22T07:25:20.585Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:25:20.585Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Tuesday, February 22, 2022" + "'", str19, "Tuesday, February 22, 2022");
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfHalfday();
        java.util.Locale locale28 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean29 = locale28.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(2L, chronology22, locale28, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        long long55 = dateTimeZone50.getMillisKeepLocal(dateTimeZone53, (long) 2);
        boolean boolean57 = dateTimeZone50.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime33.setZoneRetainFields(dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableDateTime33.add(readablePeriod59, 8);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.weekOfWeekyear();
        int int73 = dateTimeField70.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate77 = localDate75.minusMonths((int) (short) -1);
        boolean boolean79 = localDate75.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate81 = localDate75.withYear((int) (byte) 1);
        java.lang.String str82 = dateTimeFormatter74.print((org.joda.time.ReadablePartial) localDate81);
        java.util.Locale locale87 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str88 = dateTimeField70.getAsText((org.joda.time.ReadablePartial) localDate81, (int) (short) -1, locale87);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = localDate81.getFieldType((int) (short) 1);
        boolean boolean91 = mutableDateTime33.isSupported(dateTimeFieldType90);
        dateTimeParserBucket32.saveField(dateTimeFieldType90, 100);
        org.joda.time.DateTime.Property property94 = dateTime11.property(dateTimeFieldType90);
        org.joda.time.DateTime.Property property95 = dateTime11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField96 = property95.getField();
        org.joda.time.DateTime dateTime97 = property95.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime98 = property95.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514949335,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=9,MILLISECOND=335,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDate81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str82, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale87.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-1" + "'", str88, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate6 = localDate0.withWeekyear(4);
        org.joda.time.LocalDate localDate8 = localDate0.minusDays(64626);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 26774760);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate17 = localDate11.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate11.withPeriodAdded(readablePeriod19, (int) ' ');
        org.joda.time.LocalDate localDate23 = localDate11.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate25 = localDate11.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology27 = dateTimeFormatter26.getChronolgy();
        java.lang.String str28 = localDate11.toString(dateTimeFormatter26);
        java.util.Locale locale29 = dateTimeFormatter26.getLocale();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter26.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter26.withDefaultYear(99);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate40 = localDate34.withYear((int) (byte) 1);
        java.lang.String str41 = dateTimeFormatter33.print((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        boolean boolean51 = dateTimeZone42.equals((java.lang.Object) dateTimeZone49);
        org.joda.time.DateTime dateTime52 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate54 = localDate40.minusYears(2000);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        int int56 = localDate55.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate60 = localDate57.withField(dateTimeFieldType58, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMonths((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime64.plus((-48469999L));
        org.joda.time.DateTime dateTime68 = dateTime64.plusSeconds(2);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate77 = localDate75.minusMonths((int) (short) -1);
        boolean boolean79 = localDate75.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology80 = localDate75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology82 = chronology80.withZone(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = localDate72.toDateTimeAtCurrentTime(dateTimeZone81);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((java.lang.Object) dateTime64, dateTimeZone81);
        org.joda.time.Interval interval85 = localDate55.toInterval(dateTimeZone81);
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime();
        java.lang.String str87 = mutableDateTime86.toString();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        boolean boolean90 = dateTimeZone88.equals((java.lang.Object) locale89);
        org.joda.time.LocalDate localDate91 = new org.joda.time.LocalDate(dateTimeZone88);
        mutableDateTime86.setZoneRetainFields(dateTimeZone88);
        org.joda.time.DateTime dateTime93 = localDate55.toDateTimeAtCurrentTime(dateTimeZone88);
        org.joda.time.LocalDate localDate94 = new org.joda.time.LocalDate(dateTimeZone88);
        org.joda.time.DateTime dateTime95 = localDate54.toDateTimeAtCurrentTime(dateTimeZone88);
        java.util.TimeZone timeZone96 = dateTimeZone88.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter26.withZone(dateTimeZone88);
        java.lang.String str98 = dateTime10.toString(dateTimeFormatter26);
        java.lang.String str99 = localDate0.toString(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(chronology27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str28, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str41, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval85);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022-02-22T07:29:09.517Z" + "'", str87, "2022-02-22T07:29:09.517Z");
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(timeZone96);
        org.junit.Assert.assertEquals(timeZone96.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "7:26:14 AM" + "'", str98, "7:26:14 AM");
// flaky:         org.junit.Assert.assertEquals("'" + str99 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str99, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.minusSeconds(10);
        boolean boolean11 = dateTime9.isBefore(2000L);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter13.withLocale(locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withZoneUTC();
        java.lang.String str24 = dateTime9.toString(dateTimeFormatter20);
        java.lang.String str26 = dateTimeFormatter20.print(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeFormatter20.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.parse("DateTimeField[millisOfDay]", dateTimeFormatter20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[millisOfDay]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514949644,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=9,MILLISECOND=644,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Monday, February 22, -0001" + "'", str24, "Monday, February 22, -0001");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Thursday, January 1, 1970" + "'", str26, "Thursday, January 1, 1970");
        org.junit.Assert.assertNull(dateTimeZone27);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime7 = property3.roundHalfEvenCopy();
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.LocalTime localTime10 = localTime7.plusHours((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime10.withPeriodAdded(readablePeriod11, 26668);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDate14.getFieldTypes();
        java.lang.String str30 = localDate14.toString("7");
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(718);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.DateTime dateTime34 = localDate14.toDateTimeAtMidnight(dateTimeZone32);
        java.util.Date date35 = localDate14.toDate();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = localTime13.isEqual((org.joda.time.ReadablePartial) localDate14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7" + "'", str30, "7");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.718" + "'", str33, "+00:00:00.718");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Feb 22 00:00:00 GMT 2022");
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        org.joda.time.DateTime dateTime54 = localDate53.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.withPeriodAdded(readablePeriod55, 26666570);
        org.joda.time.LocalDate localDate58 = dateTime57.toLocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.plusDays(26691926);
        org.joda.time.LocalDate.Property property61 = localDate60.centuryOfEra();
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder65 = builder63.setLocale(locale64);
        java.util.Locale.Builder builder67 = builder65.setLanguageTag("French");
        java.util.Locale locale68 = builder67.build();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Calendar calendar73 = mutableDateTime69.toCalendar(locale72);
        boolean boolean74 = mutableDateTime69.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str76 = mutableDateTime69.toString(dateTimeFormatter75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate83 = localDate77.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property84 = localDate77.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDate localDate87 = localDate77.withPeriodAdded(readablePeriod85, (int) ' ');
        java.lang.String str88 = dateTimeFormatter75.print((org.joda.time.ReadablePartial) localDate87);
        boolean boolean89 = dateTimeFormatter75.isOffsetParsed();
        java.util.Locale.Category category90 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale91 = java.util.Locale.getDefault(category90);
        java.util.Locale locale92 = java.util.Locale.getDefault(category90);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter75.withLocale(locale92);
        java.lang.String str94 = locale92.getScript();
        java.lang.String str95 = locale92.getCountry();
        java.lang.String str96 = locale68.getDisplayLanguage(locale92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate97 = property61.setCopy("2022-02-22T07:29:01.267Z", locale92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:29:01.267Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514949839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=9,MILLISECOND=839,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:29:09 AM +00:00" + "'", str46, "7:29:09 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "french");
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645514949839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=9,MILLISECOND=839,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "7:29:09 AM +00:00" + "'", str76, "7:29:09 AM +00:00");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDate87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str88, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + category90 + "' != '" + java.util.Locale.Category.FORMAT + "'", category90.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "french" + "'", str96, "french");
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        mutableDateTime10.setMillis(readableInstant19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime10.secondOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate25.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate29 = localDate25.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        mutableDateTime30.add(durationFieldType34, (-1));
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime30.weekOfWeekyear();
        org.joda.time.DateTime dateTime38 = localDate29.toDateTime((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField47.getType();
        mutableDateTime30.setRounding(dateTimeField47);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime10.property(dateTimeFieldType52);
        boolean boolean56 = mutableDateTime0.isSupported(dateTimeFieldType52);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime();
        java.lang.String str58 = mutableDateTime57.toString();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime57.add(readableDuration59);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfDay();
        mutableDateTime61.setChronology(chronology69);
        org.joda.time.DurationField durationField72 = chronology69.years();
        org.joda.time.DurationField durationField73 = chronology69.centuries();
        mutableDateTime57.setChronology(chronology69);
        mutableDateTime57.setWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        org.joda.time.DateTimeField dateTimeField86 = chronology83.weekOfWeekyear();
        boolean boolean87 = dateTimeFieldType77.isSupported(chronology83);
        org.joda.time.DateTimeField dateTimeField88 = chronology83.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime(chronology83);
        org.joda.time.DateTimeField dateTimeField90 = chronology83.minuteOfHour();
        org.joda.time.DateTime dateTime91 = mutableDateTime57.toDateTime(chronology83);
        boolean boolean93 = dateTime91.isBefore((long) 26759);
        org.joda.time.DateTime dateTime95 = dateTime91.minusYears(26826791);
        org.joda.time.DateTime dateTime97 = dateTime91.withMinuteOfHour(10);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514949917,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=9,MILLISECOND=917,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:09 AM +00:00" + "'", str7, "7:29:09 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645514949917,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=9,MILLISECOND=917,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T07:29:09.917Z" + "'", str58, "2022-02-22T07:29:09.917Z");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 865);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter11.getPrinter();
        boolean boolean52 = dateTimeFormatter11.isOffsetParsed();
        java.lang.StringBuffer stringBuffer53 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((-1L), dateTimeZone55);
        org.joda.time.LocalTime.Property property57 = localTime56.millisOfDay();
        java.lang.String str58 = property57.toString();
        org.joda.time.LocalTime localTime60 = property57.addCopy(0);
        org.joda.time.LocalTime.Property property61 = localTime60.hourOfDay();
        org.joda.time.LocalTime localTime63 = property61.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime64 = property61.getLocalTime();
        org.joda.time.LocalTime localTime65 = property61.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(stringBuffer53, (org.joda.time.ReadablePartial) localTime65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimePrinter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Property[millisOfDay]" + "'", str58, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter1.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property11.setCopy(27);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localTime13.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter5.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter5.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter5.withPivotYear((java.lang.Integer) (-26700464));
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        int int38 = dateTime37.getMinuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMinutes(26669470);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withPeriodAdded(readablePeriod41, (int) 'x');
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.minus(readablePeriod44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = dateTimeFormatter5.print((org.joda.time.ReadableInstant) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNull(dateTimePrinter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 29 + "'", int38 == 29);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        java.lang.String str11 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        int int13 = dateTimeParser12.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser12);
        java.lang.Integer int15 = dateTimeFormatter14.getPivotYear();
        org.joda.time.Chronology chronology16 = dateTimeFormatter14.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTimeFormatter14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str11, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(chronology16);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = new java.util.Locale("7:24:59 AM +00:00", "fr");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category0, locale6);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate17 = localDate11.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        int int21 = localDate20.getEra();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime27.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property32 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = property32.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate42 = localDate36.withYear((int) (byte) 1);
        java.lang.String str43 = dateTimeFormatter35.print((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        boolean boolean53 = dateTimeZone44.equals((java.lang.Object) dateTimeZone51);
        org.joda.time.DateTime dateTime54 = localDate42.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = dateTime34.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localDate20.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 26676070, dateTimeZone51);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.hourOfDay();
        mutableDateTime58.setChronology(chronology66);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate76 = localDate70.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property77 = localDate70.yearOfEra();
        org.joda.time.LocalDate localDate78 = property77.roundFloorCopy();
        org.joda.time.LocalDate localDate79 = property77.withMaximumValue();
        org.joda.time.LocalDate localDate80 = property77.withMaximumValue();
        int int81 = localDate80.getEra();
        java.util.Locale locale84 = new java.util.Locale("-1");
        java.util.Locale.setDefault(locale84);
        java.lang.String str86 = localDate80.toString("00:00:02.021", locale84);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((-13305485758L), chronology66, locale84, (java.lang.Integer) 30464923);
        java.util.Locale.setDefault(category0, locale84);
        java.lang.Object obj90 = locale84.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale3.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str43, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals(locale84.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "00:00:02.021" + "'", str86, "00:00:02.021");
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "-1");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "-1");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "-1");
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.millis();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder16 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("French");
        java.util.Locale.Builder builder19 = builder18.clear();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.weekOfWeekyear();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        int int29 = property27.getMaximumTextLength(locale28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime35.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getDurationType();
        mutableDateTime40.add(durationFieldType44, (-1));
        org.joda.time.DateTime dateTime48 = dateTime35.withFieldAdded(durationFieldType44, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime35.withDurationAdded(readableDuration49, 1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale54 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str55 = dateTimeZone52.getName(0L, locale54);
        java.util.Calendar calendar56 = dateTime51.toCalendar(locale54);
        java.lang.String str57 = locale28.getDisplayLanguage(locale54);
        java.lang.String str58 = locale28.getVariant();
        java.util.Set<java.lang.String> strSet59 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder60 = builder19.setLocale(locale28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatter61.getPrinter();
        boolean boolean63 = dateTimeFormatter61.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withPivotYear(28);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.ReadableInstant readableInstant70 = null;
        int int71 = dateTimeZone69.getOffset(readableInstant70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter65.withZone(dateTimeZone69);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate75 = localDate73.minusMonths((int) (short) -1);
        boolean boolean77 = localDate73.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology78 = localDate73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology80 = chronology78.withZone(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField81 = chronology80.clockhourOfDay();
        java.util.Locale locale83 = java.util.Locale.getDefault();
        java.lang.String str84 = dateTimeField81.getAsShortText((long) 26666768, locale83);
        org.joda.time.tz.NameProvider nameProvider85 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale86 = java.util.Locale.JAPANESE;
        java.lang.String str89 = nameProvider85.getShortName(locale86, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.lang.String str90 = locale83.getDisplayCountry(locale86);
        boolean boolean91 = locale86.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter65.withLocale(locale86);
        java.util.Locale.Builder builder93 = builder60.setLocale(locale86);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket94 = new org.joda.time.format.DateTimeParserBucket(26712102L, chronology12, locale86);
        java.lang.String str95 = locale86.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-62194235449724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=10,MILLISECOND=276,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "anglais" + "'", str57, "anglais");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimePrinter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "7" + "'", str84, "7");
        org.junit.Assert.assertNotNull(nameProvider85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        boolean boolean39 = dateTimeFieldType29.isSupported(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyearOfCentury();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime47.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology51 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfHalfday();
        java.util.Locale locale57 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean58 = locale57.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(2L, chronology51, locale57, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale62 = dateTimeParserBucket61.getLocale();
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        int int65 = dateTimeField40.getMaximumShortTextLength(locale63);
        java.lang.String str66 = locale63.getVariant();
        java.util.Calendar calendar67 = mutableDateTime28.toCalendar(locale63);
        java.util.Set<java.lang.Character> charSet68 = locale63.getExtensionKeys();
        boolean boolean69 = charSet68.isEmpty();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str64, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645514950317,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=10,MILLISECOND=317,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(26666335);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusMillis(19);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(30);
        int int12 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMonths((-26781621));
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        long long37 = dateTimeZone32.getMillisKeepLocal(dateTimeZone35, (long) 2);
        boolean boolean39 = dateTimeZone32.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime15.setZoneRetainFields(dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime15.add(readablePeriod41, 8);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.weekOfWeekyear();
        int int55 = dateTimeField52.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate63 = localDate57.withYear((int) (byte) 1);
        java.lang.String str64 = dateTimeFormatter56.print((org.joda.time.ReadablePartial) localDate63);
        java.util.Locale locale69 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str70 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDate63, (int) (short) -1, locale69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDate63.getFieldType((int) (short) 1);
        boolean boolean73 = mutableDateTime15.isSupported(dateTimeFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = localDateTime14.withField(dateTimeFieldType72, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514950461,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=10,MILLISECOND=461,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str64, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale69.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1" + "'", str70, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0);
        int int11 = mutableDateTime0.getEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setTime(26759, 600000, (int) 'a', 979);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26759 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514950480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=10,MILLISECOND=480,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:10 AM +00:00" + "'", str7, "7:29:10 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfFloorCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate22 = localDate16.withYear((int) (byte) 1);
        java.lang.String str23 = dateTimeFormatter15.print((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        boolean boolean33 = dateTimeZone24.equals((java.lang.Object) dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateTime.Property property35 = dateTime34.weekOfWeekyear();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.DateTime dateTime45 = dateTime34.withChronology(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime34.toDateTime();
        long long47 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime34);
        java.util.Date date48 = dateTime34.toDate();
        org.joda.time.DateTime.Property property49 = dateTime34.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str23, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Thu Feb 24 07:29:10 GMT 1");
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean27 = locale26.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(2L, chronology20, locale26, (java.lang.Integer) (-2), (int) 'a');
        int int33 = dateTimeParser9.parseInto(dateTimeParserBucket30, "", 4);
        java.util.Locale locale34 = dateTimeParserBucket30.getLocale();
        java.lang.Integer int35 = dateTimeParserBucket30.getOffsetInteger();
        long long38 = dateTimeParserBucket30.computeMillis(true, "millisOfDay");
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime44.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property49 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.DateTime dateTime51 = property49.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField52 = property49.getField();
        org.joda.time.DateTimeField dateTimeField53 = property49.getField();
        long long56 = dateTimeField53.addWrapField((long) 26677059, (-1));
        dateTimeParserBucket30.saveField(dateTimeField53, 292278993);
        dateTimeParserBucket30.setOffset(26690);
        dateTimeParserBucket30.setOffset((java.lang.Integer) 26841418);
        dateTimeParserBucket30.setPivotYear((java.lang.Integer) 26797603);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5) + "'", int33 == (-5));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-31509322941L) + "'", long56 == (-31509322941L));
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.LocalDate localDate26 = property25.getLocalDate();
        java.lang.String str27 = property25.getAsShortText();
        org.joda.time.LocalDate localDate28 = property25.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate30 = localDate28.minusWeeks(320047945);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AD" + "'", str27, "AD");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter43.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter43.withPivotYear(26715);
        boolean boolean48 = dateTimeFormatter43.isParser();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:20.889Z" + "'", str18, "0003-06-21T18:01:20.889Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514950888,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=10,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235449112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=10,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514950888,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=10,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:29:10 AM +00:00" + "'", str39, "7:29:10 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7:29:10 AM +00:00" + "'", str44, "7:29:10 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronolgy();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.Chronology chronology20 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfDay();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology20);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 1, chronology20, locale24);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter11.withChronology(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        boolean boolean11 = dateTimeFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology7.getZone();
        org.joda.time.DurationField durationField15 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology7.year();
        org.joda.time.DurationField durationField20 = chronology7.weeks();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology7);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale22.getDisplayLanguage(locale23);
        java.lang.String str26 = locale23.getCountry();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        int int38 = dateTimeField35.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate46 = localDate40.withYear((int) (byte) 1);
        java.lang.String str47 = dateTimeFormatter39.print((org.joda.time.ReadablePartial) localDate46);
        java.util.Locale locale52 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str53 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDate46, (int) (short) -1, locale52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDate46.getFieldType((int) (short) 1);
        int int56 = localDate46.getMonthOfYear();
        org.joda.time.LocalDate.Property property57 = localDate46.dayOfMonth();
        java.util.Locale locale59 = new java.util.Locale("53");
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = property57.getAsShortText(locale59);
        java.lang.String str62 = locale23.getDisplayScript(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((-13305486928L), chronology7, locale23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = locale23.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "jpn" + "'", str24, "jpn");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str25, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str47, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals(locale59.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "22" + "'", str61, "22");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property32 = localDate29.era();
        org.joda.time.LocalDate localDate34 = localDate29.plusWeeks(97200000);
        org.joda.time.LocalDate.Property property35 = localDate29.dayOfWeek();
        org.joda.time.Chronology chronology36 = localDate29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight28.toMutableDateTime(chronology36);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        long long48 = chronology42.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.DateTime dateTime50 = dateTime35.withChronology(chronology42);
        org.joda.time.DateTime dateTime52 = dateTime50.minusWeeks(32);
        org.joda.time.DateTime dateTime54 = dateTime52.minusWeeks(0);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfCentury();
        org.joda.time.DateTime dateTime57 = property55.addWrapFieldToCopy(26735920);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = property55.setCopy(26928);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26928 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514951274,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=11,MILLISECOND=274,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-48469999L) + "'", long48 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        long long48 = chronology42.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.DateTime dateTime50 = dateTime35.withChronology(chronology42);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime35.toDateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime35.plusDays(26666335);
        org.joda.time.DateTime.Property property55 = dateTime35.millisOfSecond();
        org.joda.time.DateTime dateTime56 = property55.roundFloorCopy();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514951353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=11,MILLISECOND=353,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-48469999L) + "'", long48 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        int int3 = mutableDateTime1.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        boolean boolean13 = dateTimeZone4.equals((java.lang.Object) dateTimeZone11);
        int int15 = dateTimeZone4.getOffset((-60494601600000L));
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        org.joda.time.DateTime dateTime33 = dateTime29.plusSeconds(2);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate37.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) dateTime29, dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime21.toMutableDateTime(dateTimeZone46);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime50.set(dateTimeFieldType52, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime50.weekyear();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime50.yearOfEra();
        boolean boolean57 = dateTimeZone4.equals((java.lang.Object) mutableDateTime50);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate61 = localDate58.withField(dateTimeFieldType59, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTime dateTime66 = dateTime63.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property68 = dateTime66.property(dateTimeFieldType67);
        org.joda.time.DateTime dateTime69 = property68.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime70 = property68.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate78 = localDate72.withYear((int) (byte) 1);
        java.lang.String str79 = dateTimeFormatter71.print((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate83 = localDate81.minusMonths((int) (short) -1);
        boolean boolean85 = localDate81.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology86 = localDate81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology88 = chronology86.withZone(dateTimeZone87);
        boolean boolean89 = dateTimeZone80.equals((java.lang.Object) dateTimeZone87);
        org.joda.time.DateTime dateTime90 = localDate78.toDateTimeAtCurrentTime(dateTimeZone87);
        org.joda.time.DateTime dateTime91 = dateTime70.toDateTime(dateTimeZone87);
        long long93 = dateTimeZone87.nextTransition(1600012620000L);
        java.lang.String str95 = dateTimeZone87.getShortName((long) 30);
        mutableDateTime50.setZoneRetainFields(dateTimeZone87);
        mutableDateTime1.setZoneRetainFields(dateTimeZone87);
        org.joda.time.LocalDate localDate98 = new org.joda.time.LocalDate(dateTimeZone87);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDate78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str79, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1600012620000L + "'", long93 == 1600012620000L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00" + "'", str95, "+00:00");
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        mutableDateTime4.setMillis(readableInstant13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17);
        int int21 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "2022-02-22T07:24:42.673Z", (int) '4');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime.Property property33 = dateTime31.era();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekOfWeekyear();
        org.joda.time.DateTime dateTime42 = dateTime31.withChronology(chronology39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(33);
        java.lang.String str46 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter0.getZone();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder50 = builder48.setLocale(locale49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter0.withLocale(locale49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter0.withOffsetParsed();
        java.lang.StringBuffer stringBuffer53 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer53, 1728000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514951474,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=11,MILLISECOND=474,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-53) + "'", int21 == (-53));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0003-06-21T18:01:21.475Z" + "'", str32, "0003-06-21T18:01:21.475Z");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "July 6, 2021 7:29:11 AM +00:00" + "'", str46, "July 6, 2021 7:29:11 AM +00:00");
        org.junit.Assert.assertNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:31.082Z", "0003-06-21T17:59:27.293Z", "2022-02-22T07:24:58.690Z");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.joda.time.format.DateTimeFormat.patternForStyle("59", locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style character: 5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:31.082z_0003-06-21T17:59:27.293Z_2022-02-22T07:24:58.690Z");
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime6 = property3.addCopy(0);
        org.joda.time.LocalTime localTime7 = property3.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str9 = dateTimeFieldType8.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int11 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = localTime7.withField(dateTimeFieldType8, 26735159);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "year" + "'", str9, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        java.lang.String str16 = localDate0.toString("7");
        org.joda.time.DateMidnight dateMidnight17 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate19 = localDate0.minusMonths(99);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime33.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.Chronology chronology46 = localDate40.getChronology();
        long long50 = chronology46.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime39.toDateTime(chronology46);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.lang.String str53 = locale52.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(1L, chronology46, locale52, (java.lang.Integer) 718, 33);
        java.lang.String str57 = dateTimeZone23.getShortName(4260279330L, locale52);
        long long60 = dateTimeZone23.adjustOffset(0L, false);
        org.joda.time.Interval interval61 = localDate19.toInterval(dateTimeZone23);
        java.util.TimeZone timeZone62 = dateTimeZone23.toTimeZone();
        java.util.TimeZone timeZone63 = dateTimeZone23.toTimeZone();
        java.lang.Object obj64 = timeZone63.clone();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 200L + "'", long50 == 200L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        boolean boolean55 = dateTimeFieldType45.isSupported(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology51);
        mutableDateTime57.addMillis((int) (short) 10);
        int int62 = dateTimeFormatter37.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime57, "1970", 8);
        java.lang.Integer int63 = dateTimeFormatter37.getPivotYear();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514951864,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=11,MILLISECOND=864,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-9) + "'", int62 == (-9));
        org.junit.Assert.assertNull(int63);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        boolean boolean11 = dateTimeFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology7.getZone();
        org.joda.time.DurationField durationField15 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology7.year();
        org.joda.time.DurationField durationField20 = chronology7.weeks();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology7);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale22.getDisplayLanguage(locale23);
        java.lang.String str26 = locale23.getCountry();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        int int38 = dateTimeField35.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate46 = localDate40.withYear((int) (byte) 1);
        java.lang.String str47 = dateTimeFormatter39.print((org.joda.time.ReadablePartial) localDate46);
        java.util.Locale locale52 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str53 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDate46, (int) (short) -1, locale52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDate46.getFieldType((int) (short) 1);
        int int56 = localDate46.getMonthOfYear();
        org.joda.time.LocalDate.Property property57 = localDate46.dayOfMonth();
        java.util.Locale locale59 = new java.util.Locale("53");
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = property57.getAsShortText(locale59);
        java.lang.String str62 = locale23.getDisplayScript(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((-13305486928L), chronology7, locale23);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology7.add(readablePeriod64, 0L, 22677);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "jpn" + "'", str24, "jpn");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str25, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str47, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals(locale59.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "22" + "'", str61, "22");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        java.lang.Integer int13 = dateTimeFormatter12.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("53");
        int int16 = mutableDateTime15.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime15.add(readablePeriod17, 26668);
        mutableDateTime15.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime15.secondOfDay();
        int int23 = property22.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime25 = property22.set(63);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter12.withZone(dateTimeZone26);
        boolean boolean28 = dateTimeFormatter12.isOffsetParsed();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter12.withLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.parse("2022-02-22T07:28:50.907Z", dateTimeFormatter30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:50.907Z\" is malformed at \"22-02-22T07:28:50.907Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        mutableDateTime0.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfMonth();
        org.joda.time.DateTime dateTime10 = mutableDateTime0.toDateTime();
        boolean boolean11 = mutableDateTime0.isAfterNow();
        java.lang.Object obj12 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.secondOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate22 = localDate16.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property23 = localDate16.yearOfEra();
        org.joda.time.LocalDate localDate24 = property23.roundFloorCopy();
        org.joda.time.LocalDate localDate25 = property23.withMaximumValue();
        org.joda.time.LocalDate localDate27 = property23.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean29 = localDate27.isSupported(dateTimeFieldType28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale31 = dateTimeFormatter30.getLocale();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter30.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology37);
        mutableDateTime14.setChronology(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.hours();
        org.joda.time.DateTime dateTime42 = mutableDateTime0.toDateTime(chronology37);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra(55600);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-12-27T07:29:12.037Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-12-27T07:29:12.037Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-12-27T07:29:12.037Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.property(dateTimeFieldType21);
        java.lang.String str23 = dateTimeFieldType21.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType24.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology30);
        mutableDateTime36.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology50);
        mutableDateTime36.setChronology(chronology50);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(chronology50);
        org.joda.time.DurationField durationField57 = chronology50.millis();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = chronology50.add(readablePeriod58, (long) 30461931, 46);
        org.joda.time.DurationField durationField62 = chronology50.years();
        boolean boolean63 = dateTimeFieldType21.isSupported(chronology50);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = chronology71.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.yearOfCentury();
        org.joda.time.DurationField durationField74 = chronology71.months();
        boolean boolean75 = dateTimeFieldType21.isSupported(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29 + "'", int15 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:29:12.070Z" + "'", str17, "2022-02-22T07:29:12.070Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hourOfHalfday" + "'", str23, "hourOfHalfday");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "year" + "'", str40, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 30461931L + "'", long61 == 30461931L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter43.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter43.withOffsetParsed();
        java.lang.Appendable appendable47 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter46.printTo(appendable47, 63776678614L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:22.170Z" + "'", str18, "0003-06-21T18:01:22.170Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514952169,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=12,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235447831,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=12,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514952169,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=12,MILLISECOND=169,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:29:12 AM +00:00" + "'", str39, "7:29:12 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7:29:12 AM +00:00" + "'", str44, "7:29:12 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime9.add(readablePeriod16, (int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime9.setChronology(chronology19);
        int int21 = mutableDateTime9.getYearOfEra();
        int int24 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "+00:00", 26676039);
        int int25 = mutableDateTime9.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Calendar calendar30 = mutableDateTime26.toCalendar(locale29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        mutableDateTime26.setMillis(readableInstant35);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime26.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        int int40 = property38.get();
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        int int44 = dateTimeField41.getDifference((long) (-1), 100L);
        java.util.Locale locale47 = new java.util.Locale("7:24:30 AM +00:00");
        java.lang.String str48 = dateTimeField41.getAsShortText(43, locale47);
        int int49 = mutableDateTime9.get(dateTimeField41);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime9.yearOfEra();
        mutableDateTime9.addSeconds(26678886);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setSecondOfMinute(64861);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64861 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-26676040) + "'", int24 == (-26676040));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645514952217,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=12,MILLISECOND=217,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 26952 + "'", int40 == 26952);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals(locale47.toString(), "7:24:30 am +00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "43" + "'", str48, "43");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 26952 + "'", int49 == 26952);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate43 = localDate10.plus(readablePeriod42);
        org.joda.time.LocalDate.Property property44 = localDate10.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval45 = property44.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property12.add(60000L);
        org.joda.time.MutableDateTime mutableDateTime18 = property12.roundCeiling();
        mutableDateTime18.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.hourOfDay();
        boolean boolean45 = dateTime41.isAfter((-48469999L));
        org.joda.time.DateTime dateTime47 = dateTime41.minusYears(27268320);
        long long48 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableDateTime mutableDateTime49 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property21.roundFloor();
        int int51 = mutableDateTime50.getSecondOfDay();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514952296,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=12,MILLISECOND=296,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 63776678628L + "'", long48 == 63776678628L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 27181 + "'", int51 == 27181);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate15 = localDate9.withYear((int) (byte) 1);
        java.lang.String str16 = dateTimeFormatter8.print((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = property28.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime32 = property28.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfDay();
        org.joda.time.DateTime dateTime37 = dateTime32.withYearOfCentury(0);
        boolean boolean38 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime44.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property49 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.DateTime dateTime51 = property49.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField52 = property49.getField();
        org.joda.time.DateTime dateTime54 = property49.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.plus(readableDuration55);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("");
        java.lang.String str61 = timeZone60.getID();
        java.lang.String str62 = timeZone60.getID();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 53, dateTimeZone63);
        org.joda.time.DateTime dateTime65 = dateTime56.withZoneRetainFields(dateTimeZone63);
        java.util.TimeZone timeZone66 = dateTimeZone63.toTimeZone();
        org.joda.time.DateTime dateTime67 = dateTime32.withZone(dateTimeZone63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(468, 26912, 26761316, 26780761, 26793321, dateTimeZone63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26780761 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str16, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GMT" + "'", str61, "GMT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "GMT" + "'", str62, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withPivotYear(26738810);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.Chronology chronology12 = dateTimeFormatter10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((-1L), dateTimeZone14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfDay();
        java.lang.String str17 = property16.toString();
        org.joda.time.LocalTime localTime19 = property16.addCopy(0);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.DateTime dateTime21 = localTime19.toDateTimeToday();
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter10.withChronology(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(53388, 26738210, 26913000, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26738210 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[millisOfDay]" + "'", str17, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear(26738810);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeFormatter7.parseMillis("2022-02-22T07:27:18.977Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:18.977Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.roundHalfCeilingCopy();
        java.lang.String str16 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property17 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime24.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology28 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.plus((-48469999L));
        org.joda.time.DateTime dateTime41 = dateTime37.plusSeconds(2);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate45.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) dateTime37, dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone54);
        java.lang.String str59 = dateTimeZone54.toString();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        boolean boolean63 = dateTimeZone61.equals((java.lang.Object) locale62);
        java.lang.String str64 = dateTimeZone54.getName((long) 26667, locale62);
        org.joda.time.Chronology chronology65 = chronology28.withZone(dateTimeZone54);
        java.util.Locale locale70 = new java.util.Locale("8", "2022-02-22T07:24:30.100Z", "und");
        java.lang.String str71 = locale70.getDisplayScript();
        java.lang.String str72 = dateTimeZone54.getShortName((-62131077316268L), locale70);
        java.lang.String str74 = locale70.getExtension('x');
        int int75 = property17.getMaximumTextLength(locale70);
        java.util.Set<java.lang.String> strSet76 = locale70.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +00:00" + "'", str16, "Monday, January 1, 0001 12:00:00 AM +00:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals(locale70.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        boolean boolean45 = dateTimeFormatter37.isParser();
        org.joda.time.Chronology chronology46 = dateTimeFormatter37.getChronolgy();
        java.io.Writer writer47 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter37.printTo(writer47, 113238L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514952534,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=12,MILLISECOND=534,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(chronology46);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((-1L), dateTimeZone19);
        org.joda.time.LocalTime localTime22 = localTime20.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime20.minus(readablePeriod23);
        int int25 = localTime24.getSecondOfMinute();
        org.joda.time.LocalTime localTime27 = localTime24.withMillisOfDay(6);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.Chronology chronology35 = localDate29.getChronology();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology35);
        org.joda.time.LocalDate.Property property37 = localDate36.dayOfWeek();
        org.joda.time.Chronology chronology38 = localDate36.getChronology();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate45 = localDate39.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate39.yearOfEra();
        org.joda.time.LocalDate localDate47 = property46.roundFloorCopy();
        org.joda.time.LocalDate localDate48 = property46.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property49 = localDate48.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate48.minus(readablePeriod50);
        int int52 = localDate51.getYearOfCentury();
        int[] intArray54 = chronology38.get((org.joda.time.ReadablePartial) localDate51, 1609459200000L);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("0003-06-21T17:56:46.112Z");
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray58 = dateTimeField17.set((org.joda.time.ReadablePartial) localTime24, 25233867, intArray54, "0001-02-19T07:26:27.622Z", locale57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0001-02-19T07:26:27.622Z\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2021, 1, 1]");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("0003-06-21T18:00:08.776Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology6.getZone();
        org.joda.time.DurationField durationField14 = chronology6.centuries();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        int int26 = dateTimeField23.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDate34, (int) (short) -1, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDate34.getFieldType((int) (short) 1);
        int int44 = localDate34.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime47 = localDate34.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.Chronology chronology48 = chronology6.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField49 = chronology48.years();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.DurationField durationField51 = chronology48.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = chronology48.getDateTimeMillis((long) 30592032, 26763043, (-26742489), 267, 26676070);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26763043 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate19.withCenturyOfEra(24);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) '4');
        org.joda.time.LocalDate localDate37 = localDate35.withYear(641);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate54.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) dateTime46, dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone68);
        long long71 = dateTimeZone63.getMillisKeepLocal(dateTimeZone68, (long) (byte) -1);
        boolean boolean72 = dateTimeZone68.isFixed();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(55362000L, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight74 = localDate37.toDateMidnight(dateTimeZone68);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateMidnight74);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear(26738810);
        java.lang.String str9 = dateTimeFormatter0.print((-62194235727419L));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Monday, February 22, -0001" + "'", str9, "Monday, February 22, -0001");
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str5 = dateTimeFieldType4.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType4.getField(chronology15);
        org.joda.time.DateTimeZone dateTimeZone20 = chronology15.getZone();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekOfWeekyear();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getDisplayCountry();
        java.lang.String str33 = locale31.getDisplayVariant();
        java.lang.String str34 = dateTimeField29.getAsShortText(8, locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 30488630, chronology15, locale31);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(26874, 26884620, 26902849, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26884620 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "year" + "'", str5, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "8" + "'", str34, "8");
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        int int3 = dateTimePrinter1.estimatePrintedLength();
        int int4 = dateTimePrinter1.estimatePrintedLength();
        java.io.Writer writer5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(26666335);
        int int14 = localDateTime13.size();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withPeriodAdded(readablePeriod15, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean19 = localDateTime13.isSupported(dateTimeFieldType18);
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        java.lang.String str22 = locale21.getVariant();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfCentury();
        long long35 = dateTimeField32.addWrapField((long) 26689450, 26683162);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 24, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        java.util.Locale locale50 = new java.util.Locale("53");
        java.lang.String str51 = dateTimeField47.getAsShortText(26666570, locale50);
        java.lang.String str52 = dateTimeField32.getAsShortText((long) 27341799, locale50);
        java.lang.String str53 = locale21.getDisplayLanguage(locale50);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter1.printTo(writer5, (org.joda.time.ReadablePartial) localDateTime13, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 40 + "'", int3 == 40);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1199205310550L) + "'", long35 == (-1199205310550L));
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals(locale50.toString(), "53");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "26666570" + "'", str51, "26666570");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "70" + "'", str52, "70");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japanese" + "'", str53, "Japanese");
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime12 = dateTime9.withField(dateTimeFieldType10, 26666);
        int int13 = dateTime12.getYear();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime12.withCenturyOfEra(50);
        int int18 = dateTime12.getDayOfYear();
        org.joda.time.DateTime.Property property19 = dateTime12.yearOfEra();
        java.lang.String str21 = dateTime12.toString("7:24:30 am +00:00");
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime12.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime12.plus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds(449);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26666 + "'", int13 == 26666);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7:24:30 AM29 +00:00" + "'", str21, "7:24:30 AM29 +00:00");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        long long35 = dateTimeZone29.nextTransition(1600012620000L);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate44 = localDate38.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property45 = localDate38.yearOfEra();
        org.joda.time.LocalDate localDate46 = property45.roundFloorCopy();
        org.joda.time.LocalDate localDate47 = property45.withMaximumValue();
        org.joda.time.LocalDate localDate49 = property45.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean51 = localDate49.isSupported(dateTimeFieldType50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale53 = dateTimeFormatter52.getLocale();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter52.withChronology(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType50.getField(chronology59);
        org.joda.time.DurationField durationField62 = chronology59.centuries();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(2L, chronology59);
        mutableDateTime36.setChronology(chronology59);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.centuryOfEra();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime65.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property67.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property67.getFieldType();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime36.property(dateTimeFieldType69);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime36.setMonthOfYear(26738210);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26738210 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1600012620000L + "'", long35 == 1600012620000L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        java.lang.String str11 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        int int13 = dateTimeParser12.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser12);
        java.lang.Integer int15 = dateTimeFormatter14.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) int15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.add(85);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str11, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        long long13 = dateTimeField10.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology22.getZone();
        org.joda.time.DurationField durationField30 = chronology22.centuries();
        java.util.Locale locale32 = new java.util.Locale("53");
        java.lang.String str33 = locale32.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology22, locale32);
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = dateTimeField10.getAsText((-1), locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter0.withLocale(locale32);
        int int38 = dateTimeFormatter0.getDefaultYear();
        int int39 = dateTimeFormatter0.getDefaultYear();
        boolean boolean40 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter0.withChronology(chronology50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter54.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = dateTimeFormatter54.parseMillis("0003-06-21T17:59:16.264Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T17:59:16.264Z\" is malformed at \"03-06-21T17:59:16.264Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals(locale32.toString(), "53");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        mutableDateTime4.setMillis(readableInstant13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17);
        int int21 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "2022-02-22T07:24:42.673Z", (int) '4');
        mutableDateTime4.addMonths((-1036570595));
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Calendar calendar28 = mutableDateTime24.toCalendar(locale27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        mutableDateTime24.setMillis(readableInstant33);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime24.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property36.add(26666);
        org.joda.time.MutableDateTime mutableDateTime40 = property36.getMutableDateTime();
        mutableDateTime40.setMinuteOfHour((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableDateTime40.add(readablePeriod43, 26691926);
        mutableDateTime40.setDate(3600000L);
        boolean boolean48 = mutableDateTime4.equals((java.lang.Object) mutableDateTime40);
        mutableDateTime40.setYear(53558);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514953329,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=329,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-53) + "'", int21 == (-53));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645514953329,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=329,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        boolean boolean12 = mutableDateTime7.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str14 = mutableDateTime7.toString(dateTimeFormatter13);
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        mutableDateTime7.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        boolean boolean29 = dateTimeFieldType19.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology25);
        mutableDateTime31.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        mutableDateTime31.add(durationFieldType35, (int) (byte) 1);
        mutableDateTime7.add(durationFieldType35, 26);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime7.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime40.setSecondOfMinute(435);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 435 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514953353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=353,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:29:13 AM +00:00" + "'", str14, "7:29:13 AM +00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1L), dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property13 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMinimumValue();
        int int15 = localTime14.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str17 = localTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property19 = localTime14.property(dateTimeFieldType18);
        int int20 = localTime7.get(dateTimeFieldType18);
        org.joda.time.LocalTime localTime22 = localTime7.minusMillis(26668071);
        int int23 = localTime22.size();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(228);
        int int7 = localDateTime6.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localDateTime6.toString("7:28:29 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.hourOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.plus((-48469999L));
        org.joda.time.DateTime dateTime28 = dateTime24.plusSeconds(2);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) dateTime24, dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime16.toMutableDateTime(dateTimeZone41);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate49 = localDate46.withField(dateTimeFieldType47, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths((int) '4');
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        long long65 = chronology59.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime66 = dateTime51.toDateTime(chronology59);
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfMonth(4);
        mutableDateTime45.setMillis((org.joda.time.ReadableInstant) dateTime66);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime66);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMinuteOfDay(26838610);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26838610 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514953465,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=465,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:13 AM +00:00" + "'", str7, "7:29:13 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-48469999L) + "'", long65 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.plusHours(26688);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds(71);
        java.lang.String str13 = localTime11.toString("46");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "46" + "'", str13, "46");
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology20.add(readablePeriod21, (-62135596800000L), 17);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfMonth();
        int int27 = dateTimeField25.getMinimumValue((long) 26726619);
        int int29 = dateTimeField25.getMaximumValue(0L);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514953784,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=784,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:13 AM +00:00" + "'", str7, "7:29:13 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-62135596800000L) + "'", long24 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = dateTimeZone3.equals((java.lang.Object) locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withZone(dateTimeZone3);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) (-2303769599957L), dateTimeZone3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 26666570);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        boolean boolean21 = dateTimeFieldType11.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology17.getZone();
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.year();
        org.joda.time.DurationField durationField30 = chronology17.weeks();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateTime9, chronology17);
        org.joda.time.DateTime dateTime32 = dateTime7.withChronology(chronology17);
        org.joda.time.DurationField durationField33 = chronology17.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = chronology17.getDateTimeMillis(2922789, 540, 26670662, 26889);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 540 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = mutableDateTime15.toCalendar(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime46);
        int int53 = dateTime46.getEra();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime46);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.millisOfSecond();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime54.millisOfSecond();
        mutableDateTime54.addDays(65352659);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514953809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62131077046191,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1L), dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property13 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMinimumValue();
        int int15 = localTime14.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str17 = localTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property19 = localTime14.property(dateTimeFieldType18);
        int int20 = localTime7.get(dateTimeFieldType18);
        org.joda.time.LocalTime localTime22 = localTime7.minusMillis(26668071);
        org.joda.time.LocalTime localTime24 = localTime7.withMillisOfDay(26760322);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = localTime24.withSecondOfMinute(26831624);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26831624 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate6 = localDate4.withYear((int) (byte) 0);
        java.lang.String str7 = localDate4.toString();
        org.joda.time.LocalDate localDate9 = localDate4.withEra(0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.secondOfDay();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime10.add(readableDuration14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = mutableDateTime16.toCalendar(locale19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        mutableDateTime16.setMillis(readableInstant25);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime16.secondOfDay();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime16.add(readableDuration29);
        mutableDateTime16.setMillisOfDay(53);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        mutableDateTime16.setZoneRetainFields(dateTimeZone34);
        long long37 = dateTimeZone34.previousTransition((long) 26673604);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime10, dateTimeZone34);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate42.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime45 = localDate42.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate53 = localDate47.withYear((int) (byte) 1);
        java.lang.String str54 = dateTimeFormatter46.print((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        int int58 = dateTimeFormatter46.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime55, "1", 1);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate62 = localDate59.withField(dateTimeFieldType60, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTime(readableInstant63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology70 = localDate65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = localDate62.toDateTimeAtCurrentTime(dateTimeZone71);
        boolean boolean74 = dateTimeZone71.isFixed();
        mutableDateTime55.setZone(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = dateTime45.toDateTime(dateTimeZone71);
        org.joda.time.DateTime dateTime78 = dateTime76.minusHours(26666877);
        int int79 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime78);
        long long81 = dateTimeZone34.nextTransition(464L);
        org.joda.time.Interval interval82 = localDate4.toInterval(dateTimeZone34);
        long long85 = dateTimeZone34.convertLocalToUTC((long) 26671, true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-12-31" + "'", str7, "2022-12-31");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514953848,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=13,MILLISECOND=848,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 26673604L + "'", long37 == 26673604L);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str54, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-2) + "'", int58 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 464L + "'", long81 == 464L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 26671L + "'", long85 == 26671L);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.setDate(345600000L);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.DateTime dateTime29 = property26.roundHalfEvenCopy();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime13.dayOfMonth();
        int int34 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime13, "2022-02-22T07:25:35.000Z", 35);
        java.lang.Integer int35 = dateTimeFormatter11.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-36) + "'", int34 == (-36));
        org.junit.Assert.assertNull(int35);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str3 = dateTimeFieldType2.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int5 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter4.withChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType2.getField(chronology13);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology13.getZone();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = locale29.getDisplayVariant();
        java.lang.String str32 = dateTimeField27.getAsShortText(8, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 30488630, chronology13, locale29);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 71, chronology13);
        org.joda.time.DateTimeField dateTimeField35 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology13.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "year" + "'", str3, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "8" + "'", str32, "8");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        mutableDateTime8.add(durationFieldType12, (-1));
        mutableDateTime8.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime8.dayOfMonth();
        org.joda.time.DateTime dateTime18 = mutableDateTime8.toDateTime();
        boolean boolean19 = mutableDateTime8.isAfterNow();
        java.lang.Object obj20 = mutableDateTime8.clone();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.secondOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate30 = localDate24.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property31 = localDate24.yearOfEra();
        org.joda.time.LocalDate localDate32 = property31.roundFloorCopy();
        org.joda.time.LocalDate localDate33 = property31.withMaximumValue();
        org.joda.time.LocalDate localDate35 = property31.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean37 = localDate35.isSupported(dateTimeFieldType36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale39 = dateTimeFormatter38.getLocale();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter38.withChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType36.getField(chronology45);
        mutableDateTime22.setChronology(chronology45);
        org.joda.time.DurationField durationField49 = chronology45.hours();
        org.joda.time.DateTime dateTime50 = mutableDateTime8.toDateTime(chronology45);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(4492800000000L, chronology45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((int) (byte) 0, 26801789, 26924896, 19045, 9, 56, 2100, chronology45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19045 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-12-27T07:29:13.972Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-12-27T07:29:13.972Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-12-27T07:29:13.972Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property20 = dateTime5.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime21.setZoneRetainFields(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime21.add(readablePeriod47, 8);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        int int61 = dateTimeField58.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        java.lang.String str70 = dateTimeFormatter62.print((org.joda.time.ReadablePartial) localDate69);
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate69, (int) (short) -1, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDate69.getFieldType((int) (short) 1);
        boolean boolean79 = mutableDateTime21.isSupported(dateTimeFieldType78);
        int int80 = dateTime5.get(dateTimeFieldType78);
        org.joda.time.DateTime dateTime81 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime83 = dateTime5.minusHours(26764);
        org.joda.time.DateTime.Property property84 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime85 = dateTime5.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:24.008Z" + "'", str18, "0003-06-21T18:01:24.008Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514954007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=14,MILLISECOND=7,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str70, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDate6.getFieldType(1);
        int int11 = localDate6.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        mutableDateTime12.add(durationFieldType16, (-1));
        boolean boolean19 = localDate6.isSupported(durationFieldType16);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField28.getType();
        org.joda.time.LocalDate.Property property30 = localDate6.property(dateTimeFieldType29);
        org.joda.time.LocalDate localDate32 = localDate6.withWeekyear(28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str34 = dateTimeFieldType33.getName();
        org.joda.time.LocalDate.Property property35 = localDate6.property(dateTimeFieldType33);
        org.joda.time.LocalDate.Property property36 = localDate6.dayOfWeek();
        org.joda.time.LocalDate.Property property37 = localDate6.yearOfEra();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate44 = localDate38.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property45 = localDate38.yearOfEra();
        org.joda.time.LocalDate localDate46 = property45.roundFloorCopy();
        org.joda.time.LocalDate localDate47 = property45.roundFloorCopy();
        org.joda.time.LocalDate localDate48 = property45.roundFloorCopy();
        boolean boolean49 = localDate6.isEqual((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate localDate50 = localDate2.withFields((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate.Property property51 = localDate2.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        boolean boolean62 = dateTimeFieldType52.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField63 = chronology58.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology58);
        mutableDateTime64.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str68 = dateTimeFieldType67.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int70 = dateTimeFormatter69.getDefaultYear();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter69.withChronology(chronology78);
        org.joda.time.DateTimeField dateTimeField81 = chronology78.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType67.getField(chronology78);
        mutableDateTime64.setChronology(chronology78);
        org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.now(chronology78);
        org.joda.time.DurationField durationField85 = chronology78.millis();
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        long long89 = chronology78.add(readablePeriod86, (long) 30461931, 46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((java.lang.Object) property51, chronology78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "year" + "'", str34, "year");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "year" + "'", str68, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2000 + "'", int70 == 2000);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 30461931L + "'", long89 == 30461931L);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.Chronology chronology13 = dateTimeFormatter11.getChronology();
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(writer14, (long) 26742);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime9.add(readablePeriod16, (int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime9.setChronology(chronology19);
        int int21 = mutableDateTime9.getYearOfEra();
        int int24 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "+00:00", 26676039);
        int int25 = mutableDateTime9.getRoundingMode();
        boolean boolean27 = mutableDateTime9.isBefore(113080L);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDate28.getFieldType(1);
        int int33 = localDate28.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        mutableDateTime34.add(durationFieldType38, (-1));
        boolean boolean41 = localDate28.isSupported(durationFieldType38);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = dateTimeField50.getType();
        org.joda.time.LocalDate.Property property52 = localDate28.property(dateTimeFieldType51);
        org.joda.time.LocalDate localDate54 = localDate28.withWeekyear(28);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str56 = dateTimeFieldType55.getName();
        org.joda.time.LocalDate.Property property57 = localDate28.property(dateTimeFieldType55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate60.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtStartOfDay();
        int int64 = localDate60.size();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate67.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate71 = localDate67.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration73 = null;
        mutableDateTime72.add(readableDuration73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType75.getDurationType();
        mutableDateTime72.add(durationFieldType76, (-1));
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime72.weekOfWeekyear();
        org.joda.time.DateTime dateTime80 = localDate71.toDateTime((org.joda.time.ReadableInstant) mutableDateTime72);
        boolean boolean81 = localDate60.isBefore((org.joda.time.ReadablePartial) localDate71);
        int int82 = localDate60.getWeekOfWeekyear();
        org.joda.time.Chronology chronology83 = localDate60.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType55.getField(chronology83);
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType55.getRangeDurationType();
        int int86 = mutableDateTime9.get(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-26676040) + "'", int24 == (-26676040));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "year" + "'", str56, "year");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime8.plus((-48469999L));
        org.joda.time.DateTime dateTime12 = dateTime8.plusSeconds(2);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfMonth();
        java.util.Locale locale34 = new java.util.Locale("8", "2022-02-22T07:24:30.100Z", "und");
        java.lang.String str35 = locale34.getDisplayScript();
        int int36 = property30.getMaximumShortTextLength(locale34);
        java.lang.String str37 = locale34.getCountry();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        long long49 = dateTimeField46.addWrapField((long) ' ', 0);
        java.util.Locale locale53 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale57 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str58 = locale57.getDisplayVariant();
        java.lang.String str59 = locale53.getDisplayCountry(locale57);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = locale60.getDisplayCountry();
        java.lang.String str62 = locale57.getDisplayCountry(locale60);
        int int63 = dateTimeField46.getMaximumShortTextLength(locale57);
        int int64 = dateTimeField46.getMaximumValue();
        long long66 = dateTimeField46.roundHalfFloor((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime67.add(readableDuration68);
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.util.Calendar calendar71 = mutableDateTime67.toCalendar(locale70);
        boolean boolean72 = mutableDateTime67.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str74 = mutableDateTime67.toString(dateTimeFormatter73);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale76 = java.util.Locale.ENGLISH;
        boolean boolean77 = dateTimeZone75.equals((java.lang.Object) locale76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter73.withLocale(locale76);
        int int79 = dateTimeField46.getMaximumTextLength(locale76);
        java.lang.String str80 = locale34.getDisplayName(locale76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:26:01.150Z", locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:26:01.150Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale34.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:24:30.100Z" + "'", str37, "2022-02-22T07:24:30.100Z");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
        org.junit.Assert.assertEquals(locale53.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale57.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str59, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str62, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-259200000L) + "'", long66 == (-259200000L));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645514954318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=14,MILLISECOND=318,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "7:29:14 AM +00:00" + "'", str74, "7:29:14 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "8 (2022-02-22T07:24:30.100Z,und)" + "'", str80, "8 (2022-02-22T07:24:30.100Z,und)");
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property14 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundFloorCopy();
        org.joda.time.LocalDate localDate16 = property14.withMaximumValue();
        int int17 = localDate16.getEra();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime23.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property28 = dateTime26.property(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime30 = property28.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        java.lang.String str39 = dateTimeFormatter31.print((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        boolean boolean49 = dateTimeZone40.equals((java.lang.Object) dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDate38.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime30.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime52 = localDate16.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 26676070, dateTimeZone47);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.hourOfDay();
        mutableDateTime54.setChronology(chronology62);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate72 = localDate66.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property73 = localDate66.yearOfEra();
        org.joda.time.LocalDate localDate74 = property73.roundFloorCopy();
        org.joda.time.LocalDate localDate75 = property73.withMaximumValue();
        org.joda.time.LocalDate localDate76 = property73.withMaximumValue();
        int int77 = localDate76.getEra();
        java.util.Locale locale80 = new java.util.Locale("-1");
        java.util.Locale.setDefault(locale80);
        java.lang.String str82 = localDate76.toString("00:00:02.021", locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((-13305485758L), chronology62, locale80, (java.lang.Integer) 30464923);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime(0, 6000014, (-26762667), 0, chronology62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6000014 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals(locale80.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "00:00:02.021" + "'", str82, "00:00:02.021");
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(1672125938391L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1672125938391L + "'", long21 == 1672125938391L);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.property(dateTimeFieldType21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter23.getPrinter();
        boolean boolean25 = dateTimeFormatter23.isParser();
        boolean boolean26 = dateTimeFormatter23.isParser();
        boolean boolean27 = dateTimeFormatter23.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter23.withZoneUTC();
        boolean boolean29 = dateTimeFormatter28.isParser();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.Chronology chronology36 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.secondOfDay();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTime.Property property40 = dateTime39.year();
        org.joda.time.DateTime dateTime41 = property40.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime43 = property40.setCopy(26669470);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        java.lang.String str45 = dateTimeFormatter28.print((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setRounding(dateTimeField47, 26675573);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 26675573");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29 + "'", int15 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:29:14.377Z" + "'", str17, "2022-02-22T07:29:14.377Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimePrinter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Feb 22, 26669470" + "'", str45, "Feb 22, 26669470");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDate1.getFieldType(1);
        int int6 = localDate1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        mutableDateTime7.add(durationFieldType11, (-1));
        boolean boolean14 = localDate1.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDate1.getFieldTypes();
        java.lang.String str17 = localDate1.toString("7");
        org.joda.time.DateMidnight dateMidnight18 = localDate1.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter19.getPrinter();
        boolean boolean21 = dateTimeFormatter19.isParser();
        boolean boolean22 = dateTimeFormatter19.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter23.getZone();
        java.lang.String str25 = dateMidnight18.toString(dateTimeFormatter23);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate30 = localDate27.withField(dateTimeFieldType28, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weeks();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 100, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter23.withChronology(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.parse("0003-06-21T17:57:31.602Z", dateTimeFormatter37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T17:57:31.602Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "7" + "'", str17, "7");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimePrinter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Feb 22, 2022" + "'", str25, "Feb 22, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime12 = dateTime9.withField(dateTimeFieldType10, 26666);
        int int13 = dateTime12.getYear();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime12.withCenturyOfEra(50);
        int int18 = dateTime12.getDayOfYear();
        org.joda.time.DateTime.Property property19 = dateTime12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Calendar calendar24 = mutableDateTime20.toCalendar(locale23);
        boolean boolean25 = mutableDateTime20.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str27 = mutableDateTime20.toString(dateTimeFormatter26);
        java.lang.String str28 = dateTime12.toString(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.Chronology chronology30 = dateTimeFormatter26.getChronology();
        boolean boolean31 = dateTimeFormatter26.isParser();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26666 + "'", int13 == 26666);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514954461,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=14,MILLISECOND=461,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7:29:14 AM +00:00" + "'", str27, "7:29:14 AM +00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:29:14 AM +00:00" + "'", str28, "7:29:14 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate0.withPeriodAdded(readablePeriod13, (int) (byte) 0);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        boolean boolean27 = dateTimeZone25.equals((java.lang.Object) locale26);
        java.lang.String str28 = dateTimeZone22.getName((long) 'a', locale26);
        org.joda.time.DateTime dateTime29 = localDate0.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale32 = dateTimeFormatter31.getLocale();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter31.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyearOfCentury();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology38);
        org.joda.time.DateTime dateTime43 = dateTime41.plusWeeks(26879362);
        boolean boolean45 = dateTime41.isAfter((long) 26779624);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate.Property property42 = localDate41.year();
        org.joda.time.LocalDate localDate43 = property42.getLocalDate();
        org.joda.time.DateTimeField dateTimeField44 = property42.getField();
        org.joda.time.LocalDate localDate46 = property42.setCopy(50425);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDate0.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.seconds();
        org.joda.time.DurationFieldType durationFieldType28 = durationField27.getType();
        boolean boolean29 = localDate0.isSupported(durationFieldType28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale31 = dateTimeFormatter30.getLocale();
        java.util.Locale locale32 = dateTimeFormatter30.getLocale();
        boolean boolean33 = dateTimeFormatter30.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Calendar calendar38 = mutableDateTime34.toCalendar(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        mutableDateTime34.setMillis(readableInstant43);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.secondOfDay();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime34.add(readableDuration47);
        int int51 = dateTimeFormatter30.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "2022-02-22T07:24:42.673Z", (int) '4');
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.plus((-48469999L));
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime.Property property63 = dateTime61.era();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.dayOfYear();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekOfWeekyear();
        org.joda.time.DateTime dateTime72 = dateTime61.withChronology(chronology69);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTime dateTime75 = dateTime73.minusWeeks(33);
        java.lang.String str76 = dateTimeFormatter30.print((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTimeFormatter30.getZone();
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder80 = builder78.setLocale(locale79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter30.withLocale(locale79);
        boolean boolean82 = dateTimeFormatter81.isOffsetParsed();
        java.lang.String str83 = localDate0.toString(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645514954525,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=14,MILLISECOND=525,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-53) + "'", int51 == (-53));
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0003-06-21T18:01:24.526Z" + "'", str62, "0003-06-21T18:01:24.526Z");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "July 6, 2021 7:29:14 AM +00:00" + "'", str76, "July 6, 2021 7:29:14 AM +00:00");
        org.junit.Assert.assertNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str83, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        boolean boolean11 = dateTimeFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology7.getZone();
        org.joda.time.DurationField durationField15 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.yearOfEra();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) "0003-06-21T17:57:51.566Z", chronology7);
        org.joda.time.Chronology chronology21 = mutableDateTime20.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate24.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime27 = localDate24.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        int int40 = dateTimeFormatter28.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime37, "1", 1);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology52 = localDate47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = localDate44.toDateTimeAtCurrentTime(dateTimeZone53);
        boolean boolean56 = dateTimeZone53.isFixed();
        mutableDateTime37.setZone(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = dateTime27.toDateTime(dateTimeZone53);
        java.util.TimeZone timeZone59 = dateTimeZone53.toTimeZone();
        org.joda.time.Chronology chronology60 = chronology21.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-2) + "'", int40 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1L), dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property13 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMinimumValue();
        int int15 = localTime14.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        java.lang.String str17 = localTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property19 = localTime14.property(dateTimeFieldType18);
        int int20 = localTime7.get(dateTimeFieldType18);
        org.joda.time.LocalTime localTime22 = localTime7.minusMillis(26668071);
        org.joda.time.LocalTime.Property property23 = localTime22.secondOfMinute();
        org.joda.time.LocalTime localTime25 = localTime22.plusHours(26815);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        java.util.Locale locale17 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean18 = locale17.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(2L, chronology11, locale17, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale22 = dateTimeParserBucket21.getLocale();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long40 = dateTimeZone35.getMillisKeepLocal(dateTimeZone38, (long) 2);
        dateTimeParserBucket21.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket21.getZone();
        long long44 = dateTimeParserBucket21.computeMillis(true);
        java.lang.Integer int45 = dateTimeParserBucket21.getOffsetInteger();
        java.lang.Integer int46 = dateTimeParserBucket21.getOffsetInteger();
        dateTimeParserBucket21.setPivotYear((java.lang.Integer) 6);
        java.util.Locale locale49 = dateTimeParserBucket21.getLocale();
        java.util.Locale locale50 = dateTimeParserBucket21.getLocale();
        java.lang.String str51 = locale50.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:27:21.377Z", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:27:21.377Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2L + "'", long40 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        java.lang.String str9 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int13 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "1", 1);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.secondOfDay();
        int int19 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "2022-02-22T07:24:52.137Z", 26683162);
        mutableDateTime15.setMillisOfDay(18);
        mutableDateTime15.addSeconds(868);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-2) + "'", int13 == (-2));
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-26683163) + "'", int19 == (-26683163));
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withLocale(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZoneUTC();
        java.util.Locale locale11 = dateTimeFormatter10.getLocale();
        java.lang.Object obj12 = locale11.clone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514954886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=14,MILLISECOND=886,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "-1");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "-1");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "-1");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "-1");
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime0.add(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        int int14 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYear(999);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(26666877);
        int int19 = localDateTime18.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(5);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        int int25 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime24);
        mutableDateTime0.addWeeks(117060000);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514954897,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=14,MILLISECOND=897,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:14 AM +00:00" + "'", str7, "7:29:14 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) 925, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        long long48 = chronology42.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.DateTime dateTime50 = dateTime35.withChronology(chronology42);
        org.joda.time.DateTime dateTime52 = dateTime50.plus((long) 206);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514954941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=14,MILLISECOND=941,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-48469999L) + "'", long48 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        java.lang.String str9 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int13 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "1", 1);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        mutableDateTime10.setZone(dateTimeZone26);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        mutableDateTime10.setZoneRetainFields(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime10.getZone();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(1645515102151L, dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int38 = dateTimeFormatter37.getDefaultYear();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter37.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.weekyearOfCentury();
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(chronology46);
        boolean boolean51 = dateTime36.equals((java.lang.Object) localDate50);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-2) + "'", int13 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '4', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        int int6 = charSet4.size();
        java.util.Iterator<java.lang.Character> charItor7 = charSet4.iterator();
        boolean boolean8 = charSet4.isEmpty();
        boolean boolean10 = charSet4.add((java.lang.Character) '4');
        charSet4.clear();
        java.util.Spliterator<java.lang.Character> charSpliterator12 = charSet4.spliterator();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int14 = dateTimeFormatter13.getDefaultYear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter13.withChronology(chronology22);
        java.lang.Integer int25 = dateTimeFormatter24.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        java.lang.String str34 = dateTimeFormatter26.print((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        int int38 = dateTimeFormatter26.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime35, "1", 1);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = localDate42.toDateTimeAtCurrentTime(dateTimeZone51);
        boolean boolean54 = dateTimeZone51.isFixed();
        mutableDateTime35.setZone(dateTimeZone51);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        mutableDateTime35.setZoneRetainFields(dateTimeZone57);
        int int61 = dateTimeFormatter24.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime35, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 865);
        org.joda.time.Chronology chronology64 = dateTimeFormatter63.getChronology();
        boolean boolean65 = charSet4.contains((java.lang.Object) chronology64);
        org.joda.time.DurationField durationField66 = chronology64.days();
        org.joda.time.DurationField durationField67 = chronology64.weeks();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(charItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSpliterator12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str34, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-2) + "'", int38 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str42 = nameProvider38.getShortName(locale39, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Calendar calendar47 = mutableDateTime43.toCalendar(locale46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.lang.String str59 = dateTimeField56.getAsText((long) (short) 1, locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale58);
        java.lang.String str62 = locale46.getDisplayLanguage(locale58);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTime dateTime72 = dateTime69.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology73 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.millisOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.clockhourOfHalfday();
        java.util.Locale locale79 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean80 = locale79.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket(2L, chronology73, locale79, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale84 = dateTimeParserBucket83.getLocale();
        java.util.Locale locale85 = java.util.Locale.US;
        java.lang.String str86 = locale84.getDisplayVariant(locale85);
        java.lang.String str87 = locale85.getScript();
        java.lang.String str88 = locale58.getDisplayName(locale85);
        java.lang.String str91 = nameProvider38.getName(locale58, "February 22, -0001 7:24:50 AM +00:00", "0003-06-21T17:57:30.219Z");
        java.lang.String str92 = timeZone37.getDisplayName(locale58);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514955159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=15,MILLISECOND=159,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(strSet60);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str88, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Coordinated Universal Time" + "'", str92, "Coordinated Universal Time");
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 8);
        mutableDateTime3.add(1868400000043251L);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.plus((-48469999L));
        java.lang.String str27 = dateTime26.toString();
        boolean boolean28 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property29 = dateTime14.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Calendar calendar34 = mutableDateTime30.toCalendar(locale33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate38.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        long long52 = dateTimeZone47.getMillisKeepLocal(dateTimeZone50, (long) 2);
        boolean boolean54 = dateTimeZone47.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime30.setZoneRetainFields(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableDateTime30.add(readablePeriod56, 8);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.weekOfWeekyear();
        int int70 = dateTimeField67.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate78 = localDate72.withYear((int) (byte) 1);
        java.lang.String str79 = dateTimeFormatter71.print((org.joda.time.ReadablePartial) localDate78);
        java.util.Locale locale84 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str85 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) localDate78, (int) (short) -1, locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = localDate78.getFieldType((int) (short) 1);
        boolean boolean88 = mutableDateTime30.isSupported(dateTimeFieldType87);
        int int89 = dateTime14.get(dateTimeFieldType87);
        org.joda.time.DateTime dateTime91 = dateTime14.plusDays(26715981);
        org.joda.time.DateTime dateTime92 = dateTime91.toDateTimeISO();
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime95 = dateTime92.withYearOfEra(26772062);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0003-06-21T18:01:25.211Z" + "'", str27, "0003-06-21T18:01:25.211Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514955210,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=15,MILLISECOND=210,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDate78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str79, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-1" + "'", str85, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.roundHalfCeilingCopy();
        java.lang.String str11 = localTime10.toString();
        java.util.Locale locale14 = new java.util.Locale("53");
        boolean boolean15 = locale14.hasExtensions();
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.lang.String str17 = locale14.getCountry();
        java.lang.String str18 = locale14.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localTime10.toString("2022-02-22T07:28:43.822Z", locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "23:59:59.999" + "'", str11, "23:59:59.999");
        org.junit.Assert.assertEquals(locale14.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property12 = dateTime10.property(dateTimeFieldType11);
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.Chronology chronology20 = localDate14.getChronology();
        long long24 = chronology20.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(chronology20);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(1L, chronology20, locale26, (java.lang.Integer) 718, 33);
        java.util.Locale locale31 = dateTimeParserBucket30.getLocale();
        java.util.Locale locale35 = new java.util.Locale("8", "2022-02-22T07:24:30.100Z", "und");
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale31.getDisplayName(locale35);
        java.lang.String str38 = locale31.getISO3Language();
        java.lang.String str39 = locale31.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = org.joda.time.format.DateTimeFormat.patternForStyle("0003-06-21T17:56:49.414Z", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 0003-06-21T17:56:49.414Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 200L + "'", long24 == 200L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals(locale35.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withLocale(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 2);
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronolgy();
        boolean boolean13 = dateTimeFormatter11.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withZoneUTC();
        java.io.Writer writer16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        int int18 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.plus((-48469999L));
        org.joda.time.DateTime dateTime30 = dateTime26.plusSeconds(2);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) dateTime26, dateTimeZone43);
        org.joda.time.Interval interval47 = localDate17.toInterval(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        java.lang.String str49 = mutableDateTime48.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        boolean boolean52 = dateTimeZone50.equals((java.lang.Object) locale51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone50);
        mutableDateTime48.setZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = localDate17.toDateTimeAtCurrentTime(dateTimeZone50);
        long long57 = dateTimeZone50.previousTransition(26L);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(dateTimeZone50);
        org.joda.time.LocalDate localDate60 = localDate58.plusWeeks(26719301);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(writer16, (org.joda.time.ReadablePartial) localDate60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514955472,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=15,MILLISECOND=472,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T07:29:15.472Z" + "'", str49, "2022-02-22T07:29:15.472Z");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 26L + "'", long57 == 26L);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:25:50.844Z", locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:25:50.844Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate7.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate13 = localDate7.withPeriodAdded(readablePeriod11, 7200000);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Calendar calendar18 = mutableDateTime14.toCalendar(locale17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        mutableDateTime14.setMillis(readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        long long45 = dateTimeZone27.getMillisKeepLocal(dateTimeZone40, 10L);
        mutableDateTime14.setZone(dateTimeZone40);
        java.lang.String str47 = dateTimeZone40.getID();
        org.joda.time.DateMidnight dateMidnight48 = localDate7.toDateMidnight(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = localDate7.toString("2022-02-22T07:25:23.681Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514955753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=15,MILLISECOND=753,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateMidnight48);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        java.util.Locale locale4 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str5 = locale4.getDisplayVariant();
        java.lang.String str6 = locale4.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = org.joda.time.format.DateTimeFormat.patternForStyle("22/02/01 07:26", locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 22/02/01 07:26");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        mutableDateTime15.addYears(26673604);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime15.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.add(113102L);
        mutableDateTime41.add((long) 26751412);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514956166,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=16,MILLISECOND=166,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        java.util.Locale locale16 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean17 = locale16.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(2L, chronology10, locale16, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale21 = dateTimeParserBucket20.getLocale();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        long long39 = dateTimeZone34.getMillisKeepLocal(dateTimeZone37, (long) 2);
        dateTimeParserBucket20.setZone(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate48 = localDate42.withYear((int) (byte) 1);
        java.lang.String str49 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        boolean boolean59 = dateTimeZone50.equals((java.lang.Object) dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        int int61 = dateTime60.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property62 = dateTime60.hourOfDay();
        boolean boolean63 = dateTimeParserBucket20.restoreState((java.lang.Object) dateTime60);
        long long65 = dateTimeParserBucket20.computeMillis(false);
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 519);
        java.util.Locale locale68 = dateTimeParserBucket20.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str49, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_PROPERTY[MILLISOFDAY]");
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        boolean boolean3 = dateTimeFormatter1.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.parse("2022-02-22T07:28:32.866Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:32.866Z\" is malformed at \"22-02-22T07:28:32.866Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours(26666877);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime36.withMonthOfYear(26712102);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26712102 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.secondOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(4);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(26666877);
        org.joda.time.DateTime.Property property17 = dateTime16.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.plusYears(1970);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        int int35 = dateTime34.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        java.lang.String str37 = mutableDateTime36.toString();
        boolean boolean38 = dateTime34.isEqual((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime36.setDayOfWeek((int) (byte) 1);
        boolean boolean41 = dateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        java.lang.String str43 = mutableDateTime42.toString();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        mutableDateTime42.add(durationFieldType48, 2);
        mutableDateTime36.add(durationFieldType48, 7);
        mutableDateTime3.add(durationFieldType48, 865);
        java.lang.String str57 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setWeekyear(64713);
        mutableDateTime3.addWeeks(26758203);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 29 + "'", int35 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:29:16.501Z" + "'", str37, "2022-02-22T07:29:16.501Z");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:29:16.501Z" + "'", str43, "2022-02-22T07:29:16.501Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Tuesday, February 22, 2022" + "'", str57, "Tuesday, February 22, 2022");
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime12 = dateTime9.withField(dateTimeFieldType10, 26666);
        int int13 = dateTime12.getYear();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime12.withCenturyOfEra(50);
        int int18 = dateTime12.getDayOfYear();
        org.joda.time.DateTime.Property property19 = dateTime12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Calendar calendar24 = mutableDateTime20.toCalendar(locale23);
        boolean boolean25 = mutableDateTime20.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str27 = mutableDateTime20.toString(dateTimeFormatter26);
        java.lang.String str28 = dateTime12.toString(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear(26753643);
        java.lang.Appendable appendable32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        int int34 = localDate33.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.Interval interval63 = localDate33.toInterval(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime();
        java.lang.String str65 = mutableDateTime64.toString();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        boolean boolean68 = dateTimeZone66.equals((java.lang.Object) locale67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(dateTimeZone66);
        mutableDateTime64.setZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = localDate33.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime73 = dateTime71.withMinuteOfHour(0);
        long long74 = dateTime71.getMillis();
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(113120L);
        boolean boolean77 = dateTime71.isBefore((org.joda.time.ReadableInstant) mutableDateTime76);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime76.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime79 = property78.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter29.printTo(appendable32, (org.joda.time.ReadableInstant) mutableDateTime79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26666 + "'", int13 == 26666);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514956565,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=16,MILLISECOND=565,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7:29:16 AM +00:00" + "'", str27, "7:29:16 AM +00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:29:16 AM +00:00" + "'", str28, "7:29:16 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval63);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T07:29:16.565Z" + "'", str65, "2022-02-22T07:29:16.565Z");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645514956565L + "'", long74 == 1645514956565L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.era();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 26666877, chronology7, locale10, (java.lang.Integer) 7200000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter14.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate26.equals((java.lang.Object) (byte) 10);
        int[] intArray35 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int36 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate26, intArray35);
        org.joda.time.LocalDate localDate38 = localDate26.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property39 = localDate38.era();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        dateTimeParserBucket13.saveField(dateTimeField40, 0);
        java.lang.Integer int43 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.plus((-48469999L));
        org.joda.time.DateTime dateTime55 = dateTime51.plusSeconds(2);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate59.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) dateTime51, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight72 = localDate71.toDateMidnight();
        int int73 = localDate71.getDayOfMonth();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) 5);
        org.joda.time.LocalDate.Property property76 = localDate75.monthOfYear();
        boolean boolean77 = localDate71.isAfter((org.joda.time.ReadablePartial) localDate75);
        int int78 = localDate71.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        boolean boolean81 = dateTimeZone79.equals((java.lang.Object) locale80);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(dateTimeZone79);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone79);
        int int85 = dateTimeZone79.getStandardOffset((long) 26738210);
        org.joda.time.DateMidnight dateMidnight86 = localDate71.toDateMidnight(dateTimeZone79);
        dateTimeParserBucket13.setZone(dateTimeZone79);
        long long89 = dateTimeZone79.convertUTCToLocal((long) 26713145);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 25 + "'", int78 == 25);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 26713145L + "'", long89 == 26713145L);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("53");
        int int23 = mutableDateTime22.getDayOfMonth();
        long long24 = mutableDateTime22.getMillis();
        int int25 = dateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.DateTime dateTime29 = dateTime20.withFieldAdded(durationFieldType27, (int) (short) -1);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("");
        java.lang.String str33 = timeZone32.getID();
        java.lang.String str34 = timeZone32.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 53, dateTimeZone35);
        long long39 = dateTimeZone35.convertLocalToUTC((long) 26, true);
        org.joda.time.DateTime dateTime40 = dateTime29.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime29.toMutableDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.minuteOfHour();
        long long58 = dateTimeField55.getDifferenceAsLong((long) 30461931, (long) 44);
        java.lang.String str60 = dateTimeField55.getAsShortText((long) 2081);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60494601600000L) + "'", long24 == (-60494601600000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GMT" + "'", str33, "GMT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT" + "'", str34, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 26L + "'", long39 == 26L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 507L + "'", long58 == 507L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter0.getPrinter();
        org.joda.time.ReadableInstant readableInstant3 = null;
        java.lang.String str4 = dateTimeFormatter0.print(readableInstant3);
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable5, (long) 26868143);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mardi 22 f\351vrier 2022" + "'", str4, "mardi 22 f\351vrier 2022");
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        java.lang.String str23 = dateTimeField9.getName();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate30 = localDate24.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property31 = localDate24.yearOfEra();
        org.joda.time.LocalDate localDate32 = property31.roundFloorCopy();
        org.joda.time.LocalDate localDate33 = property31.roundFloorCopy();
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime40.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime47 = dateTime44.withField(dateTimeFieldType45, 26666);
        org.joda.time.LocalDate localDate49 = localDate33.withField(dateTimeFieldType45, (int) ' ');
        org.joda.time.LocalDate localDate51 = localDate33.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate53 = localDate51.withWeekyear(7);
        org.joda.time.LocalDate.Property property54 = localDate53.year();
        java.util.Locale locale58 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale62 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str63 = locale62.getDisplayVariant();
        java.lang.String str64 = locale58.getDisplayCountry(locale62);
        java.lang.String str65 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate53, locale58);
        java.util.Locale locale66 = locale58.stripExtensions();
        java.lang.String str67 = locale58.getDisplayLanguage();
        java.util.Locale locale68 = locale58.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyearOfCentury" + "'", str23, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-01-01" + "'", str34, "2022-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals(locale58.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str64, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "7" + "'", str65, "7");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22t07:24:26.446z" + "'", str67, "2022-02-22t07:24:26.446z");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        boolean boolean20 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.Chronology chronology21 = dateTimeFormatter6.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZoneUTC();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514957263,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=17,MILLISECOND=263,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:17 +00:00" + "'", str7, "07:29:17 +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.util.Locale locale5 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter0.getParser();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withLocale(locale9);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter0.getPrinter();
        int int12 = dateTimePrinter11.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.Chronology chronology15 = dateTimeFormatter13.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withDefaultYear((int) (byte) 10);
        java.util.Locale locale18 = dateTimeFormatter13.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter13.getParser();
        int int20 = dateTimeParser19.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((int) ' ');
        java.lang.Appendable appendable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(appendable24, 1391608473L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(dateTimeParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str5 = dateTimeFieldType4.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType4.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(17823000, 26897415, (-26781621), 26952458, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17823000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "year" + "'", str5, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        java.lang.String str16 = localDate0.toString("7");
        org.joda.time.DateMidnight dateMidnight17 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property18 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property18.addToCopy(26890672);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.parse("53");
        int int15 = mutableDateTime14.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime14.add(readablePeriod16, 26668);
        mutableDateTime14.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime14.secondOfDay();
        int int22 = property21.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.set(63);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter11.withZone(dateTimeZone25);
        boolean boolean27 = dateTimeFormatter11.isOffsetParsed();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter11.withLocale(locale28);
        java.lang.StringBuffer stringBuffer30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.LocalDate.Property property46 = localDate34.yearOfCentury();
        org.joda.time.DateTime dateTime47 = localDate34.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter29.printTo(stringBuffer30, (org.joda.time.ReadableInstant) dateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        org.joda.time.LocalDate.Property property24 = localDate0.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate26 = localDate0.withWeekyear(28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int39 = dateTimeFormatter27.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime36, "1", 1);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate43.toDateTimeAtCurrentTime(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter27.withZone(dateTimeZone52);
        org.joda.time.Interval interval57 = localDate0.toInterval(dateTimeZone52);
        org.joda.time.LocalDate.Property property58 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate59 = property58.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime60 = localDate59.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate62 = localDate59.withDayOfWeek(26853203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26853203 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-2) + "'", int39 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        boolean boolean6 = mutableDateTime1.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str8 = mutableDateTime1.toString(dateTimeFormatter7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate15 = localDate9.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate9.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate9.withPeriodAdded(readablePeriod17, (int) ' ');
        java.lang.String str20 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate19);
        boolean boolean21 = dateTimeFormatter7.isOffsetParsed();
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter7.withLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.parse("2022-02-22T07:27:30.665Z", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:30.665Z\" is malformed at \"22-02-22T07:27:30.665Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514957584,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=17,MILLISECOND=584,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "07:29:17 +00:00" + "'", str8, "07:29:17 +00:00");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        java.util.Locale locale3 = new java.util.Locale("2022-02-22T07:35:32.053", "64651");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = org.joda.time.format.DateTimeFormat.patternForStyle("0001-02-19T22:28:51.601Z", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 0001-02-19T22:28:51.601Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:35:32.053_64651");
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeFormatter5.parseMillis("0003-06-21T18:00:37.983Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:00:37.983Z\" is malformed at \"03-06-21T18:00:37.983Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        int int13 = dateTimeFormatter11.getDefaultYear();
        java.lang.String str15 = dateTimeFormatter11.print(70145639712000257L);
        int int16 = dateTimeFormatter11.getDefaultYear();
        org.joda.time.Chronology chronology17 = dateTimeFormatter11.getChronolgy();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate20.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtStartOfDay();
        int int24 = localDate20.size();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate27.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate31 = localDate27.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        mutableDateTime32.add(durationFieldType36, (-1));
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime32.weekOfWeekyear();
        org.joda.time.DateTime dateTime40 = localDate31.toDateTime((org.joda.time.ReadableInstant) mutableDateTime32);
        boolean boolean41 = localDate20.isBefore((org.joda.time.ReadablePartial) localDate31);
        int int42 = localDate20.getWeekOfWeekyear();
        org.joda.time.Chronology chronology43 = localDate20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter11.withChronology(chronology43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter11.withDefaultYear(57599999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime48 = dateTimeFormatter46.parseLocalTime("7:24:46 am +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"7:24:46 am +00:00\" is malformed at \":24:46 am +00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "01/11/96 00:00" + "'", str15, "01/11/96 00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2000 + "'", int16 == 2000);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(4);
        org.joda.time.DateTime.Property property8 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, 7200000);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis(19);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = localDate15.getFieldType(1);
        int int20 = localDate15.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        mutableDateTime21.add(durationFieldType25, (-1));
        boolean boolean28 = localDate15.isSupported(durationFieldType25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        org.joda.time.LocalDate.Property property39 = localDate15.property(dateTimeFieldType38);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType38.getRangeDurationType();
        org.joda.time.DateTime dateTime42 = dateTime12.withFieldAdded(durationFieldType40, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate50 = localDate44.withYear((int) (byte) 1);
        java.lang.String str51 = dateTimeFormatter43.print((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime();
        int int55 = dateTimeFormatter43.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime52, "1", 1);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate59.toDateTimeAtCurrentTime(dateTimeZone68);
        boolean boolean71 = dateTimeZone68.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter43.withZone(dateTimeZone68);
        java.lang.String str74 = dateTimeFormatter43.print(7200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter43.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeFormatter75.getZone();
        org.joda.time.DateTime dateTime77 = dateTime12.toDateTime(dateTimeZone76);
        org.joda.time.DateMidnight dateMidnight78 = dateTime12.toDateMidnight();
        org.joda.time.DateTime dateTime80 = dateTime12.plusMonths(26689450);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str51, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-2) + "'", int55 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1 janv. 1970 02:00:00" + "'", str74, "1 janv. 1970 02:00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 38090);
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = dateTimeFormatter46.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Calendar calendar52 = mutableDateTime48.toCalendar(locale51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        mutableDateTime48.setMillis(readableInstant57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfDay();
        mutableDateTime48.setRounding(dateTimeField69);
        mutableDateTime48.addDays(59);
        mutableDateTime48.addMillis(26738915);
        java.lang.String str75 = dateTimeFormatter46.print((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean76 = dateTimeFormatter46.isOffsetParsed();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514957842,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=17,MILLISECOND=842,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "vendredi 4 f\351vrier 2022" + "'", str44, "vendredi 4 f\351vrier 2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimePrinter47);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514957842,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=17,MILLISECOND=842,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "vendredi 22 avril 2022" + "'", str75, "vendredi 22 avril 2022");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter0.withZone(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        int int35 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime30, "24", (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setHourOfDay(26838074);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26838074 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-53) + "'", int35 == (-53));
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(110);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology18);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfWeek();
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime29.plus((-48469999L));
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime.Property property33 = dateTime31.era();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter35.withChronology(chronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology43.getZone();
        org.joda.time.DateTime dateTime47 = dateTime34.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDate19.toDateTimeAtMidnight(dateTimeZone46);
        boolean boolean49 = dateTimeZone46.isFixed();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime11, dateTimeZone46);
        java.lang.String str51 = mutableDateTime50.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0003-06-21T18:01:28.053Z" + "'", str32, "0003-06-21T18:01:28.053Z");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T09:19:18.051Z" + "'", str51, "2022-02-22T09:19:18.051Z");
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronolgy();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateTime13.toString("2022-02-22T07:25:33.896Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.weekOfWeekyear();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        int int9 = property7.getMaximumTextLength(locale8);
        java.util.Set<java.lang.Character> charSet10 = locale8.getExtensionKeys();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology21 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        java.util.Locale locale27 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean28 = locale27.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(2L, chronology21, locale27, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long54 = dateTimeZone49.getMillisKeepLocal(dateTimeZone52, (long) 2);
        boolean boolean56 = dateTimeZone49.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime32.setZoneRetainFields(dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableDateTime32.add(readablePeriod58, 8);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.weekOfWeekyear();
        int int72 = dateTimeField69.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate80 = localDate74.withYear((int) (byte) 1);
        java.lang.String str81 = dateTimeFormatter73.print((org.joda.time.ReadablePartial) localDate80);
        java.util.Locale locale86 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str87 = dateTimeField69.getAsText((org.joda.time.ReadablePartial) localDate80, (int) (short) -1, locale86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = localDate80.getFieldType((int) (short) 1);
        boolean boolean90 = mutableDateTime32.isSupported(dateTimeFieldType89);
        dateTimeParserBucket31.saveField(dateTimeFieldType89, 100);
        dateTimeParserBucket31.setPivotYear((java.lang.Integer) 26665274);
        dateTimeParserBucket31.setPivotYear((java.lang.Integer) 203908000);
        org.joda.time.Chronology chronology97 = dateTimeParserBucket31.getChronology();
        boolean boolean98 = locale8.equals((java.lang.Object) dateTimeParserBucket31);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514958266,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=18,MILLISECOND=266,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDate80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str81, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale86.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1" + "'", str87, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.hourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) chronology9, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        long long13 = dateTimeField10.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology22.getZone();
        org.joda.time.DurationField durationField30 = chronology22.centuries();
        java.util.Locale locale32 = new java.util.Locale("53");
        java.lang.String str33 = locale32.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology22, locale32);
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = dateTimeField10.getAsText((-1), locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter0.withLocale(locale32);
        int int38 = dateTimeFormatter0.getDefaultYear();
        int int39 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter0.withZoneUTC();
        java.lang.Appendable appendable41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 20);
        org.joda.time.DateTime dateTime52 = dateTime47.toDateTime(dateTimeZone51);
        org.joda.time.DateTime.Property property53 = dateTime47.weekOfWeekyear();
        org.joda.time.DateTime dateTime54 = dateTime47.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable41, (org.joda.time.ReadableInstant) dateTime54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals(locale32.toString(), "53");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property24 = dateTime19.secondOfMinute();
        int int25 = property24.getMaximumValue();
        org.joda.time.DateTime dateTime26 = property24.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        org.joda.time.LocalDate.Property property54 = localDate53.weekOfWeekyear();
        org.joda.time.LocalDate localDate56 = localDate53.minusYears((int) (short) 0);
        org.joda.time.LocalDate localDate58 = localDate53.plusMonths(19);
        org.joda.time.LocalDate.Property property59 = localDate58.centuryOfEra();
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime62 = dateTime60.plusMonths(26738210);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514958534,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=18,MILLISECOND=534,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "07:29:18 +00:00" + "'", str46, "07:29:18 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        boolean boolean35 = dateTimeZone26.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        long long49 = chronology43.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime51 = dateTime36.withChronology(chronology43);
        org.joda.time.DurationField durationField52 = chronology43.halfdays();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 26701949, chronology43);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime54.add(readableDuration55);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Calendar calendar58 = mutableDateTime54.toCalendar(locale57);
        boolean boolean59 = mutableDateTime54.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str61 = mutableDateTime54.toString(dateTimeFormatter60);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatter60.getPrinter();
        java.lang.String str63 = localDate53.toString(dateTimeFormatter60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = dateTimeFormatter60.parseLocalDateTime("janv.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"janv.\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514958796,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=18,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-48469999L) + "'", long49 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514958796,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=18,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "07:29:18 +00:00" + "'", str61, "07:29:18 +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str63, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundFloor();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.era();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.roundCeiling();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        long long13 = dateTimeField10.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType16.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology22.getZone();
        org.joda.time.DurationField durationField30 = chronology22.centuries();
        java.util.Locale locale32 = new java.util.Locale("53");
        java.lang.String str33 = locale32.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology22, locale32);
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = dateTimeField10.getAsText((-1), locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter0.withLocale(locale32);
        int int38 = dateTimeFormatter0.getDefaultYear();
        int int39 = dateTimeFormatter0.getDefaultYear();
        boolean boolean40 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter0.withChronology(chronology50);
        int int55 = dateTimeFormatter54.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals(locale32.toString(), "53");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2000 + "'", int55 == 2000);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        java.util.Locale locale16 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean17 = locale16.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(2L, chronology10, locale16, (java.lang.Integer) (-2), (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime21.setZoneRetainFields(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime21.add(readablePeriod47, 8);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        int int61 = dateTimeField58.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        java.lang.String str70 = dateTimeFormatter62.print((org.joda.time.ReadablePartial) localDate69);
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate69, (int) (short) -1, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDate69.getFieldType((int) (short) 1);
        boolean boolean79 = mutableDateTime21.isSupported(dateTimeFieldType78);
        dateTimeParserBucket20.saveField(dateTimeFieldType78, 100);
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 26665274);
        dateTimeParserBucket20.setOffset(2);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = dateTimeParserBucket20.computeMillis();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514959121,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=19,MILLISECOND=121,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str70, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        int int7 = localDate6.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        org.joda.time.DateTime dateTime19 = dateTime15.plusSeconds(2);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTime15, dateTimeZone32);
        org.joda.time.Interval interval36 = localDate6.toInterval(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        java.lang.String str38 = mutableDateTime37.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        boolean boolean41 = dateTimeZone39.equals((java.lang.Object) locale40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone39);
        mutableDateTime37.setZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = localDate6.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone39);
        int int46 = localDate45.size();
        int int47 = localDate45.getYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = localDate45.getFieldTypes();
        org.joda.time.LocalDate.Property property49 = localDate45.weekyear();
        java.lang.String str50 = dateTimeFormatter5.print((org.joda.time.ReadablePartial) localDate45);
        java.lang.StringBuffer stringBuffer51 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.DateTime.Property property54 = dateTime53.centuryOfEra();
        org.joda.time.DateTime dateTime56 = dateTime53.minusYears(7);
        java.util.Date date57 = dateTime56.toDate();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.fromDateFields(date57);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromDateFields(date57);
        org.joda.time.LocalTime localTime61 = localTime59.plusHours(26825062);
        org.joda.time.LocalTime localTime63 = localTime61.minusSeconds(26794);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(stringBuffer51, (org.joda.time.ReadablePartial) localTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:29:19.164Z" + "'", str38, "2022-02-22T07:29:19.164Z");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "mardi 22 f\351\ufffd\ufffd\ufffd\ufffd " + "'", str50, "mardi 22 f\351\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Tue Jan 01 00:00:26 GMT 1963");
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        java.lang.String str9 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        boolean boolean19 = dateTimeZone10.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate8.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate localDate22 = localDate8.minusYears(2000);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 26674492, chronology23, locale24);
        java.lang.Integer int27 = dateTimeParserBucket26.getOffsetInteger();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str9, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property5 = localDate4.weekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Calendar calendar10 = mutableDateTime6.toCalendar(locale9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        mutableDateTime6.setMillis(readableInstant15);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        mutableDateTime21.setMillis((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        long long54 = chronology48.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(chronology48);
        org.joda.time.DateTime dateTime56 = dateTime41.withChronology(chronology48);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateTime41.toDateTime(chronology57);
        int int59 = property5.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime58.plusYears(26688680);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514959246,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=19,MILLISECOND=246,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-48469999L) + "'", long54 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        java.lang.String str9 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        boolean boolean19 = dateTimeZone10.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate8.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate localDate22 = localDate8.minusYears(2000);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 26674492, chronology23, locale24);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str29 = dateTimeZone27.getShortName((long) 26826012);
        int int31 = dateTimeZone27.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str9, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 0);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Calendar calendar10 = mutableDateTime6.toCalendar(locale9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromCalendarFields(calendar10);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property12.addNoWrapToCopy(54);
        java.lang.String str15 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514959350,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=19,MILLISECOND=350,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 07:29:19 " + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 07:29:19 ");
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        int int13 = dateTimeFormatter11.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter11.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter11.getParser();
        org.joda.time.Chronology chronology16 = dateTimeFormatter11.getChronolgy();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDate17.getFieldType(1);
        int int22 = localDate17.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        mutableDateTime23.add(durationFieldType27, (-1));
        boolean boolean30 = localDate17.isSupported(durationFieldType27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDate17.getFieldTypes();
        java.lang.String str33 = localDate17.toString("7");
        org.joda.time.DateMidnight dateMidnight34 = localDate17.toDateMidnight();
        org.joda.time.LocalDate localDate36 = localDate17.minusMonths(99);
        org.joda.time.LocalDate localDate38 = localDate36.plusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone40);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property55 = dateTime53.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime56 = property55.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.Chronology chronology63 = localDate57.getChronology();
        long long67 = chronology63.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime68 = dateTime56.toDateTime(chronology63);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale69.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(1L, chronology63, locale69, (java.lang.Integer) 718, 33);
        java.lang.String str74 = dateTimeZone40.getShortName(4260279330L, locale69);
        long long77 = dateTimeZone40.adjustOffset(0L, false);
        org.joda.time.Interval interval78 = localDate36.toInterval(dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter11.withZone(dateTimeZone40);
        boolean boolean80 = dateTimeFormatter79.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeParser15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7" + "'", str33, "7");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 200L + "'", long67 == 200L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = dateTimeZone3.equals((java.lang.Object) locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withZone(dateTimeZone3);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        long long26 = chronology20.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology20);
        int int28 = dateTime12.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime12.withDurationAdded(readableDuration29, 26674);
        java.lang.String str32 = dateTimeFormatter1.print((org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.parse("2022-02-22T07:29:03.156Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:29:03.156Z\" is malformed at \"22-02-22T07:29:03.156Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-48469999L) + "'", long26 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22/02/01 07:29" + "'", str32, "22/02/01 07:29");
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeFormatter42.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withOffsetParsed();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime50.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property55 = dateTime53.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime56 = property55.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime57 = property55.roundHalfCeilingCopy();
        java.lang.String str58 = dateTimeFormatter44.print((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = dateTimeFormatter44.getPrinter();
        java.lang.String str60 = localDate41.toString(dateTimeFormatter44);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate64 = localDate61.withField(dateTimeFieldType62, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime66.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay(22);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate75 = localDate72.withField(dateTimeFieldType73, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDate75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusMonths((int) '4');
        org.joda.time.DateTime dateTime81 = dateTime79.plus((-48469999L));
        java.lang.String str82 = dateTime81.toString();
        int int83 = dateTime71.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime85 = dateTime71.minusMillis(26674);
        boolean boolean86 = localDate41.equals((java.lang.Object) dateTime85);
        org.joda.time.DateTime dateTime88 = dateTime85.plus((long) 26724);
        int int89 = dateTime85.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "lundi 1 janvier 0001 00 h 00 +00:00" + "'", str58, "lundi 1 janvier 0001 00 h 00 +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "jeudi 22 f\351\ufffd\ufffd\ufffd\ufffd " + "'", str60, "jeudi 22 f\351\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0003-06-21T18:01:29.629Z" + "'", str82, "0003-06-21T18:01:29.629Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 80932 + "'", int89 == 80932);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.Interval interval39 = localDate9.toInterval(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime8.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime8.toDateTime(chronology50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime60.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime67 = property65.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate75 = localDate69.withYear((int) (byte) 1);
        java.lang.String str76 = dateTimeFormatter68.print((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        boolean boolean86 = dateTimeZone77.equals((java.lang.Object) dateTimeZone84);
        org.joda.time.DateTime dateTime87 = localDate75.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime67.toDateTime(dateTimeZone84);
        long long90 = dateTimeZone84.nextTransition(1600012620000L);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) dateTime54, dateTimeZone84);
        org.joda.time.DateTime.Property property92 = dateTime91.millisOfSecond();
        org.joda.time.DateTime dateTime94 = dateTime91.minusMinutes(26763715);
        org.joda.time.DateTime.Property property95 = dateTime94.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone96 = null;
        org.joda.time.DateTime dateTime97 = dateTime94.toDateTime(dateTimeZone96);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDate75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str76, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1600012620000L + "'", long90 == 1600012620000L);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) "0001-02-19T22:25:26.204Z", chronology10);
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.dayOfWeek();
        int int18 = dateTime15.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 204 + "'", int18 == 204);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear(26738810);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.Chronology chronology9 = dateTimeFormatter7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((-1L), dateTimeZone11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfDay();
        java.lang.String str14 = property13.toString();
        org.joda.time.LocalTime localTime16 = property13.addCopy(0);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.DateTime dateTime18 = localTime16.toDateTimeToday();
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter7.withChronology(chronology19);
        java.lang.Appendable appendable21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.hourOfDay();
        boolean boolean45 = dateTime41.isAfter((-48469999L));
        org.joda.time.DateTime dateTime47 = dateTime41.plus(16134216940826667L);
        org.joda.time.DateTime dateTime49 = dateTime41.minusMinutes(26676115);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(appendable21, (org.joda.time.ReadableInstant) dateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[millisOfDay]" + "'", str14, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 182);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(26837615);
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable5, (long) 26787498);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter15.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        java.lang.String str22 = mutableDateTime21.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        boolean boolean25 = dateTimeZone23.equals((java.lang.Object) locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone23);
        mutableDateTime21.setZoneRetainFields(dateTimeZone23);
        boolean boolean29 = mutableDateTime21.isEqual((long) 1970);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 26666570);
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        int int33 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int36 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime21, "2022-02-22T07:24:44.296Z", 5999999);
        mutableDateTime21.addYears(26724);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime21.millisOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:29:20.207Z" + "'", str22, "2022-02-22T07:29:20.207Z");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-6000000) + "'", int36 == (-6000000));
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime68 = property66.addWrapField(26666);
        org.joda.time.Chronology chronology69 = null;
        mutableDateTime68.setChronology(chronology69);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        boolean boolean11 = dateTimeFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology7.getZone();
        org.joda.time.DurationField durationField15 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology7.year();
        org.joda.time.DurationField durationField20 = chronology7.weeks();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology7);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale22.getDisplayLanguage(locale23);
        java.lang.String str26 = locale23.getCountry();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        int int38 = dateTimeField35.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate46 = localDate40.withYear((int) (byte) 1);
        java.lang.String str47 = dateTimeFormatter39.print((org.joda.time.ReadablePartial) localDate46);
        java.util.Locale locale52 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str53 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDate46, (int) (short) -1, locale52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDate46.getFieldType((int) (short) 1);
        int int56 = localDate46.getMonthOfYear();
        org.joda.time.LocalDate.Property property57 = localDate46.dayOfMonth();
        java.util.Locale locale59 = new java.util.Locale("53");
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = property57.getAsShortText(locale59);
        java.lang.String str62 = locale23.getDisplayScript(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((-13305486928L), chronology7, locale23);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.dayOfYear();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekOfWeekyear();
        long long73 = dateTimeField71.roundHalfCeiling((long) 26671504);
        int int74 = dateTimeField71.getMaximumValue();
        dateTimeParserBucket63.saveField(dateTimeField71, 7200000);
        int int77 = dateTimeParserBucket63.getOffset();
        // The following exception was thrown during execution in test generation
        try {
            long long78 = dateTimeParserBucket63.computeMillis();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7200000 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "jpn" + "'", str24, "jpn");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str25, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str47, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals(locale59.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "22" + "'", str61, "22");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-259200000L) + "'", long73 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 53 + "'", int74 == 53);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = property23.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        org.joda.time.DateTime dateTime28 = property23.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readableDuration29);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.DateTime dateTime32 = localDate0.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        long long45 = dateTimeField42.addWrapField((long) ' ', 0);
        long long47 = dateTimeField42.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = localDate48.getFieldType(1);
        int int53 = localDate48.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime54.add(readableDuration55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType57.getDurationType();
        mutableDateTime54.add(durationFieldType58, (-1));
        boolean boolean61 = localDate48.isSupported(durationFieldType58);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField70.getType();
        org.joda.time.LocalDate.Property property72 = localDate48.property(dateTimeFieldType71);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration74 = null;
        mutableDateTime73.add(readableDuration74);
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.util.Calendar calendar77 = mutableDateTime73.toCalendar(locale76);
        boolean boolean78 = mutableDateTime73.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str80 = mutableDateTime73.toString(dateTimeFormatter79);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        boolean boolean83 = dateTimeZone81.equals((java.lang.Object) locale82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter79.withLocale(locale82);
        java.lang.String str85 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDate48, locale82);
        org.joda.time.LocalDate localDate87 = localDate48.minusWeeks(0);
        org.joda.time.DateTime dateTime88 = localDate87.toDateTimeAtStartOfDay();
        boolean boolean89 = mutableDateTime33.isAfter((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime33.secondOfDay();
        mutableDateTime33.setYear(26785698);
        java.util.Date date93 = mutableDateTime33.toDate();
        org.joda.time.MutableDateTime.Property property94 = mutableDateTime33.yearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 345600000L + "'", long47 == 345600000L);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1645514960375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=20,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "07:29:20 +00:00" + "'", str80, "07:29:20 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "8" + "'", str85, "8");
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(date93);
// flaky:         org.junit.Assert.assertEquals(date93.toString(), "Sat Feb 22 07:29:20 GMT 26785698");
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        int int10 = mutableDateTime0.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        boolean boolean30 = dateTimeZone21.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDate19.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime.Property property32 = dateTime31.weekOfWeekyear();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime31.withChronology(chronology40);
        long long43 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        boolean boolean54 = dateTimeFieldType44.isSupported(chronology50);
        org.joda.time.DateTimeField dateTimeField55 = chronology50.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.DateTimeZone dateTimeZone57 = chronology50.getZone();
        org.joda.time.DurationField durationField58 = chronology50.centuries();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.weekOfWeekyear();
        int int70 = dateTimeField67.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate78 = localDate72.withYear((int) (byte) 1);
        java.lang.String str79 = dateTimeFormatter71.print((org.joda.time.ReadablePartial) localDate78);
        java.util.Locale locale84 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str85 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) localDate78, (int) (short) -1, locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = localDate78.getFieldType((int) (short) 1);
        int int88 = localDate78.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime91 = localDate78.toDateTimeAtStartOfDay(dateTimeZone90);
        org.joda.time.Chronology chronology92 = chronology50.withZone(dateTimeZone90);
        org.joda.time.DateTime dateTime93 = dateTime42.toDateTime(chronology50);
        org.joda.time.DateTime dateTime94 = dateTime42.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26960747 + "'", int10 == 26960747);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 738154L + "'", long43 == 738154L);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDate78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str79, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale84.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-1" + "'", str85, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter15.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = dateTimeFormatter15.parseLocalDateTime("2022-02-22T07:28:48.820Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:48.820Z\" is malformed at \"22-02-22T07:28:48.820Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeParser21);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.parse("2022-02-22T07:24:32.073Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:24:32.073Z\" is malformed at \"-02-22T07:24:32.073Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime localTime8 = localTime6.withMinuteOfHour((int) (short) 0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localTime8.toString("2022-02-22T07:28:01.772Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        int int14 = dateTimeField12.getMaximumValue(3366579221870039078L);
        long long17 = dateTimeField12.set((-62194235723419L), 32);
        org.joda.time.DurationField durationField18 = dateTimeField12.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = durationField18.add((long) 507, 841644804756491876L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 841644804756491876 * 1000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-62194235727419L) + "'", long17 == (-62194235727419L));
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        mutableDateTime9.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime9.secondOfDay();
        org.joda.time.Instant instant34 = mutableDateTime9.toInstant();
        mutableDateTime9.addMonths(26827818);
        int int37 = mutableDateTime9.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 34 + "'", int37 == 34);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        boolean boolean23 = dateTimeZone21.equals((java.lang.Object) locale22);
        java.lang.String str24 = dateTimeZone18.getName((long) 'a', locale22);
        int int25 = dateTimeField8.getMaximumTextLength(locale22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        long long37 = dateTimeField34.addWrapField((long) ' ', 0);
        long long39 = dateTimeField34.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDate40.getFieldType(1);
        int int45 = localDate40.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        mutableDateTime46.add(durationFieldType50, (-1));
        boolean boolean53 = localDate40.isSupported(durationFieldType50);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = dateTimeField62.getType();
        org.joda.time.LocalDate.Property property64 = localDate40.property(dateTimeFieldType63);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime65.add(readableDuration66);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Calendar calendar69 = mutableDateTime65.toCalendar(locale68);
        boolean boolean70 = mutableDateTime65.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str72 = mutableDateTime65.toString(dateTimeFormatter71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        boolean boolean75 = dateTimeZone73.equals((java.lang.Object) locale74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter71.withLocale(locale74);
        java.lang.String str77 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate40, locale74);
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder80 = builder78.setLocale(locale79);
        java.util.Locale locale81 = builder78.build();
        java.lang.String str82 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDate40, locale81);
        java.lang.String str83 = locale81.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = locale81.getUnicodeLocaleType("7:26:56 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 7:26:56 AM +00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 345600000L + "'", long39 == 345600000L);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645514961772,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=21,MILLISECOND=772,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str72, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "8" + "'", str77, "8");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "8" + "'", str82, "8");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime12.withHourOfDay((int) (short) 10);
        org.joda.time.Instant instant36 = dateTime12.toInstant();
        org.joda.time.DateTime.Property property37 = dateTime12.dayOfMonth();
        org.joda.time.DateTime.Property property38 = dateTime12.secondOfMinute();
        org.joda.time.DateTime.Property property39 = dateTime12.millisOfSecond();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronolgy();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        java.lang.String str7 = dateTimeFormatter1.print((long) 999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 26682882);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.parse("2022-02-22T07:27:15.380Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:15.380Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Thursday, January 1, 1970" + "'", str7, "Thursday, January 1, 1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        java.lang.String str5 = locale3.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:28:13.911Z", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:28:13.911Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "French" + "'", str5, "French");
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        mutableDateTime0.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField((-2));
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundHalfEven();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate22 = localDate16.withYear((int) (byte) 1);
        java.lang.String str23 = dateTimeFormatter15.print((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter15.getParser();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime31.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology35 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfHalfday();
        java.util.Locale locale41 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean42 = locale41.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(2L, chronology35, locale41, (java.lang.Integer) (-2), (int) 'a');
        int int48 = dateTimeParser24.parseInto(dateTimeParserBucket45, "", 4);
        java.util.Locale locale49 = dateTimeParserBucket45.getLocale();
        int int50 = property14.getMaximumTextLength(locale49);
        java.lang.String str51 = locale49.getVariant();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str23, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-5) + "'", int48 == (-5));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Calendar calendar7 = mutableDateTime3.toCalendar(locale6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        mutableDateTime3.setMillis(readableInstant12);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime3.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        java.lang.String str27 = dateTimeFormatter19.print((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        boolean boolean37 = dateTimeZone28.equals((java.lang.Object) dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        long long51 = chronology45.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(chronology45);
        org.joda.time.DateTime dateTime53 = dateTime38.withChronology(chronology45);
        org.joda.time.DurationField durationField54 = chronology45.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(26856503, 15, 26822683, chronology45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "february 22, -0001 7:25:15 am +00:00_2022-02-22T07:26:10.110Z");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514962315,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=22,MILLISECOND=315,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str27, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-48469999L) + "'", long51 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate1.withPeriodAdded(readablePeriod9, (int) ' ');
        org.joda.time.LocalDate localDate13 = localDate1.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate15 = localDate1.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        java.lang.String str18 = localDate1.toString(dateTimeFormatter16);
        java.util.Locale locale19 = dateTimeFormatter16.getLocale();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter16.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter16.withDefaultYear(99);
        boolean boolean23 = dateTimeFormatter16.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str25 = dateTimeFieldType24.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int27 = dateTimeFormatter26.getDefaultYear();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter26.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType24.getField(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter16.withChronology(chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter42.withZoneUTC();
        int int44 = dateTimeFormatter43.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.parse("February 22, 2022 7:28:58 AM ", dateTimeFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"February 22, 2022 7:28:58 AM \"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str18, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "year" + "'", str25, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2000 + "'", int44 == 2000);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        java.lang.String str10 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 26738210);
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.Chronology chronology16 = dateTimeFormatter14.getChronolgy();
        java.io.Writer writer17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusYears(2024);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(writer17, (org.joda.time.ReadablePartial) localDateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str10, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear(45);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeZone4);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate24.plus(readablePeriod26);
        org.joda.time.LocalDate.Property property28 = localDate27.weekOfWeekyear();
        org.joda.time.LocalDate localDate30 = localDate27.withYearOfEra(292278922);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology8.getZone();
        org.joda.time.DurationField durationField13 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime12.withHourOfDay((int) (short) 10);
        org.joda.time.Instant instant36 = dateTime12.toInstant();
        org.joda.time.DateTime.Property property37 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime12.minus(0L);
        int int40 = dateTime12.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate0.withPeriodAdded(readablePeriod15, (-2));
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str19 = dateTimeFieldType18.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int21 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter20.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology29);
        boolean boolean34 = localDate0.isSupported(dateTimeFieldType18);
        java.lang.String str35 = dateTimeFieldType18.toString();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weeks();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology42.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType18.getField(chronology48);
        int int51 = dateTimeField49.get(55628000L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "year" + "'", str19, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "year" + "'", str35, "year");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        java.io.Writer writer1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMinutes(26666877);
        int int7 = localDateTime2.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer1, (org.joda.time.ReadablePartial) localDateTime2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.addWrapField(26690);
        org.joda.time.MutableDateTime mutableDateTime85 = property81.add(26787499);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime85.setHourOfDay(26680129);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26680129 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime85);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime5 = localTime1.withPeriodAdded(readablePeriod3, 26683162);
        org.joda.time.LocalTime localTime7 = localTime1.minusSeconds(26679);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter8.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter8.withLocale(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withZoneUTC();
        java.lang.String str19 = localTime7.toString(dateTimeFormatter18);
        java.io.Writer writer20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        mutableDateTime21.setMillis(readableInstant30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime21.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property33.add((-2));
        org.joda.time.MutableDateTime mutableDateTime37 = property33.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.copy();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        mutableDateTime39.setMillis(readableInstant48);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime39.secondOfDay();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate54.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate58 = localDate54.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime59.add(readableDuration60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getDurationType();
        mutableDateTime59.add(durationFieldType63, (-1));
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime59.weekOfWeekyear();
        org.joda.time.DateTime dateTime67 = localDate58.toDateTime((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate70 = localDate68.minusMonths((int) (short) -1);
        boolean boolean72 = localDate68.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology73 = localDate68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology75 = chronology73.withZone(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField76 = chronology73.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField76.getType();
        mutableDateTime59.setRounding(dateTimeField76);
        mutableDateTime39.setMillis((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime39.toMutableDateTimeISO();
        mutableDateTime80.addWeekyears(3);
        boolean boolean83 = mutableDateTime37.isEqual((org.joda.time.ReadableInstant) mutableDateTime80);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        mutableDateTime37.add(readablePeriod84, 9);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime37.dayOfMonth();
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime37.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(writer20, (org.joda.time.ReadableInstant) mutableDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645514963026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=26,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514963027,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514963027,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.halfdays();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 26793681, chronology7);
        java.lang.String str12 = localDate10.toString("-26683163");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-26683163" + "'", str12, "-26683163");
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(26675582);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime12.add(readableDuration14);
        mutableDateTime12.setMillis(176708140730750372L);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime12.toMutableDateTime();
        int int19 = mutableDateTime12.getEra();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514963115,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=115,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:23 AM +00:00" + "'", str7, "7:29:23 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("7:26:47 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        boolean boolean35 = dateTimeZone26.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        long long49 = chronology43.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTime dateTime51 = dateTime36.withChronology(chronology43);
        org.joda.time.DurationField durationField52 = chronology43.halfdays();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 26701949, chronology43);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime54.add(readableDuration55);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Calendar calendar58 = mutableDateTime54.toCalendar(locale57);
        boolean boolean59 = mutableDateTime54.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str61 = mutableDateTime54.toString(dateTimeFormatter60);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatter60.getPrinter();
        java.lang.String str63 = localDate53.toString(dateTimeFormatter60);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeFormatter60.getZone();
        java.lang.Appendable appendable65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime71 = property69.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfEra();
        org.joda.time.LocalDateTime localDateTime74 = property73.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.hourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = property75.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusMinutes(10);
        int int80 = localDateTime71.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plus(readablePeriod81);
        org.joda.time.DateTime dateTime83 = localDateTime79.toDateTime();
        org.joda.time.DateTime dateTime85 = dateTime83.plus((long) 51);
        int int86 = dateTime83.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter60.printTo(appendable65, (org.joda.time.ReadableInstant) dateTime83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514963171,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=171,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-48469999L) + "'", long49 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514963172,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=172,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "7:29:23 AM +00:00" + "'", str61, "7:29:23 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str63, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 22 + "'", int86 == 22);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        boolean boolean14 = dateTimeFieldType4.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology10.getZone();
        org.joda.time.DurationField durationField18 = chronology10.centuries();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        int int30 = dateTimeField27.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        java.lang.String str39 = dateTimeFormatter31.print((org.joda.time.ReadablePartial) localDate38);
        java.util.Locale locale44 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str45 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDate38, (int) (short) -1, locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDate38.getFieldType((int) (short) 1);
        int int48 = localDate38.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime51 = localDate38.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology10.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField53 = chronology10.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(26769591, (-2922690), 61, 0, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26769591 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.Interval interval42 = localDate31.toInterval();
        org.joda.time.LocalDate localDate44 = localDate31.minusWeeks(26788659);
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = property45.setCopy(2604142);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2604142 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.minus((-1228953L));
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.plus((-48469999L));
        org.joda.time.DateTime dateTime34 = dateTime30.plusSeconds(2);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate38.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) dateTime30, dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone52);
        long long55 = dateTimeZone47.getMillisKeepLocal(dateTimeZone52, (long) (byte) -1);
        org.joda.time.DateTime dateTime56 = dateTime22.withZoneRetainFields(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.era();
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundHalfEven();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.LocalDate localDate21 = localDate7.minusYears(2000);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        int int23 = localDate22.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.plus((-48469999L));
        org.joda.time.DateTime dateTime35 = dateTime31.plusSeconds(2);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate39.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) dateTime31, dateTimeZone48);
        org.joda.time.Interval interval52 = localDate22.toInterval(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        java.lang.String str54 = mutableDateTime53.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        boolean boolean57 = dateTimeZone55.equals((java.lang.Object) locale56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone55);
        mutableDateTime53.setZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = localDate22.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone55);
        org.joda.time.DateTime dateTime62 = localDate21.toDateTimeAtCurrentTime(dateTimeZone55);
        java.util.TimeZone timeZone63 = dateTimeZone55.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int70 = timeZone63.getOffset(26836348, 26743040, 72000000, 26, 388, 26837615);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 26836348");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval52);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T07:29:23.565Z" + "'", str54, "2022-02-22T07:29:23.565Z");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfMonth(4);
        int int23 = dateTime20.getHourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        boolean boolean42 = dateTimeZone33.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        int int44 = dateTime43.getYearOfCentury();
        boolean boolean46 = dateTime43.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property47 = dateTime43.monthOfYear();
        int int48 = property47.getMinimumValue();
        org.joda.time.DateTime dateTime49 = property47.getDateTime();
        int int50 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property51 = dateTime20.secondOfMinute();
        org.joda.time.DateTime dateTime53 = dateTime20.withYearOfEra(140);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = dateTime20.withDayOfMonth(26668071);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26668071 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology23 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfHalfday();
        java.util.Locale locale29 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean30 = locale29.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(2L, chronology23, locale29, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale34 = dateTimeParserBucket33.getLocale();
        long long37 = dateTimeParserBucket33.computeMillis(false, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate46 = localDate40.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property47 = localDate40.yearOfEra();
        org.joda.time.LocalDate localDate48 = property47.roundFloorCopy();
        org.joda.time.LocalDate localDate49 = property47.withMaximumValue();
        int int50 = localDate49.getEra();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTime dateTime59 = dateTime56.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property61 = dateTime59.property(dateTimeFieldType60);
        org.joda.time.DateTime dateTime62 = property61.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime63 = property61.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate71 = localDate65.withYear((int) (byte) 1);
        java.lang.String str72 = dateTimeFormatter64.print((org.joda.time.ReadablePartial) localDate71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        boolean boolean82 = dateTimeZone73.equals((java.lang.Object) dateTimeZone80);
        org.joda.time.DateTime dateTime83 = localDate71.toDateTimeAtCurrentTime(dateTimeZone80);
        org.joda.time.DateTime dateTime84 = dateTime63.toDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime85 = localDate49.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((long) 26676070, dateTimeZone80);
        dateTimeParserBucket33.setZone(dateTimeZone80);
        org.joda.time.DateTime dateTime89 = dateTime12.withZoneRetainFields(dateTimeZone80);
        boolean boolean90 = languageRange1.equals((java.lang.Object) dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDate71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str72, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = property10.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        org.joda.time.DateTime dateTime15 = property10.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        int int19 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime17.withYear(20);
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime24 = property22.withMinimumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale29 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale33 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str34 = locale33.getDisplayVariant();
        java.lang.String str35 = locale29.getDisplayCountry(locale33);
        java.lang.String str36 = locale29.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale37.getDisplayCountry();
        java.lang.String str39 = locale29.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter25.withLocale(locale29);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone42);
        int int46 = dateTimeFormatter40.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime43, "2022-02-22T07:24:37.028Z", 50);
        mutableDateTime43.setWeekyear(53);
        mutableDateTime43.setYear(47);
        int int51 = property22.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals(locale29.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str35, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str36, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str39, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-51) + "'", int46 == (-51));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.hourOfDay();
        int int11 = property10.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.add(26735920L);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime20.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.Chronology chronology31 = localDate25.getChronology();
        long long35 = chronology31.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime36 = dateTime24.withChronology(chronology31);
        org.joda.time.DurationField durationField37 = chronology31.days();
        org.joda.time.DurationField durationField38 = chronology31.halfdays();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (-26676040), chronology31);
        org.joda.time.DateTimeField dateTimeField40 = chronology31.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        mutableDateTime42.add(durationFieldType46, (-1));
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime42.weekOfWeekyear();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        int int51 = property49.getMaximumTextLength(locale50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime57.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        mutableDateTime62.add(durationFieldType66, (-1));
        org.joda.time.DateTime dateTime70 = dateTime57.withFieldAdded(durationFieldType66, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime73 = dateTime57.withDurationAdded(readableDuration71, 1);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str77 = dateTimeZone74.getName(0L, locale76);
        java.util.Calendar calendar78 = dateTime73.toCalendar(locale76);
        java.lang.String str79 = locale50.getDisplayLanguage(locale76);
        java.lang.String str80 = locale76.toLanguageTag();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration82 = null;
        mutableDateTime81.add(readableDuration82);
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.util.Calendar calendar85 = mutableDateTime81.toCalendar(locale84);
        java.lang.String str86 = locale76.getDisplayScript(locale84);
        java.lang.String str87 = dateTimeField40.getAsText(26717887, locale84);
        int int88 = property10.getMaximumTextLength(locale84);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514963909,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=909,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:23 +00:00" + "'", str7, "07:29:23 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 200L + "'", long35 == 200L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=-62194235436091,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=909,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "anglais" + "'", str79, "anglais");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fr-CA" + "'", str80, "fr-CA");
        org.junit.Assert.assertNotNull(locale84);
// flaky:         org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1645514963909,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=23,MILLISECOND=909,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "26717887" + "'", str87, "26717887");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundFloorCopy();
        org.joda.time.DateTime dateTime24 = property21.addWrapFieldToCopy(26797);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate0.withPeriodAdded(readablePeriod15, (-2));
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str19 = dateTimeFieldType18.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int21 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter20.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology29);
        boolean boolean34 = localDate0.isSupported(dateTimeFieldType18);
        int int35 = localDate0.getWeekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter36.getPrinter();
        boolean boolean38 = dateTimeFormatter36.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter36.withPivotYear(28);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = dateTimeZone44.getOffset(readableInstant45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter40.withZone(dateTimeZone44);
        java.lang.String str48 = localDate0.toString(dateTimeFormatter47);
        org.joda.time.Chronology chronology49 = dateTimeFormatter47.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter47.withDefaultYear(26711);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = dateTimeFormatter51.parseMillis("2022-02-22T07:24:47.248Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:24:47.248Z\" is malformed at \"22-02-22T07:24:47.248Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "year" + "'", str19, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimePrinter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "22 f\351vr. 2022" + "'", str48, "22 f\351vr. 2022");
        org.junit.Assert.assertNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        boolean boolean36 = charSet32.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34);
        charSet32.clear();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        boolean boolean39 = charSet32.contains((java.lang.Object) locale38);
        java.lang.String str40 = locale25.getDisplayCountry(locale38);
        java.util.Set<java.lang.Character> charSet41 = locale38.getExtensionKeys();
        java.lang.Object[] objArray42 = charSet41.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = charSet41.add((java.lang.Character) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514964096,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=24,MILLISECOND=96,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str40, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        long long48 = chronology42.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.DateTime dateTime50 = dateTime35.withChronology(chronology42);
        org.joda.time.DateTime dateTime52 = dateTime35.plusWeeks((-5));
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-5), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.secondOfDay();
        org.joda.time.DateTime dateTime58 = property56.addToCopy(2598015263100908L);
        boolean boolean59 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime52.plus(readableDuration60);
        int int62 = dateTime61.getMillisOfSecond();
        int int63 = dateTime61.getWeekyear();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514964218,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=24,MILLISECOND=218,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-48469999L) + "'", long48 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 218 + "'", int62 == 218);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 26665274);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(182);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.forPattern("2022-03-22");
        java.lang.String str14 = localDateTime11.toString(dateTimeFormatter13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plus(readableDuration15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime11.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(26729167);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7200000 + "'", int6 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-03-22" + "'", str14, "2022-03-22");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int6 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter5.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.dayOfYear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str24 = nameProvider20.getShortName(locale21, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str31 = dateTimeZone28.getName(0L, locale30);
        java.util.Locale.setDefault(category25, locale30);
        java.lang.String str35 = nameProvider20.getShortName(locale30, "", "2022-02-22T07:24:31.270Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(694252944000L, chronology14, locale30, (java.lang.Integer) 26692066);
        org.joda.time.DateTimeField dateTimeField38 = chronology14.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(732, 3, 64755, (-469), chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 732 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        java.lang.Integer int13 = dateTimeFormatter12.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate15.withYear((int) (byte) 1);
        java.lang.String str22 = dateTimeFormatter14.print((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        int int26 = dateTimeFormatter14.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime23, "1", 1);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate30 = localDate27.withField(dateTimeFieldType28, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(readableInstant31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate30.toDateTimeAtCurrentTime(dateTimeZone39);
        boolean boolean42 = dateTimeZone39.isFixed();
        mutableDateTime23.setZone(dateTimeZone39);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        mutableDateTime23.setZoneRetainFields(dateTimeZone45);
        int int49 = dateTimeFormatter12.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime23, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 865);
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = dateTimeFormatter12.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.parse("0003-06-21T17:58:06.674Z", dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T17:58:06.674Z\" is malformed at \"03-06-21T17:58:06.674Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str22, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2) + "'", int26 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimePrinter52);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property12.add(60000L);
        org.joda.time.MutableDateTime mutableDateTime18 = property12.roundCeiling();
        mutableDateTime18.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.hourOfDay();
        boolean boolean45 = dateTime41.isAfter((-48469999L));
        org.joda.time.DateTime dateTime47 = dateTime41.minusYears(27268320);
        long long48 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableDateTime mutableDateTime49 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfWeek();
        int int51 = property50.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514964502,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=24,MILLISECOND=502,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 63776678616L + "'", long48 == 63776678616L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfCentury(54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = dateTime21.toString("2022-02-22T07:28:57.791Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29 + "'", int15 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:29:24.519Z" + "'", str17, "2022-02-22T07:29:24.519Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate1.withPeriodAdded(readablePeriod9, (int) ' ');
        org.joda.time.LocalDate localDate13 = localDate1.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate15 = localDate1.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        java.lang.String str18 = localDate1.toString(dateTimeFormatter16);
        java.util.Locale locale19 = dateTimeFormatter16.getLocale();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter16.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter16.withDefaultYear(99);
        org.joda.time.Chronology chronology23 = dateTimeFormatter22.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.parse("2022-02-22T07:26:38.350Z", dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:26:38.350Z\" is malformed at \"22-02-22T07:26:38.350Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str18, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime35 = dateTime12.withHourOfDay((int) (short) 10);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        long long37 = dateTime35.getMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-62135560800000L) + "'", long37 == (-62135560800000L));
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology13 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfHalfday();
        java.util.Locale locale19 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean20 = locale19.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(2L, chronology13, locale19, (java.lang.Integer) (-2), (int) 'a');
        java.lang.String str24 = locale19.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter0.withLocale(locale19);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter0.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        mutableDateTime27.setMillis(readableInstant36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime27.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime42 = property39.add(26666);
        org.joda.time.MutableDateTime mutableDateTime43 = property39.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime45 = property39.addWrapField(1);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.getMutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime47.add(readableDuration50);
        java.lang.String str52 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime47);
        java.lang.StringBuffer stringBuffer53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime59.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime66 = dateTime63.withField(dateTimeFieldType64, 26666);
        int int67 = dateTime66.getYear();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime68.add(readableDuration69);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Calendar calendar72 = mutableDateTime68.toCalendar(locale71);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate76 = localDate73.withField(dateTimeFieldType74, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDate76.toDateTime(readableInstant77);
        mutableDateTime68.setMillis(readableInstant77);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime68.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime81 = property80.roundFloor();
        boolean boolean82 = dateTime66.isBefore((org.joda.time.ReadableInstant) mutableDateTime81);
        org.joda.time.DateTime dateTime84 = dateTime66.minus((long) (-3));
        org.joda.time.DateTime dateTime86 = dateTime66.plus((long) 26718940);
        org.joda.time.DateTime dateTime87 = dateTime86.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer53, (org.joda.time.ReadableInstant) dateTime87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514964594,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=24,MILLISECOND=594,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "22/02/22 14:53" + "'", str52, "22/02/22 14:53");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 26666 + "'", int67 == 26666);
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645514964594,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=24,MILLISECOND=594,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        int int10 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str12 = dateTimeFieldType11.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int14 = dateTimeFormatter13.getDefaultYear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter13.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology22);
        int int28 = dateTimeField26.getMaximumValue(0L);
        int int29 = dateTimeField26.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField26.getType();
        boolean boolean31 = dateTime9.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "year" + "'", str12, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter1.getChronolgy();
        boolean boolean5 = dateTimeFormatter1.isParser();
        boolean boolean6 = dateTimeFormatter1.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.parse("0001-02-19T07:27:55.749Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0001-02-19T07:27:55.749Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        org.joda.time.DateTime dateTime25 = property21.addToCopy((long) 26691926);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(30464925);
        org.joda.time.DateTime dateTime28 = dateTime27.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.millis();
        java.lang.String str12 = durationField11.getName();
        org.joda.time.DurationFieldType durationFieldType13 = durationField11.getType();
        boolean boolean14 = durationField11.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millis" + "'", str12, "millis");
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        boolean boolean6 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withPivotYear(5999999);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        mutableDateTime9.add(durationFieldType13, (-1));
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime9.add(readablePeriod16, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime9.minuteOfHour();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusDays(4);
        org.joda.time.DateTime dateTime29 = dateTime27.minusYears(26666877);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.plusYears(1970);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate36.toDateTimeAtCurrentTime(dateTimeZone45);
        int int48 = dateTime47.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        java.lang.String str50 = mutableDateTime49.toString();
        boolean boolean51 = dateTime47.isEqual((org.joda.time.ReadableInstant) mutableDateTime49);
        mutableDateTime49.setDayOfWeek((int) (byte) 1);
        boolean boolean54 = dateTime29.isAfter((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        java.lang.String str56 = mutableDateTime55.toString();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime57.add(readableDuration58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getDurationType();
        mutableDateTime57.add(durationFieldType61, (-1));
        mutableDateTime55.add(durationFieldType61, 2);
        mutableDateTime49.add(durationFieldType61, 7);
        mutableDateTime9.add(durationFieldType61, (int) (short) 100);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate73 = localDate70.withField(dateTimeFieldType71, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime77 = dateTime75.plusMonths((int) '4');
        org.joda.time.DateTime dateTime79 = dateTime77.plus((-48469999L));
        org.joda.time.DateTime dateTime81 = dateTime77.plusSeconds(2);
        org.joda.time.DateTime dateTime83 = dateTime81.minusSeconds(8);
        org.joda.time.DateTime dateTime85 = dateTime83.plusMinutes(0);
        org.joda.time.DateTime.Property property86 = dateTime83.minuteOfHour();
        int int87 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) dateTime83);
        java.lang.String str88 = dateTimeFormatter1.print((org.joda.time.ReadableInstant) dateTime83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.parse("2022-02-22T07:25:08.037Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:25:08.037Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 29 + "'", int48 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:29:24.882Z" + "'", str50, "2022-02-22T07:29:24.882Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T07:29:24.882Z" + "'", str56, "2022-02-22T07:29:24.882Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "dimanche 22 juin 0003" + "'", str88, "dimanche 22 juin 0003");
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.hourOfDay();
        int int11 = property10.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        long long15 = dateTimeField12.add((long) 27268320, 26738L);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514964921,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=24,MILLISECOND=921,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:24 +00:00" + "'", str7, "07:29:24 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 96284068320L + "'", long15 == 96284068320L);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("53");
        int int23 = mutableDateTime22.getDayOfMonth();
        long long24 = mutableDateTime22.getMillis();
        int int25 = dateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.DateTime dateTime29 = dateTime20.withFieldAdded(durationFieldType27, (int) (short) -1);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("");
        java.lang.String str33 = timeZone32.getID();
        java.lang.String str34 = timeZone32.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 53, dateTimeZone35);
        long long39 = dateTimeZone35.convertLocalToUTC((long) 26, true);
        org.joda.time.DateTime dateTime40 = dateTime29.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime29.toMutableDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.millisOfDay();
        boolean boolean57 = dateTimeField56.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60494601600000L) + "'", long24 == (-60494601600000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GMT" + "'", str33, "GMT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT" + "'", str34, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 26L + "'", long39 == 26L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withOffsetParsed();
        java.lang.Appendable appendable6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.centuryOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.addWrapField(24);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime12.add(readablePeriod13);
        int int15 = mutableDateTime12.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(appendable6, (org.joda.time.ReadableInstant) mutableDateTime12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        org.joda.time.LocalDate localDate55 = localDate14.plusMonths((-86400));
        org.joda.time.LocalDate localDate57 = localDate55.plusMonths(26798254);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDate57.getFieldType(266689);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 266689");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514965007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=7,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "07:29:25 +00:00" + "'", str46, "07:29:25 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        int int7 = localDateTime4.getYearOfCentury();
        org.joda.time.Chronology chronology8 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusMillis(1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDateTime10.toString("7:26:22 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.hourOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.plus((-48469999L));
        org.joda.time.DateTime dateTime28 = dateTime24.plusSeconds(2);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) dateTime24, dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime16.toMutableDateTime(dateTimeZone41);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate49 = localDate46.withField(dateTimeFieldType47, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths((int) '4');
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        long long65 = chronology59.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime66 = dateTime51.toDateTime(chronology59);
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfMonth(4);
        mutableDateTime45.setMillis((org.joda.time.ReadableInstant) dateTime66);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime72 = dateTime66.withDayOfWeek(5);
        org.joda.time.DateTime.Property property73 = dateTime66.minuteOfDay();
        org.joda.time.Instant instant74 = dateTime66.toInstant();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514965164,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=164,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:25 +00:00" + "'", str7, "07:29:25 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-48469999L) + "'", long65 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(instant74);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(26675582);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = property22.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        org.joda.time.DateTime dateTime27 = property22.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        int int31 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(20);
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(26705643);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        mutableDateTime11.setChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.monthOfYear();
        java.lang.String str43 = dateTimeField41.getAsShortText(3146768L);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514965249,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=249,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:25 +00:00" + "'", str7, "07:29:25 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "janv." + "'", str43, "janv.");
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property12.addWrapField(2000);
        int int18 = mutableDateTime17.getSecondOfMinute();
        org.joda.time.DateTime dateTime19 = mutableDateTime17.toDateTime();
        mutableDateTime17.add((long) 26701143);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime27.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime34 = dateTime31.withField(dateTimeFieldType32, 26666);
        org.joda.time.DateTime dateTime37 = dateTime34.withDurationAdded(0L, 266668);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Calendar calendar42 = mutableDateTime38.toCalendar(locale41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        mutableDateTime38.setMillis(readableInstant47);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime38.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime51 = property50.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime53 = property50.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate61 = localDate55.withYear((int) (byte) 1);
        java.lang.String str62 = dateTimeFormatter54.print((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology71 = chronology69.withZone(dateTimeZone70);
        boolean boolean72 = dateTimeZone63.equals((java.lang.Object) dateTimeZone70);
        org.joda.time.DateTime dateTime73 = localDate61.toDateTimeAtCurrentTime(dateTimeZone70);
        mutableDateTime53.setMillis((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate77 = localDate75.minusMonths((int) (short) -1);
        boolean boolean79 = localDate75.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology80 = localDate75.getChronology();
        long long86 = chronology80.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime87 = org.joda.time.MutableDateTime.now(chronology80);
        org.joda.time.DateTime dateTime88 = dateTime73.withChronology(chronology80);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.DateTime dateTime90 = dateTime73.toDateTime(chronology89);
        org.joda.time.DateTime dateTime92 = dateTime73.plusDays(26666335);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTime73.getZone();
        org.joda.time.DateTime dateTime94 = dateTime34.withZoneRetainFields(dateTimeZone93);
        mutableDateTime17.setZoneRetainFields(dateTimeZone93);
        int int97 = dateTimeZone93.getStandardOffset((long) 26794433);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514965272,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=272,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645514965272,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=272,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str62, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-48469999L) + "'", long86 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.roundHalfCeilingCopy();
        int int13 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime localTime15 = localTime12.withSecondOfMinute(24);
        org.joda.time.LocalTime localTime17 = localTime12.withMillisOfDay(26863);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = builder20.build();
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale locale23 = builder20.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = localTime17.toString("2022-02-22T07:24:51.964Z", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = dateTimeZone3.equals((java.lang.Object) locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withZone(dateTimeZone3);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter6.getParser();
        java.lang.Integer int9 = dateTimeFormatter6.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.parse("0003-06-21T17:59:21.512Z", dateTimeFormatter6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T17:59:21.512Z\" is malformed at \"03-06-21T17:59:21.512Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DurationField durationField12 = chronology8.halfdays();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        int int25 = dateTimeField22.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        java.lang.String str34 = dateTimeFormatter26.print((org.joda.time.ReadablePartial) localDate33);
        java.util.Locale locale39 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str40 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDate33, (int) (short) -1, locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDate33.getFieldType((int) (short) 1);
        int int43 = localDate33.getMonthOfYear();
        org.joda.time.LocalDate.Property property44 = localDate33.dayOfMonth();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.minutes();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths(40);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.era();
        int int57 = localDate55.indexOf(dateTimeFieldType56);
        boolean boolean58 = localDate33.isSupported(dateTimeFieldType56);
        int int59 = localDate13.indexOf(dateTimeFieldType56);
        org.joda.time.Interval interval60 = localDate13.toInterval();
        org.joda.time.Interval interval61 = localDate13.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate63 = localDate13.withDayOfYear(26874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26874 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str34, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1" + "'", str40, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        mutableDateTime12.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int18 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology26);
        mutableDateTime12.setChronology(chronology26);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DurationField durationField33 = chronology26.millis();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology26.add(readablePeriod34, (long) 30461931, 46);
        org.joda.time.DateTimeField dateTimeField38 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField39 = dateTimeField38.getLeapDurationField();
        long long41 = dateTimeField38.roundCeiling(841412604556800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 30461931L + "'", long37 == 30461931L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNull(durationField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 841412604556800000L + "'", long41 == 841412604556800000L);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDate(345600000L);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.minuteOfDay();
        mutableDateTime0.setMillis((long) (short) 100);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter7.withChronology(chronology16);
        java.lang.Integer int19 = dateTimeFormatter18.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        java.lang.String str28 = dateTimeFormatter20.print((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        int int32 = dateTimeFormatter20.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime29, "1", 1);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate36.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isFixed();
        mutableDateTime29.setZone(dateTimeZone45);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        mutableDateTime29.setZoneRetainFields(dateTimeZone51);
        int int55 = dateTimeFormatter18.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime29, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate63 = localDate57.withYear((int) (byte) 1);
        java.lang.String str64 = dateTimeFormatter56.print((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        boolean boolean74 = dateTimeZone65.equals((java.lang.Object) dateTimeZone72);
        org.joda.time.DateTime dateTime75 = localDate63.toDateTimeAtCurrentTime(dateTimeZone72);
        org.joda.time.DateTime.Property property76 = dateTime75.weekOfWeekyear();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        org.joda.time.DateTimeField dateTimeField85 = chronology84.clockhourOfDay();
        org.joda.time.DateTime dateTime86 = dateTime75.withChronology(chronology84);
        boolean boolean87 = mutableDateTime29.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime.Property property88 = dateTime75.millisOfSecond();
        org.joda.time.DateTime dateTime90 = dateTime75.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property91 = dateTime90.weekyear();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime93 = dateTime90.withLaterOffsetAtOverlap();
        java.lang.Class<?> wildcardClass94 = dateTime90.getClass();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str28, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str64, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime16.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime23 = dateTime20.withField(dateTimeFieldType21, 26666);
        org.joda.time.LocalDate localDate25 = localDate9.withField(dateTimeFieldType21, (int) ' ');
        org.joda.time.LocalDate localDate27 = localDate9.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate29 = localDate27.withWeekyear(7);
        org.joda.time.LocalDate localDate31 = localDate27.withDayOfMonth(20);
        int int32 = localDate31.getCenturyOfEra();
        org.joda.time.LocalDate.Property property33 = localDate31.year();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = localDate31.toString("clockhourOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-01-01" + "'", str10, "2022-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = dateTime20.minus((-1228953L));
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.plus((-48469999L));
        org.joda.time.DateTime dateTime34 = dateTime30.plusSeconds(2);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate38.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) dateTime30, dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone52);
        long long55 = dateTimeZone47.getMillisKeepLocal(dateTimeZone52, (long) (byte) -1);
        org.joda.time.DateTime dateTime56 = dateTime22.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        org.joda.time.DurationField durationField39 = dateTimeField37.getRangeDurationField();
        org.joda.time.DurationField durationField40 = dateTimeField37.getRangeDurationField();
        int int41 = dateTime5.get(dateTimeField37);
        org.joda.time.DateTime dateTime43 = dateTime5.minusMillis(26668);
        org.joda.time.DateTime.Property property44 = dateTime5.millisOfDay();
        org.joda.time.DateTime dateTime45 = property44.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime45.withDate(0, 990, 19847506);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 990 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:35.972Z" + "'", str18, "0003-06-21T18:01:35.972Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514965971,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=971,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235434029,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=971,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime13 = dateTime10.withField(dateTimeFieldType11, 26666);
        int int14 = dateTime13.getYear();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime13.withCenturyOfEra(50);
        int int19 = dateTime13.getDayOfYear();
        org.joda.time.DateTime.Property property20 = dateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        boolean boolean26 = mutableDateTime21.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str28 = mutableDateTime21.toString(dateTimeFormatter27);
        java.lang.String str29 = dateTime13.toString(dateTimeFormatter27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        mutableDateTime31.setChronology(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.years();
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType30.getField(chronology39);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter27.withChronology(chronology39);
        boolean boolean47 = dateTimeFormatter46.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.parse("2022-02-22T07:26:58.391Z", dateTimeFormatter46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:26:58.391Z\" is malformed at \"22-02-22T07:26:58.391Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26666 + "'", int14 == 26666);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514965992,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=25,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "07:29:25 +00:00" + "'", str28, "07:29:25 +00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "07:29:25 +00:00" + "'", str29, "07:29:25 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfMonth();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime28.year();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime36.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property41 = dateTime39.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime43 = property41.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate51 = localDate45.withYear((int) (byte) 1);
        java.lang.String str52 = dateTimeFormatter44.print((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        boolean boolean62 = dateTimeZone53.equals((java.lang.Object) dateTimeZone60);
        org.joda.time.DateTime dateTime63 = localDate51.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = dateTime43.toDateTime(dateTimeZone60);
        long long66 = dateTimeZone60.nextTransition(1600012620000L);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(dateTimeZone60);
        mutableDateTime28.setZoneRetainFields(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDate51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str52, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1600012620000L + "'", long66 == 1600012620000L);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter1.withChronology(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.seconds();
        org.joda.time.DurationField durationField13 = chronology9.halfdays();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        int int26 = dateTimeField23.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDate34, (int) (short) -1, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDate34.getFieldType((int) (short) 1);
        int int44 = localDate34.getMonthOfYear();
        org.joda.time.LocalDate.Property property45 = localDate34.dayOfMonth();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate49 = localDate46.withField(dateTimeFieldType47, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.minutes();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths(40);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.era();
        int int58 = localDate56.indexOf(dateTimeFieldType57);
        boolean boolean59 = localDate34.isSupported(dateTimeFieldType57);
        int int60 = localDate14.indexOf(dateTimeFieldType57);
        int int61 = localDate0.get(dateTimeFieldType57);
        java.lang.String str62 = dateTimeFieldType57.getName();
        java.lang.String str63 = dateTimeFieldType57.getName();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "era" + "'", str62, "era");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "era" + "'", str63, "era");
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.era();
        java.lang.String str8 = localDateTime2.toString("-1");
        int int9 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        int int12 = localDateTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1" + "'", str8, "-1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(10);
        int int14 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plus(readablePeriod15);
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime();
        int int18 = dateTime17.getMillisOfSecond();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMillis((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTime20.toString("2022-02-22T07:25:06.685Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withDefaultYear(99);
        boolean boolean22 = dateTimeFormatter15.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str24 = dateTimeFieldType23.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int26 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter15.withChronology(chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter41.withZoneUTC();
        org.joda.time.Chronology chronology43 = dateTimeFormatter42.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime45 = dateTimeFormatter42.parseLocalTime("2022-02-22T07:24:53.881Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:24:53.881Z\" is malformed at \"22-02-22T07:24:53.881Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "year" + "'", str24, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.era();
        java.lang.String str8 = localDateTime2.toString("-1");
        int int9 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1" + "'", str8, "-1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("53");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime3 = dateTimeFormatter1.parseMutableDateTime("7:27:56 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"7:27:56 AM +00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.withMinimumValue();
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes(1);
        java.lang.String str15 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime12);
        java.lang.String str16 = localTime12.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 00:00" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "00:00:00.000" + "'", str16, "00:00:00.000");
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property12.set(100);
        org.joda.time.MutableDateTime mutableDateTime19 = property12.add(6);
        mutableDateTime19.setMinuteOfDay(57);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfEven();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime30.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property35 = dateTime33.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime36 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime37 = property35.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate45 = localDate39.withYear((int) (byte) 1);
        java.lang.String str46 = dateTimeFormatter38.print((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        boolean boolean56 = dateTimeZone47.equals((java.lang.Object) dateTimeZone54);
        org.joda.time.DateTime dateTime57 = localDate45.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.DateTime dateTime58 = dateTime37.toDateTime(dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime58.getZone();
        boolean boolean62 = mutableDateTime24.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514967172,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=172,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str46, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        java.lang.String str11 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        int int13 = dateTimeParser12.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser12);
        int int15 = dateTimePrinter1.estimatePrintedLength();
        int int16 = dateTimePrinter1.estimatePrintedLength();
        int int17 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter18.getPrinter();
        org.joda.time.Chronology chronology20 = dateTimeFormatter18.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withDefaultYear((int) (byte) 10);
        java.lang.String str24 = dateTimeFormatter18.print((long) 999);
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser25);
        boolean boolean27 = dateTimeFormatter26.isPrinter();
        boolean boolean28 = dateTimeFormatter26.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str11, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimePrinter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "jeudi 1 janvier 1970" + "'", str24, "jeudi 1 janvier 1970");
        org.junit.Assert.assertNotNull(dateTimeParser25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plus((-48469999L));
        java.lang.String str19 = dateTime18.toString();
        boolean boolean20 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Calendar calendar27 = mutableDateTime23.toCalendar(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter21.withLocale(locale26);
        java.util.Calendar calendar29 = dateTime6.toCalendar(locale26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime6.withDurationAdded(readableDuration30, 100);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        boolean boolean38 = mutableDateTime33.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str40 = mutableDateTime33.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter39.withLocale(locale42);
        java.lang.String str45 = dateTime6.toString(dateTimeFormatter44);
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = locale46.getDisplayLanguage(locale47);
        java.lang.String str50 = locale47.getCountry();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekOfWeekyear();
        int int62 = dateTimeField59.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate70 = localDate64.withYear((int) (byte) 1);
        java.lang.String str71 = dateTimeFormatter63.print((org.joda.time.ReadablePartial) localDate70);
        java.util.Locale locale76 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str77 = dateTimeField59.getAsText((org.joda.time.ReadablePartial) localDate70, (int) (short) -1, locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDate70.getFieldType((int) (short) 1);
        int int80 = localDate70.getMonthOfYear();
        org.joda.time.LocalDate.Property property81 = localDate70.dayOfMonth();
        java.util.Locale locale83 = new java.util.Locale("53");
        boolean boolean84 = locale83.hasExtensions();
        java.lang.String str85 = property81.getAsShortText(locale83);
        java.lang.String str86 = locale47.getDisplayScript(locale83);
        java.util.Locale locale88 = new java.util.Locale("53");
        java.lang.String str89 = locale88.getDisplayScript();
        java.lang.String str90 = locale47.getDisplayLanguage(locale88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter44.withLocale(locale88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate92 = org.joda.time.LocalDate.parse("2022-04-22T07:26:55.931", dateTimeFormatter91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-04-22T07:26:55.931\" is malformed at \"22-04-22T07:26:55.931\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0003-06-21T18:01:37.310Z" + "'", str19, "0003-06-21T18:01:37.310Z");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514967309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-62194235432691,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514967309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "07:29:27 +00:00" + "'", str40, "07:29:27 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:29:27 AM +00:00" + "'", str45, "7:29:27 AM +00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "jpn" + "'", str48, "jpn");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str49, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str71, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale76.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1" + "'", str77, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals(locale83.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "22" + "'", str85, "22");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals(locale88.toString(), "53");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Japanese" + "'", str90, "Japanese");
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale9 = dateTimeFormatter8.getLocale();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter8.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate20.equals((java.lang.Object) (byte) 10);
        int[] intArray29 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int30 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDate20, intArray29);
        org.joda.time.LocalDate localDate32 = localDate20.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property33 = localDate32.era();
        int int34 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        int int37 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withYear(999);
        int int40 = localDateTime35.size();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusSeconds(7200000);
        org.joda.time.LocalDateTime.Property property43 = localDateTime35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((-1L), dateTimeZone47);
        org.joda.time.LocalTime localTime50 = localTime48.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property51 = localTime50.minuteOfHour();
        int int52 = localTime50.getSecondOfMinute();
        int[] intArray53 = localTime50.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime44, 26701949, intArray53, 26805635);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26805635 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2922789 + "'", int34 == 2922789);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 10, 59, 999]");
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        boolean boolean45 = dateTimeFormatter37.isParser();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.parse("53");
        int int48 = mutableDateTime47.getDayOfMonth();
        long long49 = mutableDateTime47.getMillis();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime50.add(readableDuration51);
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.util.Calendar calendar54 = mutableDateTime50.toCalendar(locale53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        mutableDateTime50.setMillis(readableInstant59);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime50.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime65 = property62.add(26666);
        org.joda.time.MutableDateTime mutableDateTime66 = property62.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime68 = property62.addWrapField(1);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime70 = property69.getMutableDateTime();
        boolean boolean71 = mutableDateTime47.isBefore((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology77 = localDate72.getChronology();
        long long83 = chronology77.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.now(chronology77);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale87 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str88 = dateTimeZone85.getName(0L, locale87);
        org.joda.time.Chronology chronology89 = chronology77.withZone(dateTimeZone85);
        mutableDateTime47.setZoneRetainFields(dateTimeZone85);
        java.util.Date date91 = mutableDateTime47.toDate();
        mutableDateTime47.addYears(26712102);
        int int96 = dateTimeFormatter37.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime47, "fran\347ais (Canada)", (-1036570595));
        java.util.Locale locale97 = dateTimeFormatter37.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter37.withOffsetParsed();
        boolean boolean99 = dateTimeFormatter98.isParser();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514967357,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=357,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "vendredi 4 f\351vrier 2022" + "'", str44, "vendredi 4 f\351vrier 2022");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60494601600000L) + "'", long49 == (-60494601600000L));
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645514967357,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=357,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-48469999L) + "'", long83 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00" + "'", str88, "+00:00");
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(date91);
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Wed Jan 03 00:00:00 UTC 53");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1036570595) + "'", int96 == (-1036570595));
        org.junit.Assert.assertNull(locale97);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("French");
        java.util.Locale.Builder builder5 = builder4.clear();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        int int15 = property13.getMaximumTextLength(locale14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime21.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        mutableDateTime26.add(durationFieldType30, (-1));
        org.joda.time.DateTime dateTime34 = dateTime21.withFieldAdded(durationFieldType30, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime37 = dateTime21.withDurationAdded(readableDuration35, 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = dateTimeZone38.getName(0L, locale40);
        java.util.Calendar calendar42 = dateTime37.toCalendar(locale40);
        java.lang.String str43 = locale14.getDisplayLanguage(locale40);
        java.lang.String str44 = locale14.getVariant();
        java.util.Set<java.lang.String> strSet45 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder46 = builder5.setLocale(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = dateTimeFormatter47.getPrinter();
        boolean boolean49 = dateTimeFormatter47.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter47.withPivotYear(28);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = dateTimeZone55.getOffset(readableInstant56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter51.withZone(dateTimeZone55);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.lang.String str70 = dateTimeField67.getAsShortText((long) 26666768, locale69);
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str75 = nameProvider71.getShortName(locale72, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.lang.String str76 = locale69.getDisplayCountry(locale72);
        boolean boolean77 = locale72.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter51.withLocale(locale72);
        java.util.Locale.Builder builder79 = builder46.setLocale(locale72);
        java.util.Locale locale80 = builder79.build();
        java.lang.String str81 = locale80.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-62194235432349,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "anglais" + "'", str43, "anglais");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimePrinter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "7" + "'", str70, "7");
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ja" + "'", str81, "ja");
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        java.util.Locale locale15 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale19 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str20 = locale19.getDisplayVariant();
        java.lang.String str21 = locale15.getDisplayCountry(locale19);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale19.getDisplayCountry(locale22);
        int int25 = dateTimeField8.getMaximumShortTextLength(locale19);
        int int26 = dateTimeField8.getMaximumValue();
        long long28 = dateTimeField8.roundHalfFloor((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        boolean boolean34 = mutableDateTime29.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str36 = mutableDateTime29.toString(dateTimeFormatter35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        boolean boolean39 = dateTimeZone37.equals((java.lang.Object) locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter35.withLocale(locale38);
        int int41 = dateTimeField8.getMaximumTextLength(locale38);
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider43);
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str48 = nameProvider43.getName(locale45, "French", "2022-02-22T07:24:40.386Z");
        java.lang.String str49 = dateTimeField8.getAsShortText(26666, locale45);
        int int51 = dateTimeField8.get((long) 17);
        long long53 = dateTimeField8.roundHalfFloor((long) 26787325);
        int int55 = dateTimeField8.getMaximumValue(1645514820000L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals(locale15.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str21, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str24, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-259200000L) + "'", long28 == (-259200000L));
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645514967911,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=911,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "07:29:27 +00:00" + "'", str36, "07:29:27 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "26666" + "'", str49, "26666");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-259200000L) + "'", long53 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 26665274);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(182);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.forPattern("2022-03-22");
        java.lang.String str14 = localDateTime11.toString(dateTimeFormatter13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plus(readableDuration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minus(readableDuration17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.withPeriodAdded(readablePeriod19, 26797);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7200000 + "'", int6 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-03-22" + "'", str14, "2022-03-22");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(26675582);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale14 = dateTimeFormatter13.getLocale();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter13.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate25.equals((java.lang.Object) (byte) 10);
        int[] intArray34 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int35 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDate25, intArray34);
        int int37 = dateTimeField22.getMaximumValue((long) 15);
        mutableDateTime12.setRounding(dateTimeField22);
        org.joda.time.Instant instant39 = mutableDateTime12.toInstant();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514967992,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=27,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:27 +00:00" + "'", str7, "07:29:27 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime6.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localTime6.toString("0003-06-21T17:59:17.815Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone2);
        mutableDateTime0.setZoneRetainFields(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str9 = dateTimeFieldType8.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int11 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology19);
        java.lang.String str25 = dateTimeField23.getAsShortText((long) 17);
        mutableDateTime0.setRounding(dateTimeField23);
        boolean boolean27 = mutableDateTime0.isEqualNow();
        int int28 = mutableDateTime0.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        mutableDateTime29.setMillis(readableInstant38);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime29.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundFloor();
        int int43 = property41.get();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate46.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate50 = localDate46.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        mutableDateTime51.add(durationFieldType55, (-1));
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime51.weekOfWeekyear();
        org.joda.time.DateTime dateTime59 = localDate50.toDateTime((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField68.getType();
        mutableDateTime51.setRounding(dateTimeField68);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime51.secondOfMinute();
        long long72 = property41.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.weekyear();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime0.setMinuteOfDay(25);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime0.millisOfDay();
        mutableDateTime0.setYear(26696477);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:29:28.094Z" + "'", str1, "2022-02-22T07:29:28.094Z");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "year" + "'", str9, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645514968094,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=94,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 26968 + "'", int43 == 26968);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 113368L + "'", long72 == 113368L);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        java.util.Locale locale6 = dateTimeFormatter1.getLocale();
        org.joda.time.Chronology chronology7 = dateTimeFormatter1.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter1.getZone();
        org.joda.time.Chronology chronology9 = dateTimeFormatter1.getChronology();
        boolean boolean10 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Calendar calendar15 = mutableDateTime11.toCalendar(locale14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        mutableDateTime11.setMillis(readableInstant20);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.secondOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.plus((-48469999L));
        int int34 = dateTime31.getEra();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.minus(readablePeriod35);
        boolean boolean37 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) dateTime36);
        mutableDateTime11.addWeekyears((int) 'x');
        org.joda.time.DateTimeField dateTimeField40 = mutableDateTime11.getRoundingField();
        int int43 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime11, "2022-02-22T07:26:33.715Z", 26674);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.parse("1 janv. 1970 02:00:00", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1 janv. 1970 02:00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514968223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-26675) + "'", int43 == (-26675));
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(26675582);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = property22.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        org.joda.time.DateTime dateTime27 = property22.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        int int31 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime33 = dateTime29.withYear(20);
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(26705643);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        mutableDateTime11.setChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.hourOfHalfday();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514968237,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=237,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:28 +00:00" + "'", str7, "07:29:28 +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        long long6 = dateTimeField4.remainder(30844800000L);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        int int9 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusMinutes(8);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMonths((-444));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(5067);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.secondOfMinute();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        int int32 = dateTimeField30.get(2419226666L);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate39 = localDate33.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property40 = localDate33.yearOfEra();
        org.joda.time.LocalDate localDate41 = property40.roundFloorCopy();
        org.joda.time.LocalDate localDate42 = property40.withMaximumValue();
        org.joda.time.LocalDate localDate44 = property40.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean46 = localDate44.isSupported(dateTimeFieldType45);
        org.joda.time.LocalDate.Property property47 = localDate44.dayOfMonth();
        org.joda.time.LocalDate localDate48 = property47.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale50 = dateTimeFormatter49.getLocale();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter49.withChronology(chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.weekyearOfCentury();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate61.equals((java.lang.Object) (byte) 10);
        int[] intArray70 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int71 = dateTimeField58.getMinimumValue((org.joda.time.ReadablePartial) localDate61, intArray70);
        int int72 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDate48, intArray70);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = dateTimeField4.addWrapPartial((org.joda.time.ReadablePartial) localDateTime18, 26930, intArray70, 26694655);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26930");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26968293 + "'", int9 == 26968293);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 24 + "'", int32 == 24);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime4 = dateTimeFormatter0.parseMutableDateTime("2022-02-22T07:28:38.090Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:38.090Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeParser2);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear(513332);
        org.joda.time.LocalDate.Property property4 = localDate1.era();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder8 = builder6.setLocale(locale7);
        java.util.Locale.Builder builder9 = builder8.clear();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        boolean boolean15 = mutableDateTime10.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str17 = mutableDateTime10.toString(dateTimeFormatter16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property25 = localDate18.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate18.withPeriodAdded(readablePeriod26, (int) ' ');
        java.lang.String str29 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate28);
        boolean boolean30 = dateTimeFormatter16.isOffsetParsed();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter16.withLocale(locale33);
        java.lang.String str35 = locale33.getScript();
        java.lang.String str36 = locale33.getCountry();
        java.util.Locale.Builder builder37 = builder9.setLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = localDate1.toString("7:27:32 AM +00:00", locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645514968337,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=337,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "07:29:28 +00:00" + "'", str17, "07:29:28 +00:00");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str29, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CA" + "'", str36, "CA");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        long long15 = dateTimeField13.roundCeiling((long) 26827131);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 28800000L + "'", long15 == 28800000L);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        mutableDateTime21.setMillis(readableInstant30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime21.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property33.add((-2));
        org.joda.time.MutableDateTime mutableDateTime37 = property33.roundHalfEven();
        mutableDateTime37.setSecondOfDay(27);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime37.copy();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDate41.getFieldType(1);
        int int46 = localDate41.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        boolean boolean54 = localDate41.isSupported(durationFieldType51);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        mutableDateTime55.add(durationFieldType59, (-1));
        boolean boolean62 = localDate41.isSupported(durationFieldType59);
        mutableDateTime40.add(durationFieldType59, 1970);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime40.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime67 = property65.add(0L);
        boolean boolean68 = localDate18.equals((java.lang.Object) property65);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime71 = property65.set("2022-02-22T07:27:00.319Z", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:27:00.319Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514968561,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=561,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:28 +00:00" + "'", str7, "07:29:28 +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514968561,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=561,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        boolean boolean3 = dateTimeFormatter0.isParser();
        boolean boolean4 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter0.getPrinter();
        int int6 = dateTimePrinter5.estimatePrintedLength();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser7);
        java.lang.StringBuffer stringBuffer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(stringBuffer9, 52254719744426706L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekyear(26799215);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDate13.get(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        boolean boolean5 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withDefaultYear((-2022));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear(0);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear(45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((-1L), dateTimeZone6);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        java.lang.String str9 = property8.toString();
        org.joda.time.LocalTime localTime11 = property8.addCopy(0);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime14 = property12.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.LocalTime localTime17 = property12.addWrapFieldToCopy(30464925);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean19 = localTime17.isSupported(dateTimeFieldType18);
        java.lang.String str20 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter0.getPrinter();
        java.lang.StringBuffer stringBuffer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer22, 26127360000000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[millisOfDay]" + "'", str9, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 8:59:59 PM " + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 8:59:59 PM ");
        org.junit.Assert.assertNotNull(dateTimePrinter21);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(26667);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusDays(31);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.property(dateTimeFieldType9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfCentury();
        long long24 = dateTimeField21.add((-60000L), 999L);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        int int37 = dateTimeField34.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate45 = localDate39.withYear((int) (byte) 1);
        java.lang.String str46 = dateTimeFormatter38.print((org.joda.time.ReadablePartial) localDate45);
        java.util.Locale locale51 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str52 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate45, (int) (short) -1, locale51);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutableDateTime53.add(readableDuration54);
        java.util.Locale locale56 = java.util.Locale.getDefault();
        java.util.Calendar calendar57 = mutableDateTime53.toCalendar(locale56);
        java.util.Set<java.lang.Character> charSet58 = locale56.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        boolean boolean62 = charSet58.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60);
        charSet58.clear();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        boolean boolean65 = charSet58.contains((java.lang.Object) locale64);
        java.lang.String str66 = locale51.getDisplayCountry(locale64);
        java.util.Set<java.lang.Character> charSet67 = locale64.getExtensionKeys();
        java.lang.String str68 = dateTimeField21.getAsText((long) 40, locale64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime69 = property10.setCopy("2022-02-22T07:25:08.941Z", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:25:08.941Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 31525459140000L + "'", long24 == 31525459140000L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str46, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1" + "'", str52, "-1");
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645514968835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=835,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str66, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "70" + "'", str68, "70");
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.util.Locale locale5 = dateTimeFormatter0.getLocale();
        org.joda.time.Chronology chronology6 = dateTimeFormatter0.getChronolgy();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        mutableDateTime7.setMillis(readableInstant16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime7.secondOfDay();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate22.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate26 = localDate22.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.DateTime dateTime35 = localDate26.toDateTime((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        mutableDateTime27.setRounding(dateTimeField44);
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime7.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        java.lang.String str50 = mutableDateTime49.toString();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        mutableDateTime51.add(durationFieldType55, (-1));
        mutableDateTime49.add(durationFieldType55, 2);
        mutableDateTime48.add(durationFieldType55, 865);
        int int64 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime48, "2022-02-22T07:24:32.443Z", 999);
        int int65 = mutableDateTime48.getYearOfCentury();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime48);
        java.lang.Object obj67 = mutableDateTime48.clone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514968935,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=28,MILLISECOND=935,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:29:28.935Z" + "'", str50, "2022-02-22T07:29:28.935Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1000) + "'", int64 == (-1000));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "2022-02-21T00:00:00.865Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "2022-02-21T00:00:00.865Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "2022-02-21T00:00:00.865Z");
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter1.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withPivotYear(1);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter1.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withDefaultYear(26711816);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.parse("2022-02-22T07:27:19.722Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:19.722Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("53");
        int int2 = mutableDateTime1.getDayOfMonth();
        mutableDateTime1.addWeekyears(50);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        java.lang.String str6 = mutableDateTime5.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) locale8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone7);
        mutableDateTime5.setZoneRetainFields(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime5.weekyear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime5.add(readableDuration13);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = mutableDateTime1.toString("2022-02-22T07:24:50.863Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:29:29.030Z" + "'", str6, "2022-02-22T07:29:29.030Z");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        boolean boolean18 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.property(dateTimeFieldType21);
        java.lang.String str23 = dateTimeFieldType21.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType24.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology30);
        mutableDateTime36.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str40 = dateTimeFieldType39.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology50);
        mutableDateTime36.setChronology(chronology50);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(chronology50);
        org.joda.time.DurationField durationField57 = chronology50.millis();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = chronology50.add(readablePeriod58, (long) 30461931, 46);
        org.joda.time.DurationField durationField62 = chronology50.years();
        boolean boolean63 = dateTimeFieldType21.isSupported(chronology50);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = chronology50.getDateTimeMillis(1645401600000L, 835, 30525, 26677171, (-26787806));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 835 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29 + "'", int15 == 29);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:29:29.057Z" + "'", str17, "2022-02-22T07:29:29.057Z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hourOfHalfday" + "'", str23, "hourOfHalfday");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "year" + "'", str40, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 30461931L + "'", long61 == 30461931L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        int int22 = dateTimeField19.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate30 = localDate24.withYear((int) (byte) 1);
        java.lang.String str31 = dateTimeFormatter23.print((org.joda.time.ReadablePartial) localDate30);
        java.util.Locale locale36 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str37 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDate30, (int) (short) -1, locale36);
        java.lang.String str38 = dateTimeField19.getName();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.lang.String str41 = locale40.getDisplayCountry();
        java.lang.String str42 = dateTimeField19.getAsText((-1L), locale40);
        java.util.Locale locale46 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale50 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str51 = locale50.getDisplayVariant();
        java.lang.String str52 = locale46.getDisplayCountry(locale50);
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.lang.String str54 = locale53.getDisplayCountry();
        java.lang.String str55 = locale50.getDisplayCountry(locale53);
        int int56 = dateTimeField19.getMaximumTextLength(locale53);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        boolean boolean60 = dateTimeZone58.equals((java.lang.Object) locale59);
        java.lang.String str61 = dateTimeField19.getAsShortText(26666570, locale59);
        long long63 = dateTimeField19.roundCeiling(999L);
        java.util.Locale locale65 = new java.util.Locale("2022-02-22T07:24:42.113Z");
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField74 = chronology71.weekOfWeekyear();
        int int77 = dateTimeField74.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale88 = java.util.Locale.ENGLISH;
        boolean boolean89 = dateTimeZone87.equals((java.lang.Object) locale88);
        java.lang.String str90 = dateTimeZone84.getName((long) 'a', locale88);
        int int91 = dateTimeField74.getMaximumTextLength(locale88);
        java.lang.String str92 = locale65.getDisplayName(locale88);
        int int93 = dateTimeField19.getMaximumShortTextLength(locale88);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket((long) 26680129, chronology7, locale88, (java.lang.Integer) (-1645514694), 21);
        java.util.Set<java.lang.Character> charSet97 = locale88.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str31, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1" + "'", str37, "-1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "weekOfWeekyear" + "'", str38, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str41, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertEquals(locale46.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str52, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str54, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str55, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "26666570" + "'", str61, "26666570");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 345600000L + "'", long63 == 345600000L);
        org.junit.Assert.assertEquals(locale65.toString(), "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-22t07:24:42.113z" + "'", str92, "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(charSet97);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.clear();
        java.util.Locale locale12 = builder7.build();
        java.util.Locale.Builder builder13 = builder5.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder5.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clear();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.plus((-48469999L));
        org.joda.time.DateTime dateTime27 = dateTime23.plusSeconds(2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone45);
        long long48 = dateTimeZone40.getMillisKeepLocal(dateTimeZone45, (long) (byte) -1);
        boolean boolean49 = dateTimeZone45.isFixed();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone51);
        long long54 = dateTimeZone45.getMillisKeepLocal(dateTimeZone51, (long) 26682882);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekOfWeekyear();
        int int67 = dateTimeField64.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate75 = localDate69.withYear((int) (byte) 1);
        java.lang.String str76 = dateTimeFormatter68.print((org.joda.time.ReadablePartial) localDate75);
        java.util.Locale locale81 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str82 = dateTimeField64.getAsText((org.joda.time.ReadablePartial) localDate75, (int) (short) -1, locale81);
        java.lang.String str83 = dateTimeZone45.getShortName(345600000L, locale81);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder84 = builder15.setLocale(locale81);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 26682882L + "'", long54 == 26682882L);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDate75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str76, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale81.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-1" + "'", str82, "-1");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("7:24:43 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy((long) 26665274);
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy((int) '4');
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusSeconds(26680);
        int int12 = localDateTime11.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDateTime11.toString("2022-02-22T07:25:17.839Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter0.withZone(dateTimeZone25);
        java.lang.String str31 = dateTimeFormatter0.print(7200000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter0.withZoneUTC();
        boolean boolean33 = dateTimeFormatter32.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Jan 1, 1970 2:00:00 AM" + "'", str31, "Jan 1, 1970 2:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Calendar calendar7 = mutableDateTime3.toCalendar(locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withLocale(locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 26666570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withZoneUTC();
        java.util.Locale locale12 = dateTimeFormatter11.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("0003-06-21T18:00:13.564Z", dateTimeFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T18:00:13.564Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514969849,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=29,MILLISECOND=849,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "hi!_PROPERTY[MILLISOFDAY]");
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = mutableDateTime15.toCalendar(locale37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime15.minuteOfHour();
        int int40 = mutableDateTime15.getWeekyear();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514969859,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=29,MILLISECOND=859,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62131077030141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=29,MILLISECOND=859,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        boolean boolean9 = charSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7);
        int int10 = charSet5.size();
        java.lang.Object[] objArray11 = charSet5.toArray();
        java.lang.Character[] charArray13 = new java.lang.Character[] { '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet14 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet14, charArray13);
        java.util.Spliterator<java.lang.Character> charSpliterator16 = charSet14.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream20 = languageRangeList18.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap21);
        boolean boolean23 = charSet14.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        charSet14.clear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate32 = localDate26.withYear((int) (byte) 1);
        java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        int int37 = dateTimeFormatter25.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime34, "1", 1);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isFixed();
        mutableDateTime34.setZone(dateTimeZone50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = localDate55.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime57 = dateTime56.withTimeAtStartOfDay();
        boolean boolean58 = charSet14.equals((java.lang.Object) dateTime57);
        java.lang.Character[] charArray60 = new java.lang.Character[] { '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet61 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet61, charArray60);
        java.util.Spliterator<java.lang.Character> charSpliterator63 = charSet61.spliterator();
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime64.add(readableDuration65);
        java.util.Locale locale67 = java.util.Locale.getDefault();
        java.util.Calendar calendar68 = mutableDateTime64.toCalendar(locale67);
        java.util.Set<java.lang.Character> charSet69 = locale67.getExtensionKeys();
        boolean boolean70 = charSet69.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream74 = languageRangeList72.stream();
        boolean boolean75 = charSet69.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72);
        boolean boolean76 = charSet61.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, strMap77);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap79 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, strMap79);
        boolean boolean81 = charSet14.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80);
        boolean boolean82 = charSet5.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514969974,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=29,MILLISECOND=974,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charSpliterator16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(languageRangeStream20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-2) + "'", int37 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(charSpliterator63);
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1645514969974,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=29,MILLISECOND=974,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(languageRangeStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(languageRangeList78);
        org.junit.Assert.assertNotNull(languageRangeList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(obj0, chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate16 = localDate10.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property17 = localDate10.yearOfEra();
        org.joda.time.LocalDate localDate18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property17.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean23 = localDate21.isSupported(dateTimeFieldType22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale25 = dateTimeFormatter24.getLocale();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter24.withChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType22.getField(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.centuries();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(2L, chronology31);
        org.joda.time.DateMidnight dateMidnight36 = localDate35.toDateMidnight();
        org.joda.time.LocalDate localDate38 = localDate35.minusDays(28799999);
        long long40 = chronology6.set((org.joda.time.ReadablePartial) localDate35, 0L);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate35.withPeriodAdded(readablePeriod41, 51736);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate45 = localDate43.withDayOfWeek(292278922);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278922 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate13.withDayOfWeek(26888382);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26888382 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.String str11 = locale4.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone17);
        int int21 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime18, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.minuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.minuteOfDay();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str10, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str11, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str13, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str14, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-51) + "'", int21 == (-51));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        boolean boolean23 = dateTime19.isAfter((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime19.minusYears(27268320);
        int int26 = dateTime19.getYear();
        org.joda.time.DateTime dateTime28 = dateTime19.plusMillis(30464923);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime28.withMonthOfYear(26957);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26957 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter1.withChronology(chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.plus((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime21.plusSeconds(2);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTime21, dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        boolean boolean52 = dateTimeFieldType42.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime21.toMutableDateTime(chronology48);
        org.joda.time.DateTime dateTime56 = dateTime21.minusMinutes(5);
        int int57 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter1.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 26679);
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = dateTimeFormatter60.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeFormatter62.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter62.withOffsetParsed();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        org.joda.time.DateTime dateTime73 = dateTime70.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property75 = dateTime73.property(dateTimeFieldType74);
        org.joda.time.DateTime dateTime76 = property75.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime77 = property75.roundHalfCeilingCopy();
        java.lang.String str78 = dateTimeFormatter64.print((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.format.DateTimePrinter dateTimePrinter79 = dateTimeFormatter64.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter80 = dateTimeFormatter64.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter82 = dateTimeFormatter81.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate86 = localDate84.minusMonths((int) (short) -1);
        boolean boolean88 = localDate84.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate90 = localDate84.withYear((int) (byte) 1);
        java.lang.String str91 = dateTimeFormatter83.print((org.joda.time.ReadablePartial) localDate90);
        org.joda.time.format.DateTimeParser dateTimeParser92 = dateTimeFormatter83.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter82, dateTimeParser92);
        int int94 = dateTimeParser92.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter80, dateTimeParser92);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime97 = org.joda.time.MutableDateTime.parse("0003-06-21T17:59:00.460Z", dateTimeFormatter96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0003-06-21T17:59:00.460Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97200000 + "'", int57 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimePrinter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +00:00" + "'", str78, "Monday, January 1, 0001 12:00:00 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter79);
        org.junit.Assert.assertNotNull(dateTimePrinter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(dateTimePrinter82);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDate90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str91, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 40 + "'", int94 == 40);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(10);
        int int14 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plus(readablePeriod15);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.longDate();
        java.lang.Integer int19 = dateTimeFormatter18.getPivotYear();
        java.lang.String str20 = localDateTime13.toString(dateTimeFormatter18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.weekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "January 1, 2022" + "'", str20, "January 1, 2022");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate23 = localDate18.plusWeeks(26691926);
        int int24 = localDate18.getDayOfMonth();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514970340,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=30,MILLISECOND=340,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:30 AM +00:00" + "'", str7, "7:29:30 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        mutableDateTime12.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int18 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology26);
        mutableDateTime12.setChronology(chronology26);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        boolean boolean23 = dateTime19.isAfter((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime19.minusYears(27268320);
        int int26 = dateTime19.getYear();
        int int27 = dateTime19.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        boolean boolean11 = dateTimeFieldType1.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology7);
        mutableDateTime13.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int19 = dateTimeFormatter18.getDefaultYear();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter18.withChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType16.getField(chronology27);
        mutableDateTime13.setChronology(chronology27);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology27);
        org.joda.time.DurationField durationField34 = chronology27.millis();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = chronology27.add(readablePeriod35, (long) 30461931, 46);
        org.joda.time.DurationField durationField39 = chronology27.years();
        java.lang.String str40 = chronology27.toString();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 26716987, chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((java.lang.Object) 26716987);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "year" + "'", str17, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2000 + "'", int19 == 2000);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 30461931L + "'", long38 == 30461931L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime13.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property18 = dateTime16.property(dateTimeFieldType17);
        org.joda.time.DateTime dateTime19 = property18.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime20 = property18.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Calendar calendar25 = mutableDateTime21.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        mutableDateTime21.setMillis(readableInstant30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime21.secondOfDay();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate36.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate36.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime41.add(readableDuration42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        mutableDateTime41.add(durationFieldType45, (-1));
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime41.weekOfWeekyear();
        org.joda.time.DateTime dateTime49 = localDate40.toDateTime((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField58.getType();
        mutableDateTime41.setRounding(dateTimeField58);
        mutableDateTime21.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate65 = localDate62.withField(dateTimeFieldType63, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDate65.toDateTime(readableInstant66);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate70 = localDate68.minusMonths((int) (short) -1);
        boolean boolean72 = localDate68.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology73 = localDate68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology75 = chronology73.withZone(dateTimeZone74);
        org.joda.time.DateTime dateTime76 = localDate65.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        long long79 = dateTimeZone74.getMillisKeepLocal(dateTimeZone77, (long) 2);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime21.toMutableDateTime(dateTimeZone74);
        org.joda.time.DateTime dateTime81 = dateTime20.withZoneRetainFields(dateTimeZone74);
        long long84 = dateTimeZone74.convertLocalToUTC((long) 332, true);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone74);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(stringBuffer7, (org.joda.time.ReadableInstant) dateTime85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514970509,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=30,MILLISECOND=509,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 2L + "'", long79 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 332L + "'", long84 == 332L);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("2022-02-22T07:27:56.716Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:27:56.716Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter1.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withPivotYear(26738810);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.parse("2022-02-22T07:28:40.877Z", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:40.877Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property4 = localDate1.era();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("");
        java.lang.String str9 = timeZone8.getID();
        java.lang.String str10 = timeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 53, dateTimeZone11);
        long long15 = dateTimeZone11.convertLocalToUTC((long) 26, true);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight5.toMutableDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate25 = localDate19.withYear((int) (byte) 1);
        java.lang.String str26 = dateTimeFormatter18.print((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        int int30 = dateTimeFormatter18.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime27, "1", 1);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTimeAtCurrentTime(dateTimeZone43);
        boolean boolean46 = dateTimeZone43.isFixed();
        mutableDateTime27.setZone(dateTimeZone43);
        java.lang.String str49 = dateTimeZone43.getNameKey((long) (byte) 1);
        long long51 = dateTimeZone43.previousTransition((long) (byte) -1);
        boolean boolean53 = dateTimeZone43.isStandardOffset(26666877L);
        mutableDateTime16.setZone(dateTimeZone43);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 26694871, dateTimeZone43);
        java.lang.String str57 = dateTimeZone43.getShortName(1645514881914L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 26L + "'", long15 == 26L);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str26, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-2) + "'", int30 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.LocalDate.Property property4 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy(26696);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime15 = dateTime12.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        java.lang.String str28 = dateTimeFormatter20.print((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        boolean boolean38 = dateTimeZone29.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime19.toDateTime(dateTimeZone36);
        long long42 = dateTimeZone36.nextTransition(1600012620000L);
        boolean boolean44 = dateTimeZone36.isStandardOffset(3600052L);
        org.joda.time.DateTime dateTime45 = localDate6.toDateTimeAtStartOfDay(dateTimeZone36);
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTime();
        org.joda.time.DateTime dateTime48 = dateTime45.plusSeconds(79499997);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours(26888382);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str28, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1600012620000L + "'", long42 == 1600012620000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        boolean boolean51 = dateTimeFieldType41.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime20.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime55 = dateTime20.minusMinutes(5);
        int int56 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter0.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26679);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = dateTimeFormatter59.getPrinter();
        java.io.Writer writer61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.minus(readablePeriod69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusYears((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime78 = property77.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((-1L), dateTimeZone81);
        org.joda.time.LocalTime.Property property83 = localTime82.millisOfDay();
        java.lang.String str84 = property83.toString();
        org.joda.time.DurationField durationField85 = property83.getLeapDurationField();
        org.joda.time.LocalTime localTime87 = property83.addCopy((long) 2022);
        java.lang.String str88 = localTime87.toString();
        org.joda.time.Chronology chronology89 = localTime87.getChronology();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale91 = java.util.Locale.ENGLISH;
        boolean boolean92 = dateTimeZone90.equals((java.lang.Object) locale91);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket(10L, chronology89, locale91);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter60.printTo(writer61, (org.joda.time.ReadablePartial) localDateTime78, locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97200000 + "'", int56 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimePrinter60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Property[millisOfDay]" + "'", str84, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField85);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "00:00:02.021" + "'", str88, "00:00:02.021");
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.Integer int1 = dateTimeFormatter0.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear(26722258);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet2 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet2, charArray1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.plus((-48469999L));
        java.lang.String str14 = dateTime13.toString();
        boolean boolean15 = charSet2.contains((java.lang.Object) str14);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime22.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfHalfday();
        java.util.Locale locale32 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean33 = locale32.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(2L, chronology26, locale32, (java.lang.Integer) (-2), (int) 'a');
        boolean boolean37 = charSet2.contains((java.lang.Object) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter38.getPrinter();
        org.joda.time.Chronology chronology40 = dateTimeFormatter38.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter38.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withZoneUTC();
        boolean boolean44 = charSet2.equals((java.lang.Object) dateTimeFormatter38);
        org.joda.time.format.DateTimeParser dateTimeParser45 = dateTimeFormatter38.getParser();
        int int46 = dateTimeParser45.estimateParsedLength();
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0003-06-21T18:01:41.030Z" + "'", str14, "0003-06-21T18:01:41.030Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimePrinter39);
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeParser45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 40 + "'", int46 == 40);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter0.getPrinter();
        java.io.Writer writer12 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = localDateTime16.getChronology();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology18.add(readablePeriod19, (long) 26, 1970);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableDateTime27.add(readablePeriod34, (int) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        mutableDateTime27.setChronology(chronology37);
        mutableDateTime27.setDayOfWeek(5);
        mutableDateTime27.addMillis((int) 'x');
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime27.year();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property47 = localDate44.era();
        org.joda.time.LocalDate localDate48 = property47.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate49 = property47.roundFloorCopy();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTime(readableInstant54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate53.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        long long67 = dateTimeZone62.getMillisKeepLocal(dateTimeZone65, (long) 2);
        boolean boolean69 = dateTimeZone62.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        org.joda.time.DateTime dateTime70 = localDate49.toDateTimeAtCurrentTime(dateTimeZone62);
        mutableDateTime27.setZone(dateTimeZone62);
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = new java.util.Locale("7:24:59 AM +00:00", "fr");
        java.util.Locale.setDefault(category72, locale75);
        java.util.Locale locale77 = java.util.Locale.getDefault(category72);
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category72, locale78);
        java.util.Locale locale80 = java.util.Locale.getDefault(category72);
        java.util.Set<java.lang.Character> charSet81 = locale80.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter11.printTo(writer12, (-62194235568208L), chronology18, 26856503, dateTimeZone62, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 26L + "'", long22 == 26L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2L + "'", long67 == 2L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category72.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale75.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet81);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        int int21 = dateTime5.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime5.withDurationAdded(readableDuration22, 26674);
        org.joda.time.Instant instant25 = dateTime5.toInstant();
        org.joda.time.DateTime dateTime27 = dateTime5.minusSeconds(26666335);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        java.lang.String str36 = dateTimeFormatter28.print((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        boolean boolean46 = dateTimeZone37.equals((java.lang.Object) dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate49 = localDate35.minusYears(2000);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        int int51 = localDate50.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) '4');
        org.joda.time.DateTime dateTime61 = dateTime59.plus((-48469999L));
        org.joda.time.DateTime dateTime63 = dateTime59.plusSeconds(2);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = localDate67.toDateTimeAtCurrentTime(dateTimeZone76);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((java.lang.Object) dateTime59, dateTimeZone76);
        org.joda.time.Interval interval80 = localDate50.toInterval(dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        java.lang.String str82 = mutableDateTime81.toString();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        boolean boolean85 = dateTimeZone83.equals((java.lang.Object) locale84);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(dateTimeZone83);
        mutableDateTime81.setZoneRetainFields(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDate50.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate(dateTimeZone83);
        org.joda.time.DateTime dateTime90 = localDate49.toDateTimeAtCurrentTime(dateTimeZone83);
        java.lang.String str91 = dateTimeZone83.toString();
        org.joda.time.DateTime dateTime92 = dateTime27.toDateTime(dateTimeZone83);
        org.joda.time.Chronology chronology93 = dateTime27.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T07:29:31.238Z" + "'", str82, "2022-02-22T07:29:31.238Z");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "UTC" + "'", str91, "UTC");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology93);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.plus((long) 182);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readablePeriod9);
        int int11 = dateTime8.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfEra();
        long long25 = dateTimeField22.getDifferenceAsLong((-48469999L), (long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        boolean boolean38 = dateTimeFieldType28.isSupported(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.DateTimeZone dateTimeZone41 = chronology34.getZone();
        org.joda.time.DurationField durationField42 = chronology34.centuries();
        java.util.Locale locale44 = new java.util.Locale("53");
        java.lang.String str45 = locale44.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 26676070, chronology34, locale44);
        java.lang.String str47 = locale44.getDisplayScript();
        java.lang.String str48 = dateTimeField22.getAsText((-1), locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter12.withLocale(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        boolean boolean61 = dateTimeFieldType51.isSupported(chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.DurationField durationField65 = chronology57.millis();
        org.joda.time.DateTimeField dateTimeField66 = chronology57.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter12.withChronology(chronology57);
        java.lang.String str68 = dateTime8.toString(dateTimeFormatter67);
        org.joda.time.DateTime dateTime70 = dateTime8.plusMillis((-26742489));
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate74 = localDate71.withField(dateTimeFieldType72, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDate74.toDateTime(readableInstant75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = localDate74.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        long long88 = dateTimeZone83.getMillisKeepLocal(dateTimeZone86, (long) 2);
        int int90 = dateTimeZone86.getStandardOffset((long) 5);
        org.joda.time.MutableDateTime mutableDateTime91 = org.joda.time.MutableDateTime.now(dateTimeZone86);
        boolean boolean92 = dateTimeZone86.isFixed();
        java.util.Locale locale95 = new java.util.Locale("7:24:30 AM +00:00");
        java.lang.String str96 = dateTimeZone86.getShortName(4519487258L, locale95);
        boolean boolean98 = dateTimeZone86.isStandardOffset(7200000L);
        org.joda.time.DateTime dateTime99 = dateTime8.withZoneRetainFields(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals(locale44.toString(), "53");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1" + "'", str48, "-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "07 h 29 +00:00" + "'", str68, "07 h 29 +00:00");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 2L + "'", long88 == 2L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals(locale95.toString(), "7:24:30 am +00:00");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "+00:00" + "'", str96, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(4);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(26666877);
        org.joda.time.DateTime.Property property10 = dateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.plusYears(1970);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        boolean boolean22 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime24 = dateTime18.minusHours(19);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        int int47 = dateTimeField44.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate55 = localDate49.withYear((int) (byte) 1);
        java.lang.String str56 = dateTimeFormatter48.print((org.joda.time.ReadablePartial) localDate55);
        java.util.Locale locale61 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str62 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDate55, (int) (short) -1, locale61);
        java.lang.String str63 = dateTimeField44.getName();
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = locale65.getDisplayCountry();
        java.lang.String str67 = dateTimeField44.getAsText((-1L), locale65);
        java.util.Locale locale71 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale75 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str76 = locale75.getDisplayVariant();
        java.lang.String str77 = locale71.getDisplayCountry(locale75);
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.lang.String str79 = locale78.getDisplayCountry();
        java.lang.String str80 = locale75.getDisplayCountry(locale78);
        int int81 = dateTimeField44.getMaximumTextLength(locale78);
        java.util.Set<java.lang.String> strSet82 = locale78.getUnicodeLocaleAttributes();
        int int83 = dateTimeField35.getMaximumShortTextLength(locale78);
        java.lang.String str84 = dateTimeZone25.getShortName(172802000L, locale78);
        org.joda.time.MutableDateTime mutableDateTime85 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str56, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1" + "'", str62, "-1");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "weekOfWeekyear" + "'", str63, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertEquals(locale71.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str77, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str80, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime85);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate0.withPeriodAdded(readablePeriod13, (int) (byte) 0);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        boolean boolean27 = dateTimeZone25.equals((java.lang.Object) locale26);
        java.lang.String str28 = dateTimeZone22.getName((long) 'a', locale26);
        org.joda.time.DateTime dateTime29 = localDate0.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime31 = dateTime29.withYear(2035);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int33 = dateTimeFormatter32.getDefaultYear();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        int int46 = dateTime29.get(dateTimeFieldType45);
        org.joda.time.DateTime.Property property47 = dateTime29.yearOfCentury();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime53.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.withHourOfDay(22);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate62 = localDate59.withField(dateTimeFieldType60, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMonths((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime66.plus((-48469999L));
        java.lang.String str69 = dateTime68.toString();
        int int70 = dateTime58.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime.Property property71 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime72 = property71.getDateTime();
        int int73 = property47.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2000 + "'", int33 == 2000);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0003-06-21T18:01:41.438Z" + "'", str69, "0003-06-21T18:01:41.438Z");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        java.lang.String str27 = dateTimeField8.getName();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = dateTimeField8.getAsText((-1L), locale29);
        java.util.Locale locale35 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale39 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str40 = locale39.getDisplayVariant();
        java.lang.String str41 = locale35.getDisplayCountry(locale39);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getDisplayCountry();
        java.lang.String str44 = locale39.getDisplayCountry(locale42);
        int int45 = dateTimeField8.getMaximumTextLength(locale42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        java.lang.String str50 = dateTimeField8.getAsShortText(26666570, locale48);
        java.util.Set<java.lang.Character> charSet51 = locale48.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekOfWeekyear" + "'", str27, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals(locale35.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str41, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str44, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "26666570" + "'", str50, "26666570");
        org.junit.Assert.assertNotNull(charSet51);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.util.Locale locale5 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter0.getParser();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withLocale(locale9);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter0.getPrinter();
        int int12 = dateTimePrinter11.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.Chronology chronology15 = dateTimeFormatter13.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withDefaultYear((int) (byte) 10);
        java.util.Locale locale18 = dateTimeFormatter13.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter13.getParser();
        int int20 = dateTimeParser19.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter23.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(dateTimeParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeZone24);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate23 = localDate18.withYearOfEra(349);
        org.joda.time.LocalDate localDate25 = localDate18.plusMonths(30);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate25.minus(readablePeriod26);
        org.joda.time.DateMidnight dateMidnight28 = localDate25.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        boolean boolean39 = dateTimeFieldType29.isSupported(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime49.plus((-48469999L));
        org.joda.time.DateTime dateTime53 = dateTime49.plusSeconds(2);
        org.joda.time.DateTime dateTime55 = dateTime53.minusSeconds(8);
        mutableDateTime41.setMillis((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate63 = localDate57.withYear((int) (byte) 1);
        org.joda.time.DateTime dateTime64 = localDate57.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime65 = dateTime55.withFields((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        boolean boolean75 = dateTimeZone66.equals((java.lang.Object) dateTimeZone73);
        long long79 = dateTimeZone66.convertLocalToUTC((long) 2022, true, 19380266768L);
        org.joda.time.DateTime dateTime80 = localDate57.toDateTimeAtMidnight(dateTimeZone66);
        org.joda.time.DateTime dateTime81 = localDate25.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime83 = dateTime81.plus(3155760000223L);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514971723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=31,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:31 +00:00" + "'", str7, "07:29:31 +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 2022L + "'", long79 == 2022L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone2);
        mutableDateTime0.setZoneRetainFields(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str9 = dateTimeFieldType8.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int11 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology19);
        java.lang.String str25 = dateTimeField23.getAsShortText((long) 17);
        mutableDateTime0.setRounding(dateTimeField23);
        boolean boolean27 = mutableDateTime0.isEqualNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter28.getPrinter();
        int int30 = dateTimePrinter29.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        java.lang.String str39 = dateTimeFormatter31.print((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter31.getParser();
        int int41 = dateTimeParser40.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int44 = dateTimeFormatter43.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser45 = dateTimeFormatter43.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser45);
        java.lang.String str47 = mutableDateTime0.toString(dateTimeFormatter46);
        java.lang.StringBuffer stringBuffer48 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter46.printTo(stringBuffer48, 26812632L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:29:31.782Z" + "'", str1, "2022-02-22T07:29:31.782Z");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "year" + "'", str9, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimePrinter29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str39, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 40 + "'", int41 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2000 + "'", int44 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1 janv. 2022" + "'", str47, "1 janv. 2022");
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime6 = property3.addCopy(0);
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.getLocalTime();
        org.joda.time.LocalTime localTime10 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime12 = localTime10.plusSeconds(26790);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.plus((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime21.plusSeconds(2);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTime21, dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfMonth();
        java.util.Locale locale47 = new java.util.Locale("8", "2022-02-22T07:24:30.100Z", "und");
        java.lang.String str48 = locale47.getDisplayScript();
        int int49 = property43.getMaximumShortTextLength(locale47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = localTime10.toString("2022-02-22T07:25:38.434Z", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals(locale47.toString(), "8_2022-02-22T07:24:30.100Z_und");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        java.lang.Object obj0 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        boolean boolean6 = dateTimeZone4.equals((java.lang.Object) locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-2303769599957L), dateTimeZone4);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(obj0, dateTimeZone4);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(22);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime28.plus((-48469999L));
        java.lang.String str31 = dateTime30.toString();
        int int32 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property33 = dateTime20.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime20.minusMonths(0);
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfSecond();
        int int37 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.plus((long) 26850744);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds(26804702);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths(140);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0003-06-21T18:01:41.913Z" + "'", str31, "0003-06-21T18:01:41.913Z");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        boolean boolean13 = mutableDateTime9.isBeforeNow();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDayOfWeek(26718709);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26718709 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter0.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getWeekOfWeekyear();
        int int2 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime11.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property16 = dateTime14.property(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfHour();
        org.joda.time.DateTime.Property property18 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        boolean boolean23 = dateTimeFormatter21.isParser();
        boolean boolean24 = dateTimeFormatter21.isParser();
        boolean boolean25 = dateTimeFormatter21.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatter21.getPrinter();
        int int27 = dateTimePrinter26.estimatePrintedLength();
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser28);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatter29.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter29.withDefaultYear(26703);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        java.lang.String str34 = mutableDateTime33.toString();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.plus((-48469999L));
        org.joda.time.DateTime dateTime47 = dateTime43.plusSeconds(2);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = localDate51.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) dateTime43, dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone65);
        long long68 = dateTimeZone60.getMillisKeepLocal(dateTimeZone65, (long) (byte) -1);
        boolean boolean70 = dateTimeZone60.isStandardOffset((long) 15);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(26668L, dateTimeZone60);
        long long75 = dateTimeZone60.convertLocalToUTC((long) 26673922, false, (long) 27268320);
        mutableDateTime33.setZone(dateTimeZone60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter29.withZone(dateTimeZone60);
        java.lang.String str78 = dateTime20.toString(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8 + "'", int1 == 8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22" + "'", str5, "2022-02-22");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimePrinter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNull(dateTimeParser30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:29:32.335Z" + "'", str34, "2022-02-22T07:29:32.335Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 26673922L + "'", long75 == 26673922L);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "22 f\351vr. 2022" + "'", str78, "22 f\351vr. 2022");
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 38090);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = dateTimeField60.getAsText((long) (short) 1, locale62);
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale62);
        java.lang.String str66 = locale50.getDisplayLanguage(locale62);
        java.lang.String str67 = locale62.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter37.withLocale(locale62);
        boolean boolean69 = dateTimeFormatter37.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate77 = localDate71.withYear((int) (byte) 1);
        java.lang.String str78 = dateTimeFormatter70.print((org.joda.time.ReadablePartial) localDate77);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate82 = localDate80.minusMonths((int) (short) -1);
        boolean boolean84 = localDate80.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology85 = localDate80.getChronology();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology87 = chronology85.withZone(dateTimeZone86);
        boolean boolean88 = dateTimeZone79.equals((java.lang.Object) dateTimeZone86);
        org.joda.time.DateTime dateTime89 = localDate77.toDateTimeAtCurrentTime(dateTimeZone86);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter37.withZone(dateTimeZone86);
        org.joda.time.Chronology chronology91 = dateTimeFormatter37.getChronology();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514972383,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=383,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "vendredi 4 f\351vrier 2022" + "'", str44, "vendredi 4 f\351vrier 2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645514972383,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=383,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(strSet64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fran\347ais" + "'", str66, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDate77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str78, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNull(chronology91);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology13 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfHalfday();
        java.util.Locale locale19 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean20 = locale19.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(2L, chronology13, locale19, (java.lang.Integer) (-2), (int) 'a');
        java.lang.String str24 = locale19.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter0.withLocale(locale19);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter0.getZone();
        java.io.Writer writer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer27, (long) 26741967);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimeZone26);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        long long48 = chronology42.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.DateTime dateTime50 = dateTime35.withChronology(chronology42);
        org.joda.time.DateTime dateTime52 = dateTime35.plusWeeks((-5));
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-5), chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.secondOfDay();
        org.joda.time.DateTime dateTime58 = property56.addToCopy(2598015263100908L);
        boolean boolean59 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime52.plus(readableDuration60);
        int int62 = dateTime61.getMillisOfSecond();
        org.joda.time.DateTime.Property property63 = dateTime61.monthOfYear();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514972494,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=494,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-48469999L) + "'", long48 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 494 + "'", int62 == 494);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getYearOfCentury();
        boolean boolean22 = dateTime19.isBefore((long) 26669470);
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        org.joda.time.DateTime dateTime25 = dateTime19.withYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime19.withEra(26785652);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26785652 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate17 = localDate11.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate11.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate11.withPeriodAdded(readablePeriod19, (int) ' ');
        org.joda.time.LocalDate localDate23 = localDate11.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate11.withPeriodAdded(readablePeriod24, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        boolean boolean36 = charSet32.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34);
        charSet32.clear();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        boolean boolean39 = charSet32.contains((java.lang.Object) locale38);
        java.lang.String str40 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDate26, locale38);
        org.joda.time.Chronology chronology41 = localDate26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 12, chronology41);
        mutableDateTime42.addYears(792);
        mutableDateTime42.setMillis((long) 26855340);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514972743,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=743,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22" + "'", str40, "22");
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale9);
        java.lang.Appendable appendable12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property16.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes(26666335);
        int int21 = localDateTime20.size();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withPeriodAdded(readablePeriod22, (int) '4');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours(19);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfDay(26676115);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.parse("0003-06-21T17:56:57.446Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        mutableDateTime33.add(durationFieldType35, (-626));
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.withFieldAdded(durationFieldType35, 811);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(appendable12, (org.joda.time.ReadablePartial) localDateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514972764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07:29:32 +00:00" + "'", str7, "07:29:32 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean27 = locale26.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(2L, chronology20, locale26, (java.lang.Integer) (-2), (int) 'a');
        int int33 = dateTimeParser9.parseInto(dateTimeParserBucket30, "", 4);
        java.util.Locale locale34 = dateTimeParserBucket30.getLocale();
        java.lang.Integer int35 = dateTimeParserBucket30.getOffsetInteger();
        long long38 = dateTimeParserBucket30.computeMillis(true, "millisOfDay");
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime44.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property49 = dateTime47.property(dateTimeFieldType48);
        org.joda.time.DateTime dateTime51 = property49.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField52 = property49.getField();
        org.joda.time.DateTimeField dateTimeField53 = property49.getField();
        long long56 = dateTimeField53.addWrapField((long) 26677059, (-1));
        dateTimeParserBucket30.saveField(dateTimeField53, 292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField53.getType();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5) + "'", int33 == (-5));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-31509322941L) + "'", long56 == (-31509322941L));
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.addWrapField(26690);
        org.joda.time.MutableDateTime mutableDateTime84 = property81.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime85 = property81.roundHalfFloor();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        java.lang.String str45 = dateTime5.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:42.883Z" + "'", str18, "0003-06-21T18:01:42.883Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514972882,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235427118,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514972882,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=32,MILLISECOND=882,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "07:29:32 +00:00" + "'", str39, "07:29:32 +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7:29:32 AM +00:00" + "'", str44, "7:29:32 AM +00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-0001-02-22T07:29:32.882Z" + "'", str45, "-0001-02-22T07:29:32.882Z");
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("2022-03-22");
        java.lang.Integer int2 = dateTimeFormatter1.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 26700528);
        boolean boolean5 = dateTimeFormatter4.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        mutableDateTime15.setZoneRetainFields(dateTimeZone37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter4.withZone(dateTimeZone37);
        java.io.Writer writer40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((long) 26665274);
        int int47 = localDateTime46.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withPeriodAdded(readablePeriod48, 22);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter39.printTo(writer40, (org.joda.time.ReadablePartial) localDateTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7200000 + "'", int47 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        boolean boolean3 = dateTimeFormatter0.isParser();
        boolean boolean4 = dateTimeFormatter0.isOffsetParsed();
        java.io.Writer writer5 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.LocalTime localTime11 = property9.getLocalTime();
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer5, (org.joda.time.ReadablePartial) localTime12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "86399999" + "'", str10, "86399999");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(40);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        boolean boolean22 = dateTimeFieldType12.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone25 = chronology18.getZone();
        org.joda.time.DurationField durationField26 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.hourOfHalfday();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(chronology18);
        int int29 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTime dateTime30 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate32 = localDate11.plusDays(7);
        org.joda.time.LocalDate localDate34 = localDate11.withWeekyear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = dateTimeFormatter35.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withOffsetParsed();
        org.joda.time.Chronology chronology38 = dateTimeFormatter35.getChronolgy();
        boolean boolean39 = dateTimeFormatter35.isParser();
        java.lang.String str40 = localDate11.toString(dateTimeFormatter35);
        java.lang.Integer int41 = dateTimeFormatter35.getPivotYear();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter35.withChronology(chronology49);
        boolean boolean54 = dateTimeFormatter53.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.parse("26776769", dateTimeFormatter53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"26776769\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimePrinter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "lundi 22 octobre 2018" + "'", str40, "lundi 22 octobre 2018");
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate3.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate7 = localDate3.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        mutableDateTime8.add(durationFieldType12, (-1));
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime16 = localDate7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField25.getType();
        mutableDateTime8.setRounding(dateTimeField25);
        int int29 = dateTimeField25.getMaximumValue((long) ' ');
        int int31 = dateTimeField25.get((long) 27);
        long long33 = dateTimeField25.remainder(0L);
        org.joda.time.DurationField durationField34 = dateTimeField25.getDurationField();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime41.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology45 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.clockhourOfHalfday();
        java.util.Locale locale51 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean52 = locale51.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(2L, chronology45, locale51, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale56 = dateTimeParserBucket55.getLocale();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate61 = localDate58.withField(dateTimeFieldType59, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTime dateTime66 = dateTime63.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology67 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfHalfday();
        java.util.Locale locale73 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean74 = locale73.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(2L, chronology67, locale73, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale78 = dateTimeParserBucket77.getLocale();
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str80 = locale78.getDisplayName(locale79);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration82 = null;
        mutableDateTime81.add(readableDuration82);
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.util.Calendar calendar85 = mutableDateTime81.toCalendar(locale84);
        java.util.Set<java.lang.Character> charSet86 = locale84.getExtensionKeys();
        java.lang.String str87 = locale78.getDisplayName(locale84);
        java.lang.String str88 = locale56.getDisplayScript(locale78);
        int int89 = dateTimeField25.getMaximumTextLength(locale78);
        java.lang.String str90 = locale78.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:25:28.378Z", locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:25:28.378Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 259200000L + "'", long33 == 259200000L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str80, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertNotNull(locale84);
// flaky:         org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1645514973112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=33,MILLISECOND=112,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str87, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str90, "hi! (PROPERTY[MILLISOFDAY])");
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate14 = localDate0.plusWeeks((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology16 = dateTimeFormatter15.getChronolgy();
        java.lang.String str17 = localDate0.toString(dateTimeFormatter15);
        java.util.Locale locale18 = dateTimeFormatter15.getLocale();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter15.getPrinter();
        java.io.Writer writer21 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("53");
        int int24 = mutableDateTime23.getDayOfMonth();
        mutableDateTime23.addWeekyears(50);
        org.joda.time.DateTimeField dateTimeField27 = mutableDateTime23.getRoundingField();
        mutableDateTime23.addDays(386);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(writer21, (org.joda.time.ReadableInstant) mutableDateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimePrinter20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(dateTimeField27);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        int int79 = mutableDateTime77.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime77.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime80.setMonthOfYear(26961822);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26961822 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime80);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.LocalDate localDate6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = property3.withMinimumValue();
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.secondOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology17);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("0003-06-21T17:56:46.777Z");
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale25);
        java.lang.String str29 = locale24.getDisplayName(locale25);
        java.util.Set<java.lang.Character> charSet30 = locale24.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 26816088, chronology17, locale24, (java.lang.Integer) 20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTime8.toString("2022-02-22T07:28:49.707Z", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charSet30);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology6.getZone();
        org.joda.time.DurationField durationField14 = chronology6.centuries();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        int int26 = dateTimeField23.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDate34, (int) (short) -1, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDate34.getFieldType((int) (short) 1);
        int int44 = localDate34.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime47 = localDate34.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.Chronology chronology48 = chronology6.withZone(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = chronology6.getDateTimeMillis(1077, 26968658, 2018, 26944312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26968658 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTime dateTime42 = localDate41.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.withDurationAdded(readableDuration44, 26);
        boolean boolean48 = dateTime42.isAfter((long) 26676837);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone("");
        java.lang.String str51 = timeZone50.getID();
        java.lang.String str52 = timeZone50.getID();
        java.lang.String str53 = timeZone50.getID();
        java.util.TimeZone.setDefault(timeZone50);
        java.time.ZoneId zoneId55 = timeZone50.toZoneId();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone("");
        java.lang.String str59 = timeZone58.getID();
        int int60 = timeZone58.getRawOffset();
        int int62 = timeZone58.getOffset((long) 182);
        boolean boolean63 = timeZone56.hasSameRules(timeZone58);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime65 = dateTime42.withZoneRetainFields(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = null;
        boolean boolean67 = dateTimeZone64.isLocalDateTimeGap(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GMT" + "'", str51, "GMT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GMT" + "'", str52, "GMT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GMT" + "'", str53, "GMT");
        org.junit.Assert.assertNotNull(zoneId55);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GMT" + "'", str59, "GMT");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("2022-02-22T07:28:39.492Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:28:39.492Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plus((-48469999L));
        java.lang.String str19 = dateTime18.toString();
        boolean boolean20 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Calendar calendar27 = mutableDateTime23.toCalendar(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter21.withLocale(locale26);
        java.util.Calendar calendar29 = dateTime6.toCalendar(locale26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime6.withDurationAdded(readableDuration30, 100);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        boolean boolean38 = mutableDateTime33.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str40 = mutableDateTime33.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter39.withLocale(locale42);
        java.lang.String str45 = dateTime6.toString(dateTimeFormatter44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.parse("2022-02-22T07:28:28.170Z", dateTimeFormatter44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:28:28.170Z\" is malformed at \"22-02-22T07:28:28.170Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0003-06-21T18:01:43.641Z" + "'", str19, "0003-06-21T18:01:43.641Z");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514973640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=33,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-62194235426360,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=33,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514973640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=33,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:29:33 AM +00:00" + "'", str40, "7:29:33 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:29:33 AM +00:00" + "'", str45, "7:29:33 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.setCopy((int) ' ');
        org.joda.time.DateTime.Property property30 = dateTime29.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime29.withField(dateTimeFieldType31, 733);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 38090);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = dateTimeField60.getAsText((long) (short) 1, locale62);
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale62);
        java.lang.String str66 = locale50.getDisplayLanguage(locale62);
        java.lang.String str67 = locale62.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter37.withLocale(locale62);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMonths((int) '4');
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        long long88 = chronology82.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime89 = dateTime74.toDateTime(chronology82);
        org.joda.time.DateTime dateTime91 = dateTime74.plusSeconds(0);
        org.joda.time.Chronology chronology92 = dateTime74.getChronology();
        org.joda.time.DateTime.Property property93 = dateTime74.yearOfCentury();
        org.joda.time.DateTime dateTime94 = dateTime74.withLaterOffsetAtOverlap();
        long long95 = dateTime94.getMillis();
        java.lang.String str96 = dateTimeFormatter37.print((org.joda.time.ReadableInstant) dateTime94);
        boolean boolean97 = dateTimeFormatter37.isOffsetParsed();
        int int98 = dateTimeFormatter37.getDefaultYear();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514973726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=33,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645514973727,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=33,MILLISECOND=727,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English" + "'", str66, "English");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-48469999L) + "'", long88 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTime94);
// flaky:         org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-62194235426273L) + "'", long95 == (-62194235426273L));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Monday, February 22, -0001" + "'", str96, "Monday, February 22, -0001");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2000 + "'", int98 == 2000);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addWrapFieldToCopy(26666877);
        org.joda.time.LocalDate localDate13 = property7.addToCopy(59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate15.withYear((int) (byte) 1);
        java.lang.String str22 = dateTimeFormatter14.print((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtCurrentTime();
        int int24 = property7.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime23.withMillis(1599960000L);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str22, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        java.lang.String str40 = dateTimeZone35.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        boolean boolean44 = dateTimeZone42.equals((java.lang.Object) locale43);
        java.lang.String str45 = dateTimeZone35.getName((long) 26667, locale43);
        org.joda.time.Chronology chronology46 = chronology9.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusHours(2035);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate56 = localDate50.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property57 = localDate50.yearOfEra();
        org.joda.time.LocalDate localDate58 = property57.roundFloorCopy();
        org.joda.time.LocalDate localDate59 = property57.roundHalfFloorCopy();
        int int60 = property57.get();
        java.lang.String str61 = property57.getAsString();
        org.joda.time.LocalDate localDate62 = property57.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        int int65 = dateTimeZone63.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone63);
        java.lang.String str67 = dateTimeZone63.toString();
        org.joda.time.DateTime dateTime68 = localDate62.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime47.toMutableDateTime(dateTimeZone63);
        java.lang.String str71 = dateTime47.toString("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate78 = localDate72.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property79 = localDate72.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDate localDate82 = localDate72.withPeriodAdded(readablePeriod80, (int) ' ');
        org.joda.time.LocalDate.Property property83 = localDate72.dayOfWeek();
        org.joda.time.LocalDate localDate85 = localDate72.withWeekyear(2);
        org.joda.time.Chronology chronology86 = localDate85.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.hourOfHalfday();
        java.lang.String str88 = chronology86.toString();
        org.joda.time.DateTime dateTime89 = dateTime47.toDateTime(chronology86);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022" + "'", str61, "2022");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str71, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ISOChronology[UTC]" + "'", str88, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        org.joda.time.DateTime dateTime25 = property21.addToCopy((long) 26691926);
        org.joda.time.DateTime dateTime26 = property21.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.withFields(readablePartial3);
        int int5 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 31);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime15.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.Chronology chronology26 = localDate20.getChronology();
        long long30 = chronology26.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime31 = dateTime19.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.millisOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateTime9, chronology26);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime45 = property44.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime46 = property44.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate54 = localDate48.withYear((int) (byte) 1);
        java.lang.String str55 = dateTimeFormatter47.print((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        boolean boolean65 = dateTimeZone56.equals((java.lang.Object) dateTimeZone63);
        org.joda.time.DateTime dateTime66 = localDate54.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime46.toDateTime(dateTimeZone63);
        long long69 = dateTimeZone63.nextTransition(1600012620000L);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(dateTimeZone63);
        long long72 = dateTimeZone63.nextTransition((-26666876L));
        boolean boolean73 = dateTimeZone63.isFixed();
        org.joda.time.DateTime dateTime74 = localDate33.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate.Property property75 = localDate33.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 200L + "'", long30 == 200L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str55, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1600012620000L + "'", long69 == 1600012620000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-26666876L) + "'", long72 == (-26666876L));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        java.util.Locale locale1 = new java.util.Locale("53");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale locale3 = locale1.stripExtensions();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDate4.getFieldType(1);
        int int9 = localDate4.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        boolean boolean17 = localDate4.isSupported(durationFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDate4.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate4.withPeriodAdded(readablePeriod19, (-2));
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int25 = dateTimeFormatter24.getDefaultYear();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter24.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType22.getField(chronology33);
        boolean boolean38 = localDate4.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property39 = localDate4.year();
        java.util.Locale locale43 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale47 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str48 = locale47.getDisplayVariant();
        java.lang.String str49 = locale43.getDisplayCountry(locale47);
        java.lang.String str50 = locale43.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.lang.String str52 = locale51.getDisplayCountry();
        java.lang.String str53 = locale43.getDisplayCountry(locale51);
        java.lang.String str54 = locale51.getDisplayScript();
        java.lang.String str55 = property39.getAsShortText(locale51);
        java.lang.String str56 = locale1.getDisplayVariant(locale51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = locale1.getUnicodeLocaleType("7:25:53 AM +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 7:25:53 AM +00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "53");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "53");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "year" + "'", str23, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2000 + "'", int25 == 2000);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals(locale43.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str49, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str50, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str52, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str53, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime12.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        java.lang.String str3 = timeZone1.getID();
        java.lang.String str4 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("");
        java.lang.String str10 = timeZone9.getID();
        int int11 = timeZone9.getRawOffset();
        int int13 = timeZone9.getOffset((long) 182);
        boolean boolean14 = timeZone7.hasSameRules(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate19.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate30 = localDate24.withYear((int) (byte) 1);
        java.lang.String str31 = dateTimeFormatter23.print((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int35 = dateTimeFormatter23.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime32, "1", 1);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate39.toDateTimeAtCurrentTime(dateTimeZone48);
        boolean boolean51 = dateTimeZone48.isFixed();
        mutableDateTime32.setZone(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime22.toDateTime(dateTimeZone48);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate56.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate60 = localDate56.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime61.add(readableDuration62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType64.getDurationType();
        mutableDateTime61.add(durationFieldType65, (-1));
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime61.weekOfWeekyear();
        org.joda.time.DateTime dateTime69 = localDate60.toDateTime((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = dateTimeField78.getType();
        mutableDateTime61.setRounding(dateTimeField78);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime61.secondOfMinute();
        int int82 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone48);
        java.util.Locale locale88 = new java.util.Locale("2022-02-22T07:25:02.092Z", "", "2022-02-22T07:24:30.010Z");
        java.lang.String str89 = dateTimeZone48.getName(0L, locale88);
        java.util.Locale locale90 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale91 = java.util.Locale.JAPANESE;
        java.lang.String str92 = locale91.getISO3Language();
        java.lang.String str93 = locale90.getDisplayLanguage(locale91);
        java.lang.String str94 = locale88.getDisplayCountry(locale91);
        java.lang.String str95 = locale88.getDisplayCountry();
        java.lang.String str96 = dateTimeZone15.getName(26909L, locale88);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str31, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-2) + "'", int35 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals(locale88.toString(), "2022-02-22t07:25:02.092z__2022-02-22T07:24:30.010Z");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00" + "'", str89, "+00:00");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "jpn" + "'", str92, "jpn");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str93, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "+00:00" + "'", str96, "+00:00");
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale4 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale8 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale4.getDisplayCountry(locale8);
        java.lang.String str11 = locale4.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone17);
        int int21 = dateTimeFormatter15.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime18, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.minuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime18.add(readablePeriod24);
        java.util.GregorianCalendar gregorianCalendar26 = mutableDateTime18.toGregorianCalendar();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar26);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str10, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str11, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str13, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str14, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-51) + "'", int21 == (-51));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        int int11 = localDate10.getEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = property22.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate32 = localDate26.withYear((int) (byte) 1);
        java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        boolean boolean43 = dateTimeZone34.equals((java.lang.Object) dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = localDate10.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableDateTime47.add(readablePeriod48, (-53));
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths((int) '4');
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        long long70 = chronology64.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime71 = dateTime56.toDateTime(chronology64);
        int int72 = dateTime56.getSecondOfMinute();
        int int73 = dateTime56.getYear();
        org.joda.time.DateTime dateTime75 = dateTime56.withWeekOfWeekyear((int) ' ');
        int int76 = dateTime56.getWeekyear();
        org.joda.time.DateTime dateTime77 = dateTime56.toDateTime();
        boolean boolean78 = mutableDateTime47.isEqual((org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-48469999L) + "'", long70 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 34 + "'", int72 == 34);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        long long31 = dateTimeZone25.convertUTCToLocal((long) 22);
        boolean boolean32 = dateTimeZone25.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 22L + "'", long31 == 22L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        mutableDateTime9.setZone(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone25);
        long long32 = dateTimeZone25.previousTransition(232523960L);
        long long35 = dateTimeZone25.adjustOffset(26666000L, false);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 232523960L + "'", long32 == 232523960L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 26666000L + "'", long35 == 26666000L);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology3 = dateTimeFormatter0.getChronolgy();
        boolean boolean4 = dateTimeFormatter0.isParser();
        boolean boolean5 = dateTimeFormatter0.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter0.getZone();
        boolean boolean7 = dateTimeFormatter0.isParser();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeFormatter0.parseMillis("3892039");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"3892039\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded(readablePeriod8, (int) ' ');
        org.joda.time.LocalDate localDate12 = localDate0.withCenturyOfEra(999);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = property23.setCopy(26665274);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        org.joda.time.DateTime dateTime28 = property23.setCopy(26665274);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readableDuration29);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.DateTime dateTime32 = localDate0.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime39.minusSeconds(10);
        boolean boolean44 = dateTime42.isBefore(2000L);
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime47 = property45.addToCopy((long) 26666768);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean50 = dateTime47.isSupported(dateTimeFieldType49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime47.plus(readableDuration51);
        org.joda.time.DateTime dateTime54 = dateTime47.minusMillis(513332);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter55.withChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology63.getZone();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTime dateTime69 = dateTime47.toDateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField70 = chronology63.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean27 = locale26.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(2L, chronology20, locale26, (java.lang.Integer) (-2), (int) 'a');
        int int33 = dateTimeParser9.parseInto(dateTimeParserBucket30, "", 4);
        java.util.Locale locale34 = dateTimeParserBucket30.getLocale();
        long long36 = dateTimeParserBucket30.computeMillis(false);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDate38.getFieldType(1);
        int int43 = localDate38.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        boolean boolean51 = localDate38.isSupported(durationFieldType48);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology57 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = chronology57.withZone(dateTimeZone58);
        org.joda.time.Interval interval60 = localDate38.toInterval(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) (short) 100, dateTimeZone58);
        long long65 = dateTimeZone58.convertLocalToUTC((long) 30464923, true, (long) 835);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(dateTimeZone58);
        dateTimeParserBucket30.setZone(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5) + "'", int33 == (-5));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 30464923L + "'", long65 == 30464923L);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(10);
        int int14 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plus(readablePeriod15);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.longDate();
        java.lang.Integer int19 = dateTimeFormatter18.getPivotYear();
        java.lang.String str20 = localDateTime13.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology21 = dateTimeFormatter18.getChronolgy();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.centuryOfEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfCeiling();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26, 8);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.era();
        int int32 = dateTimeFormatter18.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime25, "2022-02-22T07:25:04.903Z", 223);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setWeekOfWeekyear(279);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 279 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "January 1, 2022" + "'", str20, "January 1, 2022");
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-224) + "'", int32 == (-224));
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property12.addWrapField(1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate29 = property28.roundFloorCopy();
        org.joda.time.LocalDate localDate30 = property28.withMaximumValue();
        org.joda.time.LocalDate localDate32 = property28.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        mutableDateTime20.set(dateTimeFieldType33, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology39 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withDefaultYear((int) (byte) 10);
        boolean boolean42 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatter37.getPrinter();
        java.lang.String str44 = mutableDateTime20.toString(dateTimeFormatter37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 38090);
        boolean boolean47 = dateTimeFormatter37.isParser();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter37.withChronology(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate57 = dateTimeFormatter37.parseLocalDate("Property[year]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[year]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514974717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=34,MILLISECOND=717,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Friday, February 4, 2022" + "'", str44, "Friday, February 4, 2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate3.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate7 = localDate3.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        mutableDateTime8.add(durationFieldType12, (-1));
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime16 = localDate7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime17.add(readablePeriod24, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime17.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        mutableDateTime8.set(dateTimeFieldType28, 26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.lang.String str32 = mutableDateTime8.toString(dateTimeFormatter31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.parse("7:27:55 AM +00:00", dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"7:27:55 AM +00:00\" is malformed at \" +00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "7:26:34 AM" + "'", str32, "7:26:34 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        boolean boolean51 = dateTimeFieldType41.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime20.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime55 = dateTime20.minusMinutes(5);
        int int56 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter0.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26679);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = dateTimeFormatter59.getPrinter();
        boolean boolean61 = dateTimeFormatter59.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter59.withDefaultYear(43);
        java.lang.String str65 = dateTimeFormatter63.print(26682333L);
        java.io.Writer writer66 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter63.printTo(writer66, 1606323720000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97200000 + "'", int56 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimePrinter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "7:24 AM" + "'", str65, "7:24 AM");
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str3 = dateTimeFieldType2.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int5 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter4.withChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType2.getField(chronology13);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology13.getZone();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = locale29.getDisplayVariant();
        java.lang.String str32 = dateTimeField27.getAsShortText(8, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 30488630, chronology13, locale29);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 71, chronology13);
        mutableDateTime34.setTime(26675084L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime34.setHourOfDay(26919169);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26919169 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "year" + "'", str3, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str30, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "8" + "'", str32, "8");
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.monthOfYear();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(26921858L, chronology3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder11 = builder9.setLocale(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale7.getDisplayLanguage(locale10);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale10.getDisplayName(locale14);
        java.lang.String str16 = locale14.getDisplayName();
        java.lang.String str17 = locale14.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localTime5.toString("0003-06-21T17:57:44.170Z", locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "anglais" + "'", str13, "anglais");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str15, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japanese" + "'", str16, "Japanese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property32 = localDate29.era();
        org.joda.time.LocalDate localDate34 = localDate29.plusWeeks(97200000);
        org.joda.time.LocalDate.Property property35 = localDate29.dayOfWeek();
        org.joda.time.Chronology chronology36 = localDate29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight28.toMutableDateTime(chronology36);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.secondOfDay();
        java.lang.String str40 = dateTimeField39.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DateTimeField[secondOfDay]" + "'", str40, "DateTimeField[secondOfDay]");
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        boolean boolean3 = dateTimeFormatter0.isParser();
        boolean boolean4 = dateTimeFormatter0.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = dateTimeFormatter0.parseLocalDate("2022-02-22T07:24:57.912Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:24:57.912Z\" is malformed at \"22-02-22T07:24:57.912Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate8.minus(readablePeriod9);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.LocalDate localDate14 = property11.addWrapFieldToCopy(26763043);
        java.util.Locale locale19 = new java.util.Locale("26672", "2022-02-22T07:24:28.166Z", "3892039");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localDate14.toString("2022-02-22T07:29:24.077Z", locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals(locale19.toString(), "26672_2022-02-22T07:24:28.166Z_3892039");
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readablePeriod34);
        org.joda.time.DateTime.Property property36 = dateTime33.secondOfDay();
        org.joda.time.DateTime dateTime37 = property36.roundHalfEvenCopy();
        boolean boolean39 = dateTime37.isAfter((long) 444);
        org.joda.time.DateTime dateTime40 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime40.minusYears(26901135);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        boolean boolean13 = dateTimeFieldType0.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = chronology10.years();
        long long18 = durationField15.subtract(31556952000L, 386L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-12149374248000L) + "'", long18 == (-12149374248000L));
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate6 = localDate2.plusWeeks(1);
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        long long28 = chronology22.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime29 = dateTime14.toDateTime(chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale31 = dateTimeFormatter30.getLocale();
        java.util.Locale locale32 = dateTimeFormatter30.getLocale();
        java.lang.String str33 = dateTime14.toString(dateTimeFormatter30);
        boolean boolean34 = localDate8.equals((java.lang.Object) dateTimeFormatter30);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-48469999L) + "'", long28 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNull(locale32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22 f\351vrier -0001 07:29:35 +00:00" + "'", str33, "22 f\351vrier -0001 07:29:35 +00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((-1L), dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.withMinimumValue();
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes(1);
        java.lang.String str15 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime12);
        java.lang.Appendable appendable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable16, (long) 26829016);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 00:00" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 00:00");
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.addWrapField(26690);
        int int84 = mutableDateTime83.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime83);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime85.setMinuteOfDay(26785648);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26785648 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTime dateTime5 = mutableDateTime4.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.secondOfDay();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        int int8 = property6.getMaximumTextLength(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localDateTime0.toString("2022-02-22T07:28:13.076Z", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        int int54 = localDate14.getYearOfCentury();
        org.joda.time.LocalDate.Property property55 = localDate14.year();
        org.joda.time.LocalDate localDate57 = property55.addToCopy((int) '4');
        org.joda.time.LocalDate localDate58 = property55.roundHalfEvenCopy();
        int int59 = property55.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate61 = property55.setCopy("2022-02-22T07:25:01.560Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:25:01.560Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514975420,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=35,MILLISECOND=420,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:29:35 AM +00:00" + "'", str46, "7:29:35 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withLocale(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 26666570);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = dateTimeFormatter7.parseLocalTime("May 19, 26676319");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"May 19, 26676319\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514975441,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=35,MILLISECOND=441,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear(45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((-1L), dateTimeZone6);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        java.lang.String str9 = property8.toString();
        org.joda.time.LocalTime localTime11 = property8.addCopy(0);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime14 = property12.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime15 = property12.getLocalTime();
        org.joda.time.LocalTime localTime17 = property12.addWrapFieldToCopy(30464925);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean19 = localTime17.isSupported(dateTimeFieldType18);
        java.lang.String str20 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime localTime22 = localTime17.plusSeconds(91);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[millisOfDay]" + "'", str9, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 8:59:59 PM " + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 8:59:59 PM ");
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.roundHalfCeilingCopy();
        java.lang.String str16 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter2.getPrinter();
        int int18 = dateTimePrinter17.estimatePrintedLength();
        int int19 = dateTimePrinter17.estimatePrintedLength();
        int int20 = dateTimePrinter17.estimatePrintedLength();
        java.lang.StringBuffer stringBuffer21 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.dayOfMonth();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(63776678622L, chronology31);
        org.joda.time.DurationField durationField38 = chronology31.eras();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(98);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        java.util.Locale locale43 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter17.printTo(stringBuffer21, (long) 30663508, chronology31, 0, dateTimeZone41, locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +00:00" + "'", str16, "Monday, January 1, 0001 12:00:00 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 40 + "'", int19 == 40);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate5 = property3.getLocalDate();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate8.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay();
        int int12 = localDate8.size();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate15.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate19 = localDate15.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = localDate19.toDateTime((org.joda.time.ReadableInstant) mutableDateTime20);
        boolean boolean29 = localDate8.isBefore((org.joda.time.ReadablePartial) localDate19);
        int int30 = property3.compareTo((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate8.minus(readablePeriod31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter33.getPrinter();
        org.joda.time.Chronology chronology35 = dateTimeFormatter33.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter33.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter33.withZoneUTC();
        java.lang.String str39 = localDate32.toString(dateTimeFormatter33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = localDate32.withDayOfWeek(26700463);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26700463 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimePrinter34);
        org.junit.Assert.assertNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Tuesday, March 22, 2022" + "'", str39, "Tuesday, March 22, 2022");
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = property22.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate32 = localDate26.withYear((int) (byte) 1);
        java.lang.String str33 = dateTimeFormatter25.print((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        boolean boolean43 = dateTimeZone34.equals((java.lang.Object) dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime(dateTimeZone41);
        long long47 = dateTimeZone41.nextTransition(1600012620000L);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone41);
        java.util.Locale locale51 = new java.util.Locale("-1");
        java.util.Locale.setDefault(locale51);
        java.util.Set<java.lang.Character> charSet53 = locale51.getExtensionKeys();
        java.lang.String str54 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDate48, 2026, locale51);
        org.joda.time.LocalDate localDate56 = localDate48.plusMonths(26915573);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1600012620000L + "'", long47 == 1600012620000L);
        org.junit.Assert.assertEquals(locale51.toString(), "-1");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2026" + "'", str54, "2026");
        org.junit.Assert.assertNotNull(localDate56);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        java.lang.String str3 = property2.getAsString();
        org.joda.time.LocalTime localTime4 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime6 = property2.addNoWrapToCopy(17);
        org.joda.time.LocalTime localTime7 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property2.addCopy(865);
        org.joda.time.LocalTime localTime13 = property2.addCopy(94);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localTime13.toString("2022-02-22T07:28:48.372Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0" + "'", str3, "0");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate19.withCenturyOfEra(24);
        org.joda.time.LocalDate localDate35 = localDate33.withYearOfEra((int) '4');
        org.joda.time.LocalDate localDate37 = localDate35.withYear(641);
        org.joda.time.LocalDate.Property property38 = localDate37.dayOfYear();
        org.joda.time.LocalDate localDate39 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate40 = property38.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate56 = localDate50.withYear((int) (byte) 1);
        java.lang.String str57 = dateTimeFormatter49.print((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        boolean boolean67 = dateTimeZone58.equals((java.lang.Object) dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDate56.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.DateTime.Property property69 = dateTime68.weekOfWeekyear();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology77.clockhourOfDay();
        org.joda.time.DateTime dateTime79 = dateTime68.withChronology(chronology77);
        boolean boolean80 = mutableDateTime22.isBefore((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology81 = dateTime68.getChronology();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate85 = localDate82.withField(dateTimeFieldType83, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = localDate85.toDateTime(readableInstant86);
        org.joda.time.Chronology chronology88 = dateTime87.getChronology();
        org.joda.time.DateTime dateTime90 = dateTime87.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property92 = dateTime90.property(dateTimeFieldType91);
        org.joda.time.DateTime.Property property93 = dateTime90.minuteOfHour();
        org.joda.time.DateTime.Property property94 = dateTime90.secondOfDay();
        int int95 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime96 = dateTime90.toDateTimeISO();
        boolean boolean97 = dateTime96.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str57, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate19.withCenturyOfEra(24);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.LocalDate localDate36 = localDate33.minusMonths(63);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        long long48 = chronology42.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = dateTimeZone50.getName(0L, locale52);
        org.joda.time.Chronology chronology54 = chronology42.withZone(dateTimeZone50);
        int int56 = dateTimeZone50.getStandardOffset((long) 26726619);
        org.joda.time.DateMidnight dateMidnight57 = localDate36.toDateMidnight(dateTimeZone50);
        int int58 = localDate36.getWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-48469999L) + "'", long48 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2395 + "'", int58 == 2395);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        java.util.Locale locale16 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean17 = locale16.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(2L, chronology10, locale16, (java.lang.Integer) (-2), (int) 'a');
        long long21 = dateTimeParserBucket20.computeMillis();
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 30474099);
        long long26 = dateTimeParserBucket20.computeMillis(true, "0003-06-21T17:57:35.623Z");
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        int int38 = dateTimeField35.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate46 = localDate40.withYear((int) (byte) 1);
        java.lang.String str47 = dateTimeFormatter39.print((org.joda.time.ReadablePartial) localDate46);
        java.util.Locale locale52 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str53 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDate46, (int) (short) -1, locale52);
        java.lang.String str54 = dateTimeField35.getName();
        java.util.Locale locale56 = java.util.Locale.getDefault();
        java.lang.String str57 = locale56.getDisplayCountry();
        java.lang.String str58 = dateTimeField35.getAsText((-1L), locale56);
        int int61 = dateTimeField35.getDifference((long) 2922789, (long) 110);
        dateTimeParserBucket20.saveField(dateTimeField35, 26702483);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str47, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "weekOfWeekyear" + "'", str54, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str57, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        java.lang.String str52 = locale48.toLanguageTag();
        java.util.Set<java.lang.Character> charSet53 = locale48.getExtensionKeys();
        java.lang.String str54 = locale48.getDisplayVariant();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514976215,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=36,MILLISECOND=215,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:29:36 AM +00:00" + "'", str46, "7:29:36 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property10.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter17.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType15.getField(chronology24);
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology24);
        long long29 = mutableDateTime28.getMillis();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 1);
        long long36 = dateTimeZone32.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1645572479999L, dateTimeZone32);
        java.lang.String str38 = dateTimeZone32.getID();
        java.util.TimeZone timeZone39 = dateTimeZone32.toTimeZone();
        int int41 = timeZone39.getOffset((-19353599951L));
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        mutableDateTime28.setZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int45 = dateTimeFormatter44.getDefaultYear();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter44.withChronology(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.clockhourOfHalfday();
        org.joda.time.Chronology chronology58 = chronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.monthOfYear();
        org.joda.time.DateTime dateTime60 = mutableDateTime28.toDateTime(chronology58);
        mutableDateTime28.addMillis(26929098);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514976395L + "'", long29 == 1645514976395L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2000 + "'", int45 == 2000);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean27 = locale26.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(2L, chronology20, locale26, (java.lang.Integer) (-2), (int) 'a');
        int int33 = dateTimeParser9.parseInto(dateTimeParserBucket30, "", 4);
        java.util.Locale locale34 = dateTimeParserBucket30.getLocale();
        java.lang.Integer int35 = dateTimeParserBucket30.getOffsetInteger();
        long long38 = dateTimeParserBucket30.computeMillis(true, "millisOfDay");
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        mutableDateTime39.setMillis(readableInstant48);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime39.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property51.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime54 = property51.add(26666);
        org.joda.time.MutableDateTime mutableDateTime55 = property51.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime57 = property51.addWrapField(1);
        org.joda.time.MutableDateTime mutableDateTime58 = property51.roundHalfFloor();
        boolean boolean59 = dateTimeParserBucket30.restoreState((java.lang.Object) mutableDateTime58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusMonths((int) '4');
        org.joda.time.DateTime dateTime68 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.minusMillis((int) (byte) 1);
        boolean boolean71 = dateTimeParserBucket30.restoreState((java.lang.Object) dateTime70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.plus(readablePeriod72);
        boolean boolean74 = dateTime70.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5) + "'", int33 == (-5));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514976452,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=36,MILLISECOND=452,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property13 = dateTime11.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.roundHalfCeilingCopy();
        java.lang.String str16 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property17 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime15.withSecondOfMinute((int) (byte) 10);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfSecond();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, January 1, 0001 12:00:00 AM +00:00" + "'", str16, "Monday, January 1, 0001 12:00:00 AM +00:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        int int14 = dateTimeField12.getMaximumValue(3366579221870039078L);
        long long17 = dateTimeField12.set((-62194235723419L), 32);
        boolean boolean18 = dateTimeField12.isLenient();
        int int20 = dateTimeField12.getMaximumValue((long) 2035);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = dateTimeField12.add((long) (-16820344), 841644804756573682L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 841644804756573682 * 1000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-62194235727419L) + "'", long17 == (-62194235727419L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        mutableDateTime66.addYears(41);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate72 = localDate69.withField(dateTimeFieldType70, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMonths((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime76.plus((-48469999L));
        org.joda.time.DateTime dateTime80 = dateTime76.plusSeconds(2);
        org.joda.time.DateTime.Property property81 = dateTime76.yearOfCentury();
        org.joda.time.DateTime dateTime82 = dateTime76.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime83 = dateTime82.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime84 = dateTime82.toDateTimeISO();
        org.joda.time.DateTime dateTime85 = dateTime82.toDateTime();
        org.joda.time.DateTime dateTime88 = dateTime85.withDurationAdded((long) 279, (-36));
        boolean boolean89 = mutableDateTime66.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        int int5 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int8 = timeZone1.getOffset((long) 26679);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(1);
        int int14 = localDate9.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        mutableDateTime15.add(durationFieldType19, (-1));
        boolean boolean22 = localDate9.isSupported(durationFieldType19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDate9.getFieldTypes();
        java.lang.String str25 = localDate9.toString("7");
        org.joda.time.DateMidnight dateMidnight26 = localDate9.toDateMidnight();
        org.joda.time.LocalDate localDate28 = localDate9.minusMonths(99);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime42.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property47 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology54 = localDate49.getChronology();
        org.joda.time.Chronology chronology55 = localDate49.getChronology();
        long long59 = chronology55.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime48.toDateTime(chronology55);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(1L, chronology55, locale61, (java.lang.Integer) 718, 33);
        java.lang.String str66 = dateTimeZone32.getShortName(4260279330L, locale61);
        long long69 = dateTimeZone32.adjustOffset(0L, false);
        org.joda.time.Interval interval70 = localDate28.toInterval(dateTimeZone32);
        java.util.TimeZone timeZone71 = dateTimeZone32.toTimeZone();
        boolean boolean72 = timeZone1.hasSameRules(timeZone71);
        boolean boolean73 = timeZone1.observesDaylightTime();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate77 = localDate74.withField(dateTimeFieldType75, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDate77.toDateTime(readableInstant78);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.minutes();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(chronology80);
        org.joda.time.LocalDate localDate84 = localDate82.minusMonths(40);
        java.util.Date date85 = localDate84.toDate();
        org.joda.time.LocalDate localDate86 = org.joda.time.LocalDate.fromDateFields(date85);
        org.joda.time.LocalDate localDate87 = org.joda.time.LocalDate.fromDateFields(date85);
        boolean boolean88 = timeZone1.inDaylightTime(date85);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7" + "'", str25, "7");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 200L + "'", long59 == 200L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.property(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime0.copy();
        mutableDateTime0.addMillis((int) '#');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        long long31 = dateTimeZone26.getMillisKeepLocal(dateTimeZone29, (long) 2);
        int int33 = dateTimeZone29.getStandardOffset((long) 5);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        mutableDateTime0.setZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        java.lang.String str37 = mutableDateTime36.toString();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        mutableDateTime38.add(durationFieldType42, (-1));
        mutableDateTime36.add(durationFieldType42, 2);
        mutableDateTime36.addHours(19);
        boolean boolean49 = mutableDateTime36.isBeforeNow();
        mutableDateTime36.addMillis(26773778);
        int int52 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) mutableDateTime36);
        long long54 = dateTimeZone29.convertUTCToLocal(26671504L);
        boolean boolean55 = dateTimeZone29.isFixed();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514976903,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=36,MILLISECOND=903,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:36 AM +00:00" + "'", str7, "7:29:36 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:29:36.904Z" + "'", str37, "2022-02-22T07:29:36.904Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 26671504L + "'", long54 == 26671504L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("53");
        int int2 = mutableDateTime1.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutableDateTime1.add(readablePeriod3, 26668);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime1.getZone();
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 86399999);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("");
        java.time.ZoneId zoneId12 = timeZone11.toZoneId();
        int int14 = timeZone11.getOffset((-62131077312805L));
        java.time.ZoneId zoneId15 = timeZone11.toZoneId();
        boolean boolean16 = timeZone9.hasSameRules(timeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int18 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.hourOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        long long44 = dateTimeField41.addWrapField((long) ' ', 0);
        java.util.Locale locale48 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale52 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str53 = locale52.getDisplayVariant();
        java.lang.String str54 = locale48.getDisplayCountry(locale52);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = locale55.getDisplayCountry();
        java.lang.String str57 = locale52.getDisplayCountry(locale55);
        int int58 = dateTimeField41.getMaximumShortTextLength(locale52);
        int int59 = dateTimeField41.getMaximumValue();
        long long61 = dateTimeField41.roundHalfFloor((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63);
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.util.Calendar calendar66 = mutableDateTime62.toCalendar(locale65);
        boolean boolean67 = mutableDateTime62.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str69 = mutableDateTime62.toString(dateTimeFormatter68);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        boolean boolean72 = dateTimeZone70.equals((java.lang.Object) locale71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter68.withLocale(locale71);
        int int74 = dateTimeField41.getMaximumTextLength(locale71);
        java.lang.String str75 = dateTimeField31.getAsShortText(26747, locale71);
        java.lang.String str76 = timeZone11.getDisplayName(locale71);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertEquals(locale48.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str54, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str56, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str57, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-259200000L) + "'", long61 == (-259200000L));
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1645514976933,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=36,MILLISECOND=933,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "7:29:36 AM +00:00" + "'", str69, "7:29:36 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "26747" + "'", str75, "26747");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Greenwich Mean Time" + "'", str76, "Greenwich Mean Time");
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.lang.String str2 = languageRange1.getRange();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        boolean boolean13 = dateTimeFieldType3.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology9.getZone();
        org.joda.time.DurationField durationField17 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.hourOfHalfday();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTimeField dateTimeField20 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology9.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale24 = dateTimeFormatter23.getLocale();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter23.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyearOfCentury();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate39 = localDate33.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property40 = localDate33.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate33.withPeriodAdded(readablePeriod41, (int) ' ');
        org.joda.time.LocalDate localDate45 = localDate33.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate48 = localDate33.withPeriodAdded(readablePeriod46, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime49.add(readableDuration50);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.util.Calendar calendar53 = mutableDateTime49.toCalendar(locale52);
        java.util.Set<java.lang.Character> charSet54 = locale52.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        boolean boolean58 = charSet54.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56);
        charSet54.clear();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        boolean boolean61 = charSet54.contains((java.lang.Object) locale60);
        java.lang.String str62 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDate48, locale60);
        int int63 = dateTimeField22.getMaximumTextLength(locale60);
        boolean boolean64 = languageRange1.equals((java.lang.Object) locale60);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645514977011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "22" + "'", str62, "22");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 24, chronology8);
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate11 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = property10.roundHalfEvenCopy();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDate12.toString("12:00:00 AM ", locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property11 = localDate9.era();
        org.joda.time.LocalDate localDate12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withYear(44);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        int int27 = dateTimeField25.get(2419226666L);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property35 = localDate28.yearOfEra();
        org.joda.time.LocalDate localDate36 = property35.roundFloorCopy();
        org.joda.time.LocalDate localDate37 = property35.withMaximumValue();
        org.joda.time.LocalDate localDate39 = property35.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean41 = localDate39.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDate.Property property42 = localDate39.dayOfMonth();
        org.joda.time.LocalDate localDate43 = property42.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale45 = dateTimeFormatter44.getLocale();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter44.withChronology(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate56.equals((java.lang.Object) (byte) 10);
        int[] intArray65 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int66 = dateTimeField53.getMinimumValue((org.joda.time.ReadablePartial) localDate56, intArray65);
        int int67 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDate43, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField8.set((org.joda.time.ReadablePartial) localDate12, 0, intArray65, 26668);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26668 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("0003-06-21T17:56:57.446Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter4.getPrinter();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear(28);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone12.getOffset(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter8.withZone(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property19.addToCopy((long) 26665274);
        int int22 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusWeeks(182);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime(dateTimeZone26);
        long long32 = dateTimeZone12.getMillisKeepLocal(dateTimeZone26, (long) 26666);
        long long35 = dateTimeZone26.adjustOffset(841644804756344625L, false);
        java.util.TimeZone timeZone36 = dateTimeZone26.toTimeZone();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 7200000, dateTimeZone26);
        mutableDateTime1.setZone(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear((-2223457));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2223457 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7200000 + "'", int22 == 7200000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 26666L + "'", long32 == 26666L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 841644804756344625L + "'", long35 == 841644804756344625L);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean27 = localDate24.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(1814400999L);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean31 = localDate29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate24.withField(dateTimeFieldType30, 6);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime39.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.DateTime dateTime52 = dateTime39.withFieldAdded(durationFieldType48, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime55 = dateTime39.withDurationAdded(readableDuration53, 1);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str59 = dateTimeZone56.getName(0L, locale58);
        java.util.Calendar calendar60 = dateTime55.toCalendar(locale58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property64 = localDate61.era();
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtMidnight();
        int int66 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.minuteOfHour();
        java.util.Locale locale81 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.lang.String str82 = dateTimeField76.getAsShortText((long) (byte) -1, locale81);
        int int84 = dateTimeField76.getLeapAmount((long) 5);
        long long87 = dateTimeField76.addWrapField((long) ' ', 8);
        long long90 = dateTimeField76.addWrapField(0L, 27268320);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = dateTimeField76.getType();
        org.joda.time.DateTime.Property property92 = dateTime55.property(dateTimeFieldType91);
        boolean boolean93 = localDate33.isSupported(dateTimeFieldType91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate95 = localDate33.withCenturyOfEra(27371301);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27371301 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-62194235422585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=415,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertEquals(locale81.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "59" + "'", str82, "59");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 480032L + "'", long87 == 480032L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = mutableDateTime15.toCalendar(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime46);
        int int53 = dateTime46.getEra();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime46);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.millisOfSecond();
        mutableDateTime54.addMonths(26783169);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.secondOfDay();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514977443,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=443,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-62131077022557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=443,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        org.joda.time.DurationField durationField39 = dateTimeField37.getRangeDurationField();
        org.joda.time.DurationField durationField40 = dateTimeField37.getRangeDurationField();
        int int41 = dateTime5.get(dateTimeField37);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime5.plus(readablePeriod42);
        int int44 = dateTime43.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:47.475Z" + "'", str18, "0003-06-21T18:01:47.475Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514977474,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=474,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235422526,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=474,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        java.lang.String str18 = dateTime17.toString();
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withLocale(locale25);
        java.util.Calendar calendar28 = dateTime5.toCalendar(locale25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime5.withDurationAdded(readableDuration29, 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Calendar calendar36 = mutableDateTime32.toCalendar(locale35);
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str39 = mutableDateTime32.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        boolean boolean42 = dateTimeZone40.equals((java.lang.Object) locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withLocale(locale41);
        java.lang.String str44 = dateTime5.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime5.withYearOfEra(26680);
        int int47 = dateTime5.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Calendar calendar52 = mutableDateTime48.toCalendar(locale51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        mutableDateTime48.setMillis(readableInstant57);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime48.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime63 = property60.add((-2));
        org.joda.time.MutableDateTime mutableDateTime64 = property60.roundHalfEven();
        mutableDateTime64.setSecondOfDay(27);
        mutableDateTime64.addMinutes(26669470);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getDurationType();
        mutableDateTime69.add(durationFieldType73, (-1));
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        mutableDateTime69.add(readablePeriod76, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime69.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property79.getFieldType();
        int int81 = mutableDateTime64.get(dateTimeFieldType80);
        int int82 = dateTime5.get(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0003-06-21T18:01:47.645Z" + "'", str18, "0003-06-21T18:01:47.645Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514977644,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=644,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-62194235422356,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=644,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514977644,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=644,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:29:37 AM +00:00" + "'", str39, "7:29:37 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7:29:37 AM +00:00" + "'", str44, "7:29:37 AM +00:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514977644,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=644,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 29 + "'", int82 == 29);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        org.joda.time.LocalDate.Property property54 = localDate53.weekOfWeekyear();
        org.joda.time.LocalDate localDate56 = localDate53.minusYears((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate59 = localDate53.withPeriodAdded(readablePeriod57, 13);
        org.joda.time.LocalDate.Property property60 = localDate53.yearOfEra();
        org.joda.time.LocalDate localDate62 = property60.setCopy(26920);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514977837,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=837,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:29:37 AM +00:00" + "'", str46, "7:29:37 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime24.withWeekyear(19);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime17 = property12.add(60000L);
        org.joda.time.MutableDateTime mutableDateTime18 = property12.roundCeiling();
        mutableDateTime18.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.hourOfDay();
        boolean boolean45 = dateTime41.isAfter((-48469999L));
        org.joda.time.DateTime dateTime47 = dateTime41.minusYears(27268320);
        long long48 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableDateTime mutableDateTime49 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.centuryOfEra();
        mutableDateTime49.addHours(26743841);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setSecondOfMinute(26772423);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26772423 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514977944,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=37,MILLISECOND=944,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 63776678663L + "'", long48 == 63776678663L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("");
        java.lang.String str8 = timeZone7.getID();
        java.lang.String str9 = timeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 53, dateTimeZone10);
        long long14 = dateTimeZone10.convertLocalToUTC((long) 26, true);
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight4.toMutableDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        java.lang.String str25 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        int int29 = dateTimeFormatter17.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime26, "1", 1);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate33.toDateTimeAtCurrentTime(dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        mutableDateTime26.setZone(dateTimeZone42);
        java.lang.String str48 = dateTimeZone42.getNameKey((long) (byte) 1);
        long long50 = dateTimeZone42.previousTransition((long) (byte) -1);
        boolean boolean52 = dateTimeZone42.isStandardOffset(26666877L);
        mutableDateTime15.setZone(dateTimeZone42);
        java.util.GregorianCalendar gregorianCalendar54 = mutableDateTime15.toGregorianCalendar();
        mutableDateTime15.addDays(26716723);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 26L + "'", long14 == 26L);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str25, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-2) + "'", int29 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            long long3 = dateTimeFormatter0.parseMillis("2022-02-22T07:27:45.121Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:45.121Z\" is malformed at \"22-02-22T07:27:45.121Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(8);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = mutableDateTime16.toCalendar(locale19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        long long38 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) 2);
        boolean boolean40 = dateTimeZone33.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime16.setZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime42 = dateTime13.withZone(dateTimeZone33);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate49 = localDate43.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property50 = localDate43.yearOfEra();
        org.joda.time.LocalDate localDate51 = property50.roundFloorCopy();
        org.joda.time.LocalDate localDate52 = property50.withMaximumValue();
        org.joda.time.LocalDate localDate54 = property50.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean56 = localDate54.isSupported(dateTimeFieldType55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale58 = dateTimeFormatter57.getLocale();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter57.withChronology(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType55.getField(chronology64);
        java.lang.String str67 = dateTimeFieldType55.toString();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType55.getDurationType();
        int int69 = dateTime42.get(dateTimeFieldType55);
        org.joda.time.DateTime dateTime71 = dateTime42.plus((long) 26781620);
        int int72 = dateTime42.getSecondOfDay();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime75 = dateTime42.withDurationAdded(readableDuration73, 26945548);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514978042,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=38,MILLISECOND=42,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "dayOfYear" + "'", str67, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 173 + "'", int69 == 173);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 30580 + "'", int72 == 30580);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("53");
        int int23 = mutableDateTime22.getDayOfMonth();
        long long24 = mutableDateTime22.getMillis();
        int int25 = dateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.DateTime dateTime29 = dateTime20.withFieldAdded(durationFieldType27, (int) (short) -1);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("");
        java.lang.String str33 = timeZone32.getID();
        java.lang.String str34 = timeZone32.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 53, dateTimeZone35);
        long long39 = dateTimeZone35.convertLocalToUTC((long) 26, true);
        org.joda.time.DateTime dateTime40 = dateTime29.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime29.toMutableDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.DurationField durationField56 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology50.year();
        org.joda.time.DateTimeField dateTimeField58 = chronology50.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = chronology50.getDateTimeMillis(95, 26673922, 2, 358, 165, 545, 242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 358 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60494601600000L) + "'", long24 == (-60494601600000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GMT" + "'", str33, "GMT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT" + "'", str34, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 26L + "'", long39 == 26L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded(readableDuration23, 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.DateTime dateTime29 = dateTime25.withFieldAdded(durationFieldType27, 182);
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 24, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.DateTime dateTime44 = dateTime31.toDateTime(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        java.io.Writer writer4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate7.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate12.withYear((int) (byte) 1);
        java.lang.String str19 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int23 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime20, "1", 1);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        boolean boolean39 = dateTimeZone36.isFixed();
        mutableDateTime20.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime10.toDateTime(dateTimeZone36);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate44.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate48 = localDate44.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime49.add(readableDuration50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        mutableDateTime49.add(durationFieldType53, (-1));
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime49.weekOfWeekyear();
        org.joda.time.DateTime dateTime57 = localDate48.toDateTime((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField66.getType();
        mutableDateTime49.setRounding(dateTimeField66);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime49.secondOfMinute();
        int int70 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration72 = null;
        mutableDateTime71.add(readableDuration72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getDurationType();
        mutableDateTime71.add(durationFieldType75, (-1));
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableDateTime71.add(readablePeriod78, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime71.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime82 = property81.roundHalfEven();
        boolean boolean83 = mutableDateTime49.isAfter((org.joda.time.ReadableInstant) mutableDateTime82);
        mutableDateTime82.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime82.year();
        org.joda.time.MutableDateTime mutableDateTime88 = property86.addWrapField(26690);
        int int89 = mutableDateTime88.getWeekyear();
        mutableDateTime88.addDays(26691926);
        mutableDateTime88.addHours(26676316);
        org.joda.time.MutableDateTime mutableDateTime94 = mutableDateTime88.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer4, (org.joda.time.ReadableInstant) mutableDateTime94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-2) + "'", int23 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 26790 + "'", int89 == 26790);
        org.junit.Assert.assertNotNull(mutableDateTime94);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        boolean boolean13 = dateTimeFieldType3.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.hourOfHalfday();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter0.withChronology(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 84480000);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(writer19, (long) 26742488);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = new java.util.Locale("7:24:59 AM +00:00", "fr");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category0, locale6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((-48469999L));
        org.joda.time.DateTime dateTime19 = dateTime15.plusSeconds(2);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Calendar calendar27 = mutableDateTime23.toCalendar(locale26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        mutableDateTime23.setMillis(readableInstant32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime23.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime38 = property35.add(26666);
        org.joda.time.MutableDateTime mutableDateTime39 = property35.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime41 = property35.addWrapField(1);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.getMutableDateTime();
        int int44 = property21.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime43.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 1);
        long long51 = dateTimeZone47.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(1645572479999L, dateTimeZone47);
        int int53 = mutableDateTime43.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime.Property property54 = dateTime52.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Calendar calendar59 = mutableDateTime55.toCalendar(locale58);
        boolean boolean60 = mutableDateTime55.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str62 = mutableDateTime55.toString(dateTimeFormatter61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate69 = localDate63.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property70 = localDate63.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate73 = localDate63.withPeriodAdded(readablePeriod71, (int) ' ');
        java.lang.String str74 = dateTimeFormatter61.print((org.joda.time.ReadablePartial) localDate73);
        org.joda.time.Chronology chronology75 = localDate73.getChronology();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = chronology75.add(readablePeriod76, (-62135596800000L), 17);
        org.joda.time.DateTimeField dateTimeField80 = chronology75.dayOfMonth();
        int int82 = dateTimeField80.getMinimumValue((long) 26726619);
        java.util.Locale locale85 = new java.util.Locale("2022-02-22T07:24:50.863Z");
        java.lang.String str86 = dateTimeField80.getAsText((-2303769599957L), locale85);
        int int87 = property54.getMaximumShortTextLength(locale85);
        java.util.Locale.setDefault(category0, locale85);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale3.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "7:24:59 am +00:00_FR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514978660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=38,MILLISECOND=660,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645514978660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=38,MILLISECOND=660,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "7:29:38 AM +00:00" + "'", str62, "7:29:38 AM +00:00");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDate73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str74, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-62135596800000L) + "'", long79 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals(locale85.toString(), "2022-02-22t07:24:50.863z");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "30" + "'", str86, "30");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("Heure de Greenwich");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: Heure de Greenwich");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        boolean boolean12 = dateTimeFormatter11.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = dateTimeFormatter11.parseLocalDate("2022-02-22T07:25:26.558Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:25:26.558Z\" is malformed at \"22-02-22T07:25:26.558Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        java.lang.String str24 = dateTimeFormatter16.print((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        boolean boolean34 = dateTimeZone25.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        long long48 = chronology42.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology42);
        org.joda.time.DateTime dateTime50 = dateTime35.withChronology(chronology42);
        org.joda.time.DurationField durationField51 = chronology42.halfdays();
        org.joda.time.DurationField durationField52 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField53 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = chronology42.secondOfDay();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514978815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=38,MILLISECOND=815,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-48469999L) + "'", long48 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        int int23 = dateTime21.getSecondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime21.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) -1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.secondOfDay();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate11 = localDate5.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property12 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate16 = property12.addWrapFieldToCopy(26666877);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale20 = dateTimeFormatter19.getLocale();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter19.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        mutableDateTime3.setChronology(chronology26);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.secondOfMinute();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 82, chronology26);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(63776678612L, chronology26);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setMinuteOfHour(26930);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26930 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 26700463);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(26701949);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        java.io.Writer writer7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.centuryOfEra();
        int int13 = property12.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.lang.String str17 = dateTimeZone16.toString();
        java.util.Locale locale22 = new java.util.Locale("fr", "7:24:43 AM +00:00", "English");
        java.lang.String str23 = dateTimeZone16.getName(0L, locale22);
        java.util.Locale.setDefault(locale22);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter6.printTo(writer7, (org.joda.time.ReadablePartial) localDateTime14, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals(locale22.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.plus((-48469999L));
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) dateTime14, dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfMonth();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime35);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes((int) 'a');
        org.joda.time.DateTime.Property property40 = dateTime39.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate48 = localDate42.withYear((int) (byte) 1);
        java.lang.String str49 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        boolean boolean59 = dateTimeZone50.equals((java.lang.Object) dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.DateTime.Property property61 = dateTime60.weekOfWeekyear();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfDay();
        org.joda.time.DateTime dateTime71 = dateTime60.withChronology(chronology69);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((java.lang.Object) dateTime39, chronology69);
        org.joda.time.DateTimeField dateTimeField73 = chronology69.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(894, 26768931, 26674, (-26666878), 26747675, 26702, 26840298, chronology69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -26666878 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDate48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str49, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        java.util.Locale locale17 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean18 = locale17.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(2L, chronology11, locale17, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale22 = dateTimeParserBucket21.getLocale();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.lang.String str26 = locale23.getCountry();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Calendar calendar31 = mutableDateTime27.toCalendar(locale30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = dateTimeField40.getAsText((long) (short) 1, locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale42);
        java.lang.String str46 = locale30.getDisplayLanguage(locale42);
        java.lang.String str47 = locale23.getDisplayVariant(locale42);
        java.lang.String str48 = locale23.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T07:27:35.918Z", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T07:27:35.918Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str24, "hi! (PROPERTY[MILLISOFDAY])");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CA" + "'", str26, "CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514979241,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=39,MILLISECOND=241,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fran\347ais" + "'", str46, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fr" + "'", str48, "fr");
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        int int23 = dateTimeField20.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate25.withYear((int) (byte) 1);
        java.lang.String str32 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate31);
        java.util.Locale locale37 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str38 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate31, (int) (short) -1, locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDate31.getFieldType((int) (short) 1);
        org.joda.time.LocalDate localDate41 = localDate10.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.Interval interval42 = localDate31.toInterval();
        org.joda.time.LocalDate localDate44 = localDate31.withCenturyOfEra(26690);
        int int45 = localDate31.getWeekyear();
        org.joda.time.LocalDate.Property property46 = localDate31.dayOfYear();
        org.joda.time.LocalDate localDate47 = property46.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Oct 22 00:00:00 GMT 2018");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str32, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale37.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1" + "'", str38, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology6.getZone();
        org.joda.time.DurationField durationField14 = chronology6.centuries();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        int int26 = dateTimeField23.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        java.lang.String str35 = dateTimeFormatter27.print((org.joda.time.ReadablePartial) localDate34);
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str41 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDate34, (int) (short) -1, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDate34.getFieldType((int) (short) 1);
        int int44 = localDate34.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime47 = localDate34.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.Chronology chronology48 = chronology6.withZone(dateTimeZone46);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DurationField durationField50 = chronology6.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str35, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        boolean boolean6 = mutableDateTime1.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str8 = mutableDateTime1.toString(dateTimeFormatter7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate15 = localDate9.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate9.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate9.withPeriodAdded(readablePeriod17, (int) ' ');
        java.lang.String str20 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.Chronology chronology21 = localDate19.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514979535,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=39,MILLISECOND=535,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "07:29:39 +00:00" + "'", str8, "07:29:39 +00:00");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime24 = property20.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property27 = dateTime24.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateTime24.toDateMidnight();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property32 = localDate29.era();
        org.joda.time.LocalDate localDate34 = localDate29.plusWeeks(97200000);
        org.joda.time.LocalDate.Property property35 = localDate29.dayOfWeek();
        org.joda.time.Chronology chronology36 = localDate29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight28.toMutableDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        java.util.Locale locale42 = new java.util.Locale("23:59:59.023");
        // The following exception was thrown during execution in test generation
        try {
            long long43 = dateTimeField38.set(841644804756424789L, "-0005-06-25T07:28:19.136Z", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-0005-06-25T07:28:19.136Z\" for clockhourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale42.toString(), "23:59:59.023");
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = mutableDateTime4.toCalendar(locale7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        mutableDateTime4.setMillis(readableInstant13);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.secondOfDay();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17);
        int int21 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "2022-02-22T07:24:42.673Z", (int) '4');
        mutableDateTime4.add((long) 26712102);
        org.joda.time.Chronology chronology24 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ZeroIsMaxDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_7:24:43 AM +00:00_English");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514979688,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=39,MILLISECOND=688,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-53) + "'", int21 == (-53));
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate39.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalDate localDate43 = localDate39.plusWeeks(1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = localDate43.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        mutableDateTime44.setRounding(dateTimeField61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime44.secondOfMinute();
        int int65 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime66.add(readableDuration67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        mutableDateTime66.add(durationFieldType70, (-1));
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableDateTime66.add(readablePeriod73, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime66.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfEven();
        boolean boolean78 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime77.year();
        mutableDateTime77.setMillis((-62131077316268L));
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        mutableDateTime77.add(readablePeriod84);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        mutableDateTime77.add(readablePeriod86);
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.parse("0003-06-21T17:56:49.414Z");
        mutableDateTime77.setTime((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime77.millisOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        boolean boolean51 = dateTimeFieldType41.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime20.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime55 = dateTime20.minusMinutes(5);
        int int56 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter0.withZone(dateTimeZone12);
        java.lang.String str59 = dateTimeFormatter57.print((long) 26802000);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97200000 + "'", int56 == 97200000);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "10:26" + "'", str59, "10:26");
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate12.equals((java.lang.Object) (byte) 10);
        int[] intArray21 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int22 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate12, intArray21);
        org.joda.time.LocalDate localDate24 = localDate12.minusDays((int) ' ');
        org.joda.time.LocalDate.Property property25 = localDate24.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean27 = localDate24.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(1814400999L);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean31 = localDate29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate24.withField(dateTimeFieldType30, 6);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime39.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime44.add(durationFieldType48, (-1));
        org.joda.time.DateTime dateTime52 = dateTime39.withFieldAdded(durationFieldType48, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime55 = dateTime39.withDurationAdded(readableDuration53, 1);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str59 = dateTimeZone56.getName(0L, locale58);
        java.util.Calendar calendar60 = dateTime55.toCalendar(locale58);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property64 = localDate61.era();
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtMidnight();
        int int66 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology74 = chronology72.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.minuteOfHour();
        java.util.Locale locale81 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.lang.String str82 = dateTimeField76.getAsShortText((long) (byte) -1, locale81);
        int int84 = dateTimeField76.getLeapAmount((long) 5);
        long long87 = dateTimeField76.addWrapField((long) ' ', 8);
        long long90 = dateTimeField76.addWrapField(0L, 27268320);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = dateTimeField76.getType();
        org.joda.time.DateTime.Property property92 = dateTime55.property(dateTimeFieldType91);
        boolean boolean93 = localDate33.isSupported(dateTimeFieldType91);
        org.joda.time.Interval interval94 = localDate33.toInterval();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=-62194235419984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=40,MILLISECOND=16,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertEquals(locale81.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "59" + "'", str82, "59");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 480032L + "'", long87 == 480032L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(interval94);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate0.era();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.lang.String str6 = dateTimeField5.getName();
        int int8 = dateTimeField5.getMinimumValue(5259492000000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter10.getPrinter();
        org.joda.time.Chronology chronology12 = dateTimeFormatter10.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withDefaultYear((int) (byte) 10);
        boolean boolean15 = dateTimeFormatter10.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter10.withPivotYear(5999999);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("2022-02-22T07:24:52.886Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter10.withLocale(locale19);
        java.util.Locale locale22 = new java.util.Locale("-1");
        java.util.Locale.setDefault(locale22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime30.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology34 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfHalfday();
        java.util.Locale locale40 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean41 = locale40.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(2L, chronology34, locale40, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale45 = dateTimeParserBucket44.getLocale();
        java.lang.String str46 = locale22.getDisplayVariant(locale45);
        java.lang.String str47 = locale19.getDisplayCountry(locale45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = dateTimeField5.getAsText(26856503, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26856503");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "era" + "'", str6, "era");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals(locale22.toString(), "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        java.util.Locale locale2 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withDefaultYear(0);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        java.lang.Appendable appendable8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime14.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime21 = property19.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        java.lang.String str30 = dateTimeFormatter22.print((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime21.toDateTime(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readablePeriod43);
        org.joda.time.DateTime dateTime46 = dateTime42.minusHours(2000);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        mutableDateTime47.setWeekOfWeekyear(52);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime47.dayOfMonth();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime47.monthOfYear();
        mutableDateTime47.setSecondOfDay(0);
        java.util.GregorianCalendar gregorianCalendar60 = mutableDateTime47.toGregorianCalendar();
        org.joda.time.Instant instant61 = mutableDateTime47.toInstant();
        boolean boolean62 = dateTime46.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateTime dateTime63 = dateTime46.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(appendable8, (org.joda.time.ReadableInstant) dateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str30, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(gregorianCalendar60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int2 = dateTimeFormatter1.getDefaultYear();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter1.withChronology(chronology10);
        java.lang.Integer int13 = dateTimeFormatter12.getPivotYear();
        org.joda.time.Chronology chronology14 = dateTimeFormatter12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.monthOfYear();
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(27820800000L, chronology14, locale16, (java.lang.Integer) 26710614, 26706);
        dateTimeParserBucket19.setOffset((java.lang.Integer) 2122);
        long long22 = dateTimeParserBucket19.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 27820797878L + "'", long22 == 27820797878L);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale9);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter6.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = dateTimeFormatter6.parseLocalTime("juin");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"juin\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514980270,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=40,MILLISECOND=270,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:40 AM +00:00" + "'", str7, "7:29:40 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeParser12);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("French");
        java.util.Locale.Builder builder5 = builder4.clear();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        int int15 = property13.getMaximumTextLength(locale14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime21.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        mutableDateTime26.add(durationFieldType30, (-1));
        org.joda.time.DateTime dateTime34 = dateTime21.withFieldAdded(durationFieldType30, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime37 = dateTime21.withDurationAdded(readableDuration35, 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = dateTimeZone38.getName(0L, locale40);
        java.util.Calendar calendar42 = dateTime37.toCalendar(locale40);
        java.lang.String str43 = locale14.getDisplayLanguage(locale40);
        java.lang.String str44 = locale14.getVariant();
        java.util.Set<java.lang.String> strSet45 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder46 = builder5.setLocale(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = dateTimeFormatter47.getPrinter();
        boolean boolean49 = dateTimeFormatter47.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter47.withPivotYear(28);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = dateTimeZone55.getOffset(readableInstant56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter51.withZone(dateTimeZone55);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.lang.String str70 = dateTimeField67.getAsShortText((long) 26666768, locale69);
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str75 = nameProvider71.getShortName(locale72, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.lang.String str76 = locale69.getDisplayCountry(locale72);
        boolean boolean77 = locale72.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter51.withLocale(locale72);
        java.util.Locale.Builder builder79 = builder46.setLocale(locale72);
        java.util.Locale locale80 = builder79.build();
        java.util.Locale locale81 = builder79.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder84 = builder79.setExtension('#', "2022-02-22T07:25:52.938Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-62194235419618,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=40,MILLISECOND=382,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "anglais" + "'", str43, "anglais");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimePrinter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "7" + "'", str70, "7");
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setDate(345600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.property(dateTimeFieldType3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale8 = dateTimeFormatter7.getLocale();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter7.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate23 = localDate17.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property24 = localDate17.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate17.withPeriodAdded(readablePeriod25, (int) ' ');
        org.joda.time.LocalDate localDate29 = localDate17.withCenturyOfEra(999);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate17.withPeriodAdded(readablePeriod30, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        boolean boolean42 = charSet38.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40);
        charSet38.clear();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        boolean boolean45 = charSet38.contains((java.lang.Object) locale44);
        java.lang.String str46 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDate32, locale44);
        org.joda.time.Chronology chronology47 = localDate32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 12, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) 464L, chronology47);
        boolean boolean50 = dateTimeFieldType3.isSupported(chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514980428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=40,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "22" + "'", str46, "22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        boolean boolean15 = dateTimeFieldType5.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology11.getZone();
        org.joda.time.DurationField durationField19 = chronology11.centuries();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        int int31 = dateTimeField28.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate39 = localDate33.withYear((int) (byte) 1);
        java.lang.String str40 = dateTimeFormatter32.print((org.joda.time.ReadablePartial) localDate39);
        java.util.Locale locale45 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str46 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDate39, (int) (short) -1, locale45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDate39.getFieldType((int) (short) 1);
        int int49 = localDate39.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime52 = localDate39.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.Chronology chronology53 = chronology11.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField54 = chronology53.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(26689450, 19045, 26692436, 39, (-469), chronology53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str40, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1" + "'", str46, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        int int10 = dateTimeParser9.estimateParsedLength();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        long long22 = chronology18.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.minuteOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime31.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology35 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfHalfday();
        java.util.Locale locale41 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean42 = locale41.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(2L, chronology35, locale41, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale46 = dateTimeParserBucket45.getLocale();
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 26678886, chronology18, locale46, (java.lang.Integer) 26667, 0);
        dateTimeParserBucket51.setPivotYear((java.lang.Integer) (-1035593280));
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str55 = dateTimeFieldType54.getName();
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder57.clear();
        java.util.Locale locale59 = builder58.build();
        dateTimeParserBucket51.saveField(dateTimeFieldType54, "2022-02-22T07:24:52.137Z", locale59);
        int int63 = dateTimeParser9.parseInto(dateTimeParserBucket51, "2026", 26728552);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket51.getChronology();
        dateTimeParserBucket51.setOffset(26905);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfYear();
        java.lang.String str75 = dateTimeField73.getAsText((long) ' ');
        long long78 = dateTimeField73.addWrapField(75324L, 266668);
        boolean boolean79 = dateTimeField73.isLenient();
        java.lang.String str81 = dateTimeField73.getAsShortText(26127360000000000L);
        dateTimeParserBucket51.saveField(dateTimeField73, 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 200L + "'", long22 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "millisOfDay" + "'", str55, "millisOfDay");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-26728553) + "'", int63 == (-26728553));
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 18835275324L + "'", long78 == 18835275324L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "30" + "'", str81, "30");
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology9);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        mutableDateTime22.setZoneRetainFields(dateTimeZone44);
        int int48 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter11.withChronology(chronology49);
        int int51 = dateTimeFormatter50.getDefaultYear();
        java.io.Writer writer52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 26700463);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 26668);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.monthOfYear();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((-1L), chronology59);
        java.lang.String str62 = dateTimeFormatter55.print((org.joda.time.ReadablePartial) localTime61);
        int int63 = localTime61.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter50.printTo(writer52, (org.joda.time.ReadablePartial) localTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "11:59:59 PM " + "'", str62, "11:59:59 PM ");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        long long13 = dateTimeField8.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDate14.getFieldType(1);
        int int19 = localDate14.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        boolean boolean27 = localDate14.isSupported(durationFieldType24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.LocalDate.Property property38 = localDate14.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        boolean boolean44 = mutableDateTime39.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str46 = mutableDateTime39.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter45.withLocale(locale48);
        java.lang.String str51 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate14, locale48);
        org.joda.time.LocalDate localDate53 = localDate14.minusWeeks(0);
        org.joda.time.LocalDate.Property property54 = localDate53.weekOfWeekyear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate57 = localDate55.minusWeeks(64666);
        org.joda.time.DateTime dateTime58 = localDate57.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 345600000L + "'", long13 == 345600000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514980653,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=40,MILLISECOND=653,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:29:40 AM +00:00" + "'", str46, "7:29:40 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "8" + "'", str51, "8");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDateTime();
        java.util.Locale locale11 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale15 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str16 = locale15.getDisplayVariant();
        java.lang.String str17 = locale11.getDisplayCountry(locale15);
        java.lang.String str18 = locale11.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getDisplayCountry();
        java.lang.String str21 = locale11.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter7.withLocale(locale11);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone24);
        int int28 = dateTimeFormatter22.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime25, "2022-02-22T07:24:37.028Z", 50);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        mutableDateTime30.add(durationFieldType34, (-1));
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableDateTime30.add(readablePeriod37, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime30.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime41.toMutableDateTimeISO();
        mutableDateTime42.setTime((long) 26666335);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        mutableDateTime42.setZoneRetainFields(dateTimeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) 2419226666L, dateTimeZone46);
        mutableDateTime25.setZoneRetainFields(dateTimeZone46);
        java.lang.String str51 = dateTimeZone46.getName(26676320L);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(26891450, 2604142, 26710930, 26927, 26853672, (int) (short) 10, 26941944, dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26927 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals(locale11.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str17, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str18, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str21, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-51) + "'", int28 == (-51));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int9 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localTime6.toDateTimeToday(dateTimeZone10);
        org.joda.time.LocalTime.Property property15 = localTime6.secondOfMinute();
        org.joda.time.DurationField durationField16 = property15.getLeapDurationField();
        org.joda.time.LocalTime localTime18 = property15.addCopy(113159L);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(113120L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        mutableDateTime1.addMillis(26709138);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = localDate5.getFieldType(1);
        int int10 = localDate5.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        boolean boolean18 = localDate5.isSupported(durationFieldType15);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField27.getType();
        org.joda.time.LocalDate.Property property29 = localDate5.property(dateTimeFieldType28);
        org.joda.time.LocalDate localDate31 = property29.addToCopy(26678886);
        org.joda.time.LocalDate localDate33 = localDate31.minusDays(52);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate37 = localDate34.withField(dateTimeFieldType35, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.LocalDate localDate46 = localDate33.withField(dateTimeFieldType43, (-26726620));
        org.joda.time.LocalDate localDate48 = localDate46.withWeekyear(26762585);
        org.joda.time.LocalDate localDate50 = localDate48.withWeekyear(26688);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        java.lang.String str52 = mutableDateTime51.toString();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutableDateTime53.add(readableDuration54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        mutableDateTime53.add(durationFieldType57, (-1));
        mutableDateTime51.add(durationFieldType57, 2);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime51.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.addWrapField(26747675);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime67 = property65.add(62135632800000L);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime68.add(readableDuration69);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.util.Calendar calendar72 = mutableDateTime68.toCalendar(locale71);
        boolean boolean73 = mutableDateTime68.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str75 = mutableDateTime68.toString(dateTimeFormatter74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime68.property(dateTimeFieldType76);
        int int78 = mutableDateTime67.get(dateTimeFieldType76);
        org.joda.time.LocalDate.Property property79 = localDate50.property(dateTimeFieldType76);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType76, 979);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 979 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:29:40.887Z" + "'", str52, "2022-02-22T07:29:40.887Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645514980887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=40,MILLISECOND=887,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "7:29:40 AM +00:00" + "'", str75, "7:29:40 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        int int5 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int8 = timeZone1.getOffset((long) 26679);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate9.getFieldType(1);
        int int14 = localDate9.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        mutableDateTime15.add(durationFieldType19, (-1));
        boolean boolean22 = localDate9.isSupported(durationFieldType19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDate9.getFieldTypes();
        java.lang.String str25 = localDate9.toString("7");
        org.joda.time.DateMidnight dateMidnight26 = localDate9.toDateMidnight();
        org.joda.time.LocalDate localDate28 = localDate9.minusMonths(99);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime42.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property47 = dateTime45.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology54 = localDate49.getChronology();
        org.joda.time.Chronology chronology55 = localDate49.getChronology();
        long long59 = chronology55.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime60 = dateTime48.toDateTime(chronology55);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(1L, chronology55, locale61, (java.lang.Integer) 718, 33);
        java.lang.String str66 = dateTimeZone32.getShortName(4260279330L, locale61);
        long long69 = dateTimeZone32.adjustOffset(0L, false);
        org.joda.time.Interval interval70 = localDate28.toInterval(dateTimeZone32);
        java.util.TimeZone timeZone71 = dateTimeZone32.toTimeZone();
        boolean boolean72 = timeZone1.hasSameRules(timeZone71);
        boolean boolean73 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset((-5));
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7" + "'", str25, "7");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 200L + "'", long59 == 200L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDate1.getFieldType(1);
        int int6 = localDate1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        mutableDateTime7.add(durationFieldType11, (-1));
        boolean boolean14 = localDate1.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDate1.getFieldTypes();
        java.lang.String str17 = localDate1.toString("7");
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(718);
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.DateTime dateTime21 = localDate1.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 20, dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.DateTime dateTime25 = dateTime22.minusSeconds(26756235);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime22.withSecondOfMinute(64863);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64863 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "7" + "'", str17, "7");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.718" + "'", str20, "+00:00:00.718");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet2 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet2, charArray1);
        java.util.Spliterator<java.lang.Character> charSpliterator4 = charSet2.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream8 = languageRangeList6.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap9);
        boolean boolean11 = charSet2.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6);
        charSet2.clear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        int int25 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "1", 1);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isFixed();
        mutableDateTime22.setZone(dateTimeZone38);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.DateTime dateTime44 = localDate43.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        boolean boolean46 = charSet2.equals((java.lang.Object) dateTime45);
        org.joda.time.DateTime.Property property47 = dateTime45.dayOfYear();
        org.joda.time.DateTime.Property property48 = dateTime45.millisOfDay();
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSpliterator4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeStream8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property12 = dateTime10.property(dateTimeFieldType11);
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.Chronology chronology20 = localDate14.getChronology();
        long long24 = chronology20.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(chronology20);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(1L, chronology20, locale26, (java.lang.Integer) 718, 33);
        java.lang.String str33 = nameProvider0.getShortName(locale26, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)", "2022-02-22T07:24:28.689Z");
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        int int45 = dateTimeField42.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate53 = localDate47.withYear((int) (byte) 1);
        java.lang.String str54 = dateTimeFormatter46.print((org.joda.time.ReadablePartial) localDate53);
        java.util.Locale locale59 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str60 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDate53, (int) (short) -1, locale59);
        java.lang.String str61 = dateTimeField42.getName();
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.lang.String str64 = locale63.getDisplayCountry();
        java.lang.String str65 = dateTimeField42.getAsText((-1L), locale63);
        java.util.Locale locale69 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale73 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str74 = locale73.getDisplayVariant();
        java.lang.String str75 = locale69.getDisplayCountry(locale73);
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.lang.String str77 = locale76.getDisplayCountry();
        java.lang.String str78 = locale73.getDisplayCountry(locale76);
        int int79 = dateTimeField42.getMaximumTextLength(locale76);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        boolean boolean83 = dateTimeZone81.equals((java.lang.Object) locale82);
        java.lang.String str84 = dateTimeField42.getAsShortText(26666570, locale82);
        java.lang.String str87 = nameProvider0.getShortName(locale82, "2022-02-21T00:00:00.000Z", "eng");
        java.util.Locale.Builder builder88 = new java.util.Locale.Builder();
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder90 = builder88.setLocale(locale89);
        java.util.Locale locale91 = builder90.build();
        java.lang.String str94 = nameProvider0.getName(locale91, "86399999", "");
        java.util.Locale locale95 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str98 = nameProvider0.getName(locale95, "2022-02-22T07:28:08.574Z", "2022-02-22T07:25:01.560Z");
        java.lang.String str99 = locale95.getDisplayScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 200L + "'", long24 == 200L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str54, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale59.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1" + "'", str60, "-1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "weekOfWeekyear" + "'", str61, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertEquals(locale69.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str75, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "-1");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str78, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "26666570" + "'", str84, "26666570");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "fr_CA");
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        int int6 = dateTimeFormatter5.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime9, "1", 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter0.withZone(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        int int31 = localDate30.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate33 = localDate30.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate35 = localDate33.minusDays((int) 'a');
        java.lang.String str36 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate33);
        java.lang.StringBuffer stringBuffer37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        int int39 = localDate38.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate41 = localDate38.withYearOfEra(27);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays(26666335);
        int int44 = localDate41.getYear();
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtCurrentTime();
        int int46 = dateTime45.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer37, (org.joda.time.ReadableInstant) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str36, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 27 + "'", int44 == 27);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 29 + "'", int46 == 29);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.Interval interval39 = localDate9.toInterval(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime8.toDateTime(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter41.withChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime8.toDateTime(chronology50);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime60.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime67 = property65.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate75 = localDate69.withYear((int) (byte) 1);
        java.lang.String str76 = dateTimeFormatter68.print((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        boolean boolean86 = dateTimeZone77.equals((java.lang.Object) dateTimeZone84);
        org.joda.time.DateTime dateTime87 = localDate75.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime67.toDateTime(dateTimeZone84);
        long long90 = dateTimeZone84.nextTransition(1600012620000L);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) dateTime54, dateTimeZone84);
        org.joda.time.DateTime.Property property92 = dateTime91.millisOfSecond();
        org.joda.time.DateTime dateTime94 = dateTime91.minusMinutes(26763715);
        org.joda.time.DateTime.Property property95 = dateTime94.dayOfWeek();
        org.joda.time.DateTime dateTime96 = property95.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime98 = property95.setCopy("+10:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+10:00\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDate75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str76, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1600012620000L + "'", long90 == 1600012620000L);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.setCopy(27);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = localTime7.toDateTimeToday(dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime7.minusHours(467);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate12.withYear((int) (byte) 1);
        org.joda.time.Interval interval19 = localDate12.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.fullTime();
        java.lang.String str21 = localDate12.toString(dateTimeFormatter20);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime11.compareTo((org.joda.time.ReadablePartial) localDate12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        java.lang.String str9 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int13 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "1", 1);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter1.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(1868400000043251L, dateTimeZone26);
        long long33 = dateTimeZone26.previousTransition(29230001805L);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-2) + "'", int13 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 29230001805L + "'", long33 == 29230001805L);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53937223);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate10.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone19.getMillisKeepLocal(dateTimeZone22, (long) 2);
        boolean boolean26 = dateTimeZone19.equals((java.lang.Object) "2022-02-22T07:24:26.446Z");
        mutableDateTime2.setZoneRetainFields(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime2.add(readablePeriod28, 8);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekOfWeekyear();
        int int42 = dateTimeField39.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate50 = localDate44.withYear((int) (byte) 1);
        java.lang.String str51 = dateTimeFormatter43.print((org.joda.time.ReadablePartial) localDate50);
        java.util.Locale locale56 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str57 = dateTimeField39.getAsText((org.joda.time.ReadablePartial) localDate50, (int) (short) -1, locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDate50.getFieldType((int) (short) 1);
        boolean boolean60 = mutableDateTime2.isSupported(dateTimeFieldType59);
        java.lang.String str61 = dateTimeFieldType59.getName();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType59.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate64 = localDate1.withField(dateTimeFieldType59, (-367));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -367 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514981560,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=41,MILLISECOND=560,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str51, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "monthOfYear" + "'", str61, "monthOfYear");
        org.junit.Assert.assertNotNull(durationFieldType62);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(40);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        boolean boolean21 = dateTimeFieldType11.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology17.getZone();
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfHalfday();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology17);
        int int28 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTime dateTime29 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        long long41 = dateTimeField38.addWrapField((long) ' ', 0);
        long long43 = dateTimeField38.roundCeiling((long) (short) 10);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDate44.getFieldType(1);
        int int49 = localDate44.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime50.add(readableDuration51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        mutableDateTime50.add(durationFieldType54, (-1));
        boolean boolean57 = localDate44.isSupported(durationFieldType54);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField66.getType();
        org.joda.time.LocalDate.Property property68 = localDate44.property(dateTimeFieldType67);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Calendar calendar73 = mutableDateTime69.toCalendar(locale72);
        boolean boolean74 = mutableDateTime69.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str76 = mutableDateTime69.toString(dateTimeFormatter75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        boolean boolean79 = dateTimeZone77.equals((java.lang.Object) locale78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter75.withLocale(locale78);
        java.lang.String str81 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDate44, locale78);
        int int82 = localDate44.getYear();
        boolean boolean83 = localDate10.isAfter((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTime dateTime84 = localDate10.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate86 = localDate10.minusDays(0);
        java.lang.String str87 = localDate10.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 345600000L + "'", long43 == 345600000L);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645514981594,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=41,MILLISECOND=594,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "7:29:41 AM +00:00" + "'", str76, "7:29:41 AM +00:00");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "8" + "'", str81, "8");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2018-10-22" + "'", str87, "2018-10-22");
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology6);
        mutableDateTime12.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int18 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology26);
        mutableDateTime12.setChronology(chronology26);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DurationField durationField33 = chronology26.millis();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology26.add(readablePeriod34, (long) 30461931, 46);
        org.joda.time.DurationField durationField38 = chronology26.years();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = durationField38.getMillis(1645514878143L, (long) 26666768);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514878143");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "year" + "'", str16, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2000 + "'", int18 == 2000);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 30461931L + "'", long37 == 30461931L);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology13);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfMonth(4);
        org.joda.time.DateTime dateTime24 = dateTime20.withEra(0);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate30 = localDate27.withField(dateTimeFieldType28, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime32.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property37 = dateTime35.property(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime39 = property37.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate47 = localDate41.withYear((int) (byte) 1);
        java.lang.String str48 = dateTimeFormatter40.print((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        boolean boolean58 = dateTimeZone49.equals((java.lang.Object) dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDate47.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime39.toDateTime(dateTimeZone56);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now(dateTimeZone56);
        org.joda.time.LocalDate localDate63 = localDate61.withWeekyear((-26701900));
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.centuryOfEra();
        org.joda.time.DurationField durationField72 = chronology70.millis();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.weekyearOfCentury();
        long long75 = dateTimeField73.roundHalfEven((long) 45);
        java.util.Locale.Category category77 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale78 = java.util.Locale.getDefault(category77);
        org.joda.time.tz.NameProvider nameProvider79 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.lang.String str83 = nameProvider79.getShortName(locale80, "2022-02-22T07:24:27.293Z", "0003-06-21T17:56:37.365Z");
        java.util.Set<java.lang.String> strSet84 = locale80.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category77, locale80);
        java.lang.String str86 = dateTimeField73.getAsShortText(503, locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = dateTimeField73.getType();
        int int88 = localDate61.get(dateTimeFieldType87);
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType87.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime91 = dateTime26.withField(dateTimeFieldType87, 26753635);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26753635 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str48, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + category77 + "' != '" + java.util.Locale.Category.FORMAT + "'", category77.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "53");
        org.junit.Assert.assertNotNull(nameProvider79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "503" + "'", str86, "503");
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 22 + "'", int88 == 22);
        org.junit.Assert.assertNotNull(durationFieldType89);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded((long) 26666570, (int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime21.plus(readableDuration26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.Chronology chronology29 = dateTime27.getChronology();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property33 = localDate30.era();
        org.joda.time.DateMidnight dateMidnight34 = localDate30.toDateMidnight();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("");
        java.lang.String str38 = timeZone37.getID();
        java.lang.String str39 = timeZone37.getID();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 53, dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) 26, true);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight34.toMutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        boolean boolean57 = dateTimeFieldType47.isSupported(chronology53);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.DateTimeZone dateTimeZone60 = chronology53.getZone();
        org.joda.time.DurationField durationField61 = chronology53.centuries();
        org.joda.time.DateTimeField dateTimeField62 = chronology53.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = chronology53.era();
        org.joda.time.DateTimeField dateTimeField64 = chronology53.millisOfSecond();
        mutableDateTime45.setChronology(chronology53);
        mutableDateTime45.addMillis(257);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        long long71 = dateTimeZone68.adjustOffset((long) 26710930, true);
        org.joda.time.DateTime dateTime72 = mutableDateTime45.toDateTime(dateTimeZone68);
        java.lang.String str74 = dateTimeZone68.getName((long) 26674492);
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        org.joda.time.Chronology chronology76 = chronology29.withZone(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GMT" + "'", str38, "GMT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GMT" + "'", str39, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 26L + "'", long44 == 26L);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 26710930L + "'", long71 == 26710930L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology20 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean27 = locale26.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(2L, chronology20, locale26, (java.lang.Integer) (-2), (int) 'a');
        int int33 = dateTimeParser9.parseInto(dateTimeParserBucket30, "", 4);
        java.util.Locale locale34 = dateTimeParserBucket30.getLocale();
        dateTimeParserBucket30.setOffset(100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = dateTimeZone38.getName(0L, locale40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 26666, dateTimeZone38);
        long long46 = dateTimeZone38.convertLocalToUTC((long) 88, false, (long) (-26682));
        long long49 = dateTimeZone38.adjustOffset(1645514750201L, false);
        dateTimeParserBucket30.setZone(dateTimeZone38);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDate localDate53 = localDate51.plus(readablePeriod52);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-5) + "'", int33 == (-5));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 88L + "'", long46 == 88L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514750201L + "'", long49 == 1645514750201L);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        java.lang.String str11 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        int int13 = dateTimeParser12.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser12);
        java.lang.Integer int15 = dateTimeFormatter14.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) int15);
        int int17 = mutableDateTime16.getMillisOfDay();
        mutableDateTime16.addMillis((int) (byte) 0);
        mutableDateTime16.setTime(27738594L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str11, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNull(int15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26981808 + "'", int17 == 26981808);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        int int20 = localDate18.getYear();
        org.joda.time.LocalDate localDate22 = localDate18.minusWeeks((int) (byte) -1);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property24 = localDate22.dayOfWeek();
        int int25 = property24.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "-1");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514981837,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=41,MILLISECOND=837,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:41 AM +00:00" + "'", str7, "7:29:41 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDate0.getFieldType(1);
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        boolean boolean13 = localDate0.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate0.getFieldTypes();
        java.lang.String str16 = localDate0.toString("7");
        org.joda.time.DateMidnight dateMidnight17 = localDate0.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatter18.getPrinter();
        boolean boolean20 = dateTimeFormatter18.isParser();
        boolean boolean21 = dateTimeFormatter18.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        java.lang.String str24 = dateMidnight17.toString(dateTimeFormatter22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        boolean boolean58 = dateTimeZone49.isFixed();
        long long60 = dateTimeZone49.convertUTCToLocal((long) (short) 10);
        java.util.TimeZone timeZone61 = dateTimeZone49.toTimeZone();
        java.time.ZoneId zoneId62 = timeZone61.toZoneId();
        timeZone61.setRawOffset(2000);
        java.util.TimeZone.setDefault(timeZone61);
        java.time.ZoneId zoneId66 = timeZone61.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight17.toMutableDateTime(dateTimeZone67);
        boolean boolean69 = dateTimeZone67.isFixed();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimePrinter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Feb 22, 2022" + "'", str24, "Feb 22, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertNotNull(zoneId66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int3 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.monthOfYear();
        int int19 = dateTimeField16.getDifference(30564893L, (long) 26934248);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate7 = localDate4.withField(dateTimeFieldType5, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.plus((long) 182);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(58);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate15.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property22 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate23 = property22.roundFloorCopy();
        org.joda.time.LocalDate localDate24 = property22.roundFloorCopy();
        java.lang.String str25 = localDate24.toString();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime31.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime dateTime38 = dateTime35.withField(dateTimeFieldType36, 26666);
        org.joda.time.LocalDate localDate40 = localDate24.withField(dateTimeFieldType36, (int) ' ');
        org.joda.time.LocalDate localDate42 = localDate24.withYear((int) (short) -1);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate44 = localDate24.withFields((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType45.getRangeDurationType();
        org.joda.time.LocalDate.Property property48 = localDate44.property(dateTimeFieldType45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int50 = dateTimeFormatter49.getDefaultYear();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter49.withChronology(chronology58);
        java.lang.Integer int61 = dateTimeFormatter60.getPivotYear();
        org.joda.time.Chronology chronology62 = dateTimeFormatter60.getChronolgy();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType45.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.dayOfYear();
        org.joda.time.DateTime dateTime65 = dateTime14.toDateTime(chronology62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(82, 26738, 26842, 0, chronology62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-01-01" + "'", str25, "2022-01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNull(durationFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2000 + "'", int50 == 2000);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology9 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate11.getFieldType(1);
        int int16 = localDate11.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        boolean boolean24 = localDate11.isSupported(durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDate11.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate11.plus(readablePeriod26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale29 = dateTimeFormatter28.getLocale();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter28.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyearOfCentury();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate40.equals((java.lang.Object) (byte) 10);
        int[] intArray49 = new int[] { 26666877, 24, 26, 27268320, 1970, 2000 };
        int int50 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDate40, intArray49);
        int int51 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate27, intArray49);
        org.joda.time.LocalDate localDate53 = localDate27.withYear((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localDate53.getValue(166);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 166");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[26666877, 24, 26, 27268320, 1970, 2000]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        java.lang.String str14 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int18 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", 1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        boolean boolean34 = dateTimeZone31.isFixed();
        mutableDateTime15.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime5.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear(2022);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.withPeriodAdded(readablePeriod39, 31);
        int int42 = dateTime41.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2) + "'", int18 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        java.lang.String str9 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        boolean boolean19 = dateTimeZone10.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDate8.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime.Property property21 = dateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = property21.addWrapFieldToCopy(26666570);
        org.joda.time.DateTime dateTime25 = property21.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra((int) '#');
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight29 = dateTime25.toDateMidnight();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property33 = localDate30.era();
        org.joda.time.LocalDate localDate35 = localDate30.plusWeeks(97200000);
        org.joda.time.LocalDate.Property property36 = localDate30.dayOfWeek();
        org.joda.time.Chronology chronology37 = localDate30.getChronology();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight29.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime46.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology50 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfHalfday();
        java.util.Locale locale56 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean57 = locale56.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(2L, chronology50, locale56, (java.lang.Integer) (-2), (int) 'a');
        java.lang.String str61 = locale56.toLanguageTag();
        java.util.Set<java.lang.String> strSet62 = locale56.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet63 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale locale67 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale71 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str72 = locale71.getDisplayVariant();
        java.lang.String str73 = locale67.getDisplayCountry(locale71);
        java.lang.String str74 = locale67.getDisplayName();
        java.lang.String str75 = locale56.getDisplayVariant(locale67);
        java.util.Locale.Builder builder76 = new java.util.Locale.Builder();
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder78 = builder76.setLocale(locale77);
        java.util.Locale locale79 = builder76.build();
        java.util.Locale locale80 = builder76.build();
        java.lang.String str81 = locale67.getDisplayCountry(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(19353600000L, chronology37, locale80);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "und" + "'", str61, "und");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals(locale67.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale71.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str73, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)" + "'", str74, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str81, "PROPERTY[MILLISOFDAY]");
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        java.util.Locale locale16 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        boolean boolean17 = locale16.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(2L, chronology10, locale16, (java.lang.Integer) (-2), (int) 'a');
        java.util.Locale locale21 = dateTimeParserBucket20.getLocale();
        long long24 = dateTimeParserBucket20.computeMillis(false, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 12:00:00 AM");
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property34 = localDate27.yearOfEra();
        org.joda.time.LocalDate localDate35 = property34.roundFloorCopy();
        org.joda.time.LocalDate localDate36 = property34.withMaximumValue();
        int int37 = localDate36.getEra();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime43.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property48 = dateTime46.property(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = property48.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime50 = property48.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (short) -1);
        boolean boolean56 = localDate52.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate58 = localDate52.withYear((int) (byte) 1);
        java.lang.String str59 = dateTimeFormatter51.print((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        boolean boolean69 = dateTimeZone60.equals((java.lang.Object) dateTimeZone67);
        org.joda.time.DateTime dateTime70 = localDate58.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime50.toDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = localDate36.toDateTimeAtMidnight(dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) (byte) 1, dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 26676070, dateTimeZone67);
        dateTimeParserBucket20.setZone(dateTimeZone67);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 26668);
        int int78 = dateTimeParserBucket20.getOffset();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDate58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str59, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 26668 + "'", int78 == 26668);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("27");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style character: 2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        int int22 = dateTimeField19.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate30 = localDate24.withYear((int) (byte) 1);
        java.lang.String str31 = dateTimeFormatter23.print((org.joda.time.ReadablePartial) localDate30);
        java.util.Locale locale36 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str37 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDate30, (int) (short) -1, locale36);
        java.lang.String str38 = dateTimeField19.getName();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.lang.String str41 = locale40.getDisplayCountry();
        java.lang.String str42 = dateTimeField19.getAsText((-1L), locale40);
        java.util.Locale locale46 = new java.util.Locale("2022-02-22T07:24:26.446Z", "Property[millisOfDay]", "00:00:02.021");
        java.util.Locale locale50 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str51 = locale50.getDisplayVariant();
        java.lang.String str52 = locale46.getDisplayCountry(locale50);
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.lang.String str54 = locale53.getDisplayCountry();
        java.lang.String str55 = locale50.getDisplayCountry(locale53);
        int int56 = dateTimeField19.getMaximumTextLength(locale53);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        boolean boolean60 = dateTimeZone58.equals((java.lang.Object) locale59);
        java.lang.String str61 = dateTimeField19.getAsShortText(26666570, locale59);
        long long63 = dateTimeField19.roundCeiling(999L);
        java.util.Locale locale65 = new java.util.Locale("2022-02-22T07:24:42.113Z");
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField74 = chronology71.weekOfWeekyear();
        int int77 = dateTimeField74.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale88 = java.util.Locale.ENGLISH;
        boolean boolean89 = dateTimeZone87.equals((java.lang.Object) locale88);
        java.lang.String str90 = dateTimeZone84.getName((long) 'a', locale88);
        int int91 = dateTimeField74.getMaximumTextLength(locale88);
        java.lang.String str92 = locale65.getDisplayName(locale88);
        int int93 = dateTimeField19.getMaximumShortTextLength(locale88);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket((long) 26680129, chronology7, locale88, (java.lang.Integer) (-1645514694), 21);
        long long98 = dateTimeParserBucket96.computeMillis(false);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str31, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1" + "'", str37, "-1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "weekOfWeekyear" + "'", str38, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str41, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertEquals(locale46.toString(), "2022-02-22t07:24:26.446z_PROPERTY[MILLISOFDAY]_00:00:02.021");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str52, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str54, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str55, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "26666570" + "'", str61, "26666570");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 345600000L + "'", long63 == 345600000L);
        org.junit.Assert.assertEquals(locale65.toString(), "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-22t07:24:42.113z" + "'", str92, "2022-02-22t07:24:42.113z");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 26680129L + "'", long98 == 26680129L);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter13.print((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime12.toDateTime(dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.minus(readablePeriod34);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        int int37 = dateTime35.getMinuteOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusHours(26860369);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str21, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        int int11 = dateTimeField8.getDifference((long) (byte) 0, (long) 26666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withYear((int) (byte) 1);
        java.lang.String str20 = dateTimeFormatter12.print((org.joda.time.ReadablePartial) localDate19);
        java.util.Locale locale25 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str26 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate19, (int) (short) -1, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDate19.getFieldType((int) (short) 1);
        int int29 = localDate19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDate19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate localDate33 = localDate19.withCenturyOfEra(24);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        org.joda.time.LocalDate localDate37 = property34.setCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekOfWeekyear();
        long long50 = dateTimeField47.addWrapField((long) ' ', 0);
        long long52 = dateTimeField47.roundHalfCeiling((long) (byte) -1);
        java.lang.String str53 = dateTimeField47.getName();
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.lang.String str56 = dateTimeField47.getAsText(5819995L, locale55);
        java.lang.String str57 = dateTimeField47.getName();
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate64 = localDate61.withField(dateTimeFieldType62, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime66.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property71 = dateTime69.property(dateTimeFieldType70);
        org.joda.time.DateTime dateTime72 = property71.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate75 = localDate73.minusMonths((int) (short) -1);
        boolean boolean77 = localDate73.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology78 = localDate73.getChronology();
        org.joda.time.Chronology chronology79 = localDate73.getChronology();
        long long83 = chronology79.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime84 = dateTime72.toDateTime(chronology79);
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.lang.String str86 = locale85.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(1L, chronology79, locale85, (java.lang.Integer) 718, 33);
        java.lang.String str92 = nameProvider59.getShortName(locale85, "2022-02-22t07:24:26.446z (PROPERTY[MILLISOFDAY],00:00:02.021)", "2022-02-22T07:24:28.689Z");
        java.util.Locale locale93 = java.util.Locale.ROOT;
        java.lang.String str96 = nameProvider59.getShortName(locale93, "7:24:35 AM +00:00", "7:24:39 AM +00:00");
        java.lang.String str97 = dateTimeField47.getAsShortText(2021L, locale93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate98 = property34.setCopy("July 6, 2021 7:27:41 AM +00:00", locale93);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"July 6, 2021 7:27:41 AM +00:00\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str20, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1" + "'", str26, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 32L + "'", long50 == 32L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-259200000L) + "'", long52 == (-259200000L));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "weekOfWeekyear" + "'", str53, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "weekOfWeekyear" + "'", str57, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(nameProvider59);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 200L + "'", long83 == 200L);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "1" + "'", str97, "1");
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        java.util.Locale locale3 = dateTimeFormatter1.getLocale();
        boolean boolean4 = dateTimeFormatter1.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        mutableDateTime5.setMillis(readableInstant14);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime5.secondOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime5.add(readableDuration18);
        int int22 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime5, "2022-02-22T07:24:42.673Z", (int) '4');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.plus((-48469999L));
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime.Property property34 = dateTime32.era();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekOfWeekyear();
        org.joda.time.DateTime dateTime43 = dateTime32.withChronology(chronology40);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks(33);
        java.lang.String str47 = dateTimeFormatter1.print((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeFormatter1.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter1.withDefaultYear(26673922);
        boolean boolean51 = dateTimeFormatter50.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.parse("07:25:08 +00:00", dateTimeFormatter50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"07:25:08 +00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(locale2);
        org.junit.Assert.assertNull(locale3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514982470,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=42,MILLISECOND=470,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-53) + "'", int22 == (-53));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0003-06-21T18:01:52.471Z" + "'", str33, "0003-06-21T18:01:52.471Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "July 6, 2021 7:29:42 AM +00:00" + "'", str47, "July 6, 2021 7:29:42 AM +00:00");
        org.junit.Assert.assertNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(26666);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.getMutableDateTime();
        mutableDateTime16.setMinuteOfHour((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableDateTime16.add(readablePeriod19, 26691926);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDate22.getFieldType(1);
        int int27 = localDate22.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        mutableDateTime28.add(durationFieldType32, (-1));
        boolean boolean35 = localDate22.isSupported(durationFieldType32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDate22.getFieldTypes();
        java.lang.String str38 = localDate22.toString("7");
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(718);
        java.lang.String str41 = dateTimeZone40.getID();
        org.joda.time.DateTime dateTime42 = localDate22.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis(27268320);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime45.add(readableDuration46);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Calendar calendar49 = mutableDateTime45.toCalendar(locale48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTime(readableInstant54);
        mutableDateTime45.setMillis(readableInstant54);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime45.secondOfDay();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime45.add(readableDuration58);
        mutableDateTime45.setMillisOfDay(53);
        mutableDateTime45.addMinutes((-1));
        int int64 = mutableDateTime45.getSecondOfMinute();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property68 = localDate65.era();
        org.joda.time.LocalDate localDate69 = property68.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int71 = localDate69.get(dateTimeFieldType70);
        int int72 = mutableDateTime45.get(dateTimeFieldType70);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate75 = localDate73.minusMonths((int) (short) -1);
        boolean boolean77 = localDate73.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology78 = localDate73.getChronology();
        long long84 = chronology78.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.Chronology chronology85 = chronology78.withUTC();
        org.joda.time.Chronology chronology86 = chronology85.withUTC();
        org.joda.time.DurationField durationField87 = chronology86.halfdays();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.era();
        org.joda.time.DateTimeField dateTimeField89 = chronology86.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType70.getField(chronology86);
        boolean boolean91 = dateTime42.isSupported(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType70.getDurationType();
        boolean boolean93 = mutableDateTime16.isSupported(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514982635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=42,MILLISECOND=635,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7" + "'", str38, "7");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.718" + "'", str41, "+00:00:00.718");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645514982635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=42,MILLISECOND=635,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-48469999L) + "'", long84 == (-48469999L));
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter10.getPrinter();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Calendar calendar16 = mutableDateTime12.toCalendar(locale15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter10.withLocale(locale15);
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter10.withLocale(locale18);
        java.lang.Integer int20 = dateTimeFormatter19.getPivotYear();
        int int21 = dateTimeFormatter19.getDefaultYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusMillis(8);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusSeconds(47);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int37 = localDateTime35.get(dateTimeFieldType36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        java.lang.String str39 = dateTimeFormatter19.print((org.joda.time.ReadablePartial) localDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = localDate9.isAfter((org.joda.time.ReadablePartial) localDateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514982781,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=42,MILLISECOND=781,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Tuesday, February 22, 2022" + "'", str39, "Tuesday, February 22, 2022");
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        mutableDateTime15.setMillis(readableInstant24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime15.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property27.add(26666);
        org.joda.time.MutableDateTime mutableDateTime31 = property27.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime33 = property27.addWrapField(1);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime35 = property34.getMutableDateTime();
        int int36 = property13.compareTo((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime35.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 1);
        long long43 = dateTimeZone39.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(1645572479999L, dateTimeZone39);
        int int45 = mutableDateTime35.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property46 = dateTime44.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        boolean boolean52 = mutableDateTime47.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str54 = mutableDateTime47.toString(dateTimeFormatter53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate61 = localDate55.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property62 = localDate55.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDate localDate65 = localDate55.withPeriodAdded(readablePeriod63, (int) ' ');
        java.lang.String str66 = dateTimeFormatter53.print((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.Chronology chronology67 = localDate65.getChronology();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = chronology67.add(readablePeriod68, (-62135596800000L), 17);
        org.joda.time.DateTimeField dateTimeField72 = chronology67.dayOfMonth();
        int int74 = dateTimeField72.getMinimumValue((long) 26726619);
        java.util.Locale locale77 = new java.util.Locale("2022-02-22T07:24:50.863Z");
        java.lang.String str78 = dateTimeField72.getAsText((-2303769599957L), locale77);
        int int79 = property46.getMaximumShortTextLength(locale77);
        java.util.Locale locale80 = null;
        java.lang.String str81 = locale77.getDisplayCountry(locale80);
        java.lang.String str82 = locale77.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514982824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=42,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645514982824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=42,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "7:29:42 AM +00:00" + "'", str54, "7:29:42 AM +00:00");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str66, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-62135596800000L) + "'", long71 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals(locale77.toString(), "2022-02-22t07:24:50.863z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "30" + "'", str78, "30");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22t07:24:50.863z" + "'", str82, "2022-02-22t07:24:50.863z");
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.LocalDate localDate21 = localDate7.minusYears(2000);
        org.joda.time.LocalDate.Property property22 = localDate7.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = property22.setCopy("0003-06-21T17:58:48.055Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0003-06-21T17:58:48.055Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter1.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.parse("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"22.02.0001 ??:??:??\" is malformed at \".02.0001 ??:??:??\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeZone2);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = mutableDateTime0.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, (int) ' ');
        java.lang.String str19 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localDate18);
        boolean boolean20 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int22 = dateTimeFormatter21.getDefaultYear();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter21.withChronology(chronology30);
        java.lang.Integer int33 = dateTimeFormatter32.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate41 = localDate35.withYear((int) (byte) 1);
        java.lang.String str42 = dateTimeFormatter34.print((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        int int46 = dateTimeFormatter34.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime43, "1", 1);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        boolean boolean62 = dateTimeZone59.isFixed();
        mutableDateTime43.setZone(dateTimeZone59);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        mutableDateTime43.setZoneRetainFields(dateTimeZone65);
        int int69 = dateTimeFormatter32.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime43, "2022-02-22T07:34:29.436", (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter32.withPivotYear((java.lang.Integer) 865);
        org.joda.time.Chronology chronology72 = dateTimeFormatter71.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter6.withChronology(chronology72);
        org.joda.time.Chronology chronology74 = dateTimeFormatter73.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter73.withPivotYear((java.lang.Integer) 26764083);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514982982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=29,SECOND=42,MILLISECOND=982,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:29:42 AM +00:00" + "'", str7, "7:29:42 AM +00:00");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str19, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str42, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2) + "'", int46 == (-2));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime20 = dateTime15.minusMinutes((int) (short) 1);
        org.joda.time.Days days21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property22 = dateTime13.minuteOfDay();
        org.joda.time.Duration duration25 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = dateTime27.isSupported(dateTimeFieldType29);
        org.joda.time.Period period31 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.secondOfMinute();
        org.joda.time.Chronology chronology42 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DurationField durationField44 = durationFieldType32.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime27.toMutableDateTime(chronology42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 473, chronology42);
        org.joda.time.DateTime dateTime48 = dateTime13.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField49 = chronology42.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        boolean boolean6 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter2.getParser();
        java.util.Locale locale9 = new java.util.Locale("");
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter2.withLocale(locale9);
        org.joda.time.Hours hours11 = org.joda.time.Hours.ONE;
        org.joda.time.PeriodType periodType12 = hours11.getPeriodType();
        org.joda.time.Hours hours13 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours14 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours15 = hours13.plus(hours14);
        org.joda.time.Hours hours16 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours17 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours18 = hours16.plus(hours17);
        org.joda.time.Hours hours19 = hours14.minus(hours17);
        org.joda.time.Hours hours21 = hours19.dividedBy((int) '4');
        boolean boolean22 = hours11.isLessThan(hours19);
        org.joda.time.Hours hours24 = hours19.plus(78623298);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = periodFormatter2.print((org.joda.time.ReadablePeriod) hours19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(hours24);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(1970, 244, 24289659, 4, 26327, 56, 26387971, 0, periodType8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.parse("PT2147483647S");
        long long12 = duration11.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime.Property property18 = dateTime14.secondOfMinute();
        org.joda.time.Period period19 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Hours hours20 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours21 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours22 = hours20.plus(hours21);
        org.joda.time.DurationFieldType durationFieldType23 = hours20.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.secondOfMinute();
        org.joda.time.Chronology chronology34 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology34.millis();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1, chronology34);
        boolean boolean38 = durationFieldType23.isSupported(chronology34);
        org.joda.time.Period period40 = period19.withField(durationFieldType23, 16);
        boolean boolean41 = period9.isSupported(durationFieldType23);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 596523L + "'", long12 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("2022-02-22T06:43:06.780+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:43:06.780+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        int int28 = mutablePeriod3.getMinutes();
        mutablePeriod3.addYears(26270300);
        int int31 = mutablePeriod3.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26270300 + "'", int31 == 26270300);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 22);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate13 = dateTime11.toLocalDate();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.Period period23 = period20.plusMinutes((int) (byte) 0);
        mutablePeriod17.mergePeriod((org.joda.time.ReadablePeriod) period20);
        mutablePeriod17.addMonths((int) 'u');
        mutablePeriod17.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusYears((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime33.dayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime33.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property40 = dateTime33.secondOfMinute();
        org.joda.time.Chronology chronology41 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology41);
        org.joda.time.DurationField durationField44 = chronology41.months();
        mutablePeriod17.setPeriod((long) 1814400, chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.weekyearOfCentury();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Days days49 = org.joda.time.Days.daysIn(readableInterval48);
        org.joda.time.Duration duration50 = days49.toStandardDuration();
        org.joda.time.Duration duration51 = duration50.toDuration();
        org.joda.time.ReadableDuration readableDuration52 = null;
        boolean boolean53 = duration51.isLongerThan(readableDuration52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Days days55 = org.joda.time.Days.daysIn(readableInterval54);
        org.joda.time.Duration duration56 = days55.toStandardDuration();
        org.joda.time.Duration duration57 = duration56.toDuration();
        org.joda.time.ReadableDuration readableDuration58 = null;
        boolean boolean59 = duration57.isLongerThan(readableDuration58);
        boolean boolean60 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMillis((int) ' ');
        int int65 = dateTime62.getEra();
        org.joda.time.DateTime dateTime67 = dateTime62.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime69 = dateTime62.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval70 = duration51.toIntervalTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime72 = dateTime62.minusMinutes(14);
        org.joda.time.TimeOfDay timeOfDay73 = dateTime62.toTimeOfDay();
        int int74 = dateTimeField47.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds75 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) timeOfDay73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 99 + "'", int74 == 99);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        org.joda.time.Hours hours0 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours2 = hours0.dividedBy((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        org.joda.time.Hours hours5 = hours2.dividedBy(437);
        org.joda.time.Hours hours7 = hours5.minus(0);
        java.lang.String str8 = hours5.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0H" + "'", str8, "PT0H");
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        int int14 = dateTimeField12.getMinimumValue((long) (byte) 0);
        java.lang.String str15 = dateTimeField12.toString();
        org.joda.time.DurationField durationField16 = dateTimeField12.getRangeDurationField();
        long long19 = dateTimeField12.add(1645514315707L, (-259200000L));
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField12.set(1645514399410L, "437");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 437 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str15, "DateTimeField[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1386314315707L + "'", long19 == 1386314315707L);
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekOfWeekyear();
        java.lang.String str12 = dateTimeField11.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weekOfWeekyear" + "'", str12, "weekOfWeekyear");
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.Period period5 = period3.withDays((int) '#');
        int int6 = period5.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.secondOfMinute();
        org.joda.time.Chronology chronology19 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusSeconds((int) (short) 1);
        org.joda.time.Days days28 = period27.toStandardDays();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Days days30 = org.joda.time.Days.daysIn(readableInterval29);
        java.lang.String str31 = days30.toString();
        boolean boolean32 = days28.isGreaterThan(days30);
        long long35 = chronology19.add((org.joda.time.ReadablePeriod) days30, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField36 = chronology19.hourOfHalfday();
        org.joda.time.DateTime dateTime37 = dateTime9.toDateTime(chronology19);
        org.joda.time.DateTime.Property property38 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime9.plusDays(19045);
        int int41 = dateTime40.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P0D" + "'", str31, "P0D");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField14 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.millisOfSecond();
        int int16 = dateTimeField15.getMinimumValue();
        long long18 = dateTimeField15.roundHalfCeiling((long) 37);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 37L + "'", long18 == 37L);
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        boolean boolean5 = periodType2.isSupported(durationFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology15 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField17 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, periodType2, chronology15);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 4, periodType2);
        int int21 = period20.getWeeks();
        int int22 = period20.getSeconds();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Property[weekOfWeekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=property[weekofweekyear]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        long long9 = duration8.getStandardHours();
        java.lang.String str10 = duration8.toString();
        boolean boolean11 = duration3.isEqual((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration13 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration15 = duration13.minus((-78382080000000L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime.Property property21 = dateTime17.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Days days23 = org.joda.time.Days.daysIn(readableInterval22);
        org.joda.time.Duration duration24 = days23.toStandardDuration();
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.DateTime dateTime27 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration25, (-1));
        org.joda.time.Duration duration29 = duration25.plus((-1L));
        long long30 = duration25.getStandardMinutes();
        org.joda.time.Duration duration32 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration25, 56);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        java.lang.String str36 = property35.toString();
        int int37 = property35.getMaximumValue();
        int int38 = property35.getMaximumValueOverall();
        org.joda.time.DateTime dateTime39 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra(436);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = duration25.toPeriodTo((org.joda.time.ReadableInstant) dateTime41, periodType42);
        org.joda.time.Interval interval44 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        long long49 = dateTimeZone46.convertLocalToUTC(1645514149289L, true);
        long long53 = dateTimeZone46.convertLocalToUTC((long) 280, true, 1814400000L);
        org.joda.time.DateTime dateTime54 = dateTime41.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths(131);
        org.joda.time.LocalDate localDate57 = dateTime54.toLocalDate();
        org.joda.time.ReadablePartial readablePartial58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days59 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate57, readablePartial58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[dayOfMonth]" + "'", str36, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 28 + "'", int37 == 28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514149289L + "'", long49 == 1645514149289L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 280L + "'", long53 == 280L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645514171862L, (-27424800L));
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime3.plusDays((-1));
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(2022);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.secondOfMinute();
        org.joda.time.Chronology chronology19 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField21 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekyear();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology19);
        org.joda.time.DurationField durationField25 = chronology19.hours();
        long long29 = chronology19.add((long) (-123), (long) (-1645514220), 565);
        org.joda.time.Hours hours30 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours31 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours32 = hours31.negated();
        org.joda.time.Hours hours33 = hours30.plus(hours31);
        org.joda.time.Hours hours34 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours35 = hours33.plus(hours34);
        long long38 = chronology19.add((org.joda.time.ReadablePeriod) hours34, (long) (-2014), (-27425236));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-929715534423L) + "'", long29 == (-929715534423L));
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-691115947202014L) + "'", long38 == (-691115947202014L));
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 436);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) 52);
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime4.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime13.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        int int24 = property21.compareTo((org.joda.time.ReadableInstant) dateTime23);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = property21.getAsText(locale25);
        java.util.Calendar calendar27 = dateTime13.toCalendar(locale25);
        org.joda.time.DateTime dateTime29 = dateTime13.withYear(999);
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType32 = periodType31.withWeeksRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime29, periodType32);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "mardi" + "'", str26, "mardi");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514421718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=21,MILLISECOND=773,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod3.addDays(2022);
        mutablePeriod3.setPeriod(1645512060662L);
        mutablePeriod3.addMillis(26285);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod3.toMutablePeriod();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutablePeriod51);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        mutablePeriod3.setDays((int) (short) 100);
        int int34 = mutablePeriod3.getHours();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        int int40 = dateTime37.getEra();
        org.joda.time.DateTime.Property property41 = dateTime37.secondOfMinute();
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration35, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration43 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property44 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime45 = property44.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder6 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "de-DE");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        boolean boolean4 = instant2.isEqual(10L);
        org.joda.time.Instant instant6 = instant2.minus(87350400000L);
        org.joda.time.Instant instant8 = instant2.withMillis(1645512107180L);
        org.joda.time.Chronology chronology9 = instant2.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 26290125, 1645512106263L, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod10.setValue((-889), (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -889");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.secondOfMinute();
        org.joda.time.Chronology chronology23 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField25 = chronology23.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfMinute();
        int int28 = dateTimeField26.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = dateTimeField26.getAsText(readablePartial29, 3, locale31);
        int int33 = dateTime1.get(dateTimeField26);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.lang.String str36 = dateTimeZone34.getID();
        long long38 = dateTimeZone34.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime39 = dateTime1.toDateTime(dateTimeZone34);
        long long41 = dateTimeZone34.nextTransition((long) '4');
        java.lang.String str43 = dateTimeZone34.getShortName(1571893860008L);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Days days45 = org.joda.time.Days.daysIn(readableInterval44);
        org.joda.time.Duration duration46 = days45.toStandardDuration();
        org.joda.time.Duration duration47 = duration46.toDuration();
        org.joda.time.ReadableDuration readableDuration48 = null;
        boolean boolean49 = duration47.isLongerThan(readableDuration48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.Days days51 = org.joda.time.Days.daysIn(readableInterval50);
        org.joda.time.Duration duration52 = days51.toStandardDuration();
        org.joda.time.Duration duration53 = duration52.toDuration();
        org.joda.time.ReadableDuration readableDuration54 = null;
        boolean boolean55 = duration53.isLongerThan(readableDuration54);
        boolean boolean56 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime65 = dateTime58.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval66 = duration47.toIntervalTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime67 = dateTime58.toLocalDateTime();
        boolean boolean68 = dateTimeZone34.isLocalDateTimeGap(localDateTime67);
        java.lang.String str70 = dateTimeZone34.getShortName(1645514162000L);
        int int72 = dateTimeZone34.getOffsetFromLocal((long) 26415242);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "3" + "'", str32, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.055" + "'", str36, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.055" + "'", str43, "+00:00:00.055");
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.055" + "'", str70, "+00:00:00.055");
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 55 + "'", int72 == 55);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        int int8 = period5.getDays();
        org.joda.time.Hours hours9 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours10 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours11 = hours10.negated();
        org.joda.time.Hours hours12 = hours9.plus(hours10);
        org.joda.time.Hours hours13 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours14 = hours12.plus(hours13);
        org.joda.time.Hours hours15 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours16 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours17 = hours15.plus(hours16);
        org.joda.time.Hours hours19 = hours17.plus((int) (short) 10);
        org.joda.time.Hours hours21 = hours17.minus(2022);
        org.joda.time.Hours hours22 = hours12.minus(hours21);
        org.joda.time.Hours hours24 = hours12.minus(78623298);
        org.joda.time.Period period25 = period5.minus((org.joda.time.ReadablePeriod) hours12);
        org.joda.time.Period period27 = period25.multipliedBy(26364812);
        org.joda.time.Period period29 = period27.minusYears(86399999);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        int int28 = mutablePeriod3.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod3.copy();
        mutablePeriod29.addYears(1439);
        java.lang.Object obj32 = mutablePeriod29.clone();
        mutablePeriod29.setHours(781);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "P1439YT781H");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "P1439YT781H");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "P1439YT781H");
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime27.minusDays((int) (byte) 100);
        org.joda.time.DateTime dateTime36 = dateTime27.withMillisOfSecond(131);
        org.joda.time.DateTime dateTime38 = dateTime27.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime39 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property40 = dateTime27.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-54L) + "'", long24 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DurationField durationField8 = property4.getLeapDurationField();
        org.joda.time.DateTime dateTime10 = property4.addToCopy(100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) ' ');
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime dateTime17 = dateTime12.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime19 = dateTime12.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) 'u');
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        long long24 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.withMillis((long) (byte) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        org.joda.time.DateTime dateTime29 = dateTime26.plusYears(26298031);
        org.joda.time.DateTime.Property property30 = dateTime26.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 7670L + "'", long24 == 7670L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks((int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((int) ' ');
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime18 = dateTime13.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime20 = dateTime13.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int23 = dateTime20.get(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property32 = dateTime25.secondOfMinute();
        org.joda.time.Chronology chronology33 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology33.millis();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.Period period41 = period38.plusSeconds((int) (short) 1);
        org.joda.time.Days days42 = period41.toStandardDays();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Days days44 = org.joda.time.Days.daysIn(readableInterval43);
        java.lang.String str45 = days44.toString();
        boolean boolean46 = days42.isGreaterThan(days44);
        long long49 = chronology33.add((org.joda.time.ReadablePeriod) days44, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField50 = chronology33.hourOfHalfday();
        org.joda.time.Days days51 = org.joda.time.Days.THREE;
        java.lang.String str52 = days51.toString();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod56 = period55.toMutablePeriod();
        org.joda.time.Period period58 = period55.plusSeconds((int) (short) 1);
        org.joda.time.Days days59 = period58.toStandardDays();
        org.joda.time.Days days60 = days51.plus(days59);
        long long63 = chronology33.add((org.joda.time.ReadablePeriod) days60, 1739860860662L, 20);
        org.joda.time.DateTimeField dateTimeField64 = chronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType22.getField(chronology33);
        boolean boolean66 = dateTime8.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType22.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26422 + "'", int23 == 26422);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "P0D" + "'", str45, "P0D");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "P3D" + "'", str52, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1745044860662L + "'", long63 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(durationFieldType67);
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = weeks0.negated();
        org.joda.time.Weeks weeks2 = null;
        boolean boolean3 = weeks0.isLessThan(weeks2);
        int int4 = weeks0.getWeeks();
        org.joda.time.Duration duration5 = weeks0.toStandardDuration();
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks9 = weeks7.plus(0);
        org.joda.time.Weeks weeks11 = weeks9.minus(3);
        org.joda.time.Weeks weeks12 = weeks6.plus(weeks11);
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks16 = weeks14.plus(0);
        org.joda.time.Weeks weeks18 = weeks16.minus(3);
        org.joda.time.Weeks weeks19 = weeks13.plus(weeks18);
        org.joda.time.Weeks weeks20 = weeks11.plus(weeks19);
        org.joda.time.Weeks weeks21 = weeks0.plus(weeks20);
        org.joda.time.Weeks weeks22 = weeks0.negated();
        org.joda.time.Weeks weeks24 = weeks0.minus(120);
        org.joda.time.Weeks weeks26 = weeks0.dividedBy(366);
        org.joda.time.PeriodType periodType27 = weeks0.getPeriodType();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime12.plusMinutes(22);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod23.setWeeks(999);
        mutablePeriod23.addMinutes(7);
        mutablePeriod23.setMillis(6);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = dateTime34.withSecondOfMinute(3);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis(2);
        org.joda.time.Seconds seconds39 = org.joda.time.Seconds.THREE;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        org.joda.time.Period period45 = period42.plusSeconds((int) (short) 1);
        org.joda.time.Period period47 = period45.multipliedBy(100);
        org.joda.time.Period period49 = period47.withYears(92000);
        org.joda.time.Seconds seconds50 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period47);
        java.lang.String str51 = seconds50.toString();
        org.joda.time.Seconds seconds52 = seconds39.plus(seconds50);
        org.joda.time.DateTime dateTime53 = dateTime36.minus((org.joda.time.ReadablePeriod) seconds39);
        org.joda.time.DurationFieldType durationFieldType54 = seconds39.getFieldType();
        mutablePeriod23.set(durationFieldType54, 26256);
        mutablePeriod23.setPeriod(6L);
        mutablePeriod23.addMonths(41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT100S" + "'", str51, "PT100S");
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(durationFieldType54);
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime1.getZone();
        org.joda.time.DateTime.Property property19 = dateTime1.monthOfYear();
        java.util.Date date20 = dateTime1.toDate();
        int int21 = dateTime1.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 07:20:22 UTC 2022");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyear();
        int int15 = dateTimeField12.getDifference((long) 28, (long) 2147483647);
        long long18 = dateTimeField12.addWrapField((long) (short) 0, 31);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime20.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property27 = dateTime20.secondOfMinute();
        org.joda.time.Chronology chronology28 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.secondOfMinute();
        int int33 = dateTimeField31.getMinimumValue((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) ' ');
        int int42 = dateTime39.getEra();
        int int43 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears((int) '4');
        org.joda.time.DateTime.Property property48 = dateTime45.dayOfWeek();
        org.joda.time.DateTime dateTime51 = dateTime45.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property52 = dateTime45.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime45.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        long long58 = dateTimeZone55.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime39.toMutableDateTime(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime65 = dateTime61.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime59, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime68 = dateTime61.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay69 = dateTime68.toTimeOfDay();
        java.lang.Object obj70 = null;
        boolean boolean71 = timeOfDay69.equals(obj70);
        int int72 = timeOfDay69.size();
        int int73 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay69);
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.util.Locale locale76 = java.util.Locale.ENGLISH;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale75.getScript();
        java.lang.String str79 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) timeOfDay69, 8, locale75);
        java.lang.String str80 = locale75.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale75);
        java.util.Set<java.lang.String> strSet82 = locale75.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale75.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 978566400000L + "'", long18 == 978566400000L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-54L) + "'", long58 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "German" + "'", str77, "German");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "8" + "'", str79, "8");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "deu" + "'", str83, "deu");
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 31);
        org.joda.time.DurationField durationField17 = dateTimeField10.getRangeDurationField();
        boolean boolean19 = dateTimeField10.isLeap((long) (byte) -1);
        org.joda.time.DurationField durationField20 = dateTimeField10.getLeapDurationField();
        org.joda.time.DurationField durationField21 = dateTimeField10.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 978566400000L + "'", long16 == 978566400000L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration3.toIntervalTo(readableInstant7);
        org.joda.time.Duration duration10 = duration3.minus((long) 26160);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime.Property property14 = dateTime12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime16.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime19.plusDays(9);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(26173127);
        org.joda.time.DateTime dateTime25 = dateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1);
        boolean boolean28 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfSecond();
        long long30 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Interval interval31 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 56 + "'", int29 == 56);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 27425240L + "'", long30 == 27425240L);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        org.joda.time.Duration duration14 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime18 = property17.roundFloorCopy();
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfDay();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.halfdays();
        int int22 = periodType20.indexOf(durationFieldType21);
        org.joda.time.PeriodType periodType23 = periodType20.withWeeksRemoved();
        int int24 = periodType23.size();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime18, periodType23);
        int int26 = period25.getYears();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes((int) (byte) 10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = period17.toMutablePeriod();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        org.joda.time.Period period24 = period21.plusMinutes((int) (byte) 0);
        mutablePeriod18.mergePeriod((org.joda.time.ReadablePeriod) period21);
        boolean boolean26 = periodType14.equals((java.lang.Object) period21);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        boolean boolean30 = periodType27.isSupported(durationFieldType29);
        int int31 = periodType14.indexOf(durationFieldType29);
        org.joda.time.DateTime dateTime33 = dateTime13.withFieldAdded(durationFieldType29, (int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(26173127);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.Days days37 = org.joda.time.Days.daysIn(readableInterval36);
        org.joda.time.Duration duration38 = days37.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.Days days40 = org.joda.time.Days.daysIn(readableInterval39);
        org.joda.time.Duration duration41 = days40.toStandardDuration();
        org.joda.time.Duration duration42 = duration41.toDuration();
        org.joda.time.ReadableDuration readableDuration43 = null;
        boolean boolean44 = duration42.isLongerThan(readableDuration43);
        org.joda.time.Duration duration46 = duration38.withDurationAdded(readableDuration43, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime.Property property52 = dateTime48.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.Days days54 = org.joda.time.Days.daysIn(readableInterval53);
        org.joda.time.Duration duration55 = days54.toStandardDuration();
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.DateTime dateTime58 = dateTime48.withDurationAdded((org.joda.time.ReadableDuration) duration56, (-1));
        org.joda.time.DateTime dateTime60 = dateTime48.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusYears((int) '4');
        org.joda.time.DateTime.Property property65 = dateTime62.dayOfWeek();
        org.joda.time.DateTime dateTime68 = dateTime62.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property69 = dateTime62.secondOfMinute();
        org.joda.time.Chronology chronology70 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfMonth();
        org.joda.time.DurationField durationField72 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.secondOfMinute();
        int int75 = dateTimeField73.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial76 = null;
        java.util.Locale locale78 = java.util.Locale.KOREA;
        java.lang.String str79 = dateTimeField73.getAsText(readablePartial76, 3, locale78);
        int int80 = dateTime48.get(dateTimeField73);
        org.joda.time.DateTime dateTime82 = dateTime48.minusWeeks(40);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period84 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime82, periodType83);
        org.joda.time.Duration duration85 = duration38.toDuration();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime87 = dateTime33.toLocalDateTime();
        org.joda.time.DateTime dateTime89 = dateTime33.withMillisOfDay(26294);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "3" + "'", str79, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(86400000L, (long) 26160);
        mutablePeriod2.add((-27425236), (int) (byte) 0, 37, 26309, 0, 46, 16, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days12 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) mutablePeriod2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P-27425236Y37W26309DT-23H-13M-17.841S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology15 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-100), 24, 14565858, 82, 596, 2720, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        boolean boolean6 = dateTimeZone4.isStandardOffset(0L);
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.daysIn(readableInterval7);
        org.joda.time.Duration duration9 = days8.toStandardDuration();
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.ReadableDuration readableDuration11 = null;
        boolean boolean12 = duration10.isLongerThan(readableDuration11);
        long long13 = duration10.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.secondOfMinute();
        org.joda.time.Chronology chronology23 = dateTime15.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType24);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime15.toGregorianCalendar();
        boolean boolean27 = dateTimeZone4.equals((java.lang.Object) gregorianCalendar26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime.Property property33 = dateTime29.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.DateTime dateTime39 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration37, (-1));
        int int40 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTime();
        java.lang.Object obj43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(obj43);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        boolean boolean49 = periodType46.isSupported(durationFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfWeek();
        org.joda.time.DateTime dateTime57 = dateTime51.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property58 = dateTime51.secondOfMinute();
        org.joda.time.Chronology chronology59 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.dayOfMonth();
        org.joda.time.DurationField durationField61 = chronology59.weeks();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1L, periodType46, chronology59);
        int int64 = periodType46.size();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime66.withZone(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMillis((int) ' ');
        int int74 = dateTime71.getEra();
        boolean boolean75 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime77 = dateTime69.plusHours(435);
        org.joda.time.DateTime dateTime78 = dateTime69.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime80 = dateTime69.plusDays(55);
        org.joda.time.DateTime.Property property81 = dateTime69.weekyear();
        org.joda.time.DateTime dateTime83 = dateTime69.minus(1645488000117L);
        org.joda.time.DateTime.Property property84 = dateTime83.dayOfMonth();
        boolean boolean85 = periodType46.equals((java.lang.Object) property84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime42, (org.joda.time.ReadableInstant) dateTime44, periodType46);
        int int87 = dateTime44.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 55 + "'", int40 == 55);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 551 + "'", int87 == 551);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime3.plusDays(55);
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfMonth();
        java.util.Locale locale13 = new java.util.Locale("weekyearOfCentury", "2022-02-21T07:16:09.341Z", "59");
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale13.getDisplayCountry(locale14);
        int int18 = property9.getMaximumTextLength(locale13);
        java.lang.String str19 = locale13.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals(locale13.toString(), "weekyearofcentury_2022-02-21T07:16:09.341Z_59");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21T07:16:09.341Z" + "'", str17, "2022-02-21T07:16:09.341Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekyearofcentury (2022-02-21T07:16:09.341Z,59)" + "'", str19, "weekyearofcentury (2022-02-21T07:16:09.341Z,59)");
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod((long) 2022);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusMinutes((int) (byte) 0);
        mutablePeriod11.mergePeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setMonths(40);
        int int22 = mutablePeriod1.getSeconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray23 = mutablePeriod1.getFieldTypes();
        mutablePeriod1.setSeconds(30240);
        mutablePeriod1.addWeeks(27);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray23);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(0L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        java.lang.String str33 = property32.toString();
        int int34 = property32.getMaximumValue();
        int int35 = property32.getMaximumValueOverall();
        org.joda.time.DateTime dateTime36 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra(436);
        org.joda.time.DateTime dateTime40 = dateTime36.withWeekyear(16);
        boolean boolean41 = interval26.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime43 = dateTime36.minusMinutes(4);
        org.joda.time.DateMidnight dateMidnight44 = dateTime36.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar45 = dateTime36.toGregorianCalendar();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514422599L + "'", long28 == 1645514422599L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[dayOfMonth]" + "'", str33, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 28 + "'", int34 == 28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31 + "'", int35 == 31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(gregorianCalendar45);
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        int int12 = property9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = property9.getAsText(locale13);
        java.util.Calendar calendar15 = dateTime1.toCalendar(locale13);
        org.joda.time.DateTime dateTime17 = dateTime1.withEra((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime19.withZone(dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getNameKey((long) 1);
        long long27 = dateTimeZone20.adjustOffset((long) 2022, true);
        org.joda.time.DateTime dateTime28 = dateTime17.toDateTime(dateTimeZone20);
        boolean boolean30 = dateTimeZone20.isStandardOffset(1645514314958L);
        java.lang.String str32 = dateTimeZone20.getName(1645514305547L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mardi" + "'", str14, "mardi");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514422625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=22,MILLISECOND=680,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2022L + "'", long27 == 2022L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.055" + "'", str32, "+00:00:00.055");
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        int int2 = mutablePeriod1.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod1.copy();
        mutablePeriod3.setMonths((int) (byte) 0);
        int int7 = mutablePeriod3.getValue(0);
        mutablePeriod3.setPeriod((long) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod3.toMutablePeriod();
        mutablePeriod10.addHours((-292275054));
        org.joda.time.Period period13 = mutablePeriod10.toPeriod();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(521);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusSeconds((int) (short) 1);
        org.joda.time.Days days19 = period18.toStandardDays();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        java.lang.String str22 = days21.toString();
        boolean boolean23 = days19.isGreaterThan(days21);
        long long26 = chronology10.add((org.joda.time.ReadablePeriod) days21, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField27 = chronology10.hourOfHalfday();
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        java.lang.String str29 = days28.toString();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.Period period35 = period32.plusSeconds((int) (short) 1);
        org.joda.time.Days days36 = period35.toStandardDays();
        org.joda.time.Days days37 = days28.plus(days36);
        long long40 = chronology10.add((org.joda.time.ReadablePeriod) days37, 1739860860662L, 20);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType0.getField(chronology10);
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.Days days47 = org.joda.time.Days.daysIn(readableInterval46);
        org.joda.time.Duration duration48 = days47.toStandardDuration();
        org.joda.time.Duration duration49 = duration48.toDuration();
        org.joda.time.ReadableDuration readableDuration50 = null;
        boolean boolean51 = duration49.isLongerThan(readableDuration50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.Days days53 = org.joda.time.Days.daysIn(readableInterval52);
        org.joda.time.Duration duration54 = days53.toStandardDuration();
        org.joda.time.Duration duration55 = duration54.toDuration();
        org.joda.time.ReadableDuration readableDuration56 = null;
        boolean boolean57 = duration55.isLongerThan(readableDuration56);
        boolean boolean58 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMillis((int) ' ');
        int int63 = dateTime60.getEra();
        org.joda.time.DateTime dateTime65 = dateTime60.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime67 = dateTime60.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval68 = duration49.toIntervalTo((org.joda.time.ReadableInstant) dateTime60);
        mutablePeriod45.add((org.joda.time.ReadableInterval) interval68);
        org.joda.time.MutableInterval mutableInterval70 = interval68.toMutableInterval();
        java.lang.String str71 = mutableInterval70.toString();
        org.joda.time.Chronology chronology72 = mutableInterval70.getChronology();
        org.joda.time.Chronology chronology73 = mutableInterval70.getChronology();
        boolean boolean74 = dateTimeFieldType0.isSupported(chronology73);
        org.joda.time.DurationField durationField75 = chronology73.centuries();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusYears((int) '4');
        org.joda.time.DateTime.Property property80 = dateTime77.dayOfWeek();
        org.joda.time.DateTime dateTime83 = dateTime77.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property84 = dateTime77.secondOfMinute();
        org.joda.time.Chronology chronology85 = dateTime77.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.dayOfMonth();
        org.joda.time.DurationField durationField87 = chronology85.halfdays();
        org.joda.time.DurationField durationField88 = chronology85.minutes();
        long long90 = durationField88.getMillis((long) (short) 10);
        java.lang.String str91 = durationField88.toString();
        int int92 = durationField75.compareTo(durationField88);
        int int94 = durationField88.getValue(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P0D" + "'", str22, "P0D");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P3D" + "'", str29, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1745044860662L + "'", long40 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(mutableInterval70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-22T07:20:22.794+00:00:00.055/2022-02-22T07:20:22.794+00:00:00.055" + "'", str71, "2022-02-22T07:20:22.794+00:00:00.055/2022-02-22T07:20:22.794+00:00:00.055");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 600000L + "'", long90 == 600000L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "DurationField[minutes]" + "'", str91, "DurationField[minutes]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period13 = period10.plusMinutes((int) (byte) 0);
        mutablePeriod7.mergePeriod((org.joda.time.ReadablePeriod) period10);
        boolean boolean15 = periodType3.equals((java.lang.Object) period10);
        org.joda.time.PeriodType periodType16 = periodType3.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1645514212710L, periodType16);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        org.joda.time.Period period30 = period27.plusMinutes((int) (byte) 0);
        mutablePeriod24.mergePeriod((org.joda.time.ReadablePeriod) period27);
        mutablePeriod24.addMonths((int) 'u');
        mutablePeriod24.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.secondOfMinute();
        org.joda.time.Chronology chronology48 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfMonth();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology48);
        org.joda.time.DurationField durationField51 = chronology48.months();
        mutablePeriod24.setPeriod((long) 1814400, chronology48);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusYears((int) '4');
        org.joda.time.DateTime.Property property58 = dateTime55.dayOfWeek();
        org.joda.time.DateTime dateTime61 = dateTime55.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property62 = dateTime55.secondOfMinute();
        org.joda.time.Chronology chronology63 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.dayOfMonth();
        org.joda.time.DurationField durationField65 = chronology63.weeks();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.monthOfYear();
        mutablePeriod24.add((long) 74, chronology63);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(86400000L, 0L, chronology63);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1645514275648L, chronology63);
        org.joda.time.DateTimeField dateTimeField71 = chronology63.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(432000000L, 26326832L, periodType16, chronology63);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod72.setWeeks(26376);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        org.joda.time.Period period8 = new org.joda.time.Period(1970, 56, 543, 895, 52, 691, (-58), (-27425236));
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 26195, chronology10);
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        long long16 = durationField13.subtract((long) 26316703, 48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-2047283297L) + "'", long16 == (-2047283297L));
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        java.util.Locale locale3 = new java.util.Locale("2022-02-22T07:16:25.177Z", "Dec", "FR");
        java.lang.String str5 = locale3.getExtension('u');
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:16:25.177z_DEC_FR");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        java.io.IOException iOException1 = new java.io.IOException("P3D");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException1);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks7 = weeks5.plus(0);
        org.joda.time.Weeks weeks9 = weeks7.minus(3);
        org.joda.time.Weeks weeks10 = weeks4.plus(weeks9);
        org.joda.time.MutablePeriod mutablePeriod11 = weeks10.toMutablePeriod();
        org.joda.time.Weeks weeks13 = weeks10.plus((int) 'a');
        org.joda.time.PeriodType periodType14 = weeks10.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime20.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property27 = dateTime20.secondOfMinute();
        org.joda.time.Chronology chronology28 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField34 = chronology28.months();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime16.toMutableDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.year();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology28.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object) iOException3, periodType14, chronology28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.SEVEN;
        boolean boolean2 = hours0.isLessThan(hours1);
        org.joda.time.Duration duration3 = hours0.toStandardDuration();
        org.joda.time.Hours hours5 = hours0.plus(7);
        org.joda.time.Hours hours6 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours7 = org.joda.time.Hours.SEVEN;
        boolean boolean8 = hours6.isLessThan(hours7);
        org.joda.time.Duration duration9 = hours6.toStandardDuration();
        org.joda.time.Hours hours10 = hours5.plus(hours6);
        org.joda.time.Hours hours11 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours12 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours13 = hours11.plus(hours12);
        org.joda.time.Hours hours14 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours15 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours16 = hours14.plus(hours15);
        org.joda.time.Hours hours17 = hours12.minus(hours15);
        org.joda.time.Hours hours19 = hours17.dividedBy((int) '4');
        org.joda.time.Hours hours21 = hours19.minus(1814400);
        org.joda.time.Hours hours22 = hours6.minus(hours21);
        org.joda.time.Duration duration23 = hours22.toStandardDuration();
        org.joda.time.Hours hours24 = hours22.negated();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        java.util.Locale locale2 = new java.util.Locale("2022-02-22T07:20:08.425+00:00:00.055/2022-02-22T07:20:08.425+00:00:00.055", "+00:00:00.520");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-22t07:20:08.425+00:00:00.055/2022-02-22t07:20:08.425+00:00:00.055_+00:00:00.520");
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.Interval interval6 = property5.toInterval();
        java.lang.String str7 = property5.toString();
        java.util.Locale locale8 = java.util.Locale.PRC;
        int int9 = property5.getMaximumShortTextLength(locale8);
        java.lang.String str10 = locale8.getDisplayVariant();
        java.lang.String str12 = locale8.getUnicodeLocaleType("56");
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[secondOfMinute]" + "'", str7, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period7 = period4.plusSeconds((int) (short) 1);
        org.joda.time.Days days8 = period7.toStandardDays();
        org.joda.time.Days days9 = days0.plus(days8);
        org.joda.time.DurationFieldType durationFieldType10 = days0.getFieldType();
        org.joda.time.Days days12 = days0.dividedBy((-625));
        int int13 = days0.getDays();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P3D" + "'", str1, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Days days33 = org.joda.time.Days.daysIn(readableInterval32);
        org.joda.time.Duration duration34 = days33.toStandardDuration();
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.ReadableDuration readableDuration36 = null;
        boolean boolean37 = duration35.isLongerThan(readableDuration36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration41.isLongerThan(readableDuration42);
        boolean boolean44 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        int int49 = dateTime46.getEra();
        org.joda.time.DateTime dateTime51 = dateTime46.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime53 = dateTime46.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval54 = duration35.toIntervalTo((org.joda.time.ReadableInstant) dateTime46);
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval54);
        boolean boolean56 = interval26.isBefore((org.joda.time.ReadableInterval) interval54);
        long long57 = interval54.getStartMillis();
        org.joda.time.MutableInterval mutableInterval58 = interval54.toMutableInterval();
        org.joda.time.Instant instant60 = org.joda.time.Instant.parse("2022-02-22T07:16:40.770Z");
        org.joda.time.MutableDateTime mutableDateTime61 = instant60.toMutableDateTimeISO();
        int int62 = mutableDateTime61.getWeekOfWeekyear();
        boolean boolean63 = interval54.isAfter((org.joda.time.ReadableInstant) mutableDateTime61);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514423226L + "'", long57 == 1645514423226L);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        mutablePeriod1.addMinutes(943);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(2800, 895);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2800");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Interval interval8 = duration3.toIntervalTo(readableInstant7);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration16.isLongerThan(readableDuration17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isLongerThan(readableDuration23);
        boolean boolean25 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime32 = dateTime27.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval35 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        mutablePeriod12.add((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Days days42 = org.joda.time.Days.daysIn(readableInterval41);
        org.joda.time.Duration duration43 = days42.toStandardDuration();
        org.joda.time.Duration duration44 = duration43.toDuration();
        org.joda.time.ReadableDuration readableDuration45 = null;
        boolean boolean46 = duration44.isLongerThan(readableDuration45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        boolean boolean53 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis((int) ' ');
        int int58 = dateTime55.getEra();
        org.joda.time.DateTime dateTime60 = dateTime55.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime62 = dateTime55.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval63 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime55);
        mutablePeriod40.add((org.joda.time.ReadableInterval) interval63);
        boolean boolean65 = interval35.isBefore((org.joda.time.ReadableInterval) interval63);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval35.toPeriod(periodType66);
        org.joda.time.Duration duration68 = interval35.toDuration();
        boolean boolean69 = interval8.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Days days70 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval8);
        org.joda.time.PeriodType periodType71 = days70.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType72 = days70.getFieldType();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType72);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        java.lang.String str1 = seconds0.toString();
        java.lang.String str2 = seconds0.toString();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DurationField durationField15 = durationFieldType3.getField(chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, chronology17);
        int int19 = period18.getMillis();
        long long22 = chronology13.add((org.joda.time.ReadablePeriod) period18, (long) (short) 100, 40);
        org.joda.time.Period period24 = period18.plusWeeks((int) (byte) 100);
        org.joda.time.Seconds seconds25 = period18.toStandardSeconds();
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds28 = seconds26.multipliedBy(41);
        boolean boolean29 = seconds25.isGreaterThan(seconds26);
        boolean boolean30 = seconds0.isGreaterThan(seconds26);
        java.lang.String str31 = seconds26.toString();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT2147483647S" + "'", str1, "PT2147483647S");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT2147483647S" + "'", str2, "PT2147483647S");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4100L + "'", long22 == 4100L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField14 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.halfdayOfDay();
        long long18 = dateTimeField16.roundHalfCeiling((long) 365);
        long long20 = dateTimeField16.roundHalfEven((long) 26214);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-55L) + "'", long18 == (-55L));
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-55L) + "'", long20 == (-55L));
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property23 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime16.withMillis((long) 896);
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType27 = seconds26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType28 = seconds26.getFieldType();
        org.joda.time.DateTime dateTime30 = dateTime25.withFieldAdded(durationFieldType28, (int) (byte) 1);
        org.joda.time.DateTime.Property property31 = dateTime25.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-54L) + "'", long14 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 55 + "'", int22 == 55);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.plus(4320000001L);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) instant12);
        int int14 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant16 = instant12.withMillis((long) 2);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime();
        int int27 = dateTime26.getWeekyear();
        int int28 = dateTime26.getCenturyOfEra();
        boolean boolean30 = dateTime26.equals((java.lang.Object) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.minusHours(9);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfMonth(28);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant12, (org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 55 + "'", int14 == 55);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder2.addUnicodeLocaleAttribute("2022-02-22T07:19:54.270+00:00:00.055/2022-02-22T07:19:54.270+00:00:00.055");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:19:54.270+00:00:00.055/2022-02-22T07:19:54.270+00:00:00.055 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        long long30 = interval26.getStartMillis();
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.DurationField durationField34 = chronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.dayOfWeek();
        org.joda.time.DurationField durationField36 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.era();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514423531L + "'", long28 == 1645514423531L);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514423531L + "'", long30 == 1645514423531L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime3.withSecondOfMinute(59);
        java.lang.String str6 = dateTime3.toString();
        org.joda.time.DateTime dateTime7 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property12 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Days days18 = org.joda.time.Days.daysIn(readableInterval17);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Duration duration20 = duration19.toDuration();
        org.joda.time.ReadableDuration readableDuration21 = null;
        boolean boolean22 = duration20.isLongerThan(readableDuration21);
        org.joda.time.Duration duration24 = duration16.withDurationAdded(readableDuration21, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime.Property property30 = dateTime26.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Days days32 = org.joda.time.Days.daysIn(readableInterval31);
        org.joda.time.Duration duration33 = days32.toStandardDuration();
        org.joda.time.Duration duration34 = duration33.toDuration();
        org.joda.time.DateTime dateTime36 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.DateTime dateTime38 = dateTime26.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.secondOfMinute();
        org.joda.time.Chronology chronology48 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology48.weeks();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.secondOfMinute();
        int int53 = dateTimeField51.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial54 = null;
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.lang.String str57 = dateTimeField51.getAsText(readablePartial54, 3, locale56);
        int int58 = dateTime26.get(dateTimeField51);
        org.joda.time.DateTime dateTime60 = dateTime26.minusWeeks(40);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period62 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60, periodType61);
        org.joda.time.LocalTime localTime63 = dateTime60.toLocalTime();
        org.joda.time.DateTime dateTime64 = dateTime10.withFields((org.joda.time.ReadablePartial) localTime63);
        org.joda.time.DateTimeField dateTimeField66 = localTime63.getField(0);
        int int67 = property8.compareTo((org.joda.time.ReadablePartial) localTime63);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = localTime63.getValue(999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 999");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:20:23.570+00:00:00.055" + "'", str6, "2022-02-22T07:20:23.570+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "3" + "'", str57, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 23 + "'", int58 == 23);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = weeks1.plus(0);
        org.joda.time.Weeks weeks5 = weeks3.minus(3);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks5);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks10 = weeks8.plus(0);
        org.joda.time.Weeks weeks12 = weeks10.minus(3);
        org.joda.time.Weeks weeks13 = weeks7.plus(weeks12);
        org.joda.time.Weeks weeks14 = weeks5.plus(weeks13);
        org.joda.time.MutablePeriod mutablePeriod15 = weeks14.toMutablePeriod();
        org.joda.time.Period period17 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Period period19 = period17.minus(readablePeriod18);
        org.joda.time.Weeks weeks20 = period19.toStandardWeeks();
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks25 = weeks23.minus(59);
        org.joda.time.Weeks weeks26 = weeks21.plus(weeks25);
        org.joda.time.Weeks weeks28 = weeks26.minus((int) (short) 1);
        boolean boolean29 = weeks20.isLessThan(weeks28);
        boolean boolean30 = weeks14.isGreaterThan(weeks20);
        org.joda.time.Weeks weeks31 = weeks20.negated();
        org.joda.time.Weeks weeks33 = weeks31.multipliedBy(26316);
        org.joda.time.DurationFieldType durationFieldType34 = weeks33.getFieldType();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(durationFieldType34);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1814000L);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) ' ');
        int int6 = dateTime3.getEra();
        org.joda.time.DateTime.Property property7 = dateTime3.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.DateTime dateTime13 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration11, (-1));
        org.joda.time.DateTime dateTime15 = dateTime3.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.secondOfMinute();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        int int30 = dateTimeField28.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = dateTimeField28.getAsText(readablePartial31, 3, locale33);
        int int35 = dateTime3.get(dateTimeField28);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.lang.String str38 = dateTimeZone36.getID();
        long long40 = dateTimeZone36.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime3.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) 'u');
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.Days days46 = org.joda.time.Days.daysIn(readableInterval45);
        org.joda.time.Duration duration47 = days46.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Days days49 = org.joda.time.Days.daysIn(readableInterval48);
        org.joda.time.Duration duration50 = days49.toStandardDuration();
        org.joda.time.Duration duration51 = duration50.toDuration();
        org.joda.time.ReadableDuration readableDuration52 = null;
        boolean boolean53 = duration51.isLongerThan(readableDuration52);
        org.joda.time.Duration duration55 = duration47.withDurationAdded(readableDuration52, (int) (byte) 100);
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) 8, (long) 7);
        boolean boolean60 = duration56.isEqual((org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = duration1.isEqual((org.joda.time.ReadableDuration) duration56);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "3" + "'", str34, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 23 + "'", int35 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.055" + "'", str38, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Weeks weeks6 = period5.toStandardWeeks();
        org.joda.time.Duration duration7 = period5.toStandardDuration();
        java.lang.String str8 = duration7.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1S" + "'", str8, "PT1S");
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        long long21 = durationField18.getMillis((-1), (long) (-2));
        long long22 = durationField18.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3600000L) + "'", long21 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3600000L + "'", long22 == 3600000L);
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        boolean boolean12 = dateTimeZone7.isStandardOffset(1645514168245L);
        long long14 = dateTimeZone7.convertUTCToLocal((long) 896);
        int int16 = dateTimeZone7.getStandardOffset(1643735800027L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(26391, 48, 5440, 1961, 831, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1961 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 951L + "'", long14 == 951L);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 55 + "'", int16 == 55);
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) ' ');
        int int10 = dateTime7.getEra();
        int int11 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        long long26 = dateTimeZone23.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime7.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime33 = dateTime29.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = mutablePeriod34.getFieldTypes();
        mutablePeriod34.addDays((int) ' ');
        mutablePeriod1.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.setPeriod(978566400000L);
        mutablePeriod34.clear();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-54L) + "'", long26 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1, dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getName((long) 1);
        boolean boolean10 = dateTimeZone1.isStandardOffset(1645514169346L);
        java.lang.String str12 = dateTimeZone1.getNameKey(4133960712000L);
        long long16 = dateTimeZone1.convertLocalToUTC((long) 26195, true, 1645514351202L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.055" + "'", str3, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.055" + "'", str8, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertNull(str12);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 26140L + "'", long16 == 26140L);
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType5 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType6 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusMinutes((int) (byte) 0);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) period15);
        mutablePeriod12.addMonths((int) 'u');
        mutablePeriod12.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime34 = dateTime28.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property35 = dateTime28.secondOfMinute();
        org.joda.time.Chronology chronology36 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology36);
        org.joda.time.DurationField durationField39 = chronology36.months();
        mutablePeriod12.setPeriod((long) 1814400, chronology36);
        org.joda.time.DurationField durationField41 = chronology36.months();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(87350400000L, periodType8, chronology36);
        org.joda.time.DateTimeField dateTimeField43 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears((int) '4');
        org.joda.time.DateTime.Property property48 = dateTime45.dayOfWeek();
        org.joda.time.DateTime dateTime51 = dateTime45.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property52 = dateTime45.secondOfMinute();
        org.joda.time.Chronology chronology53 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfMonth();
        org.joda.time.DurationField durationField55 = chronology53.weeks();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfMinute();
        int int58 = dateTimeField56.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = dateTimeField56.getAsText(readablePartial59, 3, locale61);
        int int63 = dateTimeField43.getMaximumTextLength(locale61);
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale67.getDisplayLanguage();
        java.lang.String str69 = locale64.getDisplayVariant(locale67);
        java.lang.String str70 = locale61.getDisplayCountry(locale64);
        java.util.Set<java.lang.Character> charSet71 = locale64.getExtensionKeys();
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.lang.String str74 = locale64.getDisplayScript(locale72);
        org.joda.time.format.PeriodFormatter periodFormatter75 = periodFormatter2.withLocale(locale72);
        org.joda.time.format.PeriodParser periodParser76 = periodFormatter75.getParser();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(periodType5);
        org.junit.Assert.assertNull(periodType6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "3" + "'", str62, "3");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "German" + "'", str66, "German");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Koreanisch" + "'", str68, "Koreanisch");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "S\374dkorea" + "'", str70, "S\374dkorea");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(periodFormatter75);
        org.junit.Assert.assertNull(periodParser76);
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes11 = period7.toStandardMinutes();
        boolean boolean12 = dateTime1.equals((java.lang.Object) minutes11);
        boolean boolean13 = dateTime1.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime18.withZone(dateTimeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        long long24 = dateTimeZone15.getMillisKeepLocal(dateTimeZone19, 1100L);
        java.lang.String str25 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusYears((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime29.dayOfWeek();
        org.joda.time.DateTime dateTime35 = dateTime29.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property36 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime29.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        long long42 = dateTimeZone39.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) ' ');
        int int47 = dateTime44.getEra();
        org.joda.time.DateTime dateTime49 = dateTime44.minusMinutes((int) (short) 1);
        int int50 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property51 = dateTime44.yearOfEra();
        java.lang.String str52 = property51.getName();
        org.joda.time.DateTime dateTime54 = property51.setCopy(74);
        boolean boolean55 = mutablePeriod27.equals((java.lang.Object) 74);
        int int56 = mutablePeriod27.getDays();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1100L + "'", long24 == 1100L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.055" + "'", str25, "+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-54L) + "'", long42 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 55 + "'", int50 == 55);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "yearOfEra" + "'", str52, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Period period9 = period7.multipliedBy(40);
        org.joda.time.Period period10 = period7.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration11 = period10.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("Englisch (Vereinigte Staaten von Amerika)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Englisch (Vereinigte Staaten von...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.DurationField durationField17 = chronology13.days();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 100, (long) 100, chronology13);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) 6);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.plusMinutes((int) (byte) 0);
        mutablePeriod26.mergePeriod((org.joda.time.ReadablePeriod) period29);
        boolean boolean34 = periodType22.equals((java.lang.Object) period29);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        boolean boolean38 = periodType35.isSupported(durationFieldType37);
        int int39 = periodType22.indexOf(durationFieldType37);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((java.lang.Object) duration20, periodType22);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) 26173127);
        long long43 = duration42.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMillis((int) ' ');
        int int52 = dateTime49.getEra();
        int int53 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period54 = duration42.toPeriodTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Interval interval55 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property56 = dateTime47.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((int) '4');
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfWeek();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property65 = dateTime58.secondOfMinute();
        org.joda.time.Chronology chronology66 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekyear();
        int int70 = dateTimeField67.getDifference((long) 28, (long) 2147483647);
        long long73 = dateTimeField67.addWrapField((long) (short) 0, 999);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusMillis((int) ' ');
        int int78 = dateTime75.getEra();
        org.joda.time.DateTime.Property property79 = dateTime75.secondOfMinute();
        org.joda.time.DateTime dateTime80 = property79.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateTime80);
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        java.lang.String str83 = locale82.toLanguageTag();
        java.lang.String str84 = locale82.getDisplayScript();
        java.util.Locale locale85 = java.util.Locale.US;
        java.lang.String str86 = locale82.getDisplayLanguage(locale85);
        java.util.Calendar calendar87 = dateTime80.toCalendar(locale85);
        int int88 = dateTimeField67.getMaximumTextLength(locale85);
        java.util.Locale locale89 = locale85.stripExtensions();
        int int90 = property56.getMaximumTextLength(locale85);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 94223257200L + "'", long43 == 94223257200L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 31525804800000L + "'", long73 == 31525804800000L);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fr-FR" + "'", str83, "fr-FR");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "French" + "'", str86, "French");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1645514423945,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=24,MILLISECOND=0,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 7 + "'", int90 == 7);
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 78);
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = dateTime3.isSupported(dateTimeFieldType5);
        org.joda.time.Period period7 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period9 = period7.plusMinutes(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds10 = period7.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.Period period11 = duration2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((int) ' ');
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime.Property property17 = dateTime13.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Days days19 = org.joda.time.Days.daysIn(readableInterval18);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        org.joda.time.Duration duration21 = duration20.toDuration();
        org.joda.time.DateTime dateTime23 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration21, (-1));
        long long24 = duration21.getMillis();
        boolean boolean25 = duration2.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfMonth((int) (byte) 1);
        boolean boolean31 = dateTime27.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusYears((int) '4');
        org.joda.time.DateTime.Property property36 = dateTime33.dayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime33.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property40 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime33.toDateTime();
        java.lang.String str42 = dateTime33.toString();
        boolean boolean43 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod54 = period53.toMutablePeriod();
        org.joda.time.Period period56 = period53.plusMinutes((int) (byte) 0);
        mutablePeriod50.mergePeriod((org.joda.time.ReadablePeriod) period53);
        mutablePeriod50.addMonths((int) 'u');
        mutablePeriod50.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusYears((int) '4');
        org.joda.time.DateTime.Property property69 = dateTime66.dayOfWeek();
        org.joda.time.DateTime dateTime72 = dateTime66.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property73 = dateTime66.secondOfMinute();
        org.joda.time.Chronology chronology74 = dateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfMonth();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology74);
        org.joda.time.DurationField durationField77 = chronology74.months();
        mutablePeriod50.setPeriod((long) 1814400, chronology74);
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 1, 1814000L, periodType46, chronology74);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime33, periodType46);
        java.lang.String str81 = periodType46.getName();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T07:20:24.160+00:00:00.055" + "'", str42, "2022-02-22T07:20:24.160+00:00:00.055");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "YearMonthDayTime" + "'", str81, "YearMonthDayTime");
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        long long14 = durationField11.subtract((long) (byte) 0, 1814400);
        long long17 = durationField11.add(1L, 100);
        long long19 = durationField11.getMillis(2022L);
        long long21 = durationField11.getMillis(2);
        java.lang.String str22 = durationField11.getName();
        int int24 = durationField11.getValue(432000000L);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = durationField11.getMillis(1739860860662L, 31L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1739860860662 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-78382080000000L) + "'", long14 == (-78382080000000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000001L + "'", long17 == 4320000001L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 87350400000L + "'", long19 == 87350400000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86400000L + "'", long21 == 86400000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdays" + "'", str22, "halfdays");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        long long2 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property11 = dateTime4.minuteOfDay();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusMinutes((int) (short) 1);
        int int35 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime29.getZone();
        int int37 = property11.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period38 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis((int) ' ');
        int int43 = dateTime40.getEra();
        org.joda.time.DateTime.Property property44 = dateTime40.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.Days days46 = org.joda.time.Days.daysIn(readableInterval45);
        org.joda.time.Duration duration47 = days46.toStandardDuration();
        org.joda.time.Duration duration48 = duration47.toDuration();
        org.joda.time.DateTime dateTime50 = dateTime40.withDurationAdded((org.joda.time.ReadableDuration) duration48, (-1));
        long long51 = duration48.getMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = dateTime55.isSupported(dateTimeFieldType57);
        org.joda.time.Period period59 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration61 = duration53.minus((-86400000L));
        org.joda.time.Duration duration62 = duration48.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration64 = org.joda.time.Duration.parse("PT2147483647S");
        long long65 = duration64.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMillis((int) ' ');
        int int70 = dateTime67.getEra();
        org.joda.time.DateTime.Property property71 = dateTime67.secondOfMinute();
        org.joda.time.Period period72 = duration64.toPeriodTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration74 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration64, 1);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutablePeriod mutablePeriod76 = period75.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 596523L + "'", long2 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-54L) + "'", long27 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 55 + "'", int35 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 596523L + "'", long65 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(mutablePeriod76);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) ' ');
        org.joda.time.Period period3 = period1.withMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime();
        int int14 = dateTime13.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime16.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime16.plusMinutes(22);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period28 = period3.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.Days days40 = org.joda.time.Days.daysIn(readableInterval39);
        org.joda.time.Duration duration41 = days40.toStandardDuration();
        org.joda.time.Duration duration42 = duration41.toDuration();
        org.joda.time.ReadableDuration readableDuration43 = null;
        boolean boolean44 = duration42.isLongerThan(readableDuration43);
        boolean boolean45 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis((int) ' ');
        int int50 = dateTime47.getEra();
        org.joda.time.DateTime dateTime52 = dateTime47.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime54 = dateTime47.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval55 = duration36.toIntervalTo((org.joda.time.ReadableInstant) dateTime47);
        mutablePeriod32.add((org.joda.time.ReadableInterval) interval55);
        org.joda.time.MutableInterval mutableInterval57 = interval55.toMutableInterval();
        mutablePeriod27.setPeriod((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.Days days64 = org.joda.time.Days.daysIn(readableInterval63);
        org.joda.time.Duration duration65 = days64.toStandardDuration();
        org.joda.time.Duration duration66 = duration65.toDuration();
        org.joda.time.ReadableDuration readableDuration67 = null;
        boolean boolean68 = duration66.isLongerThan(readableDuration67);
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.Days days70 = org.joda.time.Days.daysIn(readableInterval69);
        org.joda.time.Duration duration71 = days70.toStandardDuration();
        org.joda.time.Duration duration72 = duration71.toDuration();
        org.joda.time.ReadableDuration readableDuration73 = null;
        boolean boolean74 = duration72.isLongerThan(readableDuration73);
        boolean boolean75 = duration66.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMillis((int) ' ');
        int int80 = dateTime77.getEra();
        org.joda.time.DateTime dateTime82 = dateTime77.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime84 = dateTime77.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval85 = duration66.toIntervalTo((org.joda.time.ReadableInstant) dateTime77);
        mutablePeriod62.add((org.joda.time.ReadableInterval) interval85);
        org.joda.time.MutableInterval mutableInterval87 = interval85.toMutableInterval();
        boolean boolean88 = mutableInterval57.contains((org.joda.time.ReadableInterval) interval85);
        java.lang.String str89 = mutableInterval57.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-22T07:20:24.258+00:00:00.055/2022-02-22T07:20:24.258+00:00:00.055" + "'", str89, "2022-02-22T07:20:24.258+00:00:00.055/2022-02-22T07:20:24.258+00:00:00.055");
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        org.joda.time.Duration duration2 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = dateTime4.isSupported(dateTimeFieldType6);
        org.joda.time.Period period8 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.secondOfMinute();
        org.joda.time.Chronology chronology19 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField21 = durationFieldType9.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime4.toMutableDateTime(chronology19);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 473, chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfDay();
        long long28 = dateTimeField25.add(43560L, 24289659);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 87442772443560L + "'", long28 == 87442772443560L);
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 22);
        int int12 = dateTime11.getMinuteOfHour();
        org.joda.time.Duration duration14 = org.joda.time.Duration.parse("PT2147483647S");
        long long15 = duration14.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime.Property property21 = dateTime17.secondOfMinute();
        org.joda.time.Period period22 = duration14.toPeriodTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration14, (-1));
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Days days26 = org.joda.time.Days.daysIn(readableInterval25);
        org.joda.time.Duration duration27 = days26.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Days days29 = org.joda.time.Days.daysIn(readableInterval28);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration31.isLongerThan(readableDuration32);
        org.joda.time.Duration duration35 = duration27.withDurationAdded(readableDuration32, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Days days45 = org.joda.time.Days.daysIn(readableInterval44);
        org.joda.time.Duration duration46 = days45.toStandardDuration();
        org.joda.time.Duration duration47 = duration46.toDuration();
        org.joda.time.ReadableDuration readableDuration48 = null;
        boolean boolean49 = duration47.isLongerThan(readableDuration48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.Days days51 = org.joda.time.Days.daysIn(readableInterval50);
        org.joda.time.Duration duration52 = days51.toStandardDuration();
        org.joda.time.Duration duration53 = duration52.toDuration();
        org.joda.time.ReadableDuration readableDuration54 = null;
        boolean boolean55 = duration53.isLongerThan(readableDuration54);
        boolean boolean56 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration53);
        boolean boolean58 = duration35.isEqual((org.joda.time.ReadableDuration) duration53);
        int int59 = duration14.compareTo((org.joda.time.ReadableDuration) duration53);
        long long60 = duration53.getStandardSeconds();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 596523L + "'", long15 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime15.withSecondOfMinute(3);
        org.joda.time.DateTime dateTime18 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        int int19 = timeOfDay10.size();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay10.toDateTime(readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMillis((int) ' ');
        int int31 = dateTime28.getEra();
        boolean boolean32 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime33 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear(26316);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Days days52 = org.joda.time.Days.daysIn(readableInterval51);
        org.joda.time.Duration duration53 = days52.toStandardDuration();
        org.joda.time.Duration duration54 = duration53.toDuration();
        org.joda.time.ReadableDuration readableDuration55 = null;
        boolean boolean56 = duration54.isLongerThan(readableDuration55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        boolean boolean63 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMillis((int) ' ');
        int int68 = dateTime65.getEra();
        org.joda.time.DateTime dateTime70 = dateTime65.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime72 = dateTime65.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval73 = duration54.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = dateTime65.withChronology(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property77 = dateTime65.property(dateTimeFieldType76);
        org.joda.time.DateTime dateTime79 = dateTime65.withYearOfEra((int) (byte) 100);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.halfdays();
        int int82 = periodType80.indexOf(durationFieldType81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime65, periodType80);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period85 = new org.joda.time.Period(readableDuration36, (org.joda.time.ReadableInstant) dateTime50, periodType84);
        org.joda.time.YearMonthDay yearMonthDay86 = dateTime50.toYearMonthDay();
        int int87 = yearMonthDay86.size();
        org.joda.time.DateTime dateTime88 = dateTime35.withFields((org.joda.time.ReadablePartial) yearMonthDay86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes89 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay10, (org.joda.time.ReadablePartial) yearMonthDay86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours1 = hours0.negated();
        org.joda.time.PeriodType periodType2 = hours0.getPeriodType();
        org.joda.time.PeriodType periodType3 = hours0.getPeriodType();
        org.joda.time.Hours hours5 = hours0.dividedBy(32);
        org.joda.time.Duration duration6 = hours0.toStandardDuration();
        org.joda.time.Hours hours7 = org.joda.time.Hours.TWO;
        org.joda.time.DurationFieldType durationFieldType8 = hours7.getFieldType();
        org.joda.time.Hours hours10 = hours7.multipliedBy(663);
        boolean boolean11 = hours0.isLessThan(hours10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours13 = hours10.dividedBy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes6 = period2.toStandardMinutes();
        org.joda.time.Seconds seconds7 = minutes6.toStandardSeconds();
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        java.lang.String str9 = days8.toString();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        org.joda.time.Period period15 = period12.plusSeconds((int) (short) 1);
        org.joda.time.Days days16 = period15.toStandardDays();
        org.joda.time.Days days17 = days8.plus(days16);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = seconds7.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Seconds cannot be compared to class org.joda.time.Days");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P3D" + "'", str9, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime12);
        int int15 = dateTime12.getYearOfCentury();
        org.joda.time.DateTime.Property property16 = dateTime12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        java.lang.String str18 = dateTimeFieldType17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "monthOfYear" + "'", str18, "monthOfYear");
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes(0);
        boolean boolean7 = dateTime1.isEqualNow();
        java.util.Date date8 = dateTime1.toDate();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Days days10 = org.joda.time.Days.daysIn(readableInterval9);
        org.joda.time.Duration duration11 = days10.toStandardDuration();
        org.joda.time.Duration duration12 = duration11.toDuration();
        org.joda.time.ReadableDuration readableDuration13 = null;
        boolean boolean14 = duration12.isLongerThan(readableDuration13);
        org.joda.time.Duration duration15 = duration12.toDuration();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime();
        int int26 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime25, periodType29);
        java.lang.String str31 = duration12.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        java.lang.String str35 = property34.toString();
        int int36 = property34.getMaximumValue();
        int int37 = property34.getMaximumValueOverall();
        org.joda.time.DateTime dateTime38 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.secondOfMinute();
        int int48 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period49 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime51 = dateTime38.minus(1814400000L);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTimeISO();
        boolean boolean54 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:20:24 UTC 2022");
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[dayOfMonth]" + "'", str35, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 28 + "'", int36 == 28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.multipliedBy(31);
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        mutablePeriod9.addMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        int int20 = dateTime17.getEra();
        int int21 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        mutablePeriod9.add((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod9.copy();
        org.joda.time.Period period29 = period2.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime();
        int int40 = dateTime39.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfWeek();
        org.joda.time.DateTime dateTime48 = dateTime42.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property49 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime50 = dateTime42.toDateTime();
        org.joda.time.DateTime dateTime52 = dateTime42.plusMinutes(22);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.PeriodType periodType54 = mutablePeriod53.getPeriodType();
        org.joda.time.Hours hours55 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours56 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours57 = hours55.plus(hours56);
        org.joda.time.DurationFieldType durationFieldType58 = hours55.getFieldType();
        mutablePeriod53.set(durationFieldType58, 24);
        int int61 = mutablePeriod28.indexOf(durationFieldType58);
        mutablePeriod28.clear();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertNotNull(hours57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isLongerThan(readableDuration23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Days days26 = org.joda.time.Days.daysIn(readableInterval25);
        org.joda.time.Duration duration27 = days26.toStandardDuration();
        org.joda.time.Duration duration28 = duration27.toDuration();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration28.isLongerThan(readableDuration29);
        boolean boolean31 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration28);
        boolean boolean33 = duration10.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfWeek();
        org.joda.time.DateTime dateTime41 = dateTime35.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime();
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Period period45 = duration28.toPeriodTo((org.joda.time.ReadableInstant) dateTime43);
        int int46 = dateTime43.getYear();
        org.joda.time.DateTime dateTime48 = dateTime43.minusMonths(565);
        int int49 = dateTime43.getYearOfEra();
        org.joda.time.DateTime dateTime51 = dateTime43.plusYears(92000);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears((int) '4');
        org.joda.time.DateTime.Property property57 = dateTime54.dayOfWeek();
        org.joda.time.DateTime dateTime60 = dateTime54.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property61 = dateTime54.minuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime54.toDateTime();
        int int63 = dateTime62.getWeekyear();
        org.joda.time.DateTime dateTime65 = dateTime62.minusDays((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMillis((int) ' ');
        int int70 = dateTime67.getEra();
        org.joda.time.DateTime dateTime72 = dateTime67.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime74 = dateTime67.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime75 = dateTime74.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime77 = dateTime75.plusMonths((int) 'u');
        boolean boolean78 = dateTime62.equals((java.lang.Object) 'u');
        org.joda.time.Chronology chronology79 = dateTime62.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period80 = new org.joda.time.Period((java.lang.Object) dateTime51, chronology79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:20:24.682+00:00:00.055" + "'", str44, "2022-02-22T07:20:24.682+00:00:00.055");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration3 = duration1.minus((-78382080000000L));
        org.joda.time.Duration duration5 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        boolean boolean10 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration8);
        boolean boolean11 = duration3.isEqual((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Days days27 = org.joda.time.Days.daysIn(readableInterval26);
        org.joda.time.Duration duration28 = days27.toStandardDuration();
        org.joda.time.Duration duration29 = duration28.toDuration();
        org.joda.time.ReadableDuration readableDuration30 = null;
        boolean boolean31 = duration29.isLongerThan(readableDuration30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Days days33 = org.joda.time.Days.daysIn(readableInterval32);
        org.joda.time.Duration duration34 = days33.toStandardDuration();
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.ReadableDuration readableDuration36 = null;
        boolean boolean37 = duration35.isLongerThan(readableDuration36);
        boolean boolean38 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis((int) ' ');
        int int43 = dateTime40.getEra();
        org.joda.time.DateTime dateTime45 = dateTime40.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime47 = dateTime40.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval48 = duration29.toIntervalTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime40.withChronology(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property52 = dateTime40.property(dateTimeFieldType51);
        org.joda.time.DateTime dateTime54 = dateTime40.withYearOfEra((int) (byte) 100);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.halfdays();
        int int57 = periodType55.indexOf(durationFieldType56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime40, periodType55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = dateTime60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime65 = dateTime63.withSecondOfMinute(3);
        boolean boolean66 = dateTime40.equals((java.lang.Object) 3);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime40, periodType67);
        boolean boolean69 = dateTime40.isEqualNow();
        org.joda.time.Chronology chronology70 = dateTime40.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTime.Property property72 = dateTime40.property(dateTimeFieldType71);
        org.joda.time.DateTime.Property property73 = dateTime40.era();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = dateTime40.toString("Tue");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodType67);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        long long32 = dateTimeZone28.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1, dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime26.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.secondOfMinute();
        org.joda.time.Chronology chronology44 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology44.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = dateTimeField47.getAsText((-1L), locale49);
        long long54 = dateTimeField47.addWrapField((long) (short) 100, 1);
        int int55 = mutableDateTime34.get(dateTimeField47);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((int) '4');
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfWeek();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime66 = dateTime64.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay67 = dateTime64.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMillis((int) ' ');
        int int72 = dateTime69.getEra();
        org.joda.time.DateTime.Property property73 = dateTime69.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay74 = dateTime69.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMillis((int) ' ');
        int int79 = dateTime76.getEra();
        org.joda.time.DateTime.Property property80 = dateTime76.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval81 = null;
        org.joda.time.Days days82 = org.joda.time.Days.daysIn(readableInterval81);
        org.joda.time.Duration duration83 = days82.toStandardDuration();
        org.joda.time.Duration duration84 = duration83.toDuration();
        org.joda.time.DateTime dateTime86 = dateTime76.withDurationAdded((org.joda.time.ReadableDuration) duration84, (-1));
        boolean boolean88 = dateTime76.isAfter(0L);
        org.joda.time.LocalTime localTime89 = dateTime76.toLocalTime();
        org.joda.time.Days days90 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay74, (org.joda.time.ReadablePartial) localTime89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay67, (org.joda.time.ReadablePartial) timeOfDay74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes92 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) timeOfDay67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.055" + "'", str30, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja-JP" + "'", str50, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1100L + "'", long54 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 24 + "'", int55 == 24);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(days82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(days90);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList12);
        boolean boolean15 = period5.equals((java.lang.Object) strList14);
        org.joda.time.Period period17 = period5.withHours((int) (byte) 1);
        org.joda.time.Period period19 = period17.plusYears(30);
        org.joda.time.Period period21 = period17.withSeconds(26199270);
        org.joda.time.Period period23 = period17.withHours(1814399);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        mutablePeriod13.addHours(28);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod13.copy();
        mutablePeriod13.addYears((-19045));
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod13.toMutablePeriod();
        mutablePeriod19.setSeconds(436);
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusSeconds((int) (short) 1);
        org.joda.time.Period period29 = period27.multipliedBy(100);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = mutablePeriod19.getFieldTypes();
        int int32 = mutablePeriod19.getMonths();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.Chronology chronology46 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfMinute();
        int int51 = dateTimeField49.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = dateTimeField49.getAsText(readablePartial52, 3, locale54);
        int int56 = dateTimeField36.getMaximumTextLength(locale54);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayVariant(locale60);
        java.lang.String str63 = locale54.getDisplayCountry(locale57);
        java.util.Set<java.lang.Character> charSet64 = locale57.getExtensionKeys();
        java.util.Locale locale65 = locale57.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = locale65.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3" + "'", str55, "3");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "German" + "'", str59, "German");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Koreanisch" + "'", str61, "Koreanisch");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S\374dkorea" + "'", str63, "S\374dkorea");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTime();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 55);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) instant9, periodType10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        int int13 = minutes12.getMinutes();
        org.joda.time.Minutes minutes14 = minutes12.negated();
        org.joda.time.PeriodType periodType15 = minutes14.getPeriodType();
        boolean boolean16 = mutablePeriod11.equals((java.lang.Object) minutes14);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.minutes(1);
        int int19 = minutes18.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        org.joda.time.Period period30 = period27.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes31 = period27.toStandardMinutes();
        boolean boolean32 = dateTime21.equals((java.lang.Object) minutes31);
        boolean boolean33 = minutes18.isGreaterThan(minutes31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property44 = dateTime37.secondOfMinute();
        org.joda.time.Chronology chronology45 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology45);
        java.lang.String str48 = period47.toString();
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod53 = period52.toMutablePeriod();
        org.joda.time.Period period55 = period52.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes56 = period52.toStandardMinutes();
        org.joda.time.Minutes minutes58 = minutes56.multipliedBy(435);
        boolean boolean59 = minutes49.isLessThan(minutes56);
        org.joda.time.Minutes minutes61 = minutes49.minus(2);
        org.joda.time.Minutes minutes62 = minutes49.negated();
        org.joda.time.Minutes minutes63 = minutes18.plus(minutes49);
        java.lang.String str64 = minutes18.toString();
        org.joda.time.Minutes minutes65 = minutes14.minus(minutes18);
        int int66 = minutes14.getMinutes();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.059S" + "'", str48, "PT0.059S");
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT1M" + "'", str64, "PT1M");
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-2) + "'", int66 == (-2));
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration16.isLongerThan(readableDuration17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isLongerThan(readableDuration23);
        boolean boolean25 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime32 = dateTime27.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval35 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime36 = dateTime27.toLocalDateTime();
        boolean boolean37 = dateTimeZone11.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone11.getOffsetFromLocal(1814000L);
        int int41 = dateTimeZone11.getStandardOffset(60000L);
        long long43 = dateTimeZone11.nextTransition((-691115947202014L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 55 + "'", int39 == 55);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 55 + "'", int41 == 55);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-691115947202014L) + "'", long43 == (-691115947202014L));
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = period7.withYears(92000);
        org.joda.time.Period period11 = period9.withYears(31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds12 = period9.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean2 = instant0.isEqual(10L);
        org.joda.time.Instant instant4 = instant0.minus(87350400000L);
        org.joda.time.Instant instant7 = instant4.withDurationAdded((long) 28, 112);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration11.isLongerThan(readableDuration12);
        org.joda.time.Duration duration14 = duration11.toDuration();
        org.joda.time.Instant instant15 = instant4.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology16 = instant4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = instant4.toMutableDateTimeISO();
        int int18 = mutableDateTime17.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 440 + "'", int18 == 440);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setScript("2022-02-22T07:20:21.040+00:00:00.055");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T07:20:21.040+00:00:00.055 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.Duration duration13 = duration9.plus((-1L));
        org.joda.time.Days days14 = duration13.toStandardDays();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.secondOfMinute();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField27 = durationFieldType15.getField(chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, chronology29);
        int int31 = period30.getMillis();
        long long34 = chronology25.add((org.joda.time.ReadablePeriod) period30, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object) duration13, chronology25);
        org.joda.time.DateTimeField dateTimeField36 = chronology25.era();
        long long38 = dateTimeField36.remainder(1645514351261L);
        boolean boolean40 = dateTimeField36.isLeap(1857600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4100L + "'", long34 == 4100L);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 63781111151316L + "'", long38 == 63781111151316L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean2 = instant0.isEqual(10L);
        org.joda.time.Instant instant4 = instant0.minus(87350400000L);
        org.joda.time.Instant instant7 = instant4.withDurationAdded((long) 28, 112);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration11.isLongerThan(readableDuration12);
        org.joda.time.Duration duration14 = duration11.toDuration();
        org.joda.time.Instant instant15 = instant4.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Period period16 = duration14.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        int int9 = property8.getMaximumValue();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DurationField durationField11 = property8.getDurationField();
        long long14 = durationField11.getMillis(1645514189114L, 1645514176838L);
        long long17 = durationField11.getValueAsLong(1645514321179L, 1645514313466L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 98730851346840000L + "'", long14 == 98730851346840000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 27425238L + "'", long17 == 27425238L);
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds9 = seconds7.multipliedBy(1);
        boolean boolean10 = property5.equals((java.lang.Object) seconds7);
        org.joda.time.Seconds seconds12 = seconds7.plus(435);
        org.joda.time.DurationFieldType durationFieldType13 = seconds12.getFieldType();
        org.joda.time.PeriodType periodType14 = seconds12.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(943, 40, 92000, 7);
        mutablePeriod19.addMillis(366);
        java.lang.String str22 = mutablePeriod19.toString();
        boolean boolean23 = periodType14.equals((java.lang.Object) str22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT943H40M92000.373S" + "'", str22, "PT943H40M92000.373S");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        java.lang.String str26 = property25.toString();
        int int27 = property25.getMaximumValue();
        int int28 = property25.getMaximumValueOverall();
        org.joda.time.DateTime dateTime29 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        int int39 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period40 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime42 = dateTime29.minus(1814400000L);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime42.withYearOfEra(34);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 28 + "'", int27 == 28);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = period7.withYears(92000);
        org.joda.time.Period period11 = period9.withYears(31);
        org.joda.time.Period period12 = period9.negated();
        org.joda.time.Period period14 = period12.withMillis(39);
        java.lang.String str15 = period12.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P-92000YT-100S" + "'", str15, "P-92000YT-100S");
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.setWeeks((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod3.toMutablePeriod();
        mutablePeriod30.setDays(59);
        mutablePeriod30.setDays(26160);
        mutablePeriod30.addHours(417);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 55);
        org.joda.time.Instant instant3 = instant1.minus((long) 26232);
        boolean boolean4 = instant3.isAfterNow();
        org.joda.time.Instant instant6 = instant3.plus(1645514296989L);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 59);
        org.joda.time.DateTime dateTime10 = instant9.toDateTimeISO();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        mutablePeriod3.setDays((int) (short) 100);
        int int34 = mutablePeriod3.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        boolean boolean37 = mutablePeriod3.isSupported(durationFieldType36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusYears((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime39.dayOfWeek();
        java.lang.String str43 = property42.getName();
        int int44 = property42.getMaximumValueOverall();
        org.joda.time.Interval interval45 = property42.toInterval();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval45);
        org.joda.time.MutableInterval mutableInterval47 = interval45.toMutableInterval();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.Days days53 = org.joda.time.Days.daysIn(readableInterval52);
        org.joda.time.Duration duration54 = days53.toStandardDuration();
        org.joda.time.Duration duration55 = duration54.toDuration();
        org.joda.time.ReadableDuration readableDuration56 = null;
        boolean boolean57 = duration55.isLongerThan(readableDuration56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        org.joda.time.Days days59 = org.joda.time.Days.daysIn(readableInterval58);
        org.joda.time.Duration duration60 = days59.toStandardDuration();
        org.joda.time.Duration duration61 = duration60.toDuration();
        org.joda.time.ReadableDuration readableDuration62 = null;
        boolean boolean63 = duration61.isLongerThan(readableDuration62);
        boolean boolean64 = duration55.isShorterThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMillis((int) ' ');
        int int69 = dateTime66.getEra();
        org.joda.time.DateTime dateTime71 = dateTime66.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime73 = dateTime66.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval74 = duration55.toIntervalTo((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod51.add((org.joda.time.ReadableInterval) interval74);
        long long76 = interval74.getStartMillis();
        org.joda.time.Chronology chronology77 = interval74.getChronology();
        org.joda.time.Days days78 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval74);
        boolean boolean79 = mutableInterval47.contains((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Interval interval80 = mutableInterval47.toInterval();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "dayOfWeek" + "'", str43, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(days59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval74);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645514425235L + "'", long76 == 1645514425235L);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(days78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(interval80);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        boolean boolean33 = interval26.isAfter((org.joda.time.ReadableInstant) dateTime30);
        long long34 = interval26.getEndMillis();
        org.joda.time.Period period35 = interval26.toPeriod();
        org.joda.time.Period period37 = period35.withMinutes((-2147483648));
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514425326L + "'", long34 == 1645514425326L);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.Chronology chronology46 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfMinute();
        int int51 = dateTimeField49.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = dateTimeField49.getAsText(readablePartial52, 3, locale54);
        int int56 = dateTimeField36.getMaximumTextLength(locale54);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayVariant(locale60);
        java.lang.String str63 = locale54.getDisplayCountry(locale57);
        java.util.Set<java.lang.Character> charSet64 = locale57.getExtensionKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str66 = dateTimeFieldType65.getName();
        boolean boolean67 = locale57.equals((java.lang.Object) str66);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3" + "'", str55, "3");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "German" + "'", str59, "German");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Koreanisch" + "'", str61, "Koreanisch");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S\374dkorea" + "'", str63, "S\374dkorea");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "millisOfDay" + "'", str66, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.Chronology chronology5 = dateTime3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.seconds();
        java.lang.String str7 = chronology5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:00.055]" + "'", str7, "ISOChronology[+00:00:00.055]");
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.lang.String str8 = dateTimeZone6.getID();
        long long10 = dateTimeZone6.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1, dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfMinute();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = dateTimeField25.getAsText((-1L), locale27);
        long long32 = dateTimeField25.addWrapField((long) (short) 100, 1);
        int int33 = mutableDateTime12.get(dateTimeField25);
        long long35 = dateTimeField25.roundFloor(1645512060662L);
        java.lang.String str36 = dateTimeField25.getName();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) ' ');
        int int42 = dateTime39.getEra();
        org.joda.time.DateTime.Property property43 = dateTime39.secondOfMinute();
        org.joda.time.DateTime dateTime44 = property43.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime47.withZone(dateTimeZone48);
        org.joda.time.DateTime.Property property51 = dateTime50.weekyear();
        boolean boolean52 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears((int) '4');
        org.joda.time.DateTime.Property property57 = dateTime54.dayOfWeek();
        org.joda.time.DateTime dateTime60 = dateTime54.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property61 = dateTime54.secondOfMinute();
        org.joda.time.Chronology chronology62 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.dayOfMonth();
        org.joda.time.DurationField durationField64 = chronology62.weeks();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology62.getZone();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyear();
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = locale67.toLanguageTag();
        java.lang.String str69 = locale67.getDisplayScript();
        int int70 = dateTimeField66.getMaximumShortTextLength(locale67);
        java.util.Calendar calendar71 = dateTime44.toCalendar(locale67);
        java.lang.String str72 = dateTimeField25.getAsShortText(26199270, locale67);
        org.joda.time.ReadableInterval readableInterval73 = null;
        org.joda.time.Weeks weeks74 = org.joda.time.Weeks.weeksIn(readableInterval73);
        org.joda.time.Weeks weeks75 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks77 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks79 = weeks77.minus(59);
        org.joda.time.Weeks weeks80 = weeks75.plus(weeks79);
        org.joda.time.Weeks weeks82 = weeks80.minus((int) (short) 1);
        boolean boolean83 = weeks74.isGreaterThan(weeks82);
        org.joda.time.Weeks weeks85 = org.joda.time.Weeks.weeks((int) (byte) 0);
        boolean boolean86 = weeks74.isGreaterThan(weeks85);
        org.joda.time.DurationFieldType durationFieldType87 = weeks85.getFieldType();
        org.joda.time.Weeks weeks89 = org.joda.time.Weeks.weeks(26229);
        org.joda.time.Weeks weeks91 = weeks89.multipliedBy(2001);
        org.joda.time.Weeks weeks92 = weeks85.plus(weeks89);
        boolean boolean93 = locale67.equals((java.lang.Object) weeks89);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.055" + "'", str8, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja-JP" + "'", str28, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1100L + "'", long32 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 25 + "'", int33 == 25);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645512059945L + "'", long35 == 1645512059945L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondOfMinute" + "'", str36, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fr-FR" + "'", str68, "fr-FR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645514425945,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=0,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "26199270" + "'", str72, "26199270");
        org.junit.Assert.assertNotNull(weeks74);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertNotNull(weeks77);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertNotNull(weeks80);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(weeks85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertNotNull(weeks89);
        org.junit.Assert.assertNotNull(weeks91);
        org.junit.Assert.assertNotNull(weeks92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime12.plusMinutes(22);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.PeriodType periodType24 = mutablePeriod23.getPeriodType();
        mutablePeriod23.addHours(48);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 31);
        long long19 = dateTimeField10.getDifferenceAsLong((long) (byte) 1, (long) 943);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.util.Locale.setDefault(locale22);
        java.lang.String str26 = dateTimeField10.getAsShortText((long) 2, locale22);
        int int28 = dateTimeField10.getMinimumValue(1645514173148L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property39 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Days days45 = org.joda.time.Days.daysIn(readableInterval44);
        org.joda.time.Duration duration46 = days45.toStandardDuration();
        org.joda.time.Duration duration47 = duration46.toDuration();
        org.joda.time.ReadableDuration readableDuration48 = null;
        boolean boolean49 = duration47.isLongerThan(readableDuration48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.Days days51 = org.joda.time.Days.daysIn(readableInterval50);
        org.joda.time.Duration duration52 = days51.toStandardDuration();
        org.joda.time.Duration duration53 = duration52.toDuration();
        org.joda.time.ReadableDuration readableDuration54 = null;
        boolean boolean55 = duration53.isLongerThan(readableDuration54);
        boolean boolean56 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime65 = dateTime58.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval66 = duration47.toIntervalTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime67 = dateTime58.toLocalDateTime();
        boolean boolean68 = dateTimeZone42.isLocalDateTimeGap(localDateTime67);
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = dateTimeZone42.getShortName(31795199480L, locale70);
        boolean boolean72 = locale70.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            long long73 = dateTimeField10.set((long) 26357992, "2022-02-22T07:20:09.644+00:00:00.055", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:20:09.644+00:00:00.055\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 978566400000L + "'", long16 == 978566400000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-292275054) + "'", int28 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.055" + "'", str71, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        long long68 = chronology58.getDateTimeMillis((long) 0, 4, 40, 0, 22);
        org.joda.time.DateTimeField dateTimeField69 = chronology58.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = chronology58.weekyear();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 16799967L + "'", long68 == 16799967L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT3394800S");
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(12, 56, 2147483647, 51026400, 12, 0, 28, (int) '4');
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration16.isLongerThan(readableDuration17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isLongerThan(readableDuration23);
        boolean boolean25 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime32 = dateTime27.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval35 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        mutablePeriod12.add((org.joda.time.ReadableInterval) interval35);
        mutablePeriod12.setWeeks((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod12.toMutablePeriod();
        mutablePeriod39.setDays(59);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod39.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod43.setValue(386, (-18633));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 386");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        boolean boolean7 = property5.isLeap();
        org.joda.time.DateTime dateTime8 = property5.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(771);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 771 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration16.isLongerThan(readableDuration17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isLongerThan(readableDuration23);
        boolean boolean25 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime32 = dateTime27.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval35 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime36 = dateTime27.toLocalDateTime();
        boolean boolean37 = dateTimeZone11.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone11.getOffsetFromLocal(1814000L);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime43.getZone();
        boolean boolean46 = dateTimeZone44.isStandardOffset(0L);
        int int48 = dateTimeZone44.getStandardOffset((long) 999);
        java.lang.String str49 = dateTimeZone44.getID();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMillis((int) ' ');
        int int54 = dateTime51.getEra();
        org.joda.time.DateTime dateTime56 = dateTime51.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime58 = dateTime51.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime63 = dateTime60.withLaterOffsetAtOverlap();
        boolean boolean64 = dateTime51.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateMidnight dateMidnight65 = dateTime63.toDateMidnight();
        int int66 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateMidnight65);
        int int67 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.DateTimeZone dateTimeZone68 = dateMidnight65.getZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime74 = dateTime72.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime76 = dateTime72.plusDays((-1));
        org.joda.time.DateTime dateTime78 = dateTime76.minusMinutes(2022);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.plusYears((int) '4');
        org.joda.time.DateTime.Property property83 = dateTime80.dayOfWeek();
        org.joda.time.DateTime dateTime86 = dateTime80.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property87 = dateTime80.secondOfMinute();
        org.joda.time.Chronology chronology88 = dateTime80.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.dayOfMonth();
        org.joda.time.DurationField durationField90 = chronology88.weeks();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField92 = chronology88.weekyear();
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime((java.lang.Object) dateTime78, chronology88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period94 = new org.joda.time.Period((java.lang.Object) dateMidnight65, chronology88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateMidnight");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 55 + "'", int39 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 55 + "'", int48 == 55);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.055" + "'", str49, "+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateMidnight65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 55 + "'", int66 == 55);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 55 + "'", int67 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 999);
        org.joda.time.DurationField durationField17 = dateTimeField10.getRangeDurationField();
        long long20 = dateTimeField10.add(1645514189635L, 26216);
        long long22 = dateTimeField10.roundHalfEven(1645514351753L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 31525804800000L + "'", long16 == 31525804800000L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 828942362189635L + "'", long20 == 828942362189635L);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1641167999945L + "'", long22 == 1641167999945L);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.Chronology chronology46 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfMinute();
        int int51 = dateTimeField49.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = dateTimeField49.getAsText(readablePartial52, 3, locale54);
        int int56 = dateTimeField36.getMaximumTextLength(locale54);
        boolean boolean58 = dateTimeField36.isLeap((-82409903L));
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateTime61.withZone(dateTimeZone62);
        java.lang.String str66 = dateTimeZone62.getNameKey((long) 1);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone62.isLocalDateTimeGap(localDateTime67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMillis((int) ' ');
        int int73 = dateTimeZone62.getOffset((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(1745044860662L, dateTimeZone62);
        int int75 = dateTime74.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay76 = dateTime74.toYearMonthDay();
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.util.Locale locale80 = java.util.Locale.KOREA;
        java.lang.String str81 = locale80.getDisplayLanguage();
        java.lang.String str82 = locale77.getDisplayVariant(locale80);
        java.util.Set<java.lang.Character> charSet83 = locale77.getExtensionKeys();
        java.lang.String str84 = locale77.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay76, locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3" + "'", str55, "3");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 55 + "'", int73 == 55);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 16 + "'", int75 == 16);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "German" + "'", str79, "German");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str81, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime27.plusDays(1);
        org.joda.time.Duration duration36 = new org.joda.time.Duration(1645514394042L);
        org.joda.time.Weeks weeks38 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks40 = weeks38.minus(59);
        org.joda.time.PeriodType periodType41 = weeks38.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration36, periodType41);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod42.addSeconds(26396);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-54L) + "'", long24 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(periodType41);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = hours1.negated();
        org.joda.time.Hours hours3 = hours0.plus(hours1);
        org.joda.time.Hours hours4 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours7 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours8 = hours6.plus(hours7);
        org.joda.time.Hours hours10 = hours8.plus((int) (short) 10);
        org.joda.time.Hours hours12 = hours8.minus(2022);
        org.joda.time.Hours hours13 = hours3.minus(hours12);
        org.joda.time.PeriodType periodType14 = hours12.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType15 = hours12.getFieldType();
        java.lang.String str16 = durationFieldType15.getName();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hours" + "'", str16, "hours");
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.setPeriod((int) (short) 100, (int) (byte) 100, (int) '#', (int) (short) 100, 2147483647, (int) 'a', (int) (byte) -1, 31);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Days days18 = org.joda.time.Days.daysIn(readableInterval17);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Duration duration20 = duration19.toDuration();
        org.joda.time.ReadableDuration readableDuration21 = null;
        boolean boolean22 = duration20.isLongerThan(readableDuration21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.daysIn(readableInterval23);
        org.joda.time.Duration duration25 = days24.toStandardDuration();
        org.joda.time.Duration duration26 = duration25.toDuration();
        org.joda.time.ReadableDuration readableDuration27 = null;
        boolean boolean28 = duration26.isLongerThan(readableDuration27);
        boolean boolean29 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        int int34 = dateTime31.getEra();
        org.joda.time.DateTime dateTime36 = dateTime31.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime38 = dateTime31.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval39 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval39);
        mutablePeriod16.addYears((int) ' ');
        mutablePeriod16.setSeconds((int) (byte) 100);
        mutablePeriod16.setDays((int) (short) 100);
        mutablePeriod16.add(0, (int) '4', (int) (byte) 10, 28, (int) '#', (int) (short) 0, 0, 28);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.Days days57 = org.joda.time.Days.daysIn(readableInterval56);
        org.joda.time.Duration duration58 = days57.toStandardDuration();
        org.joda.time.Duration duration59 = duration58.toDuration();
        org.joda.time.ReadableDuration readableDuration60 = null;
        boolean boolean61 = duration59.isLongerThan(readableDuration60);
        org.joda.time.Duration duration62 = duration59.toDuration();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Interval interval64 = duration59.toIntervalTo(readableInstant63);
        java.lang.String str65 = interval64.toString();
        mutablePeriod16.setPeriod((org.joda.time.ReadableInterval) interval64);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval64);
        org.joda.time.DateTime dateTime68 = interval64.getStart();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMillis((int) ' ');
        int int73 = dateTime70.getEra();
        org.joda.time.DateTime.Property property74 = dateTime70.secondOfMinute();
        org.joda.time.DateTime dateTime75 = dateTime70.toDateTime();
        org.joda.time.DateTime dateTime77 = dateTime70.minus(1645514152287L);
        boolean boolean78 = interval64.contains((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(interval64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T07:20:25.978+00:00:00.055/2022-02-22T07:20:25.978+00:00:00.055" + "'", str65, "2022-02-22T07:20:25.978+00:00:00.055/2022-02-22T07:20:25.978+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration3.toDuration();
        org.joda.time.Duration duration25 = duration23.plus((-78382080000000L));
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Days days27 = org.joda.time.Days.daysIn(readableInterval26);
        org.joda.time.Duration duration28 = days27.toStandardDuration();
        long long29 = duration28.getStandardHours();
        java.lang.String str30 = duration28.toString();
        org.joda.time.Duration duration31 = duration25.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration33 = duration25.withMillis(16799967L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration36 = duration33.withDurationAdded(47719913274464L, 37543873);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 47719913274464 * 37543873");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatter8.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter11 = periodFormatter8.getPrinter();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.secondOfMinute();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField27 = durationFieldType15.getField(chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, chronology29);
        int int31 = period30.getMillis();
        long long34 = chronology25.add((org.joda.time.ReadablePeriod) period30, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType14, chronology25);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = periodFormatter8.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod35, "2022-02-22T07:19:03.508+00:00:00.055/2022-02-22T07:19:03.508+00:00:00.055", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(periodParser10);
        org.junit.Assert.assertNull(periodPrinter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4100L + "'", long34 == 4100L);
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        org.joda.time.Period period4 = new org.joda.time.Period((-2022), 103, 2001, 729764);
        org.joda.time.Period period6 = period4.withHours(0);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Period period9 = period5.withMillis(1814400);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        int int14 = period9.indexOf(durationFieldType12);
        org.joda.time.Period period16 = period9.withYears(366);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period3 = period1.withHours(31);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((int) ' ');
        int int16 = dateTime13.getEra();
        int int17 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property26 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long32 = dateTimeZone29.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime13.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean41 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration42 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Period period44 = period3.plusHours(105);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-54L) + "'", long32 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = dateTime3.isSupported(dateTimeFieldType5);
        org.joda.time.Period period7 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration9 = duration1.minus((-86400000L));
        org.joda.time.Duration duration11 = duration1.plus((long) 26173127);
        org.joda.time.Duration duration13 = duration11.plus((long) 46);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        long long32 = dateTimeZone28.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1, dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime26.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.secondOfMinute();
        org.joda.time.Chronology chronology44 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology44.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = dateTimeField47.getAsText((-1L), locale49);
        long long54 = dateTimeField47.addWrapField((long) (short) 100, 1);
        int int55 = mutableDateTime34.get(dateTimeField47);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime65 = dateTime58.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime66 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime75 = dateTime69.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property76 = dateTime69.minuteOfHour();
        org.joda.time.DateTime dateTime77 = dateTime69.toDateTime();
        int int78 = dateTime77.getWeekyear();
        int int79 = dateTime77.getCenturyOfEra();
        boolean boolean81 = dateTime77.equals((java.lang.Object) (short) 1);
        java.lang.String str82 = dateTime77.toString();
        org.joda.time.DateTime dateTime84 = dateTime77.withCenturyOfEra(729764);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.halfdays();
        int int87 = periodType85.indexOf(durationFieldType86);
        org.joda.time.PeriodType periodType88 = periodType85.withWeeksRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime77, periodType88);
        org.joda.time.DateTime dateTime91 = dateTime77.minusWeeks(26416);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.055" + "'", str30, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja-JP" + "'", str50, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1100L + "'", long54 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 26 + "'", int55 == 26);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 20 + "'", int79 == 20);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T07:20:26.209+00:00:00.055" + "'", str82, "2022-02-22T07:20:26.209+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.addUnicodeLocaleAttribute("java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.io.IOException [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setLanguageTag("2022-02-22T07:16:21.135Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 74, (-1306367964316780955L));
        org.joda.time.Period period4 = period2.plusMinutes((-2483));
        org.joda.time.Period period6 = period2.withHours(473);
        org.joda.time.Period period8 = period6.minusWeeks(26216);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        java.lang.String str13 = periodType12.toString();
        org.joda.time.PeriodType periodType14 = periodType12.withMinutesRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period(1645514208443L, (long) '4', periodType14);
        org.joda.time.PeriodType periodType16 = periodType14.withYearsRemoved();
        java.lang.String str17 = periodType16.getName();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) ' ');
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime dateTime25 = dateTime20.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime27 = dateTime20.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears(26173127);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(0L, chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.DateTime dateTime36 = property35.roundFloorCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.plus(4320000001L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) ' ');
        int int47 = dateTime44.getEra();
        int int48 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime50.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime59.getZone();
        long long63 = dateTimeZone60.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime44.toMutableDateTime(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime66.withZone(dateTimeZone67);
        java.lang.String str71 = dateTimeZone67.getNameKey((long) 1);
        long long74 = dateTimeZone67.adjustOffset((long) 2022, true);
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime64.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime76 = dateTime38.toDateTime(dateTimeZone67);
        org.joda.time.Chronology chronology77 = chronology31.withZone(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((java.lang.Object) period6, periodType16, chronology77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[Years]" + "'", str13, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "YearsNoYears" + "'", str17, "YearsNoYears");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-54L) + "'", long63 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2022L + "'", long74 == 2022L);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder7 = builder0.setLocale(locale6);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setLanguageTag("2022-02-22T07:20:14.343+00:00:00.055");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime9.minusWeeks(22);
        int int15 = dateTime9.getMinuteOfHour();
        org.joda.time.Duration duration16 = org.joda.time.Duration.ZERO;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.daysIn(readableInterval23);
        org.joda.time.Duration duration25 = days24.toStandardDuration();
        org.joda.time.Duration duration26 = duration25.toDuration();
        org.joda.time.DateTime dateTime28 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration26, (-1));
        org.joda.time.Duration duration30 = duration26.plus((-1L));
        long long31 = duration26.getStandardMinutes();
        boolean boolean32 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration34 = duration26.plus(0L);
        org.joda.time.DateTime dateTime35 = dateTime9.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.Days days37 = org.joda.time.Days.daysIn(readableInterval36);
        org.joda.time.Days days39 = days37.plus((-1));
        int int40 = days37.getDays();
        org.joda.time.PeriodType periodType41 = days37.getPeriodType();
        int int42 = days37.size();
        org.joda.time.Days days44 = days37.dividedBy(26214);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfMonth();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime50.toDateTime();
        int int59 = dateTime58.getWeekyear();
        int int60 = dateTime58.getCenturyOfEra();
        boolean boolean62 = dateTime58.equals((java.lang.Object) (short) 1);
        int int63 = dateTime58.getCenturyOfEra();
        int int64 = property47.getDifference((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean65 = days37.equals((java.lang.Object) dateTime58);
        org.joda.time.DateTime dateTime67 = dateTime58.minusMinutes(26298031);
        org.joda.time.Period period68 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20 + "'", int60 == 20);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20 + "'", int63 == 20);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 112);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime dateTime13 = dateTime3.minusDays((int) (short) 100);
        org.joda.time.Period period14 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str17 = dateTimeZone15.getID();
        long long19 = dateTimeZone15.previousTransition((long) (short) 0);
        long long21 = dateTimeZone15.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone15);
        java.util.Date date23 = dateTime22.toDate();
        org.joda.time.DateTime dateTime25 = dateTime22.plusMinutes((int) 'a');
        org.joda.time.DateTime.Property property26 = dateTime22.monthOfYear();
        org.joda.time.Period period27 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime22);
        long long28 = duration1.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime33.plus((long) (short) 10);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withYear(35435);
        org.joda.time.DateTime.Property property39 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = dateTime35.minusSeconds(23);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.days();
        org.joda.time.Period period43 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime35, periodType42);
        org.joda.time.DateTime dateTime45 = dateTime35.withMillisOfDay(991);
        org.joda.time.DateTime.Property property46 = dateTime35.weekOfWeekyear();
        org.joda.time.DateTime dateTime47 = dateTime35.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.055" + "'", str17, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Feb 22 07:20:26 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T07:20:26.522+00:00:00.055" + "'", str36, "2022-02-22T07:20:26.522+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        java.io.IOException iOException2 = new java.io.IOException("P3D");
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("Canada", (java.lang.Throwable) iOException4);
        java.io.IOException iOException9 = new java.io.IOException("P3D");
        java.lang.Throwable[] throwableArray10 = iOException9.getSuppressed();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException("Canada", (java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("", (java.lang.Throwable) iOException12);
        iOException5.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.String str15 = iOException12.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: Canada" + "'", str15, "java.io.IOException: Canada");
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        org.joda.time.Period period4 = new org.joda.time.Period(26169, 6, 26257876, 0);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property23 = dateTime16.yearOfEra();
        java.lang.String str24 = property23.getName();
        org.joda.time.DateTime dateTime26 = property23.setCopy(74);
        org.joda.time.DateTime dateTime28 = property23.addWrapFieldToCopy(33);
        boolean boolean30 = dateTime28.isAfter(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-54L) + "'", long14 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 55 + "'", int22 == 55);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfEra" + "'", str24, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        boolean boolean6 = dateTimeZone4.isStandardOffset(0L);
        boolean boolean8 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.lang.String str11 = dateTimeZone4.getName(1645514194937L);
        java.lang.String str13 = dateTimeZone4.getShortName((long) '#');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime16.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableDuration14, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime28 = dateTime16.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Days days30 = org.joda.time.Days.daysIn(readableInterval29);
        org.joda.time.Duration duration31 = days30.toStandardDuration();
        org.joda.time.Duration duration32 = duration31.toDuration();
        org.joda.time.ReadableDuration readableDuration33 = null;
        boolean boolean34 = duration32.isLongerThan(readableDuration33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Days days36 = org.joda.time.Days.daysIn(readableInterval35);
        org.joda.time.Duration duration37 = days36.toStandardDuration();
        org.joda.time.Duration duration38 = duration37.toDuration();
        org.joda.time.ReadableDuration readableDuration39 = null;
        boolean boolean40 = duration38.isLongerThan(readableDuration39);
        boolean boolean41 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration32, periodType42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime51 = dateTime47.plusDays((-1));
        org.joda.time.Duration duration52 = mutablePeriod43.toDurationTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime54 = dateTime47.withDayOfYear(100);
        int int55 = dateTime47.getSecondOfDay();
        org.joda.time.DateTime dateTime57 = dateTime47.withYear(57);
        int int58 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone59 = dateTimeZone4.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.055' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.055" + "'", str11, "+00:00:00.055");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.055" + "'", str13, "+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 26426 + "'", int55 == 26426);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 55 + "'", int58 == 55);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.multipliedBy(31);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime dateTime28 = dateTime23.minusMinutes((int) (short) 1);
        int int29 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime23.getZone();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Days days32 = org.joda.time.Days.daysIn(readableInterval31);
        org.joda.time.Duration duration33 = days32.toStandardDuration();
        org.joda.time.Duration duration34 = duration33.toDuration();
        org.joda.time.ReadableDuration readableDuration35 = null;
        boolean boolean36 = duration34.isLongerThan(readableDuration35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Days days38 = org.joda.time.Days.daysIn(readableInterval37);
        org.joda.time.Duration duration39 = days38.toStandardDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.ReadableDuration readableDuration41 = null;
        boolean boolean42 = duration40.isLongerThan(readableDuration41);
        boolean boolean43 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMillis((int) ' ');
        int int48 = dateTime45.getEra();
        org.joda.time.DateTime dateTime50 = dateTime45.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime52 = dateTime45.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval53 = duration34.toIntervalTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration34.toDuration();
        org.joda.time.Duration duration56 = duration54.plus((-78382080000000L));
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTime dateTime59 = dateTime23.minus(31525804800000L);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType61 = periodType60.withWeeksRemoved();
        org.joda.time.PeriodType periodType62 = periodType60.withMonthsRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period(readableInstant6, (org.joda.time.ReadableInstant) dateTime23, periodType60);
        org.joda.time.Period period64 = period2.withPeriodType(periodType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period66 = period64.plusHours(917);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-54L) + "'", long21 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 55 + "'", int29 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period64);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Period period9 = period5.withMillis(1814400);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        boolean boolean13 = periodType10.isSupported(durationFieldType12);
        int int14 = period9.indexOf(durationFieldType12);
        int int15 = period9.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        boolean boolean9 = periodFormatter2.isParser();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableDuration12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = dateTime14.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration30, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1645514164648L, 1645514168245L, periodType40);
        org.joda.time.PeriodType periodType43 = periodType40.withMillisRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter2.withParseType(periodType40);
        java.util.Locale locale45 = periodFormatter44.getLocale();
        boolean boolean46 = periodFormatter44.isPrinter();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod54 = period53.toMutablePeriod();
        org.joda.time.Period period56 = period53.plusMinutes((int) (byte) 0);
        mutablePeriod50.mergePeriod((org.joda.time.ReadablePeriod) period53);
        mutablePeriod50.setDays((int) 'a');
        mutablePeriod50.addMinutes(25);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = periodFormatter44.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod50, "", (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        int int11 = dateTime9.getCenturyOfEra();
        boolean boolean13 = dateTime9.equals((java.lang.Object) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime();
        org.joda.time.Duration duration16 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Days days18 = org.joda.time.Days.daysIn(readableInterval17);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Duration duration20 = duration19.toDuration();
        boolean boolean21 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Days days23 = org.joda.time.Days.daysIn(readableInterval22);
        org.joda.time.Duration duration24 = days23.toStandardDuration();
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.ReadableDuration readableDuration26 = null;
        boolean boolean27 = duration25.isLongerThan(readableDuration26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Days days29 = org.joda.time.Days.daysIn(readableInterval28);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration31.isLongerThan(readableDuration32);
        boolean boolean34 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis((int) ' ');
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime dateTime41 = dateTime36.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime36.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval44 = duration25.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration45 = duration25.toDuration();
        boolean boolean46 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Days days52 = org.joda.time.Days.daysIn(readableInterval51);
        org.joda.time.Duration duration53 = days52.toStandardDuration();
        org.joda.time.Duration duration54 = duration53.toDuration();
        org.joda.time.ReadableDuration readableDuration55 = null;
        boolean boolean56 = duration54.isLongerThan(readableDuration55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        boolean boolean63 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMillis((int) ' ');
        int int68 = dateTime65.getEra();
        org.joda.time.DateTime dateTime70 = dateTime65.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime72 = dateTime65.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval73 = duration54.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        mutablePeriod50.add((org.joda.time.ReadableInterval) interval73);
        int int75 = mutablePeriod50.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod76 = mutablePeriod50.copy();
        int int77 = mutablePeriod50.getMonths();
        boolean boolean78 = duration19.equals((java.lang.Object) mutablePeriod50);
        org.joda.time.Duration duration80 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration82 = duration80.minus((-78382080000000L));
        org.joda.time.Duration duration84 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval85 = null;
        org.joda.time.Days days86 = org.joda.time.Days.daysIn(readableInterval85);
        org.joda.time.Duration duration87 = days86.toStandardDuration();
        org.joda.time.Duration duration88 = duration87.toDuration();
        boolean boolean89 = duration84.isLongerThan((org.joda.time.ReadableDuration) duration87);
        boolean boolean90 = duration82.isEqual((org.joda.time.ReadableDuration) duration87);
        boolean boolean91 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration87);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration19);
        long long93 = duration19.getStandardSeconds();
        org.joda.time.Duration duration94 = duration19.toDuration();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(days86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(duration94);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 100);
        org.joda.time.Period period3 = period1.withWeeks((int) 'u');
        org.joda.time.Period period5 = period1.withMonths(16);
        org.joda.time.Hours hours6 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours7 = org.joda.time.Hours.SEVEN;
        boolean boolean8 = hours6.isLessThan(hours7);
        org.joda.time.DurationFieldType durationFieldType9 = hours6.getFieldType();
        int int10 = period5.get(durationFieldType9);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.setCopy(1);
        int int6 = dateTime5.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        int int14 = property11.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DurationField durationField15 = property11.getLeapDurationField();
        org.joda.time.DateTime dateTime17 = property11.addToCopy(100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(896);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime5.plusDays(5);
        int int23 = dateTime5.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, 0L);
        mutablePeriod2.setSeconds(9);
        mutablePeriod2.setDays(30240);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Days days10 = org.joda.time.Days.daysIn(readableInterval9);
        org.joda.time.Duration duration11 = days10.toStandardDuration();
        org.joda.time.Duration duration12 = duration11.toDuration();
        org.joda.time.ReadableDuration readableDuration13 = null;
        boolean boolean14 = duration12.isLongerThan(readableDuration13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        boolean boolean21 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime dateTime28 = dateTime23.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime30 = dateTime23.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval31 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period32 = duration12.toPeriod();
        long long33 = duration12.getStandardSeconds();
        org.joda.time.Instant instant35 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration12, 2022);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        mutablePeriod2.add(1645514360193L, chronology36);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.PeriodType periodType1 = hours0.getPeriodType();
        org.joda.time.Hours hours3 = hours0.minus(26330);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds9 = seconds7.multipliedBy(1);
        boolean boolean10 = property5.equals((java.lang.Object) seconds7);
        org.joda.time.DateTime dateTime11 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.withCenturyOfEra(41);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis(1645514250178L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime13.withMonthOfYear(331);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 331 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        org.joda.time.Days days30 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis((int) ' ');
        int int43 = dateTime40.getEra();
        int int44 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusYears((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime46.dayOfWeek();
        org.joda.time.DateTime dateTime52 = dateTime46.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property53 = dateTime46.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime46.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        long long59 = dateTimeZone56.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime40.toMutableDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime66 = dateTime62.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime60, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean68 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime70 = dateTime32.minusYears(56);
        boolean boolean71 = interval26.isBefore((org.joda.time.ReadableInstant) dateTime70);
        java.lang.String str72 = interval26.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514427043L + "'", long28 == 1645514427043L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-54L) + "'", long59 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T07:20:27.098+00:00:00.055/2022-02-22T07:20:27.098+00:00:00.055" + "'", str72, "2022-02-22T07:20:27.098+00:00:00.055/2022-02-22T07:20:27.098+00:00:00.055");
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale5 = builder0.build();
        java.lang.String str6 = locale5.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(771);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Days days17 = org.joda.time.Days.daysIn(readableInterval16);
        org.joda.time.Duration duration18 = days17.toStandardDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration19.isLongerThan(readableDuration20);
        boolean boolean22 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime24.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval32 = duration13.toIntervalTo((org.joda.time.ReadableInstant) dateTime24);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval32);
        mutablePeriod9.addYears((int) ' ');
        mutablePeriod9.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableDuration38, (org.joda.time.ReadableInstant) dateTime40);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod49.add(durationFieldType51, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property63 = dateTime56.secondOfMinute();
        org.joda.time.Chronology chronology64 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1, chronology64);
        org.joda.time.DurationField durationField68 = durationFieldType51.getField(chronology64);
        long long74 = chronology64.getDateTimeMillis((long) 0, 4, 40, 0, 22);
        org.joda.time.DateTimeField dateTimeField75 = chronology64.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusYears((int) '4');
        org.joda.time.DateTime.Property property80 = dateTime77.dayOfWeek();
        org.joda.time.DateTime dateTime83 = dateTime77.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime85 = dateTime83.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay86 = dateTime83.toTimeOfDay();
        java.lang.String str87 = timeOfDay86.toString();
        java.util.Locale.Builder builder89 = new java.util.Locale.Builder();
        java.util.Locale locale90 = builder89.build();
        java.lang.String str91 = dateTimeField75.getAsShortText((org.joda.time.ReadablePartial) timeOfDay86, 26173127, locale90);
        java.util.Set<java.lang.Character> charSet92 = locale90.getExtensionKeys();
        java.util.Locale.Builder builder93 = builder5.setLocale(locale90);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder95 = builder5.setLanguageTag("2074");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2074 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField68);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 16799967L + "'", long74 == 16799967L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(timeOfDay86);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "T07:20:27.144" + "'", str87, "T07:20:27.144");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "26173127" + "'", str91, "26173127");
        org.junit.Assert.assertNotNull(charSet92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        long long32 = dateTimeZone28.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1, dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime26.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.secondOfMinute();
        org.joda.time.Chronology chronology44 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology44.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = dateTimeField47.getAsText((-1L), locale49);
        long long54 = dateTimeField47.addWrapField((long) (short) 100, 1);
        int int55 = mutableDateTime34.get(dateTimeField47);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime65 = dateTime58.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime66 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = dateTime66.minusMinutes(105);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.055" + "'", str30, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja-JP" + "'", str50, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1100L + "'", long54 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 27 + "'", int55 == 27);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.minutes(26198);
        boolean boolean3 = minutes0.isGreaterThan(minutes2);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime.Property property18 = dateTime14.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.DateTime dateTime24 = dateTime14.withDurationAdded((org.joda.time.ReadableDuration) duration22, (-1));
        long long25 = duration22.getMillis();
        org.joda.time.Duration duration27 = new org.joda.time.Duration(1645514282130L);
        boolean boolean28 = duration22.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, (long) 26256, periodType32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration22, periodType32);
        org.joda.time.Duration duration35 = duration22.toDuration();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = org.joda.time.Period.weeks(1);
        org.joda.time.Period period10 = period7.plus((org.joda.time.ReadablePeriod) period9);
        int int11 = period10.getMillis();
        org.joda.time.Period period13 = period10.multipliedBy(28);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period15 = period13.withPeriodType(periodType14);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-22T07:18:45.777+00:00:00.520/2022-02-22T07:18:45.777+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t07:18:45.777+00:00:00.520/2022-02-22t07:18:45.777+00:00:00.520");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("TWN");
        java.util.Locale.Builder builder11 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setScript("2022-02-22T07:20:16.198+00:00:00.055");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T07:20:16.198+00:00:00.055 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfCentury();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime1.getZone();
        java.lang.String str23 = dateTimeZone21.getName((long) (-3));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 369 + "'", int20 == 369);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.055" + "'", str23, "+00:00:00.055");
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getDisplayVariant();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter8.withLocale(locale10);
        boolean boolean13 = periodFormatter12.isParser();
        java.io.Writer writer14 = null;
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Days days19 = org.joda.time.Days.daysIn(readableInterval18);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        org.joda.time.Duration duration21 = duration20.toDuration();
        org.joda.time.ReadableDuration readableDuration22 = null;
        boolean boolean23 = duration21.isLongerThan(readableDuration22);
        org.joda.time.Duration duration25 = duration17.withDurationAdded(readableDuration22, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfWeek();
        org.joda.time.DateTime dateTime33 = dateTime27.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration43);
        boolean boolean48 = duration25.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime50.toDateTime();
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Period period60 = duration43.toPeriodTo((org.joda.time.ReadableInstant) dateTime58);
        int int61 = period60.getSeconds();
        int int62 = period60.getYears();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter12.printTo(writer14, (org.joda.time.ReadablePeriod) period60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T07:20:27.438+00:00:00.055" + "'", str59, "2022-02-22T07:20:27.438+00:00:00.055");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("PT100S", (double) 996);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=996.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.MutablePeriod mutablePeriod7 = hours1.toMutablePeriod();
        org.joda.time.Hours hours8 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours9 = hours8.negated();
        boolean boolean10 = hours1.isGreaterThan(hours9);
        org.joda.time.Hours hours11 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) hours1);
        org.joda.time.Duration duration12 = hours1.toStandardDuration();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        long long22 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime5.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime5.withLaterOffsetAtOverlap();
        long long26 = dateTime5.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645512327516L + "'", long22 == 1645512327516L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645512327516L + "'", long26 == 1645512327516L);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime20.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis((int) ' ');
        int int28 = dateTime25.getEra();
        boolean boolean29 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime31 = dateTime23.plusHours(435);
        org.joda.time.DateTime.Property property32 = dateTime23.monthOfYear();
        org.joda.time.DateTime dateTime34 = dateTime23.withSecondOfMinute(4);
        org.joda.time.DateTime.Property property35 = dateTime23.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        boolean boolean37 = dateTime1.isSupported(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType36.getRangeDurationType();
        java.lang.String str39 = durationFieldType38.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eras" + "'", str39, "eras");
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        java.lang.Class<?> wildcardClass9 = property6.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes((int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.getID();
        long long15 = dateTimeZone11.previousTransition((long) (short) 0);
        long long17 = dateTimeZone11.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime6.toDateTime(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(596, 691, 473, 1814399, (-91997), dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1814399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.055" + "'", str13, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.halfdays();
        int int32 = periodType30.indexOf(durationFieldType31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.Period period34 = mutableInterval28.toPeriod(periodType33);
        long long35 = mutableInterval28.getEndMillis();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.Days days47 = org.joda.time.Days.daysIn(readableInterval46);
        org.joda.time.Duration duration48 = days47.toStandardDuration();
        org.joda.time.Duration duration49 = duration48.toDuration();
        org.joda.time.ReadableDuration readableDuration50 = null;
        boolean boolean51 = duration49.isLongerThan(readableDuration50);
        boolean boolean52 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMillis((int) ' ');
        int int57 = dateTime54.getEra();
        org.joda.time.DateTime dateTime59 = dateTime54.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime61 = dateTime54.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval62 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime54);
        mutablePeriod39.add((org.joda.time.ReadableInterval) interval62);
        org.joda.time.MutableInterval mutableInterval64 = interval62.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusYears((int) '4');
        boolean boolean69 = interval62.isAfter((org.joda.time.ReadableInstant) dateTime66);
        long long70 = interval62.getEndMillis();
        org.joda.time.Period period71 = interval62.toPeriod();
        boolean boolean72 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.minusMillis((int) ' ');
        int int81 = dateTime78.getEra();
        int int82 = dateTime76.compareTo((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean83 = dateTime76.isBeforeNow();
        boolean boolean84 = interval62.contains((org.joda.time.ReadableInstant) dateTime76);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:20:28.158+00:00:00.520/2022-02-22T07:20:28.158+00:00:00.520" + "'", str29, "2022-02-22T07:20:28.158+00:00:00.520/2022-02-22T07:20:28.158+00:00:00.520");
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514427638L + "'", long35 == 1645514427638L);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514427639L + "'", long70 == 1645514427639L);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        java.util.Locale locale3 = new java.util.Locale("2022-02-22T07:16:40.443Z/2022-02-22T07:16:40.443Z", "45", "2022-06-02T07:19:08.285+00:00:00.055");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t07:16:40.443z/2022-02-22t07:16:40.443z_45_2022-06-02T07:19:08.285+00:00:00.055");
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        long long9 = duration8.getStandardHours();
        java.lang.String str10 = duration8.toString();
        boolean boolean11 = duration3.isEqual((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration13 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration15 = duration13.minus((-78382080000000L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime.Property property21 = dateTime17.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Days days23 = org.joda.time.Days.daysIn(readableInterval22);
        org.joda.time.Duration duration24 = days23.toStandardDuration();
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.DateTime dateTime27 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration25, (-1));
        org.joda.time.Duration duration29 = duration25.plus((-1L));
        long long30 = duration25.getStandardMinutes();
        org.joda.time.Duration duration32 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration25, 56);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        java.lang.String str36 = property35.toString();
        int int37 = property35.getMaximumValue();
        int int38 = property35.getMaximumValueOverall();
        org.joda.time.DateTime dateTime39 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra(436);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = duration25.toPeriodTo((org.joda.time.ReadableInstant) dateTime41, periodType42);
        org.joda.time.Interval interval44 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str45 = interval44.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[dayOfMonth]" + "'", str36, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 28 + "'", int37 == 28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0436-02-22T00:00:00.000+00:00:00.520/0436-02-22T00:00:00.000+00:00:00.520" + "'", str45, "0436-02-22T00:00:00.000+00:00:00.520/0436-02-22T00:00:00.000+00:00:00.520");
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 35435);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period3 = period1.plusMillis(26220);
        org.joda.time.Period period5 = period3.withMonths(26294);
        int int6 = period3.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("26387971", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        int int1 = minutes0.getMinutes();
        org.joda.time.Minutes minutes2 = minutes0.negated();
        org.joda.time.Minutes minutes3 = minutes0.negated();
        int int4 = minutes3.size();
        java.lang.String str5 = minutes3.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT-2M" + "'", str5, "PT-2M");
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(103, 16, 26337, 74, 40, 24226741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(1);
        java.lang.String str2 = minutes1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = minutes1.getFieldType();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT1M" + "'", str2, "PT1M");
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = weeks0.negated();
        org.joda.time.Weeks weeks2 = null;
        boolean boolean3 = weeks0.isLessThan(weeks2);
        int int4 = weeks0.getWeeks();
        org.joda.time.Weeks weeks6 = weeks0.dividedBy(92000);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks9 = weeks7.plus(0);
        org.joda.time.Weeks weeks11 = weeks7.dividedBy((int) 'u');
        int int12 = weeks11.getWeeks();
        org.joda.time.Weeks weeks13 = weeks6.plus(weeks11);
        org.joda.time.Period period14 = weeks11.toPeriod();
        org.joda.time.Duration duration15 = weeks11.toStandardDuration();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) 'u');
        org.joda.time.DateTime.Property property12 = dateTime9.minuteOfDay();
        int int13 = property12.get();
        java.lang.String str14 = property12.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("25");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"25\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1814000L);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) ' ');
        int int6 = dateTime3.getEra();
        org.joda.time.DateTime.Property property7 = dateTime3.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.DateTime dateTime13 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration11, (-1));
        org.joda.time.DateTime dateTime15 = dateTime3.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.secondOfMinute();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology25.weeks();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfMinute();
        int int30 = dateTimeField28.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = dateTimeField28.getAsText(readablePartial31, 3, locale33);
        int int35 = dateTime3.get(dateTimeField28);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        java.lang.String str38 = dateTimeZone36.getID();
        long long40 = dateTimeZone36.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime41 = dateTime3.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) 'u');
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        int int49 = dateTime46.getEra();
        org.joda.time.DateTime.Property property50 = dateTime46.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Days days52 = org.joda.time.Days.daysIn(readableInterval51);
        org.joda.time.Duration duration53 = days52.toStandardDuration();
        org.joda.time.Duration duration54 = duration53.toDuration();
        org.joda.time.DateTime dateTime56 = dateTime46.withDurationAdded((org.joda.time.ReadableDuration) duration54, (-1));
        boolean boolean58 = dateTime46.isAfter(0L);
        org.joda.time.LocalTime localTime59 = dateTime46.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean61 = localTime59.isSupported(dateTimeFieldType60);
        boolean boolean62 = dateTime43.isSupported(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime43.withMonthOfYear(26407819);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26407819 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "3" + "'", str34, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 28 + "'", int35 == 28);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.520" + "'", str38, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        long long30 = interval26.getStartMillis();
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        int int34 = dateTimeZone32.getOffset((-82409903L));
        int int36 = dateTimeZone32.getStandardOffset(1645514160365L);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.Days days51 = org.joda.time.Days.daysIn(readableInterval50);
        org.joda.time.Duration duration52 = days51.toStandardDuration();
        org.joda.time.Duration duration53 = duration52.toDuration();
        org.joda.time.ReadableDuration readableDuration54 = null;
        boolean boolean55 = duration53.isLongerThan(readableDuration54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.Days days57 = org.joda.time.Days.daysIn(readableInterval56);
        org.joda.time.Duration duration58 = days57.toStandardDuration();
        org.joda.time.Duration duration59 = duration58.toDuration();
        org.joda.time.ReadableDuration readableDuration60 = null;
        boolean boolean61 = duration59.isLongerThan(readableDuration60);
        boolean boolean62 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMillis((int) ' ');
        int int67 = dateTime64.getEra();
        org.joda.time.DateTime dateTime69 = dateTime64.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime71 = dateTime64.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval72 = duration53.toIntervalTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDateTime localDateTime73 = dateTime64.toLocalDateTime();
        boolean boolean74 = dateTimeZone48.isLocalDateTimeGap(localDateTime73);
        boolean boolean75 = dateTimeZone32.isLocalDateTimeGap(localDateTime73);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514428036L + "'", long28 == 1645514428036L);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514428036L + "'", long30 == 1645514428036L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 520 + "'", int34 == 520);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 520 + "'", int36 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        org.joda.time.Period period72 = period69.plusMinutes((int) (byte) 0);
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) period69);
        long long76 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod66, 1645512060662L, 74);
        org.joda.time.Chronology chronology77 = chronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.era();
        org.joda.time.DurationField durationField79 = chronology77.seconds();
        int int82 = durationField79.getValue(1645514393L, 1645514267656L);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645512060662L + "'", long76 == 1645512060662L);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1645514 + "'", int82 == 1645514);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = durationFieldType0.getField(chronology10);
        int int15 = durationField12.getValue((long) 100, (long) 28);
        long long18 = durationField12.getMillis(0L, (long) (short) 10);
        boolean boolean19 = durationField12.isPrecise();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        org.joda.time.Period period72 = period69.plusMinutes((int) (byte) 0);
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) period69);
        long long76 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod66, 1645512060662L, 74);
        org.joda.time.DurationField durationField77 = chronology58.weeks();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology58);
        org.joda.time.DateTimeField dateTimeField79 = chronology58.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645512060662L + "'", long76 == 1645512060662L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.MutablePeriod mutablePeriod7 = hours1.toMutablePeriod();
        mutablePeriod7.setMillis(2147483647);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weekyears();
        mutablePeriod7.set(durationFieldType10, 0);
        org.joda.time.ReadableInterval readableInterval13 = null;
        mutablePeriod7.setPeriod(readableInterval13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (short) 0, chronology22);
        mutablePeriod7.add(25200039L, chronology22);
        mutablePeriod7.addMinutes(2022);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        int int16 = dateTimeZone14.getOffsetFromLocal((-863997978L));
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = dateTimeZone14.getName(1645514245602L, locale19);
        java.lang.String str22 = locale19.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 520 + "'", int16 == 520);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "German" + "'", str20, "German");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.520" + "'", str21, "+00:00:00.520");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        org.joda.time.Period period4 = new org.joda.time.Period(868, 385, 251, 369);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        mutablePeriod11.addMillis(59);
        int int14 = mutablePeriod11.getDays();
        mutablePeriod11.addSeconds(78623298);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyear();
        org.joda.time.DurationField durationField16 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime27 = dateTime25.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay28 = dateTime25.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime33.withSecondOfMinute(3);
        org.joda.time.DateTime dateTime36 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay28);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears((int) '4');
        org.joda.time.DateTime.Property property48 = dateTime45.dayOfWeek();
        org.joda.time.DateTime dateTime51 = dateTime45.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property52 = dateTime45.secondOfMinute();
        org.joda.time.Chronology chronology53 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfMonth();
        org.joda.time.DurationField durationField55 = chronology53.weeks();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology53.months();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime41.toMutableDateTime(chronology53);
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.Days days62 = org.joda.time.Days.daysIn(readableInterval61);
        org.joda.time.Duration duration63 = days62.toStandardDuration();
        org.joda.time.Duration duration64 = duration63.toDuration();
        org.joda.time.ReadableDuration readableDuration65 = null;
        boolean boolean66 = duration64.isLongerThan(readableDuration65);
        long long67 = duration64.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime75 = dateTime69.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property76 = dateTime69.secondOfMinute();
        org.joda.time.Chronology chronology77 = dateTime69.getChronology();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = duration64.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69, periodType78);
        org.joda.time.Period period81 = period79.withYears(32);
        org.joda.time.Period period83 = period79.plusYears(32);
        int[] intArray85 = chronology53.get((org.joda.time.ReadablePeriod) period83, (long) 26412649);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField17.addWrapField(readablePartial38, 16, intArray85, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 7, 20, 12, 649]");
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.MutablePeriod mutablePeriod7 = hours1.toMutablePeriod();
        mutablePeriod7.setMillis(2147483647);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weekyears();
        mutablePeriod7.set(durationFieldType10, 0);
        mutablePeriod7.addWeeks((int) ' ');
        mutablePeriod7.setPeriod(26337302, 51026400, 27425237, (-45460981), 2022, 105, 1970, 26283);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period3 = period1.plusMillis(26220);
        org.joda.time.Period period5 = period3.withMonths(26294);
        org.joda.time.format.PeriodPrinter periodPrinter7 = null;
        org.joda.time.format.PeriodParser periodParser8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter9.withLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter9.withLocale(locale13);
        boolean boolean16 = periodFormatter9.isParser();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        int int26 = dateTime23.getEra();
        int int27 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        org.joda.time.Duration duration32 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.DateTime dateTime36 = property35.roundFloorCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfDay();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.halfdays();
        int int40 = periodType38.indexOf(durationFieldType39);
        org.joda.time.PeriodType periodType41 = periodType38.withWeeksRemoved();
        int int42 = periodType41.size();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime36, periodType41);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, periodType41);
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter9.withParseType(periodType41);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (-23375), periodType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = period5.withPeriodType(periodType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr-FR" + "'", str14, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(periodFormatter45);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration27.isLongerThan(readableDuration28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        boolean boolean36 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval46 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration27.toDuration();
        org.joda.time.Duration duration49 = duration47.plus((-78382080000000L));
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology51 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        long long55 = dateTimeZone52.convertUTCToLocal(1645514279268L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645514279788L + "'", long55 == 1645514279788L);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds9 = seconds7.multipliedBy(1);
        boolean boolean10 = property5.equals((java.lang.Object) seconds7);
        org.joda.time.Seconds seconds12 = seconds7.plus(435);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusMinutes((int) (byte) 0);
        org.joda.time.Period period20 = period18.plusMonths((int) '4');
        org.joda.time.DurationFieldType durationFieldType21 = null;
        boolean boolean22 = period18.isSupported(durationFieldType21);
        org.joda.time.Period period24 = period18.minusSeconds(0);
        org.joda.time.PeriodType periodType25 = period18.getPeriodType();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        org.joda.time.Period period37 = period34.plusMinutes((int) (byte) 0);
        mutablePeriod31.mergePeriod((org.joda.time.ReadablePeriod) period34);
        mutablePeriod31.addMonths((int) 'u');
        mutablePeriod31.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime47.dayOfWeek();
        org.joda.time.DateTime dateTime53 = dateTime47.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property54 = dateTime47.secondOfMinute();
        org.joda.time.Chronology chronology55 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.dayOfMonth();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology55);
        org.joda.time.DurationField durationField58 = chronology55.months();
        mutablePeriod31.setPeriod((long) 1814400, chronology55);
        org.joda.time.DurationField durationField60 = chronology55.months();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(87350400000L, periodType27, chronology55);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime66.getZone();
        boolean boolean69 = dateTimeZone67.isStandardOffset(0L);
        boolean boolean71 = dateTimeZone67.isStandardOffset((long) (byte) -1);
        org.joda.time.Chronology chronology72 = chronology55.withZone(dateTimeZone67);
        org.joda.time.Period period73 = new org.joda.time.Period((java.lang.Object) seconds12, periodType25, chronology55);
        org.joda.time.Seconds seconds75 = seconds12.multipliedBy(24);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(seconds75);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime39 = dateTime1.minusYears(56);
        org.joda.time.DateTime dateTime41 = dateTime39.plusDays((int) '4');
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime43.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property50 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        long long56 = dateTimeZone53.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes((int) (short) 1);
        int int64 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime58.getZone();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean67 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = dateTime66.withEra(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-519L) + "'", long28 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-519L) + "'", long56 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 520 + "'", int64 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime27.plusDays(1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        int int37 = dateTimeZone35.getStandardOffset((-82409903L));
        org.joda.time.DateTime dateTime38 = dateTime27.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekOfWeekyear(5);
        boolean boolean42 = dateTime40.isEqual((-86400055L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-519L) + "'", long24 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 520 + "'", int37 == 520);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.Duration duration5 = interval3.toDuration();
        long long6 = duration5.getStandardMinutes();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1440L + "'", long6 == 1440L);
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Days days33 = org.joda.time.Days.daysIn(readableInterval32);
        org.joda.time.Duration duration34 = days33.toStandardDuration();
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.ReadableDuration readableDuration36 = null;
        boolean boolean37 = duration35.isLongerThan(readableDuration36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration41.isLongerThan(readableDuration42);
        boolean boolean44 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        int int49 = dateTime46.getEra();
        org.joda.time.DateTime dateTime51 = dateTime46.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime53 = dateTime46.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval54 = duration35.toIntervalTo((org.joda.time.ReadableInstant) dateTime46);
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval54);
        boolean boolean56 = interval26.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval26.toPeriod(periodType57);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period68 = period65.plusMinutes((int) (byte) 0);
        mutablePeriod62.mergePeriod((org.joda.time.ReadablePeriod) period65);
        mutablePeriod62.setDays((int) 'a');
        org.joda.time.Period period72 = period58.withFields((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period75 = org.joda.time.Period.seconds(2147483647);
        boolean boolean76 = periodType73.equals((java.lang.Object) 2147483647);
        org.joda.time.Period period77 = period72.normalizedStandard(periodType73);
        int int78 = period72.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) ' ');
        int int10 = dateTime7.getEra();
        boolean boolean11 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime13 = dateTime5.plusHours(435);
        org.joda.time.DateTime dateTime14 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime5.plusDays(55);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(729764);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration36, periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withMinutesRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.Days days54 = org.joda.time.Days.daysIn(readableInterval53);
        org.joda.time.Duration duration55 = days54.toStandardDuration();
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.ReadableDuration readableDuration57 = null;
        boolean boolean58 = duration56.isLongerThan(readableDuration57);
        boolean boolean59 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMillis((int) ' ');
        int int64 = dateTime61.getEra();
        org.joda.time.DateTime dateTime66 = dateTime61.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime68 = dateTime61.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval69 = duration50.toIntervalTo((org.joda.time.ReadableInstant) dateTime61);
        mutablePeriod46.add((org.joda.time.ReadableInterval) interval69);
        long long71 = interval69.getStartMillis();
        org.joda.time.Chronology chronology72 = interval69.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(32L, (long) 9, periodType40, chronology72);
        org.joda.time.DateTimeField dateTimeField75 = chronology72.weekyear();
        org.joda.time.DateTime dateTime76 = dateTime16.toDateTime(chronology72);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 218, chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval69);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645514428896L + "'", long71 == 1645514428896L);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        int int14 = property5.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime36 = dateTime29.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval37 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime39 = dateTime29.minus((long) (short) 1);
        int int40 = property5.getDifference((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DurationField durationField41 = property5.getRangeDurationField();
        int int42 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusSeconds((int) (short) 1);
        org.joda.time.Days days18 = period17.toStandardDays();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        java.lang.String str21 = days20.toString();
        boolean boolean22 = days18.isGreaterThan(days20);
        long long25 = chronology9.add((org.joda.time.ReadablePeriod) days20, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField26 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology9.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = durationField27.getMillis(1645514269837L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514269837 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P0D" + "'", str21, "P0D");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        java.lang.String str25 = dateTimeZone23.getShortName((-2272492799999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.520" + "'", str25, "+00:00:00.520");
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.PeriodType periodType1 = seconds0.getPeriodType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645514393772L, 0L);
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.addMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration20);
        mutablePeriod3.addYears(2);
        mutablePeriod3.add(1970, 440, 26309, 0, 97, 0, 120, 589);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMillis((int) ' ');
        int int5 = dateTime2.getEra();
        org.joda.time.DateTime.Property property6 = dateTime2.secondOfMinute();
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.DateTime dateTime19 = dateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration17, (-1));
        org.joda.time.DateTime dateTime21 = dateTime9.minusMinutes((int) (byte) 10);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.plusMinutes((int) (byte) 0);
        mutablePeriod26.mergePeriod((org.joda.time.ReadablePeriod) period29);
        boolean boolean34 = periodType22.equals((java.lang.Object) period29);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        boolean boolean38 = periodType35.isSupported(durationFieldType37);
        int int39 = periodType22.indexOf(durationFieldType37);
        org.joda.time.DateTime dateTime41 = dateTime21.withFieldAdded(durationFieldType37, (int) ' ');
        boolean boolean42 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime2.plusMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime46.withZone(dateTimeZone47);
        java.lang.String str51 = dateTimeZone47.getNameKey((long) 1);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone47.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = dateTime44.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone47);
        java.util.TimeZone timeZone56 = dateTimeZone47.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.055' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime10 = dateTime8.withYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) ' ');
        int int23 = dateTime20.getEra();
        int int24 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        long long39 = dateTimeZone36.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime20.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime40, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean48 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean49 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime51.withZone(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        java.lang.String str58 = dateTimeZone56.getID();
        long long60 = dateTimeZone56.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime54.toMutableDateTime(dateTimeZone56);
        int int63 = dateTime54.getYear();
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime54, periodType64);
        org.joda.time.Hours hours66 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours67 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours68 = hours66.plus(hours67);
        org.joda.time.DurationFieldType durationFieldType69 = hours66.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusYears((int) '4');
        org.joda.time.DateTime.Property property75 = dateTime72.dayOfWeek();
        org.joda.time.DateTime dateTime78 = dateTime72.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property79 = dateTime72.secondOfMinute();
        org.joda.time.Chronology chronology80 = dateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.dayOfMonth();
        org.joda.time.DurationField durationField82 = chronology80.millis();
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) 1, chronology80);
        boolean boolean84 = durationFieldType69.isSupported(chronology80);
        org.joda.time.DateTimeField dateTimeField85 = chronology80.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField86 = chronology80.yearOfCentury();
        org.joda.time.DurationField durationField87 = chronology80.centuries();
        org.joda.time.DateTimeField dateTimeField88 = chronology80.yearOfCentury();
        org.joda.time.DateTime dateTime89 = dateTime54.toDateTime(chronology80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period90 = new org.joda.time.Period((java.lang.Object) "2022-02-22T07:19:36.490+00:00:00.055", chronology80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:19:36.490+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-54L) + "'", long39 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.055" + "'", str58, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(hours66);
        org.junit.Assert.assertNotNull(hours67);
        org.junit.Assert.assertNotNull(hours68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("UTC");
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("366");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('u', "2022-02-22T07:19:24.674+00:00:00.055");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 22T07:19:24.674+00:00:00.055 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusDays((-1));
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) 26198);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTimeISO();
        int int10 = mutableDateTime9.getSecondOfMinute();
        long long11 = mutableDateTime9.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645600803128L + "'", long11 == 1645600803128L);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks2 = weeks0.plus(0);
        org.joda.time.Weeks weeks4 = weeks0.dividedBy(2022);
        org.joda.time.Weeks weeks5 = weeks0.negated();
        int int6 = weeks0.size();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks9 = weeks7.plus(0);
        org.joda.time.Weeks weeks11 = weeks7.dividedBy(2022);
        org.joda.time.Weeks weeks12 = weeks7.negated();
        boolean boolean13 = weeks0.isGreaterThan(weeks7);
        java.lang.String str14 = weeks0.toString();
        org.joda.time.Weeks weeks16 = weeks0.plus(16);
        org.joda.time.Weeks weeks18 = weeks16.multipliedBy(585);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "P3W" + "'", str14, "P3W");
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("DurationField[days]", (double) 1645514220092L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645514220092E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.halfdays();
        int int4 = periodType2.indexOf(durationFieldType3);
        int int5 = periodType2.size();
        org.joda.time.Period period6 = new org.joda.time.Period((-78382080000000L), periodType2);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 2, periodType2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        org.joda.time.Interval interval11 = property10.toInterval();
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Days days13 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime.Property property19 = dateTime15.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = dateTime15.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime.Property property26 = dateTime22.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.DateTime dateTime32 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration30, (-1));
        boolean boolean34 = dateTime22.isAfter(0L);
        org.joda.time.LocalTime localTime35 = dateTime22.toLocalTime();
        org.joda.time.Days days36 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) timeOfDay20, (org.joda.time.ReadablePartial) localTime35);
        boolean boolean37 = days13.isGreaterThan(days36);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology9.getDateTimeMillis(26220, 105, 417, 771);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 105 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfDay();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime31 = dateTime26.minusMinutes((int) (short) 1);
        int int32 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime26.getZone();
        int int34 = property8.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis((int) ' ');
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime dateTime41 = dateTime36.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime36.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) 'u');
        boolean boolean47 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime26.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime50.plusDays(10);
        org.joda.time.DateTime.Property property55 = dateTime54.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        int int57 = dateTime26.get(dateTimeFieldType56);
        java.lang.String str58 = dateTimeFieldType56.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-54L) + "'", long24 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 55 + "'", int32 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "monthOfYear" + "'", str58, "monthOfYear");
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.clockhourOfHalfday();
        long long23 = dateTimeField21.roundHalfFloor(1645514360193L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        java.lang.String str27 = dateTimeZone25.getID();
        long long29 = dateTimeZone25.previousTransition((long) (short) 0);
        long long31 = dateTimeZone25.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone25);
        java.util.Date date33 = dateTime32.toDate();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType35 = periodType34.withWeeksRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withMonthsRemoved();
        boolean boolean37 = dateTime32.equals((java.lang.Object) periodType35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusYears((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime39.dayOfWeek();
        org.joda.time.DateTime dateTime45 = dateTime39.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property46 = dateTime39.secondOfMinute();
        org.joda.time.Chronology chronology47 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField49 = chronology47.halfdays();
        org.joda.time.Chronology chronology50 = chronology47.withUTC();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        org.joda.time.Chronology chronology58 = chronology50.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.minuteOfDay();
        org.joda.time.Period period60 = new org.joda.time.Period(1870L, periodType35, chronology58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period61 = new org.joda.time.Period((java.lang.Object) 1645514360193L, periodType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513199945L + "'", long23 == 1645513199945L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.055" + "'", str27, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:20:29 UTC 2022");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean16 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        java.lang.String str20 = property19.toString();
        org.joda.time.DurationField durationField21 = property19.getLeapDurationField();
        org.joda.time.DurationField durationField22 = property19.getLeapDurationField();
        long long23 = property19.remainder();
        java.util.Locale locale27 = new java.util.Locale("weekyearOfCentury", "2022-02-21T07:16:09.341Z", "59");
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale27.getDisplayCountry(locale28);
        java.lang.String str32 = property19.getAsText(locale27);
        java.util.Locale locale36 = new java.util.Locale("weekyearOfCentury", "2022-02-21T07:16:09.341Z", "59");
        java.lang.String str37 = locale27.getDisplayLanguage(locale36);
        java.util.Calendar calendar38 = dateTime13.toCalendar(locale27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNull(durationField22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 26429827L + "'", long23 == 26429827L);
        org.junit.Assert.assertEquals(locale27.toString(), "weekyearofcentury_2022-02-21T07:16:09.341Z_59");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T07:16:09.341Z" + "'", str31, "2022-02-21T07:16:09.341Z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22" + "'", str32, "22");
        org.junit.Assert.assertEquals(locale36.toString(), "weekyearofcentury_2022-02-21T07:16:09.341Z_59");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyearofcentury" + "'", str37, "weekyearofcentury");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=56,ZONE_OFFSET=55,DST_OFFSET=0]");
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(26283, 112);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 112");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTime();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 55);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) instant9, periodType10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        int int13 = minutes12.getMinutes();
        org.joda.time.Minutes minutes14 = minutes12.negated();
        org.joda.time.PeriodType periodType15 = minutes14.getPeriodType();
        boolean boolean16 = mutablePeriod11.equals((java.lang.Object) minutes14);
        org.joda.time.PeriodType periodType17 = minutes14.getPeriodType();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        int int19 = minutes18.getMinutes();
        org.joda.time.Minutes minutes20 = minutes18.negated();
        org.joda.time.Minutes minutes21 = minutes18.negated();
        boolean boolean22 = minutes14.isLessThan(minutes18);
        org.joda.time.DurationFieldType durationFieldType23 = minutes18.getFieldType();
        org.joda.time.Period period24 = minutes18.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = period24.getFieldType(26169);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds9 = seconds7.multipliedBy(1);
        boolean boolean10 = property5.equals((java.lang.Object) seconds7);
        org.joda.time.DateTime dateTime11 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime15 = dateTime12.withDurationAdded((long) 26272, 26255976);
        java.lang.String str16 = dateTime12.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime();
        int int27 = dateTime26.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        int int34 = dateTime31.getEra();
        org.joda.time.DateTime dateTime36 = dateTime31.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime38 = dateTime31.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime39 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) 'u');
        boolean boolean42 = dateTime26.equals((java.lang.Object) 'u');
        org.joda.time.Chronology chronology43 = dateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime47.dayOfWeek();
        org.joda.time.DateTime dateTime53 = dateTime47.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property54 = dateTime47.secondOfMinute();
        org.joda.time.Chronology chronology55 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.dayOfMonth();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology55);
        org.joda.time.DurationField durationField58 = chronology55.months();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.weekyear();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.era();
        org.joda.time.DateTime dateTime63 = dateTime26.toDateTime(chronology55);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:20:30.000+00:00:00.055" + "'", str16, "2022-02-22T07:20:30.000+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime7.withZone(dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getNameKey((long) 1);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = dateTimeZone8.isStandardOffset(1645512158827L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(9, 26, (-23375), 26328, 26309, 26207766, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26328 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 55 + "'", int19 == 55);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property11 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        long long17 = dateTimeZone14.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis((int) ' ');
        int int22 = dateTime19.getEra();
        org.joda.time.DateTime dateTime24 = dateTime19.minusMinutes((int) (short) 1);
        int int25 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime19.getZone();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.Period period28 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property37 = dateTime30.secondOfMinute();
        org.joda.time.Chronology chronology38 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekyear();
        int int42 = dateTimeField39.getDifference((long) 28, (long) 2147483647);
        boolean boolean44 = dateTimeField39.isLeap(1645514259537L);
        int int45 = dateTime27.get(dateTimeField39);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-54L) + "'", long17 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 55 + "'", int25 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.plus(4320000001L);
        int int6 = dateTime3.getMinuteOfHour();
        org.joda.time.Duration duration8 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.Days days10 = org.joda.time.Days.daysIn(readableInterval9);
        org.joda.time.Duration duration11 = days10.toStandardDuration();
        org.joda.time.Duration duration12 = duration11.toDuration();
        boolean boolean13 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        boolean boolean26 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMillis((int) ' ');
        int int31 = dateTime28.getEra();
        org.joda.time.DateTime dateTime33 = dateTime28.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime35 = dateTime28.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval36 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration17.toDuration();
        boolean boolean38 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        java.lang.String str42 = dateTimeZone40.getID();
        long long44 = dateTimeZone40.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 1, dateTimeZone40);
        org.joda.time.Interval interval46 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration47 = interval46.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime3.minus((org.joda.time.ReadableDuration) duration47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.055" + "'", str42, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.ONE;
        org.joda.time.Period period2 = seconds1.toPeriod();
        boolean boolean3 = seconds0.isLessThan(seconds1);
        int int4 = seconds0.getSeconds();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T07:19:13.000+00:00:00.055/2022-02-22T07:19:13.000+00:00:00.055", (double) 26338709L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.6338709E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(8);
        org.joda.time.DateTime.Property property10 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime7.plusMillis(26160);
        org.joda.time.DateTime dateTime14 = dateTime12.withSecondOfMinute(0);
        int int15 = dateTime12.getDayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime12.withMonthOfYear(10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        int int11 = dateTime9.getCenturyOfEra();
        boolean boolean13 = dateTime9.equals((java.lang.Object) (short) 1);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        boolean boolean16 = dateTime9.isBefore((long) 943);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime9.withMillisOfDay((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = property4.getAsText(locale8);
        org.joda.time.DurationField durationField10 = property4.getLeapDurationField();
        org.joda.time.DateTime dateTime11 = property4.withMinimumValue();
        int int12 = dateTime11.getYear();
        java.lang.String str13 = dateTime11.toString();
        org.joda.time.DateTime.Property property14 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime11.minusSeconds(27425236);
        int int17 = dateTime16.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mardi" + "'", str9, "mardi");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T07:20:30.228+00:00:00.055" + "'", str13, "2022-02-21T07:20:30.228+00:00:00.055");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        int int12 = property9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = property9.getAsText(locale13);
        java.util.Calendar calendar15 = dateTime1.toCalendar(locale13);
        org.joda.time.DateTime dateTime17 = dateTime1.withEra((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime19.withZone(dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getNameKey((long) 1);
        long long27 = dateTimeZone20.adjustOffset((long) 2022, true);
        org.joda.time.DateTime dateTime28 = dateTime17.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime30 = dateTime28.plus(1645514340473L);
        org.joda.time.DateTime.Property property31 = dateTime28.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mardi" + "'", str14, "mardi");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514430253,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=30,MILLISECOND=308,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2022L + "'", long27 == 2022L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(86399);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.addSeconds(26207766);
        int int7 = mutablePeriod4.getMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime1.plusMillis(26160);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime7.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        boolean boolean6 = dateTimeZone4.isStandardOffset(0L);
        int int8 = dateTimeZone4.getStandardOffset((long) 999);
        long long10 = dateTimeZone4.previousTransition(174700800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 55 + "'", int8 == 55);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 174700800000L + "'", long10 == 174700800000L);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        java.lang.String str5 = dateTimeZone3.getID();
        long long7 = dateTimeZone3.previousTransition((long) (short) 0);
        long long9 = dateTimeZone3.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withMonthsRemoved();
        boolean boolean15 = dateTime10.equals((java.lang.Object) periodType13);
        int int16 = periodType13.size();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 40, (-94670856000L), periodType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str19 = dateTimeFieldType18.getName();
        java.lang.String str20 = dateTimeFieldType18.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekOfWeekyear();
        boolean boolean33 = dateTimeFieldType18.isSupported(chronology30);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(439L, periodType13, chronology30);
        mutablePeriod34.setYears(991);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.055" + "'", str5, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Feb 22 07:20:30 UTC 2022");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfCentury" + "'", str19, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfCentury" + "'", str20, "yearOfCentury");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime1.withMillis(1814000L);
        org.joda.time.Chronology chronology6 = dateTime1.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.DurationFieldType durationFieldType8 = durationField7.getType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        java.lang.String str4 = periodType3.toString();
        org.joda.time.PeriodType periodType5 = periodType3.withMinutesRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period(1645514208443L, (long) '4', periodType5);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = period6.getValue(16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[Years]" + "'", str4, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.lang.String str10 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList20);
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList20);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        org.joda.time.Period period1 = org.joda.time.Period.millis(3);
        org.joda.time.Period period3 = period1.withHours(2074);
        org.joda.time.Period period5 = period3.plusDays((-1645514220));
        org.joda.time.Period period7 = period5.plusMinutes(36);
        org.joda.time.Period period9 = period7.withDays(5440);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        mutablePeriod3.setDays((int) (short) 100);
        mutablePeriod3.add(0, (int) '4', (int) (byte) 10, 28, (int) '#', (int) (short) 0, 0, 28);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Days days44 = org.joda.time.Days.daysIn(readableInterval43);
        org.joda.time.Duration duration45 = days44.toStandardDuration();
        org.joda.time.Duration duration46 = duration45.toDuration();
        org.joda.time.ReadableDuration readableDuration47 = null;
        boolean boolean48 = duration46.isLongerThan(readableDuration47);
        org.joda.time.Duration duration49 = duration46.toDuration();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration46.toIntervalTo(readableInstant50);
        java.lang.String str52 = interval51.toString();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Period period54 = interval51.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMillis(8);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusYears((int) '4');
        org.joda.time.DateTime.Property property69 = dateTime66.dayOfWeek();
        org.joda.time.DateTime dateTime72 = dateTime66.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property73 = dateTime66.secondOfMinute();
        org.joda.time.Chronology chronology74 = dateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfMonth();
        org.joda.time.DurationField durationField76 = chronology74.millis();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod80 = period79.toMutablePeriod();
        org.joda.time.Period period82 = period79.plusSeconds((int) (short) 1);
        org.joda.time.Days days83 = period82.toStandardDays();
        org.joda.time.ReadableInterval readableInterval84 = null;
        org.joda.time.Days days85 = org.joda.time.Days.daysIn(readableInterval84);
        java.lang.String str86 = days85.toString();
        boolean boolean87 = days83.isGreaterThan(days85);
        long long90 = chronology74.add((org.joda.time.ReadablePeriod) days85, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField91 = chronology74.hourOfHalfday();
        org.joda.time.DateTime dateTime92 = dateTime64.toDateTime(chronology74);
        org.joda.time.DateTime.Property property93 = dateTime64.minuteOfHour();
        org.joda.time.Interval interval94 = property93.toInterval();
        boolean boolean95 = interval51.overlaps((org.joda.time.ReadableInterval) interval94);
        org.joda.time.Days days96 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval94);
        org.joda.time.DateTime dateTime97 = interval94.getEnd();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(interval51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:20:30.547+00:00:00.055/2022-02-22T07:20:30.547+00:00:00.055" + "'", str52, "2022-02-22T07:20:30.547+00:00:00.055/2022-02-22T07:20:30.547+00:00:00.055");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(days83);
        org.junit.Assert.assertNotNull(days85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "P0D" + "'", str86, "P0D");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 32L + "'", long90 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(days96);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis((int) ' ');
        int int22 = dateTime19.getEra();
        int int23 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        long long38 = dateTimeZone35.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime19.toMutableDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime41.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean47 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean48 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Hours hours50 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours51 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours52 = hours50.plus(hours51);
        org.joda.time.DurationFieldType durationFieldType53 = hours50.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property63 = dateTime56.secondOfMinute();
        org.joda.time.Chronology chronology64 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1, chronology64);
        boolean boolean68 = durationFieldType53.isSupported(chronology64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 10, chronology64);
        int int70 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean72 = dateTime69.isAfter((long) 112);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-54L) + "'", long38 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusMinutes((int) (byte) 0);
        org.joda.time.Period period12 = period10.plusMonths((int) '4');
        org.joda.time.Period period14 = period10.withMillis(1814400);
        int int15 = period14.getSeconds();
        org.joda.time.Period period16 = period14.normalizedStandard();
        org.joda.time.Period period18 = period16.minusDays(3);
        org.joda.time.Period period20 = period18.withWeeks(943);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks23 = weeks21.plus(0);
        org.joda.time.Weeks weeks25 = weeks21.dividedBy(2022);
        org.joda.time.Weeks weeks26 = weeks21.negated();
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks31 = weeks29.minus(59);
        org.joda.time.Weeks weeks32 = weeks27.plus(weeks31);
        org.joda.time.Weeks weeks33 = weeks21.plus(weeks31);
        org.joda.time.Period period34 = period18.plus((org.joda.time.ReadablePeriod) weeks33);
        org.joda.time.Weeks weeks36 = weeks33.multipliedBy((-58));
        org.joda.time.Weeks weeks37 = weeks4.minus(weeks33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        boolean boolean44 = dateTimeZone42.isStandardOffset(0L);
        boolean boolean46 = dateTimeZone42.isStandardOffset((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.weeks();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology58.getZone();
        org.joda.time.Weeks weeks62 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks63 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks65 = weeks63.plus(0);
        org.joda.time.Weeks weeks67 = weeks65.minus(3);
        org.joda.time.Weeks weeks68 = weeks62.plus(weeks67);
        int[] intArray70 = chronology58.get((org.joda.time.ReadablePeriod) weeks68, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField71 = chronology58.year();
        int int73 = dateTimeField71.getMaximumValue(0L);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime.Property property76 = dateTime75.minuteOfHour();
        org.joda.time.DateTime dateTime77 = property76.withMaximumValue();
        org.joda.time.DateTime dateTime78 = property76.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime79 = dateTime78.toLocalDateTime();
        java.util.Locale locale83 = new java.util.Locale("months", "weekyears");
        java.lang.String str84 = dateTimeField71.getAsText((org.joda.time.ReadablePartial) localDateTime79, 663, locale83);
        boolean boolean85 = dateTimeZone42.isLocalDateTimeGap(localDateTime79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((java.lang.Object) weeks33, dateTimeZone42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Weeks");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertNotNull(weeks63);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(weeks68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278993 + "'", int73 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertEquals(locale83.toString(), "months_WEEKYEARS");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "663" + "'", str84, "663");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Days days3 = org.joda.time.Days.daysIn(readableInterval2);
        org.joda.time.Duration duration4 = days3.toStandardDuration();
        org.joda.time.Duration duration5 = duration4.toDuration();
        boolean boolean6 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(59);
        org.joda.time.format.PeriodPrinter periodPrinter13 = null;
        org.joda.time.format.PeriodParser periodParser14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = new org.joda.time.format.PeriodFormatter(periodPrinter13, periodParser14);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter15.withLocale(locale16);
        java.util.Calendar calendar19 = dateTime12.toCalendar(locale16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period21 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12, periodType20);
        org.joda.time.Days days22 = period21.toStandardDays();
        int int23 = days22.size();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514459635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=59,MILLISECOND=690,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        long long30 = interval26.getStartMillis();
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.Days days32 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod36 = period35.toMutablePeriod();
        org.joda.time.Period period38 = period35.plusSeconds((int) (short) 1);
        org.joda.time.Days days39 = period38.toStandardDays();
        boolean boolean40 = days32.isGreaterThan(days39);
        boolean boolean41 = interval26.equals((java.lang.Object) days39);
        long long42 = interval26.toDurationMillis();
        java.lang.String str43 = interval26.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514430683L + "'", long28 == 1645514430683L);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514430683L + "'", long30 == 1645514430683L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:20:30.738+00:00:00.055/2022-02-22T07:20:30.738+00:00:00.055" + "'", str43, "2022-02-22T07:20:30.738+00:00:00.055/2022-02-22T07:20:30.738+00:00:00.055");
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours(13);
        org.joda.time.Hours hours3 = hours1.plus(617);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        org.joda.time.Period period1 = org.joda.time.Period.days(0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod12 = seconds11.toMutablePeriod();
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) seconds11);
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds16 = seconds14.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        int int18 = seconds16.get(durationFieldType17);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds20 = seconds16.minus(seconds19);
        org.joda.time.Seconds seconds22 = seconds20.minus(92000);
        org.joda.time.DurationFieldType durationFieldType23 = seconds22.getFieldType();
        java.lang.String str24 = durationFieldType23.toString();
        mutablePeriod3.set(durationFieldType23, 55);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.minutes();
        int int30 = periodType29.size();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime32.plusDays(10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusYears((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime39.dayOfWeek();
        org.joda.time.DateTime dateTime45 = dateTime39.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property46 = dateTime39.secondOfMinute();
        org.joda.time.Chronology chronology47 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField49 = chronology47.millis();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1, chronology47);
        org.joda.time.DateTime dateTime51 = dateTime32.withChronology(chronology47);
        org.joda.time.DurationField durationField52 = chronology47.days();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMillis((int) ' ');
        int int57 = dateTime54.getEra();
        org.joda.time.DateTime dateTime59 = dateTime54.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime61 = dateTime54.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime62 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime64 = dateTime62.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime66 = dateTime62.withMinuteOfHour((int) (byte) 0);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime62.toGregorianCalendar();
        org.joda.time.LocalDate localDate68 = dateTime62.toLocalDate();
        int[] intArray70 = chronology47.get((org.joda.time.ReadablePartial) localDate68, 0L);
        org.joda.time.DateTimeField dateTimeField71 = chronology47.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(1100L, 1645514305480L, periodType29, chronology47);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType76 = periodType75.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.plusYears((int) '4');
        org.joda.time.DateTime.Property property81 = dateTime78.dayOfWeek();
        org.joda.time.DateTime dateTime84 = dateTime78.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property85 = dateTime78.secondOfMinute();
        org.joda.time.Chronology chronology86 = dateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.secondOfDay();
        org.joda.time.Period period88 = new org.joda.time.Period(1645514191018L, periodType76, chronology86);
        org.joda.time.Period period89 = new org.joda.time.Period();
        org.joda.time.Seconds seconds90 = period89.toStandardSeconds();
        org.joda.time.Duration duration91 = seconds90.toStandardDuration();
        java.lang.String str92 = seconds90.toString();
        org.joda.time.DurationFieldType durationFieldType94 = seconds90.getFieldType((int) (short) 0);
        int int95 = periodType76.indexOf(durationFieldType94);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod72.add(durationFieldType94, 26309);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "seconds" + "'", str24, "seconds");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(gregorianCalendar67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(seconds90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "PT0S" + "'", str92, "PT0S");
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime17);
        int int21 = property5.getDifference((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime23.plusDays(10);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime23);
        mutablePeriod28.setHours(33);
        int int31 = mutablePeriod28.getSeconds();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1814400 + "'", int21 == 1814400);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.plus(4320000001L);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) instant12);
        int int14 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays(1814000L);
        boolean boolean30 = duration24.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Instant instant32 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration29, 896);
        org.joda.time.Instant instant35 = instant12.withDurationAdded(31525804800000L, 0);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Days days41 = days39.plus((-1));
        int int42 = days39.getDays();
        org.joda.time.PeriodType periodType43 = days39.getPeriodType();
        java.lang.String str44 = periodType43.getName();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) 1, (long) 22, periodType43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = new org.joda.time.Period((java.lang.Object) instant12, periodType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 55 + "'", int14 == 55);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Days" + "'", str44, "Days");
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.joda.time.Period period8 = new org.joda.time.Period(1970, 16, (-4492799), 74, 831, (-2147483648), 10, 365);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology14.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.secondOfMinute();
        org.joda.time.Chronology chronology34 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology34);
        org.joda.time.DurationField durationField37 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        boolean boolean53 = dateTimeZone50.isStandardOffset(1814400000L);
        long long57 = dateTimeZone50.convertLocalToUTC(1100L, true, (long) 28);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears((int) '4');
        org.joda.time.DateTime.Property property63 = dateTime60.dayOfWeek();
        org.joda.time.DateTime dateTime66 = dateTime60.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property67 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime69 = dateTime60.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime69.getZone();
        long long73 = dateTimeZone70.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusMillis((int) ' ');
        int int78 = dateTime75.getEra();
        org.joda.time.DateTime dateTime80 = dateTime75.minusMinutes((int) (short) 1);
        int int81 = dateTimeZone70.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime.Property property82 = dateTime75.yearOfEra();
        java.util.Locale locale83 = java.util.Locale.JAPAN;
        java.lang.String str84 = locale83.toLanguageTag();
        int int85 = property82.getMaximumShortTextLength(locale83);
        java.lang.String str86 = dateTimeZone50.getShortName(1645514222400L, locale83);
        int int87 = dateTimeField38.getMaximumShortTextLength(locale83);
        int int88 = dateTimeField22.getMaximumShortTextLength(locale83);
        boolean boolean89 = dateTimeField22.isSupported();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1045L + "'", long57 == 1045L);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-54L) + "'", long73 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 55 + "'", int81 == 55);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ja-JP" + "'", str84, "ja-JP");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00:00.055" + "'", str86, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 7 + "'", int87 == 7);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(467, 467, 26316388, 26314096, 26355, 42, (-2483), 26285);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) (-2483));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withLocale(locale4);
        org.joda.time.format.PeriodParser periodParser7 = periodFormatter6.getParser();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property16 = dateTime9.secondOfMinute();
        org.joda.time.Chronology chronology17 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        int int21 = dateTimeField18.getDifference((long) 28, (long) 2147483647);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime27 = dateTime23.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Days days29 = org.joda.time.Days.daysIn(readableInterval28);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration31.isLongerThan(readableDuration32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        boolean boolean40 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration37, periodType41);
        org.joda.time.LocalDate localDate43 = dateTime27.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMillis((int) ' ');
        int int52 = dateTime49.getEra();
        int int53 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime55 = dateTime49.plus((long) 22);
        org.joda.time.DateTime dateTime56 = dateTime55.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate57 = dateTime55.toLocalDate();
        org.joda.time.Days days58 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate57);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDate43, (int) (short) -1, locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.PeriodFormatter periodFormatter63 = periodFormatter6.withLocale(locale60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod64 = org.joda.time.MutablePeriod.parse("39", periodFormatter63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodParser7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1" + "'", str61, "-1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ko" + "'", str62, "ko");
        org.junit.Assert.assertNotNull(periodFormatter63);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1970);
        org.joda.time.Duration duration2 = period1.toStandardDuration();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        org.joda.time.Period period72 = period69.plusMinutes((int) (byte) 0);
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) period69);
        long long76 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod66, 1645512060662L, 74);
        org.joda.time.DurationField durationField77 = chronology58.weeks();
        org.joda.time.DateTimeField dateTimeField78 = chronology58.minuteOfHour();
        boolean boolean79 = dateTimeField78.isSupported();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645512060662L + "'", long76 == 1645512060662L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        int int29 = dateTime26.getEra();
        int int30 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property39 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        long long45 = dateTimeZone42.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime26.toMutableDateTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime52 = dateTime48.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime46, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime55 = dateTime48.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay56 = dateTime55.toTimeOfDay();
        java.lang.Object obj57 = null;
        boolean boolean58 = timeOfDay56.equals(obj57);
        int int59 = timeOfDay56.size();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = dateTime62.withZone(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        int int73 = property70.compareTo((org.joda.time.ReadableInstant) dateTime72);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = property70.getAsText(locale74);
        java.util.Calendar calendar76 = dateTime62.toCalendar(locale74);
        java.lang.String str77 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) timeOfDay56, 26160, locale74);
        java.lang.String str78 = locale74.getISO3Country();
        java.lang.String str79 = locale74.getCountry();
        java.lang.String str81 = locale74.getExtension('a');
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-54L) + "'", long45 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mardi" + "'", str75, "mardi");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1645514431034,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=31,MILLISECOND=89,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "26160" + "'", str77, "26160");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "FRA" + "'", str78, "FRA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "FR" + "'", str79, "FR");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes13 = period9.toStandardMinutes();
        boolean boolean14 = dateTime3.equals((java.lang.Object) minutes13);
        boolean boolean15 = minutes0.isGreaterThan(minutes13);
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        org.joda.time.Period period21 = period18.plusSeconds((int) (short) 1);
        org.joda.time.Period period23 = period21.multipliedBy((int) (byte) -1);
        int int24 = period23.size();
        org.joda.time.Minutes minutes25 = period23.toStandardMinutes();
        org.joda.time.Minutes minutes26 = minutes0.plus(minutes25);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DurationField durationField13 = chronology9.minutes();
        java.lang.String str14 = durationField13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DurationField[minutes]" + "'", str14, "DurationField[minutes]");
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.DurationFieldType durationFieldType6 = periodType2.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology16.weeks();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology16.getZone();
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks23 = weeks21.plus(0);
        org.joda.time.Weeks weeks25 = weeks23.minus(3);
        org.joda.time.Weeks weeks26 = weeks20.plus(weeks25);
        int[] intArray28 = chronology16.get((org.joda.time.ReadablePeriod) weeks26, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField29 = chronology16.weekOfWeekyear();
        org.joda.time.Period period30 = new org.joda.time.Period(131L, periodType2, chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = period30.plusMillis(991);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Weeks" + "'", str4, "Weeks");
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 1645514304480L);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 22);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Days days18 = org.joda.time.Days.daysIn(readableInterval17);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Duration duration20 = duration19.toDuration();
        org.joda.time.ReadableDuration readableDuration21 = null;
        boolean boolean22 = duration20.isLongerThan(readableDuration21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.daysIn(readableInterval23);
        org.joda.time.Duration duration25 = days24.toStandardDuration();
        org.joda.time.Duration duration26 = duration25.toDuration();
        org.joda.time.ReadableDuration readableDuration27 = null;
        boolean boolean28 = duration26.isLongerThan(readableDuration27);
        boolean boolean29 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        int int34 = dateTime31.getEra();
        org.joda.time.DateTime dateTime36 = dateTime31.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime38 = dateTime31.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval39 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval39);
        mutablePeriod16.addYears((int) ' ');
        mutablePeriod16.setSeconds((int) (byte) 100);
        mutablePeriod16.setDays((int) (short) 100);
        int int47 = mutablePeriod16.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getRangeDurationType();
        boolean boolean50 = mutablePeriod16.isSupported(durationFieldType49);
        org.joda.time.DateTime dateTime51 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfMonth();
        java.lang.String str55 = property54.toString();
        int int56 = property54.getMaximumValue();
        int int57 = property54.getMaximumValueOverall();
        org.joda.time.DateTime dateTime58 = property54.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfEra(436);
        org.joda.time.DateTime dateTime62 = dateTime58.withWeekyear(16);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(99);
        org.joda.time.Days days65 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime64);
        long long66 = dateTime11.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Property[dayOfMonth]" + "'", str55, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 28 + "'", int56 == 28);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(days65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645514431279L + "'", long66 == 1645514431279L);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.DurationFieldType durationFieldType2 = seconds0.getFieldType();
        org.joda.time.Period period4 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period6 = period4.minusYears((int) '#');
        org.joda.time.Period period8 = period4.plusMinutes(100);
        org.joda.time.Seconds seconds9 = period8.toStandardSeconds();
        org.joda.time.Seconds seconds10 = seconds0.plus(seconds9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(86400000L, (long) 26160);
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        org.joda.time.Period period19 = period16.plusSeconds((int) (short) 1);
        org.joda.time.Period period21 = period19.multipliedBy(100);
        org.joda.time.Period period23 = period21.withYears(92000);
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period21);
        java.lang.String str25 = seconds24.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime27.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime30.withSecondOfMinute(3);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMillis(2);
        org.joda.time.Seconds seconds35 = org.joda.time.Seconds.THREE;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.Period period41 = period38.plusSeconds((int) (short) 1);
        org.joda.time.Period period43 = period41.multipliedBy(100);
        org.joda.time.Period period45 = period43.withYears(92000);
        org.joda.time.Seconds seconds46 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period43);
        java.lang.String str47 = seconds46.toString();
        org.joda.time.Seconds seconds48 = seconds35.plus(seconds46);
        org.joda.time.DateTime dateTime49 = dateTime32.minus((org.joda.time.ReadablePeriod) seconds35);
        org.joda.time.Seconds seconds50 = seconds24.plus(seconds35);
        mutablePeriod13.add((org.joda.time.ReadablePeriod) seconds24);
        boolean boolean52 = seconds10.isLessThan(seconds24);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) seconds10);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod53.setValue(467, 26355000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 467");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT100S" + "'", str25, "PT100S");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT100S" + "'", str47, "PT100S");
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        java.lang.String str26 = property25.toString();
        int int27 = property25.getMaximumValue();
        int int28 = property25.getMaximumValueOverall();
        org.joda.time.DateTime dateTime29 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        int int39 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period40 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.Days days54 = org.joda.time.Days.daysIn(readableInterval53);
        org.joda.time.Duration duration55 = days54.toStandardDuration();
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.ReadableDuration readableDuration57 = null;
        boolean boolean58 = duration56.isLongerThan(readableDuration57);
        boolean boolean59 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration56, periodType60);
        org.joda.time.Days days62 = duration56.toStandardDays();
        org.joda.time.Duration duration64 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration56, 435);
        long long65 = duration3.getMillis();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 28 + "'", int27 == 28);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        mutablePeriod3.setDays((int) (short) 100);
        int int34 = mutablePeriod3.getHours();
        mutablePeriod3.addHours(2);
        mutablePeriod3.setMillis(72976400);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.Period period3 = period1.plusMillis(435);
        org.joda.time.Period period5 = period1.withWeeks(896);
        org.joda.time.Period period7 = period1.minusDays(8);
        org.joda.time.Period period9 = period1.plusYears(26216);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        java.lang.String str13 = periodType12.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.secondOfMinute();
        org.joda.time.Chronology chronology23 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMillis((int) ' ');
        int int33 = dateTime30.getEra();
        int int34 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime45 = dateTime36.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        long long49 = dateTimeZone46.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime30.toMutableDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime56 = dateTime52.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime50, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime59 = dateTime52.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay60 = dateTime59.toTimeOfDay();
        int[] intArray62 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay60, (long) 1814400);
        org.joda.time.DurationField durationField63 = chronology23.months();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 'u', periodType12, chronology23);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime70 = dateTime66.minusMinutes((int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        java.lang.String str73 = dateTimeZone71.getID();
        long long75 = dateTimeZone71.previousTransition((long) (short) 0);
        long long77 = dateTimeZone71.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime78 = dateTime66.toDateTime(dateTimeZone71);
        org.joda.time.Chronology chronology79 = dateTime78.getChronology();
        org.joda.time.DateTime dateTime81 = dateTime78.minusYears(26203635);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime.Property property84 = dateTime83.dayOfMonth();
        java.lang.String str85 = property84.toString();
        org.joda.time.DateTime dateTime87 = property84.setCopy(1);
        int int88 = dateTime87.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime87.toMutableDateTimeISO();
        mutablePeriod64.setPeriod((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) mutableDateTime89);
        boolean boolean91 = period9.equals((java.lang.Object) mutableDateTime89);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[Years]" + "'", str13, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-54L) + "'", long49 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 30, 14, 455]");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.055" + "'", str73, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Property[dayOfMonth]" + "'", str85, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2022 + "'", int88 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime3.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period3 = period1.withHours(31);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((int) ' ');
        int int16 = dateTime13.getEra();
        int int17 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property26 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long32 = dateTimeZone29.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime13.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean41 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration42 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Seconds seconds44 = org.joda.time.Seconds.seconds((-27425236));
        org.joda.time.PeriodType periodType45 = seconds44.getPeriodType();
        org.joda.time.Seconds seconds47 = seconds44.minus(59);
        boolean boolean48 = duration42.equals((java.lang.Object) seconds44);
        org.joda.time.ReadableDuration readableDuration49 = null;
        boolean boolean50 = duration42.isEqual(readableDuration49);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-54L) + "'", long32 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean2 = instant0.isEqual(10L);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.Duration duration13 = duration5.withDurationAdded(readableDuration10, (int) (byte) 100);
        org.joda.time.Duration duration14 = org.joda.time.Duration.ZERO;
        boolean boolean15 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant16 = instant0.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant18 = instant16.withMillis((long) (-625));
        org.joda.time.Chronology chronology19 = instant16.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (short) 10);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(35435);
        org.joda.time.DateTime.Property property10 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:20:31.523+00:00:00.055" + "'", str7, "2022-02-22T07:20:31.523+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime.Property property7 = dateTime3.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        boolean boolean10 = property7.equals((java.lang.Object) 58);
        org.joda.time.Interval interval11 = property7.toInterval();
        org.joda.time.Days days12 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Weeks weeks13 = days12.toStandardWeeks();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(weeks13);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(8);
        int int2 = period1.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime14 = dateTime2.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime16.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.Chronology chronology24 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology24.weeks();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekyear();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime14, chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField31 = chronology24.months();
        long long34 = durationField31.getValueAsLong((long) 26290125, 4492800000L);
        long long37 = durationField31.subtract(25200039L, 26309);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-69185984399961L) + "'", long37 == (-69185984399961L));
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration3 = duration1.minus((-78382080000000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime.Property property9 = dateTime5.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.DateTime dateTime15 = dateTime5.withDurationAdded((org.joda.time.ReadableDuration) duration13, (-1));
        org.joda.time.Duration duration17 = duration13.plus((-1L));
        long long18 = duration13.getStandardMinutes();
        org.joda.time.Duration duration20 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration13, 56);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.Period period33 = duration20.toPeriod(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = chronology30.minuteOfDay();
        boolean boolean35 = dateTimeField34.isSupported();
        boolean boolean36 = dateTimeField34.isSupported();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.MutablePeriod mutablePeriod7 = hours1.toMutablePeriod();
        mutablePeriod7.setPeriod((int) (byte) 0, 520, (int) '4', 2, 4, 4, (int) (byte) 100, 436);
        int int17 = mutablePeriod7.getMonths();
        mutablePeriod7.setMinutes(26194);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 520 + "'", int17 == 520);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime16.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = dateTime38.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay46 = dateTime45.toTimeOfDay();
        int[] intArray48 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay46, (long) 1814400);
        org.joda.time.DateTimeField dateTimeField49 = chronology9.secondOfDay();
        java.lang.String str50 = dateTimeField49.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-54L) + "'", long35 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 30, 14, 455]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DateTimeField[secondOfDay]" + "'", str50, "DateTimeField[secondOfDay]");
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale0.getDisplayLanguage(locale2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyear();
        int int18 = dateTimeField15.getDifference((long) 28, (long) 2147483647);
        long long21 = dateTimeField15.addWrapField((long) (short) 0, 999);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime.Property property27 = dateTime23.secondOfMinute();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime28);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = locale30.toLanguageTag();
        java.lang.String str32 = locale30.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.US;
        java.lang.String str34 = locale30.getDisplayLanguage(locale33);
        java.util.Calendar calendar35 = dateTime28.toCalendar(locale33);
        int int36 = dateTimeField15.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getVariant();
        java.lang.String str38 = locale2.getDisplayScript(locale33);
        java.util.Set<java.lang.String> strSet39 = locale33.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de-DE" + "'", str1, "de-DE");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31525804800000L + "'", long21 == 31525804800000L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fr-FR" + "'", str31, "fr-FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "French" + "'", str34, "French");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514431945,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=0,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period13 = period10.plusMinutes((int) (byte) 0);
        mutablePeriod7.mergePeriod((org.joda.time.ReadablePeriod) period10);
        mutablePeriod7.addMonths((int) 'u');
        mutablePeriod7.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime23.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property30 = dateTime23.secondOfMinute();
        org.joda.time.Chronology chronology31 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology31);
        org.joda.time.DurationField durationField34 = chronology31.months();
        mutablePeriod7.setPeriod((long) 1814400, chronology31);
        org.joda.time.DurationField durationField36 = chronology31.months();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(87350400000L, periodType3, chronology31);
        org.joda.time.DateTimeField dateTimeField38 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology31.year();
        org.joda.time.DateTimeField dateTimeField40 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology31.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 2001, 1645514407278L, chronology31);
        int int43 = mutablePeriod42.getMinutes();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Period period6 = period3.plusSeconds((int) (short) 1);
        org.joda.time.Days days7 = period6.toStandardDays();
        org.joda.time.Days days9 = days7.plus((int) (byte) 1);
        org.joda.time.Days days10 = days0.plus(days7);
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.Duration duration22 = duration14.withDurationAdded(readableDuration19, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Days days32 = org.joda.time.Days.daysIn(readableInterval31);
        org.joda.time.Duration duration33 = days32.toStandardDuration();
        org.joda.time.Duration duration34 = duration33.toDuration();
        org.joda.time.ReadableDuration readableDuration35 = null;
        boolean boolean36 = duration34.isLongerThan(readableDuration35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Days days38 = org.joda.time.Days.daysIn(readableInterval37);
        org.joda.time.Duration duration39 = days38.toStandardDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.ReadableDuration readableDuration41 = null;
        boolean boolean42 = duration40.isLongerThan(readableDuration41);
        boolean boolean43 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration40);
        boolean boolean45 = duration22.isEqual((org.joda.time.ReadableDuration) duration40);
        boolean boolean46 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime51 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime53.plusDays(10);
        org.joda.time.Days days58 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalTime localTime59 = dateTime51.toLocalTime();
        org.joda.time.Interval interval60 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime63 = dateTime51.withFieldAdded(durationFieldType61, 2022);
        org.joda.time.LocalTime localTime64 = dateTime51.toLocalTime();
        int int65 = localTime64.size();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Locale.Builder builder4 = builder1.setLocale(locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale15 = new java.util.Locale("2022-02-22T07:16:21.135Z", "+00:00:00.520", "");
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        java.lang.String str21 = property20.toString();
        int int22 = property20.getMaximumValue();
        int int23 = property20.getMaximumValueOverall();
        org.joda.time.DateTime dateTime24 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        java.lang.String str30 = property29.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime34.withSecondOfMinute(59);
        org.joda.time.format.PeriodPrinter periodPrinter37 = null;
        org.joda.time.format.PeriodParser periodParser38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = new org.joda.time.format.PeriodFormatter(periodPrinter37, periodParser38);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter39.withLocale(locale40);
        java.util.Calendar calendar43 = dateTime36.toCalendar(locale40);
        int int44 = property29.getMaximumTextLength(locale40);
        java.lang.String str45 = property20.getAsShortText(locale40);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale40.getDisplayScript(locale46);
        java.util.Locale.setDefault(category0, locale46);
        java.util.Locale locale51 = java.util.Locale.getDefault(category0);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.getDisplayLanguage();
        java.lang.String str54 = locale51.getDisplayCountry(locale52);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "de-DE" + "'", str7, "de-DE");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale15.toString(), "2022-02-22t07:16:21.135z_+00:00:00.520");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[dayOfMonth]" + "'", str21, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 28 + "'", int22 == 28);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud654" + "'", str30, "\ud654");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514459815,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=59,MILLISECOND=870,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22" + "'", str45, "22");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Germany" + "'", str54, "Germany");
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears(26173127);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.secondOfMinute();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField27 = durationFieldType15.getField(chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, chronology29);
        int int31 = period30.getMillis();
        long long34 = chronology25.add((org.joda.time.ReadablePeriod) period30, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType14, chronology25);
        org.joda.time.DateTimeField dateTimeField36 = chronology25.minuteOfDay();
        org.joda.time.DateTime dateTime37 = dateTime11.toDateTime(chronology25);
        org.joda.time.DurationField durationField38 = chronology25.years();
        java.lang.String str39 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology25.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4100L + "'", long34 == 4100L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[+00:00:00.055]" + "'", str39, "ISOChronology[+00:00:00.055]");
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period12 = period6.withDays(435);
        org.joda.time.Hours hours13 = period6.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType14 = hours13.getFieldType();
        java.lang.String str15 = durationFieldType14.getName();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hours" + "'", str15, "hours");
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField23 = dateTimeField22.getDurationField();
        long long26 = dateTimeField22.set(0L, 0);
        int int28 = dateTimeField22.get(26429827L);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-2208988800000L) + "'", long26 == (-2208988800000L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 70 + "'", int28 == 70);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(1);
        int int2 = minutes1.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfWeek();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period13 = period10.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes14 = period10.toStandardMinutes();
        boolean boolean15 = dateTime4.equals((java.lang.Object) minutes14);
        boolean boolean16 = minutes1.isGreaterThan(minutes14);
        org.joda.time.Duration duration17 = minutes1.toStandardDuration();
        org.joda.time.Minutes minutes19 = minutes1.minus(37);
        org.joda.time.PeriodType periodType20 = minutes1.getPeriodType();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(86400000L, (long) 26160);
        mutablePeriod2.addWeeks(2922789);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Period period3 = period1.withHours(0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period27 = duration7.toPeriod();
        org.joda.time.Period period28 = period1.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period28.withMonths(26160);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        org.joda.time.Days days0 = org.joda.time.Days.SEVEN;
        org.joda.time.Days days2 = days0.minus(896);
        int int3 = days2.getDays();
        org.joda.time.PeriodType periodType4 = days2.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis(8);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime23 = dateTime16.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int26 = dateTime23.get(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime34 = dateTime28.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property35 = dateTime28.secondOfMinute();
        org.joda.time.Chronology chronology36 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DurationField durationField38 = chronology36.millis();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        org.joda.time.Period period44 = period41.plusSeconds((int) (short) 1);
        org.joda.time.Days days45 = period44.toStandardDays();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.Days days47 = org.joda.time.Days.daysIn(readableInterval46);
        java.lang.String str48 = days47.toString();
        boolean boolean49 = days45.isGreaterThan(days47);
        long long52 = chronology36.add((org.joda.time.ReadablePeriod) days47, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField53 = chronology36.hourOfHalfday();
        org.joda.time.Days days54 = org.joda.time.Days.THREE;
        java.lang.String str55 = days54.toString();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod59 = period58.toMutablePeriod();
        org.joda.time.Period period61 = period58.plusSeconds((int) (short) 1);
        org.joda.time.Days days62 = period61.toStandardDays();
        org.joda.time.Days days63 = days54.plus(days62);
        long long66 = chronology36.add((org.joda.time.ReadablePeriod) days63, 1739860860662L, 20);
        org.joda.time.DateTimeField dateTimeField67 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType25.getField(chronology36);
        org.joda.time.DateTime.Property property69 = dateTime14.property(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType25.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusYears((int) '4');
        org.joda.time.DateTime.Property property77 = dateTime74.dayOfWeek();
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property81 = dateTime74.secondOfMinute();
        org.joda.time.Chronology chronology82 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.dayOfMonth();
        org.joda.time.Period period84 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology82);
        org.joda.time.DurationField durationField85 = chronology82.months();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.weekyear();
        org.joda.time.DurationField durationField87 = chronology82.millis();
        boolean boolean88 = durationFieldType70.isSupported(chronology82);
        int int89 = periodType4.indexOf(durationFieldType70);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-889) + "'", int3 == (-889));
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 26432 + "'", int26 == 26432);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "P0D" + "'", str48, "P0D");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "P3D" + "'", str55, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1745044860662L + "'", long66 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        boolean boolean3 = instant1.isEqual(10L);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.daysIn(readableInterval7);
        org.joda.time.Duration duration9 = days8.toStandardDuration();
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.ReadableDuration readableDuration11 = null;
        boolean boolean12 = duration10.isLongerThan(readableDuration11);
        org.joda.time.Duration duration14 = duration6.withDurationAdded(readableDuration11, (int) (byte) 100);
        org.joda.time.Duration duration15 = org.joda.time.Duration.ZERO;
        boolean boolean16 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant17 = instant1.minus((org.joda.time.ReadableDuration) duration15);
        boolean boolean18 = instant1.isBeforeNow();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        boolean boolean21 = instant1.equals((java.lang.Object) periodType19);
        org.joda.time.PeriodType periodType22 = periodType19.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property31 = dateTime24.secondOfMinute();
        org.joda.time.Chronology chronology32 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.DurationField durationField34 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.yearOfEra();
        org.joda.time.DurationField durationField37 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.halfdayOfDay();
        org.joda.time.DurationField durationField40 = chronology32.seconds();
        org.joda.time.Period period41 = new org.joda.time.Period(580L, periodType19, chronology32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.lang.String str8 = dateTimeZone6.getID();
        long long10 = dateTimeZone6.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1, dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfMinute();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = dateTimeField25.getAsText((-1L), locale27);
        long long32 = dateTimeField25.addWrapField((long) (short) 100, 1);
        int int33 = mutableDateTime12.get(dateTimeField25);
        long long35 = dateTimeField25.roundFloor(1645512060662L);
        long long38 = dateTimeField25.add(0L, 473);
        boolean boolean39 = dateTimeField25.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.055" + "'", str8, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja-JP" + "'", str28, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1100L + "'", long32 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645512059945L + "'", long35 == 1645512059945L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 473000L + "'", long38 == 473000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod((long) 2022);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusMinutes((int) (byte) 0);
        mutablePeriod11.mergePeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period20 = mutablePeriod1.toPeriod();
        int int21 = period20.size();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.plus(4320000001L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime11.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime33.withZone(dateTimeZone34);
        java.lang.String str38 = dateTimeZone34.getNameKey((long) 1);
        long long41 = dateTimeZone34.adjustOffset((long) 2022, true);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime31.toMutableDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime43 = dateTime5.toDateTime(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-54L) + "'", long30 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2022L + "'", long41 == 2022L);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-04-13T00:00:00.001+00:00:00.055" + "'", str45, "2022-04-13T00:00:00.001+00:00:00.055");
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        int int2 = mutablePeriod1.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod1.copy();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime10 = dateTime5.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime12 = dateTime5.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        int int14 = dateTime12.getMillisOfSecond();
        org.joda.time.DateTime dateTime16 = dateTime12.minusHours((int) (short) 1);
        int int17 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) (byte) 0);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime12.withDayOfMonth(52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 339 + "'", int14 == 339);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26432 + "'", int17 == 26432);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property23 = dateTime16.yearOfEra();
        java.lang.String str24 = property23.getName();
        org.joda.time.DateTime dateTime26 = property23.setCopy(74);
        boolean boolean27 = property23.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = property23.setCopy("2022-02-22T07:19:00.236+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:19:00.236+00:00:00.520\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-54L) + "'", long14 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 55 + "'", int22 == 55);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfEra" + "'", str24, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime12.plusMinutes(22);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod23.addDays(26416);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        org.joda.time.DurationField durationField4 = property2.getLeapDurationField();
        org.joda.time.DurationField durationField5 = property2.getLeapDurationField();
        long long6 = property2.remainder();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) ' ');
        int int15 = dateTime12.getEra();
        int int16 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime18 = dateTime12.plus((long) 22);
        int int19 = dateTime18.getMinuteOfHour();
        org.joda.time.Duration duration21 = org.joda.time.Duration.parse("PT2147483647S");
        long long22 = duration21.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime.Property property28 = dateTime24.secondOfMinute();
        org.joda.time.Period period29 = duration21.toPeriodTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime31 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration21, (-1));
        int int32 = property2.getDifference((org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime31.withWeekOfWeekyear(896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 896 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNull(durationField5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 26432422L + "'", long6 == 26432422L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 596523L + "'", long22 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 24855 + "'", int32 == 24855);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration3 = duration1.minus((-78382080000000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime.Property property9 = dateTime5.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.DateTime dateTime15 = dateTime5.withDurationAdded((org.joda.time.ReadableDuration) duration13, (-1));
        org.joda.time.Duration duration17 = duration13.plus((-1L));
        long long18 = duration13.getStandardMinutes();
        org.joda.time.Duration duration20 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration13, 56);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        java.lang.String str24 = property23.toString();
        int int25 = property23.getMaximumValue();
        int int26 = property23.getMaximumValueOverall();
        org.joda.time.DateTime dateTime27 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra(436);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMillis((int) ' ');
        int int36 = dateTime33.getEra();
        org.joda.time.DateTime.Property property37 = dateTime33.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        org.joda.time.DateTime dateTime43 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration41, (-1));
        org.joda.time.DateTime dateTime45 = dateTime33.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime33.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime49 = dateTime33.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime33.getZone();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        boolean boolean52 = dateTime29.equals((java.lang.Object) dateTime51);
        org.joda.time.DateTime.Property property53 = dateTime51.yearOfCentury();
        org.joda.time.DateTime dateTime55 = dateTime51.minusMinutes(1);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[dayOfMonth]" + "'", str24, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 28 + "'", int25 == 28);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
        org.joda.time.MutablePeriod mutablePeriod5 = weeks4.toMutablePeriod();
        mutablePeriod5.addSeconds(467);
        mutablePeriod5.addSeconds(26355);
        org.joda.time.PeriodType periodType10 = mutablePeriod5.getPeriodType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.Period period17 = new org.joda.time.Period(596523L, 2022L, chronology13);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType19 = minutes18.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = durationFieldType20.getField(chronology30);
        boolean boolean33 = periodType19.isSupported(durationFieldType20);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfWeek();
        org.joda.time.DateTime dateTime41 = dateTime35.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property42 = dateTime35.secondOfMinute();
        org.joda.time.Chronology chronology43 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology43.halfdays();
        org.joda.time.Chronology chronology46 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.Chronology chronology48 = chronology46.withUTC();
        org.joda.time.DurationField durationField49 = chronology46.weekyears();
        org.joda.time.DurationField durationField50 = durationFieldType20.getField(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1, dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getName((long) 1);
        boolean boolean10 = dateTimeZone1.isStandardOffset(1645514169346L);
        int int12 = dateTimeZone1.getStandardOffset(1645512151995L);
        int int14 = dateTimeZone1.getStandardOffset(1645512212458L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.055" + "'", str3, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.055" + "'", str8, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 55 + "'", int12 == 55);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 55 + "'", int14 == 55);
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withLocale(locale4);
        boolean boolean7 = periodFormatter3.isPrinter();
        org.joda.time.format.PeriodParser periodParser8 = periodFormatter3.getParser();
        java.util.Locale locale10 = new java.util.Locale("");
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter3.withLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = org.joda.time.Period.parse("2022-02-22T07:20:25.783+00:00:00.055", periodFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(periodParser8);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(periodFormatter11);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        org.joda.time.Period period1 = org.joda.time.Period.hours(32);
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.Period period22 = period19.plusMinutes((int) (byte) 0);
        org.joda.time.Period period24 = period22.plusMonths((int) '4');
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        boolean boolean29 = period22.isSupported(durationFieldType27);
        int int30 = mutablePeriod5.indexOf(durationFieldType27);
        java.lang.String str31 = durationFieldType27.toString();
        org.joda.time.Period period33 = period1.withFieldAdded(durationFieldType27, 105);
        org.joda.time.Period period35 = period33.minusWeeks(36);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        int int40 = dateTime37.getEra();
        org.joda.time.DateTime dateTime42 = dateTime37.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime44 = dateTime37.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears(26173127);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime53.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property60 = dateTime53.secondOfMinute();
        org.joda.time.Chronology chronology61 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfMonth();
        org.joda.time.DurationField durationField63 = durationFieldType51.getField(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) 100, chronology65);
        int int67 = period66.getMillis();
        long long70 = chronology61.add((org.joda.time.ReadablePeriod) period66, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType50, chronology61);
        org.joda.time.DateTimeField dateTimeField72 = chronology61.minuteOfDay();
        org.joda.time.DateTime dateTime73 = dateTime47.toDateTime(chronology61);
        org.joda.time.Period period75 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period77 = period75.withMillis(28);
        org.joda.time.Seconds seconds78 = org.joda.time.Seconds.ONE;
        org.joda.time.Period period79 = seconds78.toPeriod();
        org.joda.time.Period period81 = period79.withWeeks((-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType82.getRangeDurationType();
        int int84 = period81.indexOf(durationFieldType83);
        org.joda.time.Period period86 = period75.withField(durationFieldType83, 100);
        org.joda.time.DateTime dateTime88 = dateTime47.withFieldAdded(durationFieldType83, 23);
        org.joda.time.Period period90 = period35.withFieldAdded(durationFieldType83, (int) 'a');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hours" + "'", str31, "hours");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 4100L + "'", long70 == 4100L);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(seconds78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration16.isLongerThan(readableDuration17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isLongerThan(readableDuration23);
        boolean boolean25 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime32 = dateTime27.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime27.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval35 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime36 = dateTime27.toLocalDateTime();
        boolean boolean37 = dateTimeZone11.isLocalDateTimeGap(localDateTime36);
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = dateTimeZone11.getShortName(31795199480L, locale39);
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.055" + "'", str40, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en_US" + "'", str42, "en_US");
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod3.addDays(2022);
        mutablePeriod3.setPeriod(1645512060662L);
        mutablePeriod3.addWeeks(26357992);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.DurationField durationField13 = chronology9.years();
        org.joda.time.DurationField durationField14 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.minuteOfDay();
        java.lang.String str17 = dateTimeField15.getAsShortText(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime();
        int int22 = dateTime21.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime26 = dateTime21.minusWeeks(22);
        int int27 = dateTime21.getMinuteOfHour();
        int int28 = dateTime21.getSecondOfMinute();
        org.joda.time.DateTime dateTime30 = dateTime21.plusSeconds(36);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withMillisRemoved();
        java.lang.String str36 = periodType34.getName();
        org.joda.time.PeriodType periodType37 = periodType34.withYearsRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 26369, 1069485L, periodType37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime30, periodType37);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Weeks" + "'", str36, "Weeks");
        org.junit.Assert.assertNotNull(periodType37);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.Duration duration7 = hours6.toStandardDuration();
        org.joda.time.PeriodType periodType8 = hours6.getPeriodType();
        int int9 = periodType8.size();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder2.setLanguage("0035-02-22T07:19:53.873");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 0035-02-22T07:19:53.873 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod((long) 2022);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusMinutes((int) (byte) 0);
        mutablePeriod11.mergePeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setMonths(40);
        int int22 = mutablePeriod1.getSeconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray23 = mutablePeriod1.getFieldTypes();
        mutablePeriod1.add(26199270, (-2), 26229, 26232, (int) ' ', 26323, 0, (-1814400));
        mutablePeriod1.addWeeks(51026400);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray23);
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.monthOfYear();
        long long17 = dateTimeField15.roundCeiling(80027766989530L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 80028431999945L + "'", long17 == 80028431999945L);
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(8);
        int int10 = dateTime9.getYearOfEra();
        org.joda.time.DateTime.Property property11 = dateTime9.year();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T07:18:31.328+00:00:00.520", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        int int14 = dateTimeField12.getMinimumValue((long) (byte) 0);
        java.lang.String str15 = dateTimeField12.toString();
        org.joda.time.DurationField durationField16 = dateTimeField12.getRangeDurationField();
        java.lang.String str18 = dateTimeField12.getAsText(1645512060662L);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField12.getType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str15, "DateTimeField[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DurationField durationField15 = durationFieldType3.getField(chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, chronology17);
        int int19 = period18.getMillis();
        long long22 = chronology13.add((org.joda.time.ReadablePeriod) period18, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType2, chronology13);
        org.joda.time.DateTimeField dateTimeField24 = chronology13.minuteOfDay();
        org.joda.time.Hours hours25 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours26 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours27 = hours25.plus(hours26);
        org.joda.time.Hours hours28 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours29 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours30 = hours28.plus(hours29);
        org.joda.time.Hours hours31 = hours26.minus(hours29);
        org.joda.time.Hours hours33 = hours31.plus(20);
        int[] intArray36 = chronology13.get((org.joda.time.ReadablePeriod) hours31, 60000L, (long) 26229);
        org.joda.time.DateTimeField dateTimeField37 = chronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4100L + "'", long22 == 4100L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.plus(4320000001L);
        int int6 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        boolean boolean11 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime3.minusWeeks((-58));
        org.joda.time.DateTime.Property property14 = dateTime3.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        org.joda.time.Days days1 = org.joda.time.Days.days(896);
        org.joda.time.Days days2 = days1.negated();
        java.lang.String str3 = days1.toString();
        org.joda.time.Days days5 = days1.plus(1439);
        java.lang.String str6 = days1.toString();
        org.joda.time.DurationFieldType durationFieldType7 = days1.getFieldType();
        java.lang.String str8 = durationFieldType7.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "P896D" + "'", str3, "P896D");
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P896D" + "'", str6, "P896D");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "days" + "'", str8, "days");
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusSeconds((int) (short) 1);
        org.joda.time.Days days18 = period17.toStandardDays();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        java.lang.String str21 = days20.toString();
        boolean boolean22 = days18.isGreaterThan(days20);
        long long25 = chronology9.add((org.joda.time.ReadablePeriod) days20, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField26 = chronology9.hourOfHalfday();
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        java.lang.String str28 = days27.toString();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        org.joda.time.Period period34 = period31.plusSeconds((int) (short) 1);
        org.joda.time.Days days35 = period34.toStandardDays();
        org.joda.time.Days days36 = days27.plus(days35);
        long long39 = chronology9.add((org.joda.time.ReadablePeriod) days36, 1739860860662L, 20);
        org.joda.time.DateTimeField dateTimeField40 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField41 = chronology9.millis();
        org.joda.time.DurationField durationField42 = chronology9.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P0D" + "'", str21, "P0D");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P3D" + "'", str28, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1745044860662L + "'", long39 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        boolean boolean26 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withMinutesRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime55 = dateTime48.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval56 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval56);
        long long58 = interval56.getStartMillis();
        org.joda.time.Chronology chronology59 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(32L, (long) 9, periodType27, chronology59);
        org.joda.time.format.PeriodFormatter periodFormatter62 = periodFormatter2.withParseType(periodType27);
        boolean boolean63 = periodFormatter2.isPrinter();
        java.util.Locale locale64 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter65 = periodFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514433501L + "'", long58 == 1645514433501L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(periodFormatter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertNull(periodPrinter65);
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        org.joda.time.Chronology chronology39 = dateTime31.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime31.plusMinutes((-292275054));
        boolean boolean42 = mutableInterval28.isBefore((org.joda.time.ReadableInstant) dateTime31);
        long long43 = mutableInterval28.getEndMillis();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod47 = period46.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Days days49 = org.joda.time.Days.daysIn(readableInterval48);
        org.joda.time.Duration duration50 = days49.toStandardDuration();
        org.joda.time.Duration duration51 = duration50.toDuration();
        org.joda.time.ReadableDuration readableDuration52 = null;
        boolean boolean53 = duration51.isLongerThan(readableDuration52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Days days55 = org.joda.time.Days.daysIn(readableInterval54);
        org.joda.time.Duration duration56 = days55.toStandardDuration();
        org.joda.time.Duration duration57 = duration56.toDuration();
        org.joda.time.ReadableDuration readableDuration58 = null;
        boolean boolean59 = duration57.isLongerThan(readableDuration58);
        boolean boolean60 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMillis((int) ' ');
        int int65 = dateTime62.getEra();
        org.joda.time.DateTime dateTime67 = dateTime62.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime69 = dateTime62.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval70 = duration51.toIntervalTo((org.joda.time.ReadableInstant) dateTime62);
        mutablePeriod47.add((org.joda.time.ReadableInterval) interval70);
        org.joda.time.MutableInterval mutableInterval72 = interval70.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusYears((int) '4');
        boolean boolean77 = interval70.isAfter((org.joda.time.ReadableInstant) dateTime74);
        long long78 = interval70.getEndMillis();
        org.joda.time.Chronology chronology79 = interval70.getChronology();
        java.lang.String str80 = interval70.toString();
        org.joda.time.Duration duration81 = interval70.toDuration();
        boolean boolean82 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) interval70);
        long long83 = interval70.getStartMillis();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:20:33.585+00:00:00.055/2022-02-22T07:20:33.585+00:00:00.055" + "'", str29, "2022-02-22T07:20:33.585+00:00:00.055/2022-02-22T07:20:33.585+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514433530L + "'", long43 == 1645514433530L);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(mutableInterval72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645514433530L + "'", long78 == 1645514433530L);
        org.junit.Assert.assertNotNull(chronology79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-22T07:20:33.585+00:00:00.055/2022-02-22T07:20:33.585+00:00:00.055" + "'", str80, "2022-02-22T07:20:33.585+00:00:00.055/2022-02-22T07:20:33.585+00:00:00.055");
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1645514433530L + "'", long83 == 1645514433530L);
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Days days27 = org.joda.time.Days.daysIn(readableInterval26);
        org.joda.time.Duration duration28 = days27.toStandardDuration();
        org.joda.time.Duration duration29 = duration28.toDuration();
        org.joda.time.ReadableDuration readableDuration30 = null;
        boolean boolean31 = duration29.isLongerThan(readableDuration30);
        boolean boolean32 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration29, periodType33);
        org.joda.time.LocalDate localDate35 = dateTime19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMillis((int) ' ');
        int int44 = dateTime41.getEra();
        int int45 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime47 = dateTime41.plus((long) 22);
        org.joda.time.DateTime dateTime48 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate49 = dateTime47.toLocalDate();
        org.joda.time.Days days50 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate49);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDate35, (int) (short) -1, locale52);
        int int54 = dateTimeField10.getMaximumValue();
        int int55 = dateTimeField10.getMaximumValue();
        int int57 = dateTimeField10.getLeapAmount(1645514308030L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1" + "'", str53, "-1");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 292278993 + "'", int55 == 292278993);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645514193756L, (-1L), periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(26416263, 366, 18, 1814399, 467, (int) (short) 100, 26217, 112, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Period period9 = period7.multipliedBy(40);
        org.joda.time.Period period11 = period9.plusSeconds(1);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(4, 0, (int) (short) 1, (int) (short) -1, 1439, 26160, 1814400, (int) '#');
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weekyears();
        int int22 = mutablePeriod20.get(durationFieldType21);
        int int23 = period11.get(durationFieldType21);
        org.joda.time.Period period25 = period11.plusMillis((int) (byte) 10);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) ' ');
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime dateTime25 = dateTime20.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime27 = dateTime20.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval28 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval28);
        long long30 = interval28.getStartMillis();
        org.joda.time.Chronology chronology31 = interval28.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekyear();
        boolean boolean33 = dateTimeFieldType0.isSupported(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.seconds();
        long long37 = durationField34.getDifferenceAsLong(26296156L, 982L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyearOfCentury" + "'", str1, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514433649L + "'", long30 == 1645514433649L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 26295L + "'", long37 == 26295L);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.joda.time.Period period1 = org.joda.time.Period.days(11);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 1, periodType14);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period15);
        int int17 = mutablePeriod1.getYears();
        mutablePeriod1.addWeeks(13);
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = mutablePeriod1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(26207766, 359);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26207766");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        boolean boolean26 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withMinutesRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime55 = dateTime48.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval56 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval56);
        long long58 = interval56.getStartMillis();
        org.joda.time.Chronology chronology59 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(32L, (long) 9, periodType27, chronology59);
        org.joda.time.format.PeriodFormatter periodFormatter62 = periodFormatter2.withParseType(periodType27);
        boolean boolean63 = periodFormatter2.isPrinter();
        java.util.Locale locale64 = periodFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod66 = periodFormatter2.parseMutablePeriod("java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514433714L + "'", long58 == 1645514433714L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(periodFormatter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(locale64);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        boolean boolean9 = periodFormatter2.isParser();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableDuration12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = dateTime14.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration30, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1645514164648L, 1645514168245L, periodType40);
        org.joda.time.PeriodType periodType43 = periodType40.withMillisRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter2.withParseType(periodType40);
        java.lang.StringBuffer stringBuffer45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime50.plus((long) (short) 10);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withYear(35435);
        org.joda.time.DateTime.Property property56 = dateTime52.weekyear();
        org.joda.time.DateTime dateTime58 = dateTime52.minusSeconds(23);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfMonth((int) (byte) 1);
        int int63 = dateTime60.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusYears((int) '4');
        org.joda.time.DateTime.Property property68 = dateTime65.dayOfWeek();
        org.joda.time.DateTime dateTime71 = dateTime65.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property72 = dateTime65.secondOfMinute();
        org.joda.time.Chronology chronology73 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.dayOfMonth();
        org.joda.time.DurationField durationField75 = chronology73.weeks();
        org.joda.time.DateTimeZone dateTimeZone76 = chronology73.getZone();
        org.joda.time.DateTime dateTime77 = dateTime60.withZoneRetainFields(dateTimeZone76);
        org.joda.time.Weeks weeks78 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Weeks weeks79 = null;
        org.joda.time.Weeks weeks80 = weeks78.plus(weeks79);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer45, (org.joda.time.ReadablePeriod) weeks78);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:20:33.797+00:00:00.055" + "'", str53, "2022-02-22T07:20:33.797+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 440 + "'", int63 == 440);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(weeks78);
        org.junit.Assert.assertNotNull(weeks80);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        boolean boolean6 = periodFormatter5.isParser();
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period13 = period10.plusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period13.multipliedBy((int) (byte) -1);
        org.joda.time.Period period17 = period15.plusMinutes((int) (byte) 10);
        org.joda.time.Seconds seconds18 = period17.toStandardSeconds();
        org.joda.time.Period period20 = period17.withYears(26);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter5.printTo(stringBuffer7, (org.joda.time.ReadablePeriod) period20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy(41);
        org.joda.time.Period period3 = seconds0.toPeriod();
        org.joda.time.Period period4 = seconds0.toPeriod();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property23 = dateTime16.yearOfEra();
        java.lang.String str24 = property23.getName();
        org.joda.time.DateTime dateTime26 = property23.setCopy(74);
        org.joda.time.DateTime dateTime27 = property23.roundHalfCeilingCopy();
        java.lang.Class<?> wildcardClass28 = property23.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-54L) + "'", long14 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 55 + "'", int22 == 55);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfEra" + "'", str24, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime27 = dateTime22.minusMinutes((int) (short) 1);
        int int28 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        long long30 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime31 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime32 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime33 = property5.roundHalfCeilingCopy();
        int int34 = dateTime33.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-54L) + "'", long20 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 55 + "'", int28 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(488, 2, 26364812, 26370, 737);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26370 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.Duration duration24 = duration3.plus(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        boolean boolean31 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration29);
        int int32 = duration24.compareTo((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        int int45 = dateTime42.getEra();
        int int46 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property55 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime48.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        long long61 = dateTimeZone58.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime42.toMutableDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime68 = dateTime64.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean70 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime72 = dateTime34.minusYears(56);
        org.joda.time.DateTime dateTime74 = dateTime34.minusMonths(92000);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType76 = periodType75.withWeeksRemoved();
        org.joda.time.Period period77 = duration24.toPeriodTo((org.joda.time.ReadableInstant) dateTime34, periodType76);
        java.util.Date date78 = dateTime34.toDate();
        org.joda.time.DateTime.Property property79 = dateTime34.millisOfDay();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-54L) + "'", long61 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Tue Feb 22 07:20:33 UTC 2022");
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("chinois (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"chinois (Taiwan)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.Chronology chronology30 = mutableInterval28.getChronology();
        org.joda.time.Period period31 = mutableInterval28.toPeriod();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:20:33.962+00:00:00.055/2022-02-22T07:20:33.962+00:00:00.055" + "'", str29, "2022-02-22T07:20:33.962+00:00:00.055/2022-02-22T07:20:33.962+00:00:00.055");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(97, 14, 52, 14, 331, 36, 26374, 26402);
        mutablePeriod8.setPeriod((-2), (-54), 86399999, 0, 26289, 0, 895, 896);
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.withMaximumValue();
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        int int6 = dateTime1.getYear();
        org.joda.time.Hours hours8 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours9 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours10 = hours8.plus(hours9);
        org.joda.time.DurationFieldType durationFieldType11 = hours8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology22.millis();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1, chronology22);
        boolean boolean26 = durationFieldType11.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.year();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(1645514173148L, chronology22);
        org.joda.time.DateTime dateTime29 = dateTime1.withChronology(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        org.joda.time.Period period1 = org.joda.time.Period.months(745);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        int int28 = mutablePeriod3.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod3.copy();
        mutablePeriod29.addYears(1439);
        java.lang.Object obj32 = mutablePeriod29.clone();
        mutablePeriod29.setWeeks(112);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "P1439Y112W");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "P1439Y112W");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "P1439Y112W");
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration27.isLongerThan(readableDuration28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        boolean boolean36 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval46 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration27.toDuration();
        org.joda.time.Duration duration49 = duration47.plus((-78382080000000L));
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology51 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.weekyearOfCentury();
        org.joda.time.DurationField durationField53 = chronology51.days();
        long long56 = durationField53.add((long) 'x', (long) 895);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-54L) + "'", long14 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 55 + "'", int22 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 77328000120L + "'", long56 == 77328000120L);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-2022), 488, 366, 26318920);
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        org.joda.time.Period period72 = period69.plusMinutes((int) (byte) 0);
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) period69);
        long long76 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod66, 1645512060662L, 74);
        org.joda.time.DurationField durationField77 = chronology58.weeks();
        org.joda.time.DateTimeField dateTimeField78 = chronology58.minuteOfHour();
        long long81 = dateTimeField78.add(16799502L, (long) (-27425236));
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645512060662L + "'", long76 == 1645512060662L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1645497360498L) + "'", long81 == (-1645497360498L));
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period12 = period6.minusMonths((int) ' ');
        org.joda.time.Period period14 = period6.multipliedBy(436);
        org.joda.time.Period period16 = period6.withYears((int) (byte) 10);
        org.joda.time.Period period18 = period6.minusYears(16);
        org.joda.time.Period period20 = period18.withSeconds(97);
        org.joda.time.Period period22 = period20.plusMonths(26354274);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = weeks1.plus(0);
        org.joda.time.Weeks weeks5 = weeks3.minus(3);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks5);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks10 = weeks8.plus(0);
        org.joda.time.Weeks weeks12 = weeks10.minus(3);
        org.joda.time.Weeks weeks13 = weeks7.plus(weeks12);
        org.joda.time.Weeks weeks14 = weeks5.plus(weeks13);
        org.joda.time.MutablePeriod mutablePeriod15 = weeks14.toMutablePeriod();
        org.joda.time.Period period17 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Period period19 = period17.minus(readablePeriod18);
        org.joda.time.Weeks weeks20 = period19.toStandardWeeks();
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks25 = weeks23.minus(59);
        org.joda.time.Weeks weeks26 = weeks21.plus(weeks25);
        org.joda.time.Weeks weeks28 = weeks26.minus((int) (short) 1);
        boolean boolean29 = weeks20.isLessThan(weeks28);
        boolean boolean30 = weeks14.isGreaterThan(weeks20);
        org.joda.time.Weeks weeks31 = weeks20.negated();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.weeksIn(readableInterval32);
        org.joda.time.Weeks weeks34 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks36 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks38 = weeks36.minus(59);
        org.joda.time.Weeks weeks39 = weeks34.plus(weeks38);
        org.joda.time.Weeks weeks41 = weeks39.minus((int) (short) 1);
        boolean boolean42 = weeks33.isGreaterThan(weeks41);
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks45 = weeks43.plus(0);
        org.joda.time.Weeks weeks47 = weeks43.dividedBy((int) 'u');
        org.joda.time.Duration duration48 = weeks43.toStandardDuration();
        org.joda.time.Weeks weeks49 = weeks33.plus(weeks43);
        org.joda.time.Weeks weeks51 = weeks49.multipliedBy(38);
        org.joda.time.Weeks weeks52 = weeks20.minus(weeks51);
        org.joda.time.Weeks weeks53 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) weeks51);
        org.joda.time.Weeks weeks54 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks55 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks57 = weeks55.plus(0);
        org.joda.time.Weeks weeks59 = weeks57.minus(3);
        org.joda.time.Weeks weeks60 = weeks54.plus(weeks59);
        org.joda.time.Weeks weeks62 = weeks60.multipliedBy((int) (byte) -1);
        boolean boolean63 = weeks53.isGreaterThan(weeks62);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertNotNull(weeks36);
        org.junit.Assert.assertNotNull(weeks38);
        org.junit.Assert.assertNotNull(weeks39);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(weeks60);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        mutablePeriod3.setDays((int) 'a');
        mutablePeriod3.addMinutes(0);
        mutablePeriod3.setSeconds((int) ' ');
        mutablePeriod3.setPeriod((int) ' ', 40, (int) '#', (-1), 26161, (-1), 22, 12);
        org.joda.time.Period period26 = mutablePeriod3.toPeriod();
        int[] intArray27 = mutablePeriod3.getValues();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 40, 35, -1, 26161, -1, 22, 12]");
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks2 = weeks0.plus(0);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks5 = weeks0.plus(weeks4);
        org.joda.time.Weeks weeks7 = weeks5.minus((-1));
        int int8 = weeks5.getWeeks();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 103 + "'", int8 == 103);
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime.Property property42 = dateTime38.secondOfMinute();
        org.joda.time.DateTime dateTime43 = property42.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int46 = dateTime43.get(dateTimeFieldType45);
        org.joda.time.TimeOfDay timeOfDay47 = dateTime43.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusYears((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime49.plusDays(10);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property63 = dateTime56.secondOfMinute();
        org.joda.time.Chronology chronology64 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1, chronology64);
        org.joda.time.DateTime dateTime68 = dateTime49.withChronology(chronology64);
        org.joda.time.Period period71 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod72 = period71.toMutablePeriod();
        org.joda.time.Period period74 = period71.plusSeconds((int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.lang.String>) strList81);
        boolean boolean84 = period74.equals((java.lang.Object) strList83);
        org.joda.time.Period period86 = period74.withHours((int) (byte) 1);
        int[] intArray89 = chronology64.get((org.joda.time.ReadablePeriod) period74, (long) 20, (long) 10);
        chronology29.validate((org.joda.time.ReadablePartial) timeOfDay47, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField92 = timeOfDay47.getField((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 120");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 0, 0, 0, 0, -10]");
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime39 = dateTime1.minusYears(56);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime41 = property40.roundHalfFloorCopy();
        java.lang.String str42 = property40.toString();
        int int43 = property40.getLeapAmount();
        boolean boolean45 = property40.equals((java.lang.Object) 1645514366667L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-54L) + "'", long28 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[monthOfYear]" + "'", str42, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str3 = dateTimeZone0.getNameKey((long) (short) -1);
        long long6 = dateTimeZone0.adjustOffset((long) 0, false);
        long long8 = dateTimeZone0.convertUTCToLocal(630973127L);
        java.lang.String str9 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 630973182L + "'", long8 == 630973182L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.055" + "'", str9, "+00:00:00.055");
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime1.toMutableDateTime(dateTimeZone9);
        boolean boolean12 = dateTimeZone9.isStandardOffset((long) 26194);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime.Property property19 = dateTime15.secondOfMinute();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTime.Property property27 = dateTime26.weekyear();
        boolean boolean28 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property37 = dateTime30.secondOfMinute();
        org.joda.time.Chronology chronology38 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField40 = chronology38.weeks();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.weekyear();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = locale43.getDisplayScript();
        int int46 = dateTimeField42.getMaximumShortTextLength(locale43);
        java.util.Calendar calendar47 = dateTime20.toCalendar(locale43);
        java.lang.String str48 = dateTimeZone9.getName(1645514186689L, locale43);
        int int50 = dateTimeZone9.getOffsetFromLocal(1645514333812L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr-FR" + "'", str44, "fr-FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645514433945,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=34,MILLISECOND=0,ZONE_OFFSET=55,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.055" + "'", str48, "+00:00:00.055");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 55 + "'", int50 == 55);
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MIN_VALUE;
        org.joda.time.PeriodType periodType1 = hours0.getPeriodType();
        org.joda.time.Hours hours3 = hours0.dividedBy(26217);
        int int4 = hours3.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-81911) + "'", int4 == (-81911));
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        int int14 = property5.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime16 = dateTime7.minus((long) 436);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy(41);
        int int3 = seconds0.getSeconds();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        org.joda.time.Period period2 = new org.joda.time.Period(2985620924900680370L, (long) 534);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes11 = period7.toStandardMinutes();
        boolean boolean12 = dateTime1.equals((java.lang.Object) minutes11);
        boolean boolean13 = dateTime1.isEqualNow();
        org.joda.time.DateTime.Property property14 = dateTime1.yearOfEra();
        int int15 = property14.getMinimumValue();
        org.joda.time.DurationField durationField16 = property14.getDurationField();
        boolean boolean17 = durationField16.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusMinutes((int) (byte) 0);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) period15);
        mutablePeriod12.addMonths((int) 'u');
        mutablePeriod12.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime34 = dateTime28.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property35 = dateTime28.secondOfMinute();
        org.joda.time.Chronology chronology36 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology36);
        org.joda.time.DurationField durationField39 = chronology36.months();
        mutablePeriod12.setPeriod((long) 1814400, chronology36);
        org.joda.time.DurationField durationField41 = chronology36.months();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(87350400000L, periodType8, chronology36);
        java.lang.String str43 = chronology36.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(26422, 26289, 12, 131, 100, 97, 0, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 131 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+00:00:00.055]" + "'", str43, "ISOChronology[+00:00:00.055]");
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("weekyearofcentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"weekyearofcentury\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        mutablePeriod13.addHours(28);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod13.copy();
        mutablePeriod13.addYears((-19045));
        org.joda.time.MutablePeriod mutablePeriod19 = mutablePeriod13.toMutablePeriod();
        mutablePeriod19.setPeriod(1645514407977L);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(mutablePeriod19);
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        mutablePeriod6.addMonths((int) 'u');
        mutablePeriod6.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.months();
        mutablePeriod6.setPeriod((long) 1814400, chronology30);
        org.joda.time.DurationField durationField35 = chronology30.months();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(87350400000L, periodType2, chronology30);
        org.joda.time.Period period37 = new org.joda.time.Period((long) (-1), chronology30);
        org.joda.time.Period period39 = period37.plusHours(729764);
        org.joda.time.Hours hours40 = period37.toStandardHours();
        org.joda.time.Period period42 = org.joda.time.Period.days((int) ' ');
        org.joda.time.Period period44 = period42.withMinutes(8);
        org.joda.time.Duration duration46 = org.joda.time.Duration.millis((long) 112);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property55 = dateTime48.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar56 = dateTime48.toGregorianCalendar();
        org.joda.time.DateTime dateTime58 = dateTime48.minusDays((int) (short) 100);
        org.joda.time.Period period59 = duration46.toPeriodTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Hours hours60 = org.joda.time.Hours.TWO;
        org.joda.time.DurationFieldType durationFieldType61 = hours60.getFieldType();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DurationField durationField63 = durationFieldType61.getField(chronology62);
        int int64 = period59.get(durationFieldType61);
        boolean boolean65 = period42.isSupported(durationFieldType61);
        int int66 = hours40.get(durationFieldType61);
        org.joda.time.Hours hours67 = hours40.negated();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(gregorianCalendar56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(hours60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(hours67);
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = weeks1.plus(0);
        org.joda.time.Weeks weeks5 = weeks3.minus(3);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks5);
        org.joda.time.MutablePeriod mutablePeriod7 = weeks6.toMutablePeriod();
        mutablePeriod7.setDays(40);
        mutablePeriod7.addMonths(26370);
        mutablePeriod7.setHours(24);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 52);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Duration duration5 = duration1.withDurationAdded(readableDuration3, (-91997));
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        long long15 = duration14.getStandardHours();
        java.lang.String str16 = duration14.toString();
        boolean boolean17 = duration9.isEqual((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Days days19 = org.joda.time.Days.daysIn(readableInterval18);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        long long21 = duration20.getStandardHours();
        java.lang.String str22 = duration20.toString();
        int int23 = duration14.compareTo((org.joda.time.ReadableDuration) duration20);
        int int24 = duration1.compareTo((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Days days26 = org.joda.time.Days.daysIn(readableInterval25);
        org.joda.time.Duration duration27 = days26.toStandardDuration();
        org.joda.time.Duration duration28 = duration27.toDuration();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration28.isLongerThan(readableDuration29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Days days32 = org.joda.time.Days.daysIn(readableInterval31);
        org.joda.time.Duration duration33 = days32.toStandardDuration();
        org.joda.time.Duration duration34 = duration33.toDuration();
        org.joda.time.ReadableDuration readableDuration35 = null;
        boolean boolean36 = duration34.isLongerThan(readableDuration35);
        boolean boolean37 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        boolean boolean42 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration43 = duration34.toDuration();
        int int44 = duration20.compareTo((org.joda.time.ReadableDuration) duration34);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValueOverall();
        long long7 = property4.remainder();
        org.joda.time.DateTime dateTime9 = property4.addToCopy(99);
        org.joda.time.DateTime dateTime10 = property4.getDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "dayOfWeek" + "'", str5, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 26435130L + "'", long7 == 26435130L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period3 = period1.withMillis(28);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.ONE;
        org.joda.time.Period period5 = seconds4.toPeriod();
        org.joda.time.Period period7 = period5.withWeeks((-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        int int10 = period7.indexOf(durationFieldType9);
        org.joda.time.Period period12 = period1.withField(durationFieldType9, 100);
        java.lang.String str13 = durationFieldType9.getName();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "days" + "'", str13, "days");
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime24 = dateTime16.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime31 = dateTime26.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime33 = dateTime26.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.plusMonths((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property43 = dateTime40.hourOfDay();
        org.joda.time.DateTime dateTime44 = property43.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property43.getFieldType();
        org.joda.time.DateTime.Property property46 = dateTime36.property(dateTimeFieldType45);
        boolean boolean47 = dateTime24.isSupported(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfMonth();
        java.lang.String str51 = property50.toString();
        int int52 = property50.getMaximumValue();
        int int53 = property50.getMaximumValueOverall();
        org.joda.time.DateTime dateTime54 = property50.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-54L) + "'", long14 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 55 + "'", int22 == 55);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Property[dayOfMonth]" + "'", str51, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 28 + "'", int52 == 28);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        boolean boolean14 = dateTimeField13.isSupported();
        long long17 = dateTimeField13.getDifferenceAsLong(1645514222400L, 1645514224037L);
        int int18 = dateTimeField13.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Period period4 = interval3.toPeriod();
        org.joda.time.Duration duration5 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime11.toMutableDateTime(dateTimeZone27);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Days days33 = org.joda.time.Days.daysIn(readableInterval32);
        org.joda.time.Duration duration34 = days33.toStandardDuration();
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.ReadableDuration readableDuration36 = null;
        boolean boolean37 = duration35.isLongerThan(readableDuration36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration41.isLongerThan(readableDuration42);
        boolean boolean44 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.Days days46 = org.joda.time.Days.daysIn(readableInterval45);
        org.joda.time.Duration duration47 = days46.toStandardDuration();
        org.joda.time.Duration duration48 = duration47.toDuration();
        boolean boolean49 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.weeks();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, (org.joda.time.ReadableDuration) duration48, periodType50);
        org.joda.time.PeriodType periodType52 = periodType50.withHoursRemoved();
        org.joda.time.Period period53 = interval3.toPeriod(periodType52);
        org.joda.time.MutableInterval mutableInterval54 = interval3.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-54L) + "'", long30 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(mutableInterval54);
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter5.getParser();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter5.withParseType(periodType10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        int int21 = property20.getMaximumValue();
        boolean boolean22 = property20.isLeap();
        org.joda.time.DateTime dateTime23 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField24 = property20.getField();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis((int) ' ');
        int int37 = dateTime34.getEra();
        int int38 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        long long53 = dateTimeZone50.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime34.toMutableDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime60 = dateTime56.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime54, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean62 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime64 = dateTime26.minusYears(56);
        org.joda.time.DateTime.Property property65 = dateTime64.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property74 = dateTime67.minuteOfHour();
        long long75 = property65.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.TimeOfDay timeOfDay76 = dateTime67.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.plusYears((int) '4');
        org.joda.time.DateTime.Property property81 = dateTime78.dayOfWeek();
        org.joda.time.DateTime dateTime84 = dateTime78.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime86 = dateTime84.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay87 = dateTime84.toTimeOfDay();
        org.joda.time.Minutes minutes88 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay76, (org.joda.time.ReadablePartial) timeOfDay87);
        java.util.Locale locale90 = java.util.Locale.JAPAN;
        java.lang.String str91 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) timeOfDay87, 366, locale90);
        org.joda.time.format.PeriodFormatter periodFormatter92 = periodFormatter11.withLocale(locale90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod94 = periodFormatter92.parseMutablePeriod("2022-02-22T06:43:43.286+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-54L) + "'", long53 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-672L) + "'", long75 == (-672L));
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(timeOfDay87);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "366" + "'", str91, "366");
        org.junit.Assert.assertNotNull(periodFormatter92);
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str1, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Vereinigtes K\366nigreich" + "'", str2, "Vereinigtes K\366nigreich");
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime14 = dateTime2.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration18, periodType28);
        org.joda.time.Duration duration31 = duration18.plus((-2159999941L));
        org.joda.time.Duration duration32 = duration31.toDuration();
        org.joda.time.Duration duration33 = duration31.toDuration();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Days days38 = org.joda.time.Days.daysIn(readableInterval37);
        org.joda.time.Duration duration39 = days38.toStandardDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.ReadableDuration readableDuration41 = null;
        boolean boolean42 = duration40.isLongerThan(readableDuration41);
        org.joda.time.Duration duration44 = duration36.withDurationAdded(readableDuration41, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusYears((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime46.dayOfWeek();
        org.joda.time.DateTime dateTime52 = dateTime46.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.Days days54 = org.joda.time.Days.daysIn(readableInterval53);
        org.joda.time.Duration duration55 = days54.toStandardDuration();
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.ReadableDuration readableDuration57 = null;
        boolean boolean58 = duration56.isLongerThan(readableDuration57);
        org.joda.time.ReadableInterval readableInterval59 = null;
        org.joda.time.Days days60 = org.joda.time.Days.daysIn(readableInterval59);
        org.joda.time.Duration duration61 = days60.toStandardDuration();
        org.joda.time.Duration duration62 = duration61.toDuration();
        org.joda.time.ReadableDuration readableDuration63 = null;
        boolean boolean64 = duration62.isLongerThan(readableDuration63);
        boolean boolean65 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableDuration) duration62);
        boolean boolean67 = duration44.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime75 = dateTime69.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property76 = dateTime69.minuteOfHour();
        org.joda.time.DateTime dateTime77 = dateTime69.toDateTime();
        java.lang.String str78 = dateTime77.toString();
        org.joda.time.Period period79 = duration62.toPeriodTo((org.joda.time.ReadableInstant) dateTime77);
        long long80 = duration62.getMillis();
        boolean boolean81 = duration33.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusMillis((int) ' ');
        int int86 = dateTime83.getEra();
        org.joda.time.DateTime.Property property87 = dateTime83.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval88 = null;
        org.joda.time.Days days89 = org.joda.time.Days.daysIn(readableInterval88);
        org.joda.time.Duration duration90 = days89.toStandardDuration();
        org.joda.time.Duration duration91 = duration90.toDuration();
        org.joda.time.DateTime dateTime93 = dateTime83.withDurationAdded((org.joda.time.ReadableDuration) duration91, (-1));
        org.joda.time.Duration duration95 = duration91.plus((-1L));
        org.joda.time.Duration duration97 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration95, 86399999);
        long long98 = duration97.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(days60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-22T07:20:35.434+00:00:00.055" + "'", str78, "2022-02-22T07:20:35.434+00:00:00.055");
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(days89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-2246399940L) + "'", long98 == (-2246399940L));
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(12, 56, 2147483647, 51026400, 12, 0, 28, (int) '4');
        org.joda.time.Duration duration10 = new org.joda.time.Duration(1645512060000L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.secondOfMinute();
        org.joda.time.Chronology chronology20 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.DurationField durationField22 = chronology20.weeks();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks27 = weeks25.plus(0);
        org.joda.time.Weeks weeks29 = weeks27.minus(3);
        org.joda.time.Weeks weeks30 = weeks24.plus(weeks29);
        int[] intArray32 = chronology20.get((org.joda.time.ReadablePeriod) weeks30, (long) (byte) 100);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration10, chronology20);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property44 = dateTime37.secondOfMinute();
        org.joda.time.Chronology chronology45 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.DurationField durationField47 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.yearOfEra();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 26237116, chronology45);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(574L, chronology45);
        org.joda.time.Interval interval54 = duration10.toIntervalTo((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        mutablePeriod6.addMonths((int) 'u');
        mutablePeriod6.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.months();
        mutablePeriod6.setPeriod((long) 1814400, chronology30);
        org.joda.time.DurationField durationField35 = chronology30.months();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(87350400000L, periodType2, chronology30);
        org.joda.time.Period period37 = new org.joda.time.Period((long) (-1), chronology30);
        org.joda.time.Period period39 = period37.plusHours(729764);
        org.joda.time.Seconds seconds40 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod41 = seconds40.toMutablePeriod();
        mutablePeriod41.setMonths((int) (short) 100);
        int int44 = mutablePeriod41.getYears();
        int int45 = mutablePeriod41.getYears();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime51 = dateTime48.withLaterOffsetAtOverlap();
        mutablePeriod41.setPeriod(readableInstant46, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod41.copy();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.millis();
        int int55 = mutablePeriod41.get(durationFieldType54);
        org.joda.time.Period period57 = period37.withFieldAdded(durationFieldType54, 26203635);
        int int58 = period57.getSeconds();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        mutablePeriod6.addMonths((int) 'u');
        mutablePeriod6.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.months();
        mutablePeriod6.setPeriod((long) 1814400, chronology30);
        org.joda.time.DurationField durationField35 = chronology30.months();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(87350400000L, periodType2, chronology30);
        org.joda.time.Period period37 = new org.joda.time.Period((long) (-1), chronology30);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.era();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.weekOfWeekyear();
        boolean boolean40 = dateTimeField39.isLenient();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusYears(26194);
        org.joda.time.DateTime.Property property3 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusDays((int) 'x');
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration24, periodType28);
        int int30 = dateTime14.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property39 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        long long45 = dateTimeZone42.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis((int) ' ');
        int int50 = dateTime47.getEra();
        org.joda.time.DateTime dateTime52 = dateTime47.minusMinutes((int) (short) 1);
        int int53 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime47.getZone();
        boolean boolean55 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime47);
        int int56 = property8.getDifference((org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str57 = dateTime14.toString();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime14.toYearMonthDay();
        java.lang.String str59 = yearMonthDay58.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-54L) + "'", long45 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 55 + "'", int53 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T06:45:35.604+00:00:00.055" + "'", str57, "2022-02-22T06:45:35.604+00:00:00.055");
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22" + "'", str59, "2022-02-22");
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyear();
        long long15 = dateTimeField13.roundHalfEven(0L);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) long15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-259200055L) + "'", long15 == (-259200055L));
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Period period9 = period5.withMillis(1814400);
        int int10 = period9.getSeconds();
        org.joda.time.Period period11 = period9.normalizedStandard();
        org.joda.time.Period period13 = period11.minusDays(3);
        org.joda.time.Period period15 = period13.withMillis((int) ' ');
        org.joda.time.PeriodType periodType16 = period13.getPeriodType();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Days days19 = org.joda.time.Days.daysIn(readableInterval18);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        org.joda.time.Duration duration21 = duration20.toDuration();
        org.joda.time.ReadableDuration readableDuration22 = null;
        boolean boolean23 = duration21.isLongerThan(readableDuration22);
        org.joda.time.Duration duration24 = duration21.toDuration();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime();
        int int35 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime34, periodType38);
        java.lang.String str40 = duration21.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime47.plusDays(10);
        org.joda.time.Days days52 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        int int62 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMillis((int) ' ');
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfMonth();
        org.joda.time.DateTime dateTime71 = property70.roundFloorCopy();
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfDay();
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.halfdays();
        int int75 = periodType73.indexOf(durationFieldType74);
        org.joda.time.PeriodType periodType76 = periodType73.withWeeksRemoved();
        int int77 = periodType76.size();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime71, periodType76);
        org.joda.time.Period period79 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime47, periodType76);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1814000L, periodType76);
        mutablePeriod80.setSeconds(0);
        boolean boolean83 = period13.equals((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0S" + "'", str40, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod3.addDays(2022);
        mutablePeriod3.setPeriod(1645512060662L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime52.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property59 = dateTime52.minuteOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy(7);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.Period period63 = new org.joda.time.Period(10L, chronology62);
        mutablePeriod3.add(1645512060662L, chronology62);
        org.joda.time.ReadableInterval readableInterval65 = null;
        org.joda.time.Days days66 = org.joda.time.Days.daysIn(readableInterval65);
        org.joda.time.Duration duration67 = days66.toStandardDuration();
        org.joda.time.Duration duration68 = duration67.toDuration();
        org.joda.time.ReadableDuration readableDuration69 = null;
        boolean boolean70 = duration68.isLongerThan(readableDuration69);
        long long71 = duration68.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusYears((int) '4');
        org.joda.time.DateTime.Property property76 = dateTime73.dayOfWeek();
        org.joda.time.DateTime dateTime79 = dateTime73.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property80 = dateTime73.secondOfMinute();
        org.joda.time.Chronology chronology81 = dateTime73.getChronology();
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = duration68.toPeriodFrom((org.joda.time.ReadableInstant) dateTime73, periodType82);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration68);
        int int85 = mutablePeriod3.getMinutes();
        mutablePeriod3.setDays(385);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(26396);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        java.lang.String str1 = days0.toString();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period7 = period4.plusSeconds((int) (short) 1);
        org.joda.time.Days days8 = period7.toStandardDays();
        org.joda.time.Days days9 = days0.plus(days8);
        org.joda.time.Days days11 = org.joda.time.Days.days(10);
        org.joda.time.Days days12 = days9.minus(days11);
        org.joda.time.Days days14 = days11.minus(467);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P3D" + "'", str1, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("Tuesday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Tuesday\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        java.util.Locale locale3 = new java.util.Locale("2001-02-21T23:59:59.883Z", "2022-02-22T07:16:22.420Z", "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\ub300\ud55c\ubbfc\uad6d");
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime20 = dateTime15.minusMinutes((int) (short) 1);
        org.joda.time.Days days21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime23 = dateTime15.minusSeconds(41);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        long long38 = dateTimeZone35.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis((int) ' ');
        int int43 = dateTime40.getEra();
        org.joda.time.DateTime dateTime45 = dateTime40.minusMinutes((int) (short) 1);
        int int46 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime40.getZone();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Days days49 = org.joda.time.Days.daysIn(readableInterval48);
        org.joda.time.Duration duration50 = days49.toStandardDuration();
        org.joda.time.Duration duration51 = duration50.toDuration();
        org.joda.time.ReadableDuration readableDuration52 = null;
        boolean boolean53 = duration51.isLongerThan(readableDuration52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Days days55 = org.joda.time.Days.daysIn(readableInterval54);
        org.joda.time.Duration duration56 = days55.toStandardDuration();
        org.joda.time.Duration duration57 = duration56.toDuration();
        org.joda.time.ReadableDuration readableDuration58 = null;
        boolean boolean59 = duration57.isLongerThan(readableDuration58);
        boolean boolean60 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMillis((int) ' ');
        int int65 = dateTime62.getEra();
        org.joda.time.DateTime dateTime67 = dateTime62.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime69 = dateTime62.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval70 = duration51.toIntervalTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Duration duration71 = duration51.toDuration();
        org.joda.time.Duration duration73 = duration71.plus((-78382080000000L));
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration73);
        org.joda.time.Chronology chronology75 = dateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = chronology75.getZone();
        org.joda.time.DateTime dateTime77 = dateTime23.toDateTime(dateTimeZone76);
        int int78 = dateTime23.getDayOfWeek();
        org.joda.time.DateTime.Property property79 = dateTime23.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-54L) + "'", long38 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 55 + "'", int46 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.clockhourOfHalfday();
        int int23 = dateTimeField21.get(1645514189530L);
        long long25 = dateTimeField21.roundHalfCeiling((long) 26372207);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 25199945L + "'", long25 == 25199945L);
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours3 = hours1.plus(hours2);
        org.joda.time.DurationFieldType durationFieldType4 = hours1.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology15 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1, chronology15);
        boolean boolean19 = durationFieldType4.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.year();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(1645514173148L, chronology15);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, readableDuration22);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime21.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis((int) ' ');
        int int37 = dateTime34.getEra();
        int int38 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        long long53 = dateTimeZone50.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime34.toMutableDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime60 = dateTime56.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime54, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean62 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime64 = dateTime26.minusYears(56);
        org.joda.time.DateTime.Property property65 = dateTime64.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property74 = dateTime67.minuteOfHour();
        long long75 = property65.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.TimeOfDay timeOfDay76 = dateTime67.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds77 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) yearMonthDay24, (org.joda.time.ReadablePartial) timeOfDay76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-54L) + "'", long53 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-672L) + "'", long75 == (-672L));
        org.junit.Assert.assertNotNull(timeOfDay76);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime39 = dateTime1.minusYears(56);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfWeek();
        org.joda.time.DateTime dateTime48 = dateTime42.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property49 = dateTime42.minuteOfHour();
        long long50 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.TimeOfDay timeOfDay51 = dateTime42.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime53.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime61 = dateTime59.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay62 = dateTime59.toTimeOfDay();
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay51, (org.joda.time.ReadablePartial) timeOfDay62);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = timeOfDay62.getValue(26217);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26217");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-54L) + "'", long28 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-672L) + "'", long50 == (-672L));
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(minutes63);
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-22T07:18:35.187+00:00:00.520");
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime9.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        boolean boolean14 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime6.toMutableDateTimeISO();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = mutableDateTime15.toString(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:20:36.000+00:00:00.055" + "'", str17, "2022-02-22T07:20:36.000+00:00:00.055");
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.Period period11 = duration2.toPeriod();
        java.lang.String str12 = duration2.toString();
        long long13 = duration2.getStandardHours();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0S" + "'", str12, "PT0S");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(2129L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = hours1.negated();
        org.joda.time.Hours hours3 = hours0.plus(hours1);
        org.joda.time.Hours hours4 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours7 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours8 = hours6.plus(hours7);
        org.joda.time.Hours hours10 = hours8.plus((int) (short) 10);
        org.joda.time.Hours hours12 = hours8.minus(2022);
        org.joda.time.Hours hours13 = hours3.minus(hours12);
        org.joda.time.Hours hours14 = hours3.negated();
        org.joda.time.Hours hours15 = null;
        org.joda.time.Hours hours16 = hours3.plus(hours15);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(26381294, 26302, 26357, (-27425236), 7, 26404);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27425236 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) ' ');
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime dateTime25 = dateTime20.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime27 = dateTime20.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval28 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval28);
        org.joda.time.MutableInterval mutableInterval30 = interval28.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        boolean boolean35 = interval28.isAfter((org.joda.time.ReadableInstant) dateTime32);
        long long36 = interval28.getEndMillis();
        org.joda.time.Chronology chronology37 = interval28.getChronology();
        boolean boolean38 = durationFieldType1.isSupported(chronology37);
        org.joda.time.Chronology chronology39 = chronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514436034L + "'", long36 == 1645514436034L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        long long30 = interval26.getStartMillis();
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.secondOfMinute();
        org.joda.time.Chronology chronology42 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DurationField durationField44 = chronology42.weeks();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfMinute();
        int int47 = dateTimeField45.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = dateTimeField45.getAsText(readablePartial48, 3, locale50);
        long long53 = dateTimeField45.roundHalfCeiling((long) 1814400);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime58 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime60.plusDays(10);
        org.joda.time.Days days65 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalTime localTime66 = dateTime58.toLocalTime();
        int int67 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localTime66);
        int[] intArray69 = new int[] { (byte) -1 };
        int int70 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localTime66, intArray69);
        org.joda.time.format.PeriodPrinter periodPrinter71 = null;
        org.joda.time.format.PeriodParser periodParser72 = null;
        org.joda.time.format.PeriodFormatter periodFormatter73 = new org.joda.time.format.PeriodFormatter(periodPrinter71, periodParser72);
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter76 = periodFormatter73.withLocale(locale74);
        org.joda.time.format.PeriodPrinter periodPrinter77 = periodFormatter73.getPrinter();
        boolean boolean78 = localTime66.equals((java.lang.Object) periodFormatter73);
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str80 = locale79.getISO3Language();
        java.util.Set<java.lang.Character> charSet81 = locale79.getExtensionKeys();
        boolean boolean82 = locale79.hasExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter83 = periodFormatter73.withLocale(locale79);
        org.joda.time.format.PeriodParser periodParser84 = periodFormatter73.getParser();
        org.joda.time.format.PeriodParser periodParser85 = periodFormatter73.getParser();
        boolean boolean86 = periodFormatter73.isPrinter();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514436058L + "'", long28 == 1645514436058L);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514436058L + "'", long30 == 1645514436058L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3" + "'", str51, "3");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1813945L + "'", long53 == 1813945L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 59 + "'", int67 == 59);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(periodFormatter76);
        org.junit.Assert.assertNull(periodPrinter77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "eng" + "'", str80, "eng");
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(periodFormatter83);
        org.junit.Assert.assertNull(periodParser84);
        org.junit.Assert.assertNull(periodParser85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        int int19 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime15.toMutableDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime41 = dateTime37.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean43 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime45 = dateTime7.minusYears(56);
        org.joda.time.DateTime dateTime47 = dateTime7.minusMonths(92000);
        int int48 = dateTime7.getCenturyOfEra();
        org.joda.time.LocalDate localDate49 = dateTime7.toLocalDate();
        org.joda.time.DateTime dateTime50 = dateTime5.withFields((org.joda.time.ReadablePartial) localDate49);
        org.joda.time.DateTime.Property property51 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime52 = property51.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-54L) + "'", long34 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale9 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = period17.toMutablePeriod();
        org.joda.time.Period period20 = period17.plusMinutes((int) (byte) 0);
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) period17);
        mutablePeriod14.addMonths((int) 'u');
        mutablePeriod14.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property37 = dateTime30.secondOfMinute();
        org.joda.time.Chronology chronology38 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.months();
        mutablePeriod14.setPeriod((long) 1814400, chronology38);
        org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) locale9, periodType10, chronology38);
        org.joda.time.DurationField durationField44 = chronology38.years();
        org.joda.time.DateTimeField dateTimeField45 = chronology38.centuryOfEra();
        org.joda.time.DurationField durationField46 = chronology38.weekyears();
        java.lang.String str47 = durationField46.toString();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DurationField[weekyears]" + "'", str47, "DurationField[weekyears]");
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfDay();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.minutes(1);
        java.lang.String str17 = minutes16.toString();
        int[] intArray19 = chronology12.get((org.joda.time.ReadablePeriod) minutes16, (long) 896);
        org.joda.time.DateTimeField dateTimeField20 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime22.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMillis((int) ' ');
        int int36 = dateTime33.getEra();
        org.joda.time.DateTime.Property property37 = dateTime33.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        org.joda.time.DateTime dateTime43 = dateTime33.withDurationAdded((org.joda.time.ReadableDuration) duration41, (-1));
        org.joda.time.DateTime dateTime45 = dateTime33.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime33.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        org.joda.time.DateTime dateTime49 = dateTime22.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withMillis(1645514189530L);
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime49.toYearMonthDay();
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) yearMonthDay52, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyear();
        org.joda.time.DurationField durationField16 = chronology11.millis();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology11.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology11.getDateTimeMillis(14738078, 244, (-45460981), 437, 26354274, (-160), 26376);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 437 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        int int19 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime15.toMutableDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime41 = dateTime37.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean43 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime45 = dateTime7.minusYears(56);
        org.joda.time.DateTime dateTime47 = dateTime7.minusMonths(92000);
        int int48 = dateTime7.getCenturyOfEra();
        org.joda.time.LocalDate localDate49 = dateTime7.toLocalDate();
        org.joda.time.DateTime dateTime50 = dateTime5.withFields((org.joda.time.ReadablePartial) localDate49);
        java.lang.String str51 = localDate49.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-54L) + "'", long34 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22" + "'", str51, "2022-02-22");
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645514291414L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        int int9 = property8.getMaximumValue();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setLanguage("");
        java.util.Locale locale16 = builder13.build();
        java.util.Locale.Builder builder17 = builder13.clearExtensions();
        java.util.Locale.Builder builder18 = builder13.clear();
        java.util.Locale locale19 = builder18.build();
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = property8.getAsText(locale19);
        java.lang.Object obj22 = null;
        boolean boolean23 = property8.equals(obj22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "20" + "'", str21, "20");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        int int4 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.weeks();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = dateTime1.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime1.era();
        org.joda.time.DateTime dateTime21 = dateTime1.minusDays(26310);
        java.lang.String str22 = dateTime1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 440 + "'", int4 == 440);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T07:20:36.362+00:00:00.055" + "'", str22, "2022-02-22T07:20:36.362+00:00:00.055");
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        java.lang.String str33 = property32.toString();
        int int34 = property32.getMaximumValue();
        int int35 = property32.getMaximumValueOverall();
        org.joda.time.DateTime dateTime36 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfEra(436);
        org.joda.time.DateTime dateTime40 = dateTime36.withWeekyear(16);
        boolean boolean41 = interval26.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property42 = dateTime36.year();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusYears((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime44.dayOfWeek();
        org.joda.time.DateTime dateTime50 = dateTime44.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property51 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        long long57 = dateTimeZone54.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMillis((int) ' ');
        int int62 = dateTime59.getEra();
        org.joda.time.DateTime dateTime64 = dateTime59.minusMinutes((int) (short) 1);
        int int65 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime59.getZone();
        org.joda.time.ReadableInterval readableInterval67 = null;
        org.joda.time.Days days68 = org.joda.time.Days.daysIn(readableInterval67);
        org.joda.time.Duration duration69 = days68.toStandardDuration();
        org.joda.time.Duration duration70 = duration69.toDuration();
        org.joda.time.ReadableDuration readableDuration71 = null;
        boolean boolean72 = duration70.isLongerThan(readableDuration71);
        org.joda.time.ReadableInterval readableInterval73 = null;
        org.joda.time.Days days74 = org.joda.time.Days.daysIn(readableInterval73);
        org.joda.time.Duration duration75 = days74.toStandardDuration();
        org.joda.time.Duration duration76 = duration75.toDuration();
        org.joda.time.ReadableDuration readableDuration77 = null;
        boolean boolean78 = duration76.isLongerThan(readableDuration77);
        boolean boolean79 = duration70.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.minusMillis((int) ' ');
        int int84 = dateTime81.getEra();
        org.joda.time.DateTime dateTime86 = dateTime81.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime88 = dateTime81.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval89 = duration70.toIntervalTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Duration duration90 = duration70.toDuration();
        org.joda.time.Duration duration92 = duration90.plus((-78382080000000L));
        org.joda.time.Period period93 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration92);
        org.joda.time.Duration duration94 = org.joda.time.Duration.ZERO;
        int int95 = duration92.compareTo((org.joda.time.ReadableDuration) duration94);
        org.joda.time.Duration duration98 = duration92.withDurationAdded((-259200000L), (int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration92);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514436324L + "'", long28 == 1645514436324L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[dayOfMonth]" + "'", str33, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 28 + "'", int34 == 28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31 + "'", int35 == 31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-54L) + "'", long57 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 55 + "'", int65 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        long long2 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis((int) ' ');
        int int7 = dateTime4.getEra();
        org.joda.time.DateTime.Property property8 = dateTime4.secondOfMinute();
        org.joda.time.Period period9 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime16 = dateTime11.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime18 = dateTime11.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime23 = dateTime19.withMinuteOfHour((int) (byte) 0);
        boolean boolean25 = dateTime23.isEqual((long) (short) 1);
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.Weeks weeks27 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property28 = dateTime23.dayOfYear();
        java.lang.String str29 = property28.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 596523L + "'", long2 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfYear" + "'", str29, "dayOfYear");
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str2 = dateTimeZone0.getID();
        long long4 = dateTimeZone0.previousTransition((long) (short) 0);
        long long6 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Date date8 = dateTime7.toDate();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMinutes((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = yearMonthDay11.getValue(26198);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26198");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.055" + "'", str2, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:20:36 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusSeconds((int) (short) 1);
        org.joda.time.Days days18 = period17.toStandardDays();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        java.lang.String str21 = days20.toString();
        boolean boolean22 = days18.isGreaterThan(days20);
        long long25 = chronology9.add((org.joda.time.ReadablePeriod) days20, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField26 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property37 = dateTime30.secondOfMinute();
        org.joda.time.Chronology chronology38 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField40 = chronology38.halfdays();
        org.joda.time.Chronology chronology41 = chronology38.withUTC();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfDay();
        int int45 = dateTimeField43.getMinimumValue(1739860860662L);
        long long47 = dateTimeField43.remainder((long) (short) -1);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setLanguage("");
        java.util.Locale.Builder builder54 = builder49.setExtension('a', "PT1M");
        java.util.Locale.Builder builder55 = builder54.clearExtensions();
        java.util.Locale locale56 = builder54.build();
        java.lang.String str57 = dateTimeField43.getAsText(896L, locale56);
        java.lang.String str58 = locale56.getISO3Language();
        int int59 = dateTimeField28.getMaximumTextLength(locale56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P0D" + "'", str21, "P0D");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 999L + "'", long47 == 999L);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        boolean boolean9 = periodFormatter2.isParser();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableDuration12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = dateTime14.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration30, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1645514164648L, 1645514168245L, periodType40);
        org.joda.time.PeriodType periodType43 = periodType40.withMillisRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter2.withParseType(periodType40);
        java.util.Locale locale45 = periodFormatter44.getLocale();
        org.joda.time.PeriodType periodType46 = periodFormatter44.getParseType();
        org.joda.time.PeriodType periodType47 = periodType46.withSecondsRemoved();
        java.lang.String str48 = periodType47.toString();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PeriodType[YearMonthDayTimeNoSeconds]" + "'", str48, "PeriodType[YearMonthDayTimeNoSeconds]");
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        org.joda.time.Interval interval8 = property5.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property5.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4519236748L + "'", long7 == 4519236748L);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean33 = dateTime27.isAfterNow();
        boolean boolean34 = dateTime27.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-54L) + "'", long24 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        long long3 = duration2.getStandardHours();
        java.lang.String str4 = duration2.toString();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Days days6 = org.joda.time.Days.daysIn(readableInterval5);
        org.joda.time.Duration duration7 = days6.toStandardDuration();
        org.joda.time.Duration duration8 = duration7.toDuration();
        org.joda.time.ReadableDuration readableDuration9 = null;
        boolean boolean10 = duration8.isLongerThan(readableDuration9);
        org.joda.time.Duration duration11 = duration8.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime();
        int int22 = dateTime21.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime21, periodType25);
        long long27 = duration8.getMillis();
        boolean boolean28 = duration2.isEqual((org.joda.time.ReadableDuration) duration8);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withMonthsRemoved();
        org.joda.time.Period period32 = duration8.toPeriod(periodType31);
        org.joda.time.Duration duration33 = duration8.toDuration();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfWeek();
        org.joda.time.DateTime dateTime41 = dateTime35.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property42 = dateTime35.secondOfMinute();
        org.joda.time.Chronology chronology43 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime35.plusMinutes((-292275054));
        org.joda.time.DateTime dateTime47 = dateTime35.plusSeconds(33);
        org.joda.time.DateTime dateTime49 = dateTime35.minusYears(26195);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfHour();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod3.addDays(2022);
        mutablePeriod3.setPeriod(1645512060662L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime52.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property59 = dateTime52.minuteOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy(7);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.Period period63 = new org.joda.time.Period(10L, chronology62);
        mutablePeriod3.add(1645512060662L, chronology62);
        org.joda.time.Period period66 = org.joda.time.Period.weeks((int) (short) 0);
        int[] intArray68 = chronology62.get((org.joda.time.ReadablePeriod) period66, 99999L);
        org.joda.time.DateTimeField dateTimeField69 = chronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology62.weekyearOfCentury();
        int int73 = dateTimeField71.getMaximumValue((long) 467);
        int int75 = dateTimeField71.getMinimumValue((long) 439);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 1, 39, 999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 99 + "'", int73 == 99);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        long long16 = dateTimeZone13.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        int int24 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property25 = dateTime18.yearOfEra();
        java.lang.String str26 = property25.getName();
        org.joda.time.DateTime dateTime28 = property25.setCopy(74);
        org.joda.time.DateTime dateTime30 = property25.addWrapFieldToCopy(33);
        org.joda.time.DurationField durationField31 = property25.getRangeDurationField();
        org.joda.time.DateTime dateTime32 = property25.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis((int) ' ');
        int int37 = dateTime34.getEra();
        org.joda.time.DateTime.Property property38 = dateTime34.secondOfMinute();
        org.joda.time.DateTime dateTime39 = property38.withMinimumValue();
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        int int41 = property38.getMaximumShortTextLength(locale40);
        java.lang.String str42 = property25.getAsShortText(locale40);
        java.lang.String str43 = locale0.getDisplayLanguage(locale40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "cor\351en" + "'", str1, "cor\351en");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-54L) + "'", long16 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 55 + "'", int24 == 55);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfEra" + "'", str26, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cor\351en" + "'", str43, "cor\351en");
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        boolean boolean43 = dateTimeZone41.isStandardOffset(0L);
        boolean boolean45 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        org.joda.time.Chronology chronology46 = chronology29.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfDay();
        long long50 = dateTimeField48.roundCeiling(1645514169945L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645516799945L + "'", long50 == 1645516799945L);
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.joda.time.Hours hours0 = org.joda.time.Hours.ONE;
        org.joda.time.PeriodType periodType1 = hours0.getPeriodType();
        org.joda.time.Hours hours2 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = hours2.plus(hours3);
        org.joda.time.Hours hours5 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours6 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours7 = hours5.plus(hours6);
        org.joda.time.Hours hours8 = hours3.minus(hours6);
        org.joda.time.Hours hours10 = hours8.dividedBy((int) '4');
        boolean boolean11 = hours0.isLessThan(hours8);
        org.joda.time.Hours hours13 = hours8.plus(78623298);
        org.joda.time.Hours hours14 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours15 = hours14.negated();
        org.joda.time.PeriodType periodType16 = hours14.getPeriodType();
        org.joda.time.PeriodType periodType17 = hours14.getPeriodType();
        org.joda.time.Hours hours19 = hours14.plus((int) (byte) 0);
        org.joda.time.Hours hours20 = hours13.minus(hours14);
        org.joda.time.Hours hours21 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours22 = org.joda.time.Hours.SEVEN;
        boolean boolean23 = hours21.isLessThan(hours22);
        org.joda.time.Hours hours25 = hours21.multipliedBy(59);
        org.joda.time.Hours hours26 = hours21.negated();
        boolean boolean27 = hours20.isLessThan(hours21);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plusMillis(26160);
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period11 = period9.plusDays(26256);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = property14.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) ' ');
        boolean boolean20 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property21 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime16.minusMillis(99);
        org.joda.time.DateTime.Property property24 = dateTime23.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean16 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime.Property property17 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.setCopy(32);
        int int20 = dateTime19.getEra();
        int int21 = dateTime19.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("-3");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.withMillisOfSecond((int) (byte) 1);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusMinutes((int) (byte) 0);
        org.joda.time.Period period20 = period18.plusMonths((int) '4');
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds23 = seconds21.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        int int25 = seconds23.get(durationFieldType24);
        org.joda.time.Period period27 = period20.withFieldAdded(durationFieldType24, 10);
        org.joda.time.Period period29 = period27.plusHours(26161);
        org.joda.time.DateTime dateTime31 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime36.withSecondOfMinute(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime41.dayOfWeek();
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property48 = dateTime41.secondOfMinute();
        org.joda.time.Chronology chronology49 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.DurationField durationField51 = chronology49.weeks();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.yearOfEra();
        org.joda.time.DurationField durationField54 = chronology49.weeks();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType39.getField(chronology49);
        int int56 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType39.getRangeDurationType();
        java.lang.String str58 = dateTimeFieldType39.getName();
        int int59 = dateTime3.get(dateTimeFieldType39);
        org.joda.time.DateTime dateTime60 = dateTime3.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds61 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 63907315200");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "weekyearOfCentury" + "'", str58, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime9 = property6.setCopy(1);
        int int10 = dateTime9.getWeekyear();
        org.joda.time.Days days11 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = dateTime9.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfMonth]" + "'", str7, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(days11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-01T07:20:37.146+00:00:00.055" + "'", str12, "2022-02-01T07:20:37.146+00:00:00.055");
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean16 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime.Property property17 = dateTime13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property26 = dateTime19.secondOfMinute();
        org.joda.time.Chronology chronology27 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.yearOfEra();
        org.joda.time.DurationField durationField32 = chronology27.weeks();
        org.joda.time.DateTime dateTime33 = dateTime13.withChronology(chronology27);
        org.joda.time.DateTime dateTime35 = dateTime13.plusWeeks(183);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(1);
        org.joda.time.DurationFieldType durationFieldType2 = minutes1.getFieldType();
        org.joda.time.Minutes minutes4 = minutes1.multipliedBy(565);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.minutes(1);
        int int7 = minutes6.getMinutes();
        java.lang.String str8 = minutes6.toString();
        org.joda.time.Minutes minutes10 = minutes6.plus(1);
        boolean boolean11 = minutes4.isGreaterThan(minutes6);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        int int28 = mutablePeriod3.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod3.copy();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime55 = dateTime48.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval56 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Period period60 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod61 = period60.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Days days63 = org.joda.time.Days.daysIn(readableInterval62);
        org.joda.time.Duration duration64 = days63.toStandardDuration();
        org.joda.time.Duration duration65 = duration64.toDuration();
        org.joda.time.ReadableDuration readableDuration66 = null;
        boolean boolean67 = duration65.isLongerThan(readableDuration66);
        org.joda.time.ReadableInterval readableInterval68 = null;
        org.joda.time.Days days69 = org.joda.time.Days.daysIn(readableInterval68);
        org.joda.time.Duration duration70 = days69.toStandardDuration();
        org.joda.time.Duration duration71 = duration70.toDuration();
        org.joda.time.ReadableDuration readableDuration72 = null;
        boolean boolean73 = duration71.isLongerThan(readableDuration72);
        boolean boolean74 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMillis((int) ' ');
        int int79 = dateTime76.getEra();
        org.joda.time.DateTime dateTime81 = dateTime76.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime83 = dateTime76.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval84 = duration65.toIntervalTo((org.joda.time.ReadableInstant) dateTime76);
        mutablePeriod61.add((org.joda.time.ReadableInterval) interval84);
        boolean boolean86 = interval56.isBefore((org.joda.time.ReadableInterval) interval84);
        mutablePeriod29.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTime dateTime88 = interval56.getStart();
        org.joda.time.ReadableInterval readableInterval89 = null;
        boolean boolean90 = interval56.overlaps(readableInterval89);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.removeUnicodeLocaleAttribute("2022-02-21T07:18:03.720+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-21T07:18:03.720+00:00:00.520 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.minusYears((int) '#');
        org.joda.time.Period period5 = period1.plusMinutes(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant6 = new org.joda.time.Instant((java.lang.Object) period1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.Duration duration24 = duration3.plus(100L);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) '4');
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfWeek();
        org.joda.time.DateTime dateTime33 = dateTime27.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property34 = dateTime27.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime27.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableDuration25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime39 = dateTime27.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.Days days47 = org.joda.time.Days.daysIn(readableInterval46);
        org.joda.time.Duration duration48 = days47.toStandardDuration();
        org.joda.time.Duration duration49 = duration48.toDuration();
        org.joda.time.ReadableDuration readableDuration50 = null;
        boolean boolean51 = duration49.isLongerThan(readableDuration50);
        boolean boolean52 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration43, periodType53);
        int int55 = duration3.compareTo((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration56 = duration43.toDuration();
        org.joda.time.Duration duration57 = duration43.toDuration();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfMonth();
        java.lang.String str61 = property60.toString();
        int int62 = property60.getMaximumValue();
        int int63 = property60.getMaximumValueOverall();
        int int64 = property60.getMaximumValueOverall();
        org.joda.time.DateTime dateTime66 = property60.addWrapFieldToCopy(435);
        org.joda.time.Interval interval67 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = dateTime66.minus(1645514417074L);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Property[dayOfMonth]" + "'", str61, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 28 + "'", int62 == 28);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 31 + "'", int63 == 31);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        long long2 = instant0.getMillis();
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514437562L + "'", long2 == 1645514437562L);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.Period period3 = period1.plusMillis(435);
        org.joda.time.Period period5 = period1.plusDays((int) (byte) 1);
        int int6 = period5.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(280, 48, 896, 26307);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        int int9 = dateTime6.getEra();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Days days12 = org.joda.time.Days.daysIn(readableInterval11);
        org.joda.time.Duration duration13 = days12.toStandardDuration();
        org.joda.time.Duration duration14 = duration13.toDuration();
        org.joda.time.DateTime dateTime16 = dateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration14, (-1));
        org.joda.time.Duration duration18 = duration14.plus((-1L));
        long long19 = duration14.getStandardMinutes();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis((int) ' ');
        int int28 = dateTime25.getEra();
        int int29 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime31 = dateTime25.plus((long) 22);
        int int32 = dateTime31.getMinuteOfHour();
        org.joda.time.Duration duration34 = org.joda.time.Duration.parse("PT2147483647S");
        long long35 = duration34.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        int int40 = dateTime37.getEra();
        org.joda.time.DateTime.Property property41 = dateTime37.secondOfMinute();
        org.joda.time.Period period42 = duration34.toPeriodTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime44 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration34, (-1));
        org.joda.time.Interval interval45 = duration14.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval45);
        int int47 = mutablePeriod4.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 596523L + "'", long35 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) 'u');
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        int int13 = property12.getMaximumValue();
        int int14 = property12.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property12.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399999 + "'", int13 == 86399999);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter5.getParser();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter5.withParseType(periodType10);
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType13 = periodType10.withMillisRemoved();
        int int14 = periodType13.size();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        int int14 = property5.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime16 = dateTime7.minus((long) 436);
        org.joda.time.DateTime.Property property17 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(13626L);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfSecond();
        java.lang.String str21 = property20.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = property20.setCopy(26203635);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26203635 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "499" + "'", str21, "499");
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime27.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay35 = dateTime34.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property44 = dateTime37.secondOfMinute();
        org.joda.time.Chronology chronology45 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMillis((int) ' ');
        int int55 = dateTime52.getEra();
        int int56 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((int) '4');
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfWeek();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property65 = dateTime58.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime58.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime67.getZone();
        long long71 = dateTimeZone68.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime52.toMutableDateTime(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime78 = dateTime74.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime72, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime81 = dateTime74.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay82 = dateTime81.toTimeOfDay();
        int[] intArray84 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay82, (long) 1814400);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay35, (org.joda.time.ReadablePartial) timeOfDay82);
        java.lang.String str86 = timeOfDay82.toString();
        java.lang.String str87 = timeOfDay82.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType89 = timeOfDay82.getFieldType(23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 23");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-54L) + "'", long24 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-54L) + "'", long71 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(intArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 30, 14, 455]");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "T07:20:37.920" + "'", str86, "T07:20:37.920");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "T07:20:37.920" + "'", str87, "T07:20:37.920");
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        java.lang.String str26 = property25.toString();
        int int27 = property25.getMaximumValue();
        int int28 = property25.getMaximumValueOverall();
        org.joda.time.DateTime dateTime29 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        int int39 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period40 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.Days days54 = org.joda.time.Days.daysIn(readableInterval53);
        org.joda.time.Duration duration55 = days54.toStandardDuration();
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.ReadableDuration readableDuration57 = null;
        boolean boolean58 = duration56.isLongerThan(readableDuration57);
        boolean boolean59 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration56, periodType60);
        org.joda.time.Days days62 = duration56.toStandardDays();
        org.joda.time.Duration duration64 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration56, 435);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfMonth();
        java.lang.String str68 = property67.toString();
        org.joda.time.DateTime dateTime70 = property67.setCopy(1);
        int int71 = dateTime70.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime70.toMutableDateTimeISO();
        org.joda.time.Period period73 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime70);
        long long74 = duration3.getStandardHours();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 28 + "'", int27 == 28);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Property[dayOfMonth]" + "'", str68, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.minus(2147483647);
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.Period period16 = duration3.toPeriod(chronology13);
        org.joda.time.Minutes minutes17 = duration3.toStandardMinutes();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.TWO;
        int int19 = minutes18.getMinutes();
        org.joda.time.Minutes minutes20 = minutes18.negated();
        org.joda.time.Minutes minutes21 = minutes18.negated();
        org.joda.time.Minutes minutes23 = minutes21.minus(26214);
        int int24 = minutes21.getMinutes();
        org.joda.time.Minutes minutes26 = minutes21.plus(781);
        org.joda.time.Minutes minutes28 = minutes26.minus(26194);
        boolean boolean29 = minutes17.isGreaterThan(minutes28);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-2) + "'", int24 == (-2));
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime27 = dateTime24.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusYears((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime29.plusDays(10);
        org.joda.time.Days days34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis((int) ' ');
        int int43 = dateTime40.getEra();
        int int44 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfMonth();
        org.joda.time.DateTime dateTime53 = property52.roundFloorCopy();
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.halfdays();
        int int57 = periodType55.indexOf(durationFieldType56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        int int59 = periodType58.size();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime53, periodType58);
        org.joda.time.Period period61 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29, periodType58);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod62.addYears((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod62.addHours(65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T07:18:35.428+00:00:00.520/2022-02-22T07:18:35.428+00:00:00.520", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        long long68 = chronology58.getDateTimeMillis((long) 0, 4, 40, 0, 22);
        org.joda.time.DateTimeField dateTimeField69 = chronology58.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial70 = null;
        int int71 = dateTimeField69.getMinimumValue(readablePartial70);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 16799967L + "'", long68 == 16799967L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        int int4 = property2.getMaximumValue();
        int int5 = property2.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime11.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableDuration9, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime23 = dateTime11.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property32 = dateTime25.secondOfMinute();
        org.joda.time.Chronology chronology33 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology33.weeks();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.weekyear();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime23, chronology33);
        org.joda.time.DateTime dateTime39 = dateTime8.toDateTime(chronology33);
        org.joda.time.DurationField durationField40 = chronology33.millis();
        org.joda.time.DurationFieldType durationFieldType41 = durationField40.getType();
        java.lang.String str42 = durationFieldType41.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 28 + "'", int4 == 28);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "millis" + "'", str42, "millis");
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = org.joda.time.Period.weeks(1);
        org.joda.time.Period period10 = period7.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period12 = period10.withHours((int) (short) 10);
        org.joda.time.Period period14 = period10.minusSeconds(7);
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.minutes(1);
        int int17 = minutes16.getMinutes();
        java.lang.String str18 = minutes16.toString();
        org.joda.time.PeriodType periodType19 = minutes16.getPeriodType();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes22 = minutes20.minus(2147483647);
        org.joda.time.DurationFieldType durationFieldType23 = minutes20.getFieldType();
        org.joda.time.Minutes minutes24 = minutes16.minus(minutes20);
        org.joda.time.Period period25 = period14.minus((org.joda.time.ReadablePeriod) minutes16);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100);
        org.joda.time.Period period29 = period27.withWeeks((int) 'u');
        org.joda.time.Period period30 = period29.toPeriod();
        org.joda.time.Period period32 = period29.minusSeconds(896);
        org.joda.time.Period period33 = period25.minus((org.joda.time.ReadablePeriod) period32);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1M" + "'", str18, "PT1M");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        org.joda.time.Duration duration23 = duration3.plus((long) 29);
        org.joda.time.Duration duration25 = duration3.minus((long) 51026400);
        org.joda.time.Period period26 = new org.joda.time.Period((java.lang.Object) duration25);
        int int27 = period26.getDays();
        org.joda.time.Period period29 = period26.withHours(26391);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(17, 26214, (-27425236), 31, 0, 183, 26355000, (-3), periodType8);
        mutablePeriod9.setDays((int) (short) -1);
        mutablePeriod9.addMillis(24289659);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology11.getDateTimeMillis(26327, 53, (int) (byte) 1, 2147483647);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2147483647 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setUnicodeLocaleKeyword("\uc911\uad6d\uc5b4", "2022-01-03T00:00:00.000+00:00:00.055");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.Hours hours4 = period3.toStandardHours();
        org.joda.time.Period period6 = period3.plusHours(55);
        org.joda.time.Period period8 = period3.plusYears((int) (byte) 0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        boolean boolean6 = dateTimeZone4.isStandardOffset(0L);
        boolean boolean8 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.secondOfMinute();
        org.joda.time.Chronology chronology20 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.DurationField durationField22 = chronology20.weeks();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks27 = weeks25.plus(0);
        org.joda.time.Weeks weeks29 = weeks27.minus(3);
        org.joda.time.Weeks weeks30 = weeks24.plus(weeks29);
        int[] intArray32 = chronology20.get((org.joda.time.ReadablePeriod) weeks30, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField33 = chronology20.year();
        int int35 = dateTimeField33.getMaximumValue(0L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        org.joda.time.DateTime dateTime40 = property38.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime41 = dateTime40.toLocalDateTime();
        java.util.Locale locale45 = new java.util.Locale("months", "weekyears");
        java.lang.String str46 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 663, locale45);
        boolean boolean47 = dateTimeZone4.isLocalDateTimeGap(localDateTime41);
        java.lang.String str49 = dateTimeZone4.getShortName(1645514381598L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(weeks30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals(locale45.toString(), "months_WEEKYEARS");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "663" + "'", str46, "663");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.055" + "'", str49, "+00:00:00.055");
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.plus(4320000001L);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        boolean boolean26 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration23, periodType27);
        int int29 = dateTime13.getMinuteOfHour();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        long long33 = duration32.getStandardHours();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.Period period46 = period43.plusMinutes((int) (byte) 0);
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) period43);
        boolean boolean48 = periodType36.equals((java.lang.Object) period43);
        org.joda.time.PeriodType periodType49 = periodType36.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime53.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property60 = dateTime53.secondOfMinute();
        org.joda.time.Chronology chronology61 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.dayOfMonth();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology61);
        org.joda.time.DurationField durationField64 = chronology61.months();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.weekyear();
        org.joda.time.DurationField durationField66 = chronology61.weekyears();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) (short) 100, 1814000L, periodType49, chronology61);
        org.joda.time.Period period68 = duration32.toPeriod(periodType49);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime13, periodType49);
        org.joda.time.MutableDateTime mutableDateTime70 = instant6.toMutableDateTime();
        org.joda.time.Instant instant73 = instant6.withDurationAdded(1645512148266L, 10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 45 + "'", int29 == 45);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(instant73);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField13 = chronology11.weeks();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfYear();
        org.joda.time.Period period16 = new org.joda.time.Period((-672L), chronology11);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(1645514298339L, chronology11);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.secondOfDay();
        boolean boolean20 = dateTimeField18.isLeap(10000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes11 = period7.toStandardMinutes();
        boolean boolean12 = dateTime1.equals((java.lang.Object) minutes11);
        int int13 = minutes11.getMinutes();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutes(1);
        java.lang.String str16 = minutes15.toString();
        org.joda.time.Duration duration17 = minutes15.toStandardDuration();
        boolean boolean18 = minutes11.isLessThan(minutes15);
        org.joda.time.Minutes minutes20 = minutes11.dividedBy((int) (short) 100);
        org.joda.time.Duration duration21 = minutes20.toStandardDuration();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = period7.withYears(92000);
        org.joda.time.Period period11 = period9.withYears(31);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField24 = durationFieldType12.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) period11, chronology22);
        org.joda.time.Period period28 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Period period30 = period28.minus(readablePeriod29);
        org.joda.time.Period period32 = period28.plusSeconds(99);
        org.joda.time.Period period33 = period11.minus((org.joda.time.ReadablePeriod) period32);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusMinutes((int) (byte) 0);
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) period7);
        boolean boolean12 = periodType0.equals((java.lang.Object) period7);
        int int13 = period7.getSeconds();
        int int14 = period7.getDays();
        org.joda.time.Period period16 = period7.plusDays(5440);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList12);
        boolean boolean15 = period5.equals((java.lang.Object) strList14);
        org.joda.time.Minutes minutes16 = period5.toStandardMinutes();
        org.joda.time.Minutes minutes18 = minutes16.minus(100);
        org.joda.time.Minutes minutes20 = minutes18.multipliedBy(105);
        org.joda.time.Minutes minutes22 = minutes18.multipliedBy(529);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime27.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay35 = dateTime34.toTimeOfDay();
        java.lang.Object obj36 = null;
        boolean boolean37 = timeOfDay35.equals(obj36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis((int) ' ');
        int int50 = dateTime47.getEra();
        int int51 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime53.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property60 = dateTime53.minuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime53.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime62.getZone();
        long long66 = dateTimeZone63.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime47.toMutableDateTime(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime73 = dateTime69.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime67, (org.joda.time.ReadableInstant) dateTime69);
        boolean boolean75 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime77 = dateTime39.minusYears(56);
        org.joda.time.DateTime.Property property78 = dateTime77.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.plusYears((int) '4');
        org.joda.time.DateTime.Property property83 = dateTime80.dayOfWeek();
        org.joda.time.DateTime dateTime86 = dateTime80.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property87 = dateTime80.minuteOfHour();
        long long88 = property78.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.TimeOfDay timeOfDay89 = dateTime80.toTimeOfDay();
        org.joda.time.Hours hours90 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay35, (org.joda.time.ReadablePartial) timeOfDay89);
        org.joda.time.Chronology chronology91 = timeOfDay89.getChronology();
        org.joda.time.DurationField durationField92 = chronology91.months();
        long long93 = durationField92.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-54L) + "'", long24 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-54L) + "'", long66 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-672L) + "'", long88 == (-672L));
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(hours90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 2629746000L + "'", long93 == 2629746000L);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        long long23 = dateTimeField20.set((long) 59, 49);
        long long25 = dateTimeField20.roundHalfCeiling((long) 14);
        long long28 = dateTimeField20.add(1645401599480L, 25);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-662687999941L) + "'", long23 == (-662687999941L));
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-55L) + "'", long25 == (-55L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2434319999480L + "'", long28 == 2434319999480L);
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.lang.String str12 = property4.getAsShortText(locale8);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutes(1);
        int int15 = minutes14.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.Period period26 = period23.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes27 = period23.toStandardMinutes();
        boolean boolean28 = dateTime17.equals((java.lang.Object) minutes27);
        boolean boolean29 = minutes14.isGreaterThan(minutes27);
        org.joda.time.Duration duration30 = minutes14.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime32.withZone(dateTimeZone33);
        org.joda.time.DateTime.Property property36 = dateTime35.weekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        long long51 = dateTimeZone48.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMillis((int) ' ');
        int int56 = dateTime53.getEra();
        org.joda.time.DateTime dateTime58 = dateTime53.minusMinutes((int) (short) 1);
        int int59 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime53.getZone();
        long long61 = property36.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = property36.roundFloorCopy();
        org.joda.time.DateTime dateTime63 = property36.roundCeilingCopy();
        org.joda.time.DateTime dateTime64 = property36.roundHalfCeilingCopy();
        org.joda.time.Interval interval65 = duration30.toIntervalFrom((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = property4.equals((java.lang.Object) dateTime64);
        org.joda.time.DateTime dateTime67 = property4.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr-FR" + "'", str9, "fr-FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str11, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mar." + "'", str12, "mar.");
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-54L) + "'", long51 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 55 + "'", int59 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(7);
        org.joda.time.Seconds seconds3 = seconds1.minus(0);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.seconds(0);
        org.joda.time.Seconds seconds6 = seconds1.plus(seconds5);
        org.joda.time.Seconds seconds8 = seconds6.multipliedBy(40);
        org.joda.time.Period period9 = seconds8.toPeriod();
        org.joda.time.PeriodType periodType10 = seconds8.getPeriodType();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds13 = seconds11.minus(56);
        java.lang.String str14 = seconds13.toString();
        org.joda.time.Seconds seconds16 = seconds13.minus(0);
        org.joda.time.Seconds seconds17 = seconds8.plus(seconds16);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.seconds(0);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds22 = seconds20.plus((int) (short) 10);
        org.joda.time.Seconds seconds23 = seconds19.minus(seconds20);
        boolean boolean24 = seconds16.isGreaterThan(seconds23);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT-54S" + "'", str14, "PT-54S");
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        mutablePeriod6.addMonths((int) 'u');
        mutablePeriod6.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.months();
        mutablePeriod6.setPeriod((long) 1814400, chronology30);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 1, 1814000L, periodType2, chronology30);
        org.joda.time.PeriodType periodType36 = periodType2.withMonthsRemoved();
        java.lang.String str37 = periodType2.getName();
        org.joda.time.PeriodType periodType38 = periodType2.withMonthsRemoved();
        org.joda.time.PeriodType periodType39 = periodType2.withMinutesRemoved();
        org.joda.time.PeriodType periodType40 = periodType2.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(periodType2);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YearMonthDayTime" + "'", str37, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime1.plusDays(10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1, chronology16);
        org.joda.time.DateTime dateTime20 = dateTime1.withChronology(chronology16);
        int int21 = dateTime1.getYearOfEra();
        org.joda.time.DateTime dateTime23 = dateTime1.plusMillis(1645514);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        org.joda.time.Duration duration16 = duration13.toDuration();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime();
        int int27 = dateTime26.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime26, periodType30);
        org.joda.time.Period period32 = new org.joda.time.Period((long) 2022, (long) 25, periodType30);
        java.lang.String str33 = periodType30.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(26384, 26372207, (-27425236), 28, 26328, 54, 26354274, 20, periodType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "YearDayTime" + "'", str33, "YearDayTime");
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        org.joda.time.Period period1 = org.joda.time.Period.millis(35);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime14 = dateTime2.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration18, periodType28);
        org.joda.time.Duration duration31 = duration18.plus((-2159999941L));
        org.joda.time.Duration duration32 = duration31.toDuration();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        int int43 = dateTime42.getWeekyear();
        org.joda.time.DateTime dateTime45 = dateTime42.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.weekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours((int) (short) 10);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay((int) (short) 0);
        boolean boolean57 = property46.equals((java.lang.Object) dateTime54);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period60 = period58.minusMinutes(292278993);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.secondOfMinute();
        org.joda.time.Chronology chronology23 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField25 = chronology23.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfMinute();
        int int28 = dateTimeField26.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = dateTimeField26.getAsText(readablePartial29, 3, locale31);
        int int33 = dateTime1.get(dateTimeField26);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.lang.String str36 = dateTimeZone34.getID();
        long long38 = dateTimeZone34.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime39 = dateTime1.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis((int) ' ');
        int int46 = dateTime43.getEra();
        org.joda.time.DateTime.Property property47 = dateTime43.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusYears((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime49.dayOfWeek();
        org.joda.time.DateTime dateTime55 = dateTime49.withDurationAdded((long) 100, 0);
        int int56 = property47.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime58 = dateTime49.minus((long) 436);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime58.plusMinutes(30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = dateTime58.withEra(26354274);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26354274 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "3" + "'", str32, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 39 + "'", int33 == 39);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.055" + "'", str36, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(7);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period(10L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = chronology13.centuries();
        org.joda.time.DurationField durationField17 = chronology13.days();
        org.joda.time.Chronology chronology18 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DurationField durationField31 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.weekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.Days days47 = org.joda.time.Days.daysIn(readableInterval46);
        org.joda.time.Duration duration48 = days47.toStandardDuration();
        org.joda.time.Duration duration49 = duration48.toDuration();
        org.joda.time.ReadableDuration readableDuration50 = null;
        boolean boolean51 = duration49.isLongerThan(readableDuration50);
        boolean boolean52 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration49, periodType53);
        org.joda.time.LocalDate localDate55 = dateTime39.toLocalDate();
        long long57 = chronology29.set((org.joda.time.ReadablePartial) localDate55, (long) 'u');
        int int58 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds59 = org.joda.time.Seconds.secondsBetween(readablePartial0, (org.joda.time.ReadablePartial) localDate55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645488000117L + "'", long57 == 1645488000117L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Collection<java.lang.String> strCollection8 = null;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection8);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 520);
        mutablePeriod1.addYears(131);
        mutablePeriod1.setMinutes(103);
        mutablePeriod1.setYears(386);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        long long32 = dateTimeZone28.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1, dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime26.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.secondOfMinute();
        org.joda.time.Chronology chronology44 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology44.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = dateTimeField47.getAsText((-1L), locale49);
        long long54 = dateTimeField47.addWrapField((long) (short) 100, 1);
        int int55 = mutableDateTime34.get(dateTimeField47);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime65 = dateTime58.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime66 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime75 = dateTime69.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property76 = dateTime69.minuteOfHour();
        org.joda.time.DateTime dateTime77 = dateTime69.toDateTime();
        int int78 = dateTime77.getWeekyear();
        int int79 = dateTime77.getCenturyOfEra();
        boolean boolean81 = dateTime77.equals((java.lang.Object) (short) 1);
        java.lang.String str82 = dateTime77.toString();
        org.joda.time.DateTime dateTime84 = dateTime77.withCenturyOfEra(729764);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.halfdays();
        int int87 = periodType85.indexOf(durationFieldType86);
        org.joda.time.PeriodType periodType88 = periodType85.withWeeksRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime77, periodType88);
        org.joda.time.DateTime.Property property90 = dateTime77.year();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.055" + "'", str30, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja-JP" + "'", str50, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1100L + "'", long54 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 39 + "'", int55 == 39);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 20 + "'", int79 == 20);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T07:20:39.901+00:00:00.055" + "'", str82, "2022-02-22T07:20:39.901+00:00:00.055");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T06:45:30.538+00:00:00.055", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(565);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        boolean boolean15 = durationField14.isPrecise();
        long long18 = durationField14.getMillis(51025825L, (long) 26337302);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 134184959251200000L + "'", long18 == 134184959251200000L);
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.Period period11 = duration2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((int) ' ');
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime.Property property17 = dateTime13.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Days days19 = org.joda.time.Days.daysIn(readableInterval18);
        org.joda.time.Duration duration20 = days19.toStandardDuration();
        org.joda.time.Duration duration21 = duration20.toDuration();
        org.joda.time.DateTime dateTime23 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration21, (-1));
        long long24 = duration21.getMillis();
        boolean boolean25 = duration2.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Days days26 = org.joda.time.Days.THREE;
        java.lang.String str27 = days26.toString();
        boolean boolean29 = days26.equals((java.lang.Object) 97);
        org.joda.time.Duration duration30 = days26.toStandardDuration();
        org.joda.time.Duration duration32 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration30, 131);
        org.joda.time.Duration duration34 = duration32.plus((long) 3);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfMonth();
        org.joda.time.DateTime dateTime38 = property37.roundFloorCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfDay();
        org.joda.time.Interval interval40 = duration34.toIntervalFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration42 = duration34.minus((long) 26194);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P3D" + "'", str27, "P3D");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration42);
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = property4.getAsText(locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        long long11 = property4.getDifferenceAsLong(readableInstant10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.minusYears(27);
        int int16 = property4.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime18 = dateTime13.plusMinutes(22);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 589);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.clockhourOfDay();
        boolean boolean38 = dateTimeField37.isLenient();
        int int39 = dateTime20.get(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mardi" + "'", str9, "mardi");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 24 + "'", int39 == 24);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        java.lang.String str19 = durationFieldType3.getName();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hours" + "'", str19, "hours");
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-22T07:20:20.421+00:00:00.055");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:20:20.421+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusMinutes((int) (byte) 0);
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) period7);
        mutablePeriod4.addMonths((int) 'u');
        mutablePeriod4.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime20.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property27 = dateTime20.secondOfMinute();
        org.joda.time.Chronology chronology28 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology28);
        org.joda.time.DurationField durationField31 = chronology28.months();
        mutablePeriod4.setPeriod((long) 1814400, chronology28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfWeek();
        org.joda.time.DateTime dateTime41 = dateTime35.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property42 = dateTime35.secondOfMinute();
        org.joda.time.Chronology chronology43 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology43.weeks();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.monthOfYear();
        mutablePeriod4.add((long) 74, chronology43);
        org.joda.time.Period period49 = new org.joda.time.Period(1645514172000L, chronology43);
        java.lang.String str50 = chronology43.toString();
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[+00:00:00.055]" + "'", str50, "ISOChronology[+00:00:00.055]");
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.setPeriod((int) (short) 100, (int) (byte) 100, (int) '#', (int) (short) 100, 2147483647, (int) 'a', (int) (byte) -1, 31);
        mutablePeriod3.addMillis(28);
        mutablePeriod3.setYears((-23375));
        mutablePeriod3.addMillis(7);
        mutablePeriod3.setHours(34);
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfYear();
        boolean boolean15 = dateTimeField13.isLeap((long) 12);
        long long17 = dateTimeField13.roundHalfCeiling(31535999480L);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField13.set(1645514398938L, 745);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 745 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 31535999945L + "'", long17 == 31535999945L);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.lang.String str18 = dateTimeZone16.getID();
        long long20 = dateTimeZone16.previousTransition((long) (short) 0);
        long long22 = dateTimeZone16.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone16);
        java.util.Date date24 = dateTime23.toDate();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMinutes((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime33 = dateTime29.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration43, periodType47);
        org.joda.time.LocalDate localDate49 = dateTime33.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime51.withZone(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        java.lang.String str58 = dateTimeZone56.getID();
        long long60 = dateTimeZone56.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime54.toMutableDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears((int) '4');
        org.joda.time.DateTime.Property property67 = dateTime64.dayOfWeek();
        org.joda.time.DateTime dateTime70 = dateTime64.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property71 = dateTime64.secondOfMinute();
        org.joda.time.Chronology chronology72 = dateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfMonth();
        org.joda.time.DurationField durationField74 = chronology72.weeks();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.secondOfMinute();
        java.util.Locale locale77 = java.util.Locale.JAPAN;
        java.lang.String str78 = locale77.toLanguageTag();
        java.lang.String str79 = dateTimeField75.getAsText((-1L), locale77);
        long long82 = dateTimeField75.addWrapField((long) (short) 100, 1);
        int int83 = mutableDateTime62.get(dateTimeField75);
        org.joda.time.DateTime dateTime84 = localDate49.toDateTime((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.Days days85 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) yearMonthDay27, (org.joda.time.ReadablePartial) localDate49);
        int int86 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.055" + "'", str18, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Feb 22 07:20:40 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.055" + "'", str58, "+00:00:00.055");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ja-JP" + "'", str78, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1100L + "'", long82 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 40 + "'", int83 == 40);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(days85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 28 + "'", int86 == 28);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("PT10M", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt10m");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Period period3 = period1.withYears(435);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration11.isLongerThan(readableDuration12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        boolean boolean20 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime27 = dateTime22.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime29 = dateTime22.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval30 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval30);
        mutablePeriod7.addYears((int) ' ');
        mutablePeriod7.setSeconds((int) (byte) 100);
        mutablePeriod7.setDays((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) ' ');
        int int42 = dateTime39.getEra();
        org.joda.time.DateTime.Property property43 = dateTime39.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Days days45 = org.joda.time.Days.daysIn(readableInterval44);
        org.joda.time.Duration duration46 = days45.toStandardDuration();
        org.joda.time.Duration duration47 = duration46.toDuration();
        org.joda.time.DateTime dateTime49 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration47, (-1));
        org.joda.time.Duration duration51 = duration47.plus((-1L));
        long long52 = duration47.getStandardMinutes();
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration47);
        mutablePeriod7.setHours(92000);
        mutablePeriod7.clear();
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.Days days64 = org.joda.time.Days.daysIn(readableInterval63);
        org.joda.time.Duration duration65 = days64.toStandardDuration();
        org.joda.time.Duration duration66 = duration65.toDuration();
        org.joda.time.ReadableDuration readableDuration67 = null;
        boolean boolean68 = duration66.isLongerThan(readableDuration67);
        boolean boolean69 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMillis((int) ' ');
        int int74 = dateTime71.getEra();
        org.joda.time.DateTime dateTime76 = dateTime71.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime78 = dateTime71.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval79 = duration60.toIntervalTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration80 = duration60.toDuration();
        org.joda.time.Duration duration82 = duration80.plus((-78382080000000L));
        org.joda.time.ReadableInterval readableInterval83 = null;
        org.joda.time.Days days84 = org.joda.time.Days.daysIn(readableInterval83);
        org.joda.time.Duration duration85 = days84.toStandardDuration();
        long long86 = duration85.getStandardHours();
        java.lang.String str87 = duration85.toString();
        org.joda.time.Duration duration88 = duration82.minus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Chronology chronology89 = null;
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration85, chronology89);
        org.joda.time.Period period91 = period3.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(days84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PT0S" + "'", str87, "PT0S");
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime39 = dateTime1.minusYears(56);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfYear();
        int int41 = property40.get();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-54L) + "'", long28 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 53 + "'", int41 == 53);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours(26369);
        org.junit.Assert.assertNotNull(hours1);
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 28);
        org.joda.time.Duration duration3 = org.joda.time.Duration.parse("PT2147483647S");
        long long4 = duration3.getStandardHours();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration6 = new org.joda.time.Duration((java.lang.Object) boolean5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 596523L + "'", long4 == 596523L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfDay();
        int int16 = dateTimeField14.getMinimumValue(1739860860662L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.minuteOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(7);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period(10L, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfWeek();
        org.joda.time.DurationField durationField34 = chronology31.centuries();
        org.joda.time.DurationField durationField35 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = locale38.getScript();
        java.lang.String str40 = dateTimeField36.getAsText(26337955, locale38);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = dateTimeField14.set(1645514376969L, "PT30M14.400S", locale38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT30M14.400S\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "26337955" + "'", str40, "26337955");
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 22);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Days days18 = org.joda.time.Days.daysIn(readableInterval17);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Duration duration20 = duration19.toDuration();
        org.joda.time.ReadableDuration readableDuration21 = null;
        boolean boolean22 = duration20.isLongerThan(readableDuration21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.daysIn(readableInterval23);
        org.joda.time.Duration duration25 = days24.toStandardDuration();
        org.joda.time.Duration duration26 = duration25.toDuration();
        org.joda.time.ReadableDuration readableDuration27 = null;
        boolean boolean28 = duration26.isLongerThan(readableDuration27);
        boolean boolean29 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        int int34 = dateTime31.getEra();
        org.joda.time.DateTime dateTime36 = dateTime31.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime38 = dateTime31.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval39 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval39);
        mutablePeriod16.addYears((int) ' ');
        mutablePeriod16.setSeconds((int) (byte) 100);
        mutablePeriod16.setDays((int) (short) 100);
        int int47 = mutablePeriod16.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getRangeDurationType();
        boolean boolean50 = mutablePeriod16.isSupported(durationFieldType49);
        org.joda.time.DateTime dateTime51 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime53 = dateTime51.withYear(280);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours(27);
        org.joda.time.DateTime dateTime56 = dateTime53.withZone(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        java.util.Locale locale3 = new java.util.Locale("Time", "2001", "Time");
        java.lang.String str4 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "time_2001_Time");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "time-x-lvariant-Time" + "'", str4, "time-x-lvariant-Time");
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) 10);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks5 = weeks3.plus(0);
        org.joda.time.Weeks weeks7 = weeks5.minus(3);
        org.joda.time.Weeks weeks8 = weeks2.plus(weeks7);
        org.joda.time.Weeks weeks10 = weeks8.multipliedBy((int) (byte) -1);
        org.joda.time.Period period11 = period1.plus((org.joda.time.ReadablePeriod) weeks8);
        org.joda.time.Period period13 = period11.plusDays(2022);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-21T07:18:17.656+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T07:18:17.656+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField13 = chronology11.weeks();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology11.getZone();
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks18 = weeks16.plus(0);
        org.joda.time.Weeks weeks20 = weeks18.minus(3);
        org.joda.time.Weeks weeks21 = weeks15.plus(weeks20);
        int[] intArray23 = chronology11.get((org.joda.time.ReadablePeriod) weeks21, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField24 = chronology11.year();
        org.joda.time.Period period25 = new org.joda.time.Period(63072000000L, (long) 78, chronology11);
        org.joda.time.DurationField durationField26 = chronology11.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = weeks1.plus(0);
        org.joda.time.Weeks weeks5 = weeks3.minus(3);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks5);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks10 = weeks8.plus(0);
        org.joda.time.Weeks weeks12 = weeks10.minus(3);
        org.joda.time.Weeks weeks13 = weeks7.plus(weeks12);
        org.joda.time.Weeks weeks14 = weeks5.plus(weeks13);
        org.joda.time.MutablePeriod mutablePeriod15 = weeks14.toMutablePeriod();
        org.joda.time.Period period17 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Period period19 = period17.minus(readablePeriod18);
        org.joda.time.Weeks weeks20 = period19.toStandardWeeks();
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks23 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks25 = weeks23.minus(59);
        org.joda.time.Weeks weeks26 = weeks21.plus(weeks25);
        org.joda.time.Weeks weeks28 = weeks26.minus((int) (short) 1);
        boolean boolean29 = weeks20.isLessThan(weeks28);
        boolean boolean30 = weeks14.isGreaterThan(weeks20);
        org.joda.time.Weeks weeks31 = weeks20.negated();
        org.joda.time.Weeks weeks33 = weeks31.multipliedBy(26316);
        org.joda.time.Weeks weeks35 = weeks33.multipliedBy(46);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(weeks31);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) ' ');
        org.joda.time.Duration duration3 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        boolean boolean8 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = duration1.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Days days17 = org.joda.time.Days.daysIn(readableInterval16);
        org.joda.time.Duration duration18 = days17.toStandardDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration19.isLongerThan(readableDuration20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Days days23 = org.joda.time.Days.daysIn(readableInterval22);
        org.joda.time.Duration duration24 = days23.toStandardDuration();
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.ReadableDuration readableDuration26 = null;
        boolean boolean27 = duration25.isLongerThan(readableDuration26);
        boolean boolean28 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration25, periodType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str32 = durationFieldType31.toString();
        org.joda.time.Chronology chronology33 = null;
        boolean boolean34 = durationFieldType31.isSupported(chronology33);
        boolean boolean35 = periodType29.isSupported(durationFieldType31);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime43 = dateTime40.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.Duration duration46 = org.joda.time.Duration.parse("PT2147483647S");
        long long47 = duration46.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMillis((int) ' ');
        int int52 = dateTime49.getEra();
        org.joda.time.DateTime.Property property53 = dateTime49.secondOfMinute();
        org.joda.time.Period period54 = duration46.toPeriodTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration46, periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period((long) (-292275054), (long) 2147483647, periodType55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusYears((int) '4');
        org.joda.time.DateTime.Property property62 = dateTime59.dayOfWeek();
        org.joda.time.DateTime dateTime65 = dateTime59.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property66 = dateTime59.secondOfMinute();
        org.joda.time.Chronology chronology67 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.dayOfMonth();
        org.joda.time.DurationField durationField69 = chronology67.halfdays();
        org.joda.time.Chronology chronology70 = chronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.clockhourOfDay();
        org.joda.time.Chronology chronology72 = chronology70.withUTC();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(978566400000L, periodType55, chronology72);
        org.joda.time.Period period75 = duration1.toPeriod(periodType29, chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.hourOfHalfday();
        java.lang.String str78 = dateTimeField76.getAsShortText((long) 37543873);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "centuries" + "'", str32, "centuries");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 596523L + "'", long47 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "10" + "'", str78, "10");
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration24, periodType28);
        int int30 = dateTime14.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property39 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        long long45 = dateTimeZone42.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis((int) ' ');
        int int50 = dateTime47.getEra();
        org.joda.time.DateTime dateTime52 = dateTime47.minusMinutes((int) (short) 1);
        int int53 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime47.getZone();
        boolean boolean55 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime47);
        int int56 = property8.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period59 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod60 = period59.toMutablePeriod();
        org.joda.time.Period period62 = period59.plusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period62.multipliedBy(100);
        org.joda.time.Period period66 = period62.withDays((int) (short) 100);
        org.joda.time.Period period68 = period62.plusMinutes(0);
        boolean boolean69 = property8.equals((java.lang.Object) period68);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-54L) + "'", long45 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 55 + "'", int53 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        org.joda.time.Period period72 = period69.plusMinutes((int) (byte) 0);
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) period69);
        long long76 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod66, 1645512060662L, 74);
        org.joda.time.DurationField durationField77 = chronology58.weeks();
        long long80 = durationField77.subtract(1645514210540L, 1);
        int int83 = durationField77.getDifference(19045L, 0L);
        long long86 = durationField77.add((long) 28, 27425236);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645512060662L + "'", long76 == 1645512060662L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1644909410540L + "'", long80 == 1644909410540L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 16586782732800028L + "'", long86 == 16586782732800028L);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Period period3 = period1.withHours(0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period27 = duration7.toPeriod();
        org.joda.time.Period period28 = period1.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period1.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant31 = new org.joda.time.Instant((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfYear();
        int int14 = dateTimeField13.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 366 + "'", int14 == 366);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime11.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime33.withZone(dateTimeZone34);
        java.lang.String str38 = dateTimeZone34.getNameKey((long) 1);
        long long41 = dateTimeZone34.adjustOffset((long) 2022, true);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime31.toMutableDateTime(dateTimeZone34);
        long long45 = dateTimeZone34.adjustOffset(10L, false);
        int int47 = dateTimeZone34.getStandardOffset(1L);
        long long49 = dateTimeZone34.previousTransition(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(74, 385, 26310, 26217, 7, 0, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26217 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-54L) + "'", long30 == (-54L));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2022L + "'", long41 == 2022L);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 55 + "'", int47 == 55);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration27.isLongerThan(readableDuration28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        boolean boolean36 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval46 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration27.toDuration();
        org.joda.time.Duration duration49 = duration47.plus((-78382080000000L));
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology51 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.weekyearOfCentury();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology51);
        long long57 = chronology51.add(1645512060662L, 1645514352817L, 488);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime59.withZone(dateTimeZone60);
        org.joda.time.DateTime.Property property63 = dateTime62.weekyear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusYears((int) '4');
        org.joda.time.DateTime.Property property68 = dateTime65.dayOfWeek();
        org.joda.time.DateTime dateTime71 = dateTime65.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property72 = dateTime65.minuteOfHour();
        org.joda.time.DateTime dateTime74 = dateTime65.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime74.getZone();
        long long78 = dateTimeZone75.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMillis((int) ' ');
        int int83 = dateTime80.getEra();
        org.joda.time.DateTime dateTime85 = dateTime80.minusMinutes((int) (short) 1);
        int int86 = dateTimeZone75.getOffset((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeZone dateTimeZone87 = dateTime80.getZone();
        long long88 = property63.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime89 = property63.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime89.getZone();
        org.joda.time.Chronology chronology91 = chronology51.withZone(dateTimeZone90);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-54L) + "'", long14 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 55 + "'", int22 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 804656516235358L + "'", long57 == 804656516235358L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-54L) + "'", long78 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 55 + "'", int86 == 55);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        int int12 = property9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = property9.getAsText(locale13);
        java.util.Calendar calendar15 = dateTime1.toCalendar(locale13);
        org.joda.time.DateTime dateTime17 = dateTime1.withEra((int) (byte) 0);
        int int18 = dateTime17.getYear();
        int int19 = dateTime17.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str21 = dateTimeFieldType20.toString();
        int int22 = dateTime17.get(dateTimeFieldType20);
        org.joda.time.Hours hours24 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours25 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours26 = hours24.plus(hours25);
        org.joda.time.DurationFieldType durationFieldType27 = hours24.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property37 = dateTime30.secondOfMinute();
        org.joda.time.Chronology chronology38 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField40 = chronology38.millis();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1, chronology38);
        boolean boolean42 = durationFieldType27.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.year();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(1645514173148L, chronology38);
        boolean boolean45 = dateTimeFieldType20.isSupported(chronology38);
        org.joda.time.DurationField durationField46 = chronology38.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = new org.joda.time.Period((java.lang.Object) durationField46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mardi" + "'", str14, "mardi");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514441492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.055,offset=55,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=41,MILLISECOND=547,ZONE_OFFSET=55,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2022) + "'", int18 == (-2022));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2022) + "'", int19 == (-2022));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekyearOfCentury" + "'", str21, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.Period period17 = new org.joda.time.Period(596523L, 2022L, chronology13);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime23.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property30 = dateTime23.secondOfMinute();
        org.joda.time.Chronology chronology31 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology31);
        org.joda.time.DurationField durationField34 = chronology31.months();
        org.joda.time.DurationField durationField35 = chronology31.days();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 100, (long) 100, chronology31);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) 6);
        mutablePeriod36.add((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Minutes minutes40 = duration38.toStandardMinutes();
        org.joda.time.Period period41 = period17.minus((org.joda.time.ReadablePeriod) minutes40);
        org.joda.time.Period period43 = period41.minusMillis(5440);
        int int44 = period41.getSeconds();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-54) + "'", int44 == (-54));
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration3.toDuration();
        org.joda.time.Duration duration25 = duration23.plus((-78382080000000L));
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Days days27 = org.joda.time.Days.daysIn(readableInterval26);
        org.joda.time.Duration duration28 = days27.toStandardDuration();
        long long29 = duration28.getStandardHours();
        java.lang.String str30 = duration28.toString();
        org.joda.time.Duration duration31 = duration25.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration33 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = dateTime35.isSupported(dateTimeFieldType37);
        org.joda.time.Period period39 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfWeek();
        org.joda.time.DateTime dateTime48 = dateTime42.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property49 = dateTime42.secondOfMinute();
        org.joda.time.Chronology chronology50 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfMonth();
        org.joda.time.DurationField durationField52 = durationFieldType40.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime35.toMutableDateTime(chronology50);
        org.joda.time.DateTime dateTime56 = dateTime35.plusWeeks(55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }
}

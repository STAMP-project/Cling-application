import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime9.withZone(dateTimeZone10);
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        boolean boolean14 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime16.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property23 = dateTime16.secondOfMinute();
        org.joda.time.Chronology chronology24 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology24.weeks();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekyear();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str31 = locale29.getDisplayScript();
        int int32 = dateTimeField28.getMaximumShortTextLength(locale29);
        java.util.Calendar calendar33 = dateTime6.toCalendar(locale29);
        boolean boolean34 = locale29.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr-FR" + "'", str30, "fr-FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645514232480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=13,MILLISECOND=0,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-22T06:40:57.846Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:40:57.846Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 22);
        int int12 = dateTime11.getMinuteOfHour();
        org.joda.time.Duration duration14 = org.joda.time.Duration.parse("PT2147483647S");
        long long15 = duration14.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime.Property property21 = dateTime17.secondOfMinute();
        org.joda.time.Period period22 = duration14.toPeriodTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration14, (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime11.withMinuteOfHour(74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 17 + "'", int12 == 17);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 596523L + "'", long15 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration3 = duration1.minus((-78382080000000L));
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Days days6 = org.joda.time.Days.daysIn(readableInterval5);
        org.joda.time.Duration duration7 = days6.toStandardDuration();
        org.joda.time.Duration duration8 = duration7.toDuration();
        org.joda.time.ReadableDuration readableDuration9 = null;
        boolean boolean10 = duration8.isLongerThan(readableDuration9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Days days12 = org.joda.time.Days.daysIn(readableInterval11);
        org.joda.time.Duration duration13 = days12.toStandardDuration();
        org.joda.time.Duration duration14 = duration13.toDuration();
        org.joda.time.ReadableDuration readableDuration15 = null;
        boolean boolean16 = duration14.isLongerThan(readableDuration15);
        boolean boolean17 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis((int) ' ');
        int int22 = dateTime19.getEra();
        org.joda.time.DateTime dateTime24 = dateTime19.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime26 = dateTime19.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval27 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period28 = duration8.toPeriod();
        long long29 = duration8.getStandardSeconds();
        org.joda.time.Instant instant31 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration8, 2022);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime36.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableDuration34, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime48 = dateTime36.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Days days50 = org.joda.time.Days.daysIn(readableInterval49);
        org.joda.time.Duration duration51 = days50.toStandardDuration();
        org.joda.time.Duration duration52 = duration51.toDuration();
        org.joda.time.ReadableDuration readableDuration53 = null;
        boolean boolean54 = duration52.isLongerThan(readableDuration53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.Days days56 = org.joda.time.Days.daysIn(readableInterval55);
        org.joda.time.Duration duration57 = days56.toStandardDuration();
        org.joda.time.Duration duration58 = duration57.toDuration();
        org.joda.time.ReadableDuration readableDuration59 = null;
        boolean boolean60 = duration58.isLongerThan(readableDuration59);
        boolean boolean61 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration52, periodType62);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1645514164648L, 1645514168245L, periodType62);
        org.joda.time.Period period65 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) instant31, periodType62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period67 = period65.withWeeks(59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        int int9 = property8.getMaximumValue();
        int int10 = property8.getMinimumValueOverall();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.lang.String str13 = property8.getAsShortText(locale12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "17" + "'", str13, "17");
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PT-54S");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology15 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology15);
        org.joda.time.DurationField durationField18 = chronology15.months();
        org.joda.time.Period period19 = new org.joda.time.Period(596523L, 2022L, chronology15);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        int int23 = periodType21.indexOf(durationFieldType22);
        int int24 = periodType21.size();
        org.joda.time.Period period25 = new org.joda.time.Period((-78382080000000L), periodType21);
        int int26 = period25.getSeconds();
        int[] intArray28 = chronology15.get((org.joda.time.ReadablePeriod) period25, 1739860860662L);
        boolean boolean29 = languageRange1.equals((java.lang.Object) period25);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 20137]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.halfdays();
        org.joda.time.Chronology chronology17 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100, 280, (-3), 0, 26173127, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26173127 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime7.plusDays(10);
        org.joda.time.Days days12 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.LocalTime localTime13 = dateTime5.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds14 = org.joda.time.Seconds.secondsBetween(readablePartial0, (org.joda.time.ReadablePartial) localTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        java.lang.String str1 = days0.toString();
        org.joda.time.PeriodType periodType2 = days0.getPeriodType();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.weeks();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks21 = weeks19.plus(0);
        org.joda.time.Weeks weeks23 = weeks21.minus(3);
        org.joda.time.Weeks weeks24 = weeks18.plus(weeks23);
        int[] intArray26 = chronology14.get((org.joda.time.ReadablePeriod) weeks24, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField27 = chronology14.minuteOfHour();
        org.joda.time.DurationField durationField28 = chronology14.years();
        org.joda.time.DurationFieldType durationFieldType29 = durationField28.getType();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.set(durationFieldType29, 51026400);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P3D" + "'", str1, "P3D");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationFieldType29);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds10 = seconds8.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.seconds();
        int int12 = seconds10.get(durationFieldType11);
        org.joda.time.Period period14 = period7.withFieldAdded(durationFieldType11, 10);
        org.joda.time.Period period16 = period14.plusHours(26161);
        int int17 = period14.getDays();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime3.withSecondOfMinute(59);
        java.lang.String str6 = dateTime3.toString();
        org.joda.time.LocalDate localDate7 = dateTime3.toLocalDate();
        int int8 = dateTime3.getMillisOfSecond();
        org.joda.time.Instant instant9 = dateTime3.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:17:14.734+00:00:00.520" + "'", str6, "2022-02-22T07:17:14.734+00:00:00.520");
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 734 + "'", int8 == 734);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setScript("PT0S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: PT0S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod10 = periodFormatter2.parseMutablePeriod("PT2M");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodFormatter8);
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean5 = dateTime3.isSupported(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.joda.time.Period period4 = new org.joda.time.Period((int) ' ', (int) (byte) 10, 55, 1814400);
        int int5 = period4.getMonths();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = mutablePeriod3.getFieldType(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.Chronology chronology5 = dateTime3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.seconds();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime8.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        boolean boolean14 = dateTimeZone9.isStandardOffset(1645514168245L);
        long long16 = dateTimeZone9.convertUTCToLocal((long) 896);
        int int18 = dateTimeZone9.getStandardOffset(1645514220749L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) durationField6, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1416L + "'", long16 == 1416L);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 520 + "'", int18 == 520);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds9 = seconds7.multipliedBy(1);
        boolean boolean10 = property5.equals((java.lang.Object) seconds7);
        org.joda.time.Seconds seconds12 = seconds7.plus(435);
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus((int) (short) 10);
        org.joda.time.Seconds seconds17 = seconds15.minus(2022);
        org.joda.time.Seconds seconds18 = seconds7.plus(seconds15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        boolean boolean22 = periodType19.isSupported(durationFieldType21);
        boolean boolean23 = seconds7.isSupported(durationFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property32 = dateTime25.secondOfMinute();
        org.joda.time.Chronology chronology33 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology33.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology33.seconds();
        boolean boolean38 = durationFieldType21.isSupported(chronology33);
        java.lang.String str39 = durationFieldType21.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Days days33 = org.joda.time.Days.daysIn(readableInterval32);
        org.joda.time.Duration duration34 = days33.toStandardDuration();
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.ReadableDuration readableDuration36 = null;
        boolean boolean37 = duration35.isLongerThan(readableDuration36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration41.isLongerThan(readableDuration42);
        boolean boolean44 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        int int49 = dateTime46.getEra();
        org.joda.time.DateTime dateTime51 = dateTime46.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime53 = dateTime46.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval54 = duration35.toIntervalTo((org.joda.time.ReadableInstant) dateTime46);
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval54);
        boolean boolean56 = interval26.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval26.toPeriod(periodType57);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period68 = period65.plusMinutes((int) (byte) 0);
        mutablePeriod62.mergePeriod((org.joda.time.ReadablePeriod) period65);
        mutablePeriod62.setDays((int) 'a');
        org.joda.time.Period period72 = period58.withFields((org.joda.time.ReadablePeriod) mutablePeriod62);
        int int73 = mutablePeriod62.getWeeks();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period3 = period1.plusSeconds(26198);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 26198");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfYear();
        boolean boolean15 = dateTimeField13.isLeap((long) 12);
        long long18 = dateTimeField13.add(1571893860008L, 7);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1572498660008L + "'", long18 == 1572498660008L);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod3.addDays(2022);
        mutablePeriod3.setPeriod(1645512060662L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime52.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property59 = dateTime52.minuteOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy(7);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.Period period63 = new org.joda.time.Period(10L, chronology62);
        mutablePeriod3.add(1645512060662L, chronology62);
        org.joda.time.Period period66 = org.joda.time.Period.weeks((int) (short) 0);
        int[] intArray68 = chronology62.get((org.joda.time.ReadablePeriod) period66, 99999L);
        org.joda.time.DateTimeField dateTimeField69 = chronology62.clockhourOfHalfday();
        long long71 = dateTimeField69.roundHalfEven((long) 26232);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 1, 39, 999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-520L) + "'", long71 == (-520L));
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period3 = period1.plusHours(32);
        int int4 = period3.getWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("T07:15:58.789", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str2 = dateTimeZone0.getID();
        long long4 = dateTimeZone0.previousTransition((long) (short) 0);
        long long6 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Date date8 = dateTime7.toDate();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMinutes((int) 'a');
        org.joda.time.DateTime.Property property11 = dateTime7.monthOfYear();
        int int12 = dateTime7.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.520" + "'", str2, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:17:16 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod43.addHours(2022);
        mutablePeriod43.addDays((-2022));
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("PT-2147483635S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt-2147483635s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = dateTimeZone2.getName((long) (short) 10, locale6);
        boolean boolean9 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.520" + "'", str8, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        boolean boolean9 = periodFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        org.joda.time.Duration duration25 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime29 = property28.roundFloorCopy();
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        int int33 = periodType31.indexOf(durationFieldType32);
        org.joda.time.PeriodType periodType34 = periodType31.withWeeksRemoved();
        int int35 = periodType34.size();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime29, periodType34);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, periodType34);
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withParseType(periodType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod40 = periodFormatter2.parseMutablePeriod("PT0H");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(periodFormatter38);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Chinesisch (Taiwan)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinesisch(taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(6);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = period1.getValue(26199270);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26199270");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plusMillis(26160);
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.LocalTime localTime10 = dateTime2.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime16.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = dateTime38.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay46 = dateTime45.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property55 = dateTime48.secondOfMinute();
        org.joda.time.Chronology chronology56 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMillis((int) ' ');
        int int66 = dateTime63.getEra();
        int int67 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime75 = dateTime69.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property76 = dateTime69.minuteOfHour();
        org.joda.time.DateTime dateTime78 = dateTime69.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime78.getZone();
        long long82 = dateTimeZone79.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime63.toMutableDateTime(dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime89 = dateTime85.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime83, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime92 = dateTime85.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay93 = dateTime92.toTimeOfDay();
        int[] intArray95 = chronology56.get((org.joda.time.ReadablePartial) timeOfDay93, (long) 1814400);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay46, (org.joda.time.ReadablePartial) timeOfDay93);
        java.lang.String str97 = timeOfDay93.toString();
        org.joda.time.Days days98 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime10, (org.joda.time.ReadablePartial) timeOfDay93);
        java.lang.String str99 = timeOfDay93.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-519L) + "'", long35 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-519L) + "'", long82 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertNotNull(intArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 30, 14, 920]");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "T07:17:17.784" + "'", str97, "T07:17:17.784");
        org.junit.Assert.assertNotNull(days98);
// flaky:         org.junit.Assert.assertEquals("'" + str99 + "' != '" + "T07:17:17.784" + "'", str99, "T07:17:17.784");
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(13, 38, 5, (-292275054), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        int int9 = dateTime6.getEra();
        int int10 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) ' ');
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        int int23 = periodType21.indexOf(durationFieldType22);
        org.joda.time.PeriodType periodType24 = periodType21.withWeeksRemoved();
        int int25 = periodType24.size();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime19, periodType24);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, periodType24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType29 = periodType24.getFieldType(36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale9 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = period17.toMutablePeriod();
        org.joda.time.Period period20 = period17.plusMinutes((int) (byte) 0);
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) period17);
        mutablePeriod14.addMonths((int) 'u');
        mutablePeriod14.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        org.joda.time.DateTime.Property property33 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property37 = dateTime30.secondOfMinute();
        org.joda.time.Chronology chronology38 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.months();
        mutablePeriod14.setPeriod((long) 1814400, chronology38);
        org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) locale9, periodType10, chronology38);
        org.joda.time.DurationField durationField44 = chronology38.years();
        org.joda.time.DateTimeField dateTimeField45 = chronology38.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology38.getDateTimeMillis(3, 26199270, 16, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26199270 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period14 = period11.plusMinutes((int) (byte) 0);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) period11);
        boolean boolean16 = periodType4.equals((java.lang.Object) period11);
        org.joda.time.PeriodType periodType17 = periodType4.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.weekyear();
        org.joda.time.DurationField durationField34 = chronology29.weekyears();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) 100, 1814000L, periodType17, chronology29);
        org.joda.time.Period period36 = new org.joda.time.Period(100L, 0L, chronology29);
        org.joda.time.Period period38 = period36.plusMonths(30240);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.Chronology chronology46 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfMinute();
        int int51 = dateTimeField49.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = dateTimeField49.getAsText(readablePartial52, 3, locale54);
        int int56 = dateTimeField36.getMaximumTextLength(locale54);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayVariant(locale60);
        java.lang.String str63 = locale54.getDisplayCountry(locale57);
        java.util.Set<java.lang.Character> charSet64 = locale57.getExtensionKeys();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str67 = locale57.getDisplayScript(locale65);
        java.lang.String str68 = locale57.toLanguageTag();
        java.lang.String str69 = locale57.getDisplayCountry();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3" + "'", str55, "3");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "German" + "'", str59, "German");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Korean" + "'", str61, "Korean");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S\374dkorea" + "'", str63, "S\374dkorea");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "de-DE" + "'", str68, "de-DE");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Germany" + "'", str69, "Germany");
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime9.weekyear();
        int int11 = property10.get();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2001 + "'", int11 == 2001);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DurationField durationField15 = durationFieldType3.getField(chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, chronology17);
        int int19 = period18.getMillis();
        long long22 = chronology13.add((org.joda.time.ReadablePeriod) period18, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType2, chronology13);
        mutablePeriod23.setMinutes((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.setPeriod(112, 36, (int) (short) -1, (int) ' ', (int) (short) 10, 292278993, (-23375), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4100L + "'", long22 == 4100L);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, chronology1);
        int int3 = period2.getMillis();
        int int4 = period2.getHours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("2022-02-22T07:17:15.584+00:00:00.520/2022-02-22T07:17:15.584+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:17:15.584+00:00:00.520/2022-02-22T07:17:15.584+00:00:00.520 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime27.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay35 = dateTime34.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property44 = dateTime37.secondOfMinute();
        org.joda.time.Chronology chronology45 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMillis((int) ' ');
        int int55 = dateTime52.getEra();
        int int56 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((int) '4');
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfWeek();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property65 = dateTime58.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime58.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTime67.getZone();
        long long71 = dateTimeZone68.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime52.toMutableDateTime(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime78 = dateTime74.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime72, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime81 = dateTime74.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay82 = dateTime81.toTimeOfDay();
        int[] intArray84 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay82, (long) 1814400);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay35, (org.joda.time.ReadablePartial) timeOfDay82);
        java.lang.String str86 = timeOfDay82.toString();
        java.lang.String str87 = timeOfDay82.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField89 = timeOfDay82.getField(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 42");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-519L) + "'", long24 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-519L) + "'", long71 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(intArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 30, 14, 920]");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "T07:17:19.678" + "'", str86, "T07:17:19.678");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "T07:17:19.678" + "'", str87, "T07:17:19.678");
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) -1, (int) (byte) 10, 28, (int) (short) 0, 1, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime.Property property12 = dateTime8.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration16, (-1));
        org.joda.time.DateTime dateTime20 = dateTime8.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.secondOfMinute();
        int int35 = dateTimeField33.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = dateTimeField33.getAsText(readablePartial36, 3, locale38);
        int int40 = dateTime8.get(dateTimeField33);
        org.joda.time.DateTime dateTime42 = dateTime8.minusWeeks(40);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Days days44 = org.joda.time.Days.daysIn(readableInterval43);
        org.joda.time.PeriodType periodType45 = days44.getPeriodType();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime42, periodType45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property55 = dateTime48.secondOfMinute();
        org.joda.time.Chronology chronology56 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfMonth();
        org.joda.time.DurationField durationField58 = chronology56.millis();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        org.joda.time.Period period64 = period61.plusSeconds((int) (short) 1);
        org.joda.time.Days days65 = period64.toStandardDays();
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.Days days67 = org.joda.time.Days.daysIn(readableInterval66);
        java.lang.String str68 = days67.toString();
        boolean boolean69 = days65.isGreaterThan(days67);
        long long72 = chronology56.add((org.joda.time.ReadablePeriod) days67, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField73 = chronology56.hourOfHalfday();
        org.joda.time.Days days74 = org.joda.time.Days.THREE;
        java.lang.String str75 = days74.toString();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod79 = period78.toMutablePeriod();
        org.joda.time.Period period81 = period78.plusSeconds((int) (short) 1);
        org.joda.time.Days days82 = period81.toStandardDays();
        org.joda.time.Days days83 = days74.plus(days82);
        long long86 = chronology56.add((org.joda.time.ReadablePeriod) days83, 1739860860662L, 20);
        org.joda.time.DateTime dateTime87 = dateTime6.toDateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField88 = chronology56.yearOfEra();
        java.util.Locale.Category category90 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale91 = java.util.Locale.getDefault(category90);
        java.lang.String str92 = dateTimeField88.getAsShortText(131, locale91);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3" + "'", str39, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(days67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "P0D" + "'", str68, "P0D");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 32L + "'", long72 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "P3D" + "'", str75, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(days82);
        org.junit.Assert.assertNotNull(days83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1745044860662L + "'", long86 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + category90 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category90.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale91);
// flaky:         org.junit.Assert.assertEquals(locale91.toString(), "en");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "131" + "'", str92, "131");
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        boolean boolean26 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration23, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withMinutesRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime55 = dateTime48.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval56 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval56);
        long long58 = interval56.getStartMillis();
        org.joda.time.Chronology chronology59 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(32L, (long) 9, periodType27, chronology59);
        org.joda.time.format.PeriodFormatter periodFormatter62 = periodFormatter2.withParseType(periodType27);
        org.joda.time.Seconds seconds63 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod64 = seconds63.toMutablePeriod();
        mutablePeriod64.setMonths((int) (short) 100);
        int int67 = mutablePeriod64.getYears();
        int int68 = mutablePeriod64.getYears();
        mutablePeriod64.setPeriod((long) 2022);
        org.joda.time.Period period73 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod74 = period73.toMutablePeriod();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod78 = period77.toMutablePeriod();
        org.joda.time.Period period80 = period77.plusMinutes((int) (byte) 0);
        mutablePeriod74.mergePeriod((org.joda.time.ReadablePeriod) period77);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) period77);
        mutablePeriod64.setMonths(40);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = periodFormatter62.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod64, "Chinesisch (Taiwan)", 112);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514239750L + "'", long58 == 1645514239750L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(periodFormatter62);
        org.junit.Assert.assertNotNull(seconds63);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("366");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"366\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.halfdays();
        int int3 = periodType1.indexOf(durationFieldType2);
        int int4 = periodType1.size();
        org.joda.time.Period period5 = new org.joda.time.Period((-78382080000000L), periodType1);
        org.joda.time.Duration duration6 = period5.toStandardDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours((long) 26173127);
        boolean boolean9 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration8);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        int int9 = property8.getMaximumValue();
        boolean boolean10 = property8.isLeap();
        org.joda.time.DurationField durationField11 = property8.getDurationField();
        boolean boolean12 = durationField11.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Period period6 = period3.plusSeconds((int) (short) 1);
        org.joda.time.Days days7 = period6.toStandardDays();
        org.joda.time.Days days9 = days7.plus((int) (byte) 1);
        org.joda.time.Days days10 = days0.plus(days7);
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.Duration duration22 = duration14.withDurationAdded(readableDuration19, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Days days32 = org.joda.time.Days.daysIn(readableInterval31);
        org.joda.time.Duration duration33 = days32.toStandardDuration();
        org.joda.time.Duration duration34 = duration33.toDuration();
        org.joda.time.ReadableDuration readableDuration35 = null;
        boolean boolean36 = duration34.isLongerThan(readableDuration35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.Days days38 = org.joda.time.Days.daysIn(readableInterval37);
        org.joda.time.Duration duration39 = days38.toStandardDuration();
        org.joda.time.Duration duration40 = duration39.toDuration();
        org.joda.time.ReadableDuration readableDuration41 = null;
        boolean boolean42 = duration40.isLongerThan(readableDuration41);
        boolean boolean43 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration40);
        boolean boolean45 = duration22.isEqual((org.joda.time.ReadableDuration) duration40);
        boolean boolean46 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime51 = dateTime48.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime53.plusDays(10);
        org.joda.time.Days days58 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalTime localTime59 = dateTime51.toLocalTime();
        org.joda.time.Interval interval60 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateTime51);
        java.util.GregorianCalendar gregorianCalendar61 = dateTime51.toGregorianCalendar();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(gregorianCalendar61);
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("2022-02-22T07:16:07.473Z/2022-02-22T07:16:07.473Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:16:07.473Z/2022-02...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-22T07:16:04.098Z/2022-02-22T07:16:04.098Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:16:04.098Z/2022-02...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime17);
        int int21 = property5.getDifference((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime22 = property5.roundHalfCeilingCopy();
        int int23 = property5.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1814400 + "'", int21 == 1814400);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.THREE;
        org.joda.time.Period period6 = period3.withFields((org.joda.time.ReadablePeriod) seconds5);
        org.joda.time.Minutes minutes7 = seconds5.toStandardMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = org.joda.time.Period.weeks(1);
        org.joda.time.Period period10 = period7.plus((org.joda.time.ReadablePeriod) period9);
        int int11 = period10.getMillis();
        org.joda.time.Period period13 = period10.multipliedBy(28);
        int int14 = period13.getSeconds();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2800 + "'", int14 == 2800);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        mutablePeriod13.addHours(28);
        mutablePeriod13.addMinutes(5);
        int int18 = mutablePeriod13.getWeeks();
        mutablePeriod13.addDays(105);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod13.setValue(52, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100);
        org.joda.time.Period period6 = period4.withWeeks((int) 'u');
        org.joda.time.Period period7 = period6.toPeriod();
        org.joda.time.DateTime dateTime8 = dateTime1.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        int int22 = dateTimeZone20.getOffsetFromLocal(1645514167367L);
        java.lang.String str23 = dateTimeZone20.toString();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.lang.String str28 = dateTimeZone20.getName(1645514149289L, locale26);
        org.joda.time.DateTime dateTime29 = dateTime8.withZone(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withMonthOfYear(26161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26161 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.520" + "'", str23, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.520" + "'", str28, "+00:00:00.520");
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        org.joda.time.PeriodType periodType9 = periodFormatter8.getParseType();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withParseType(periodType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = periodFormatter11.parsePeriod("T07:16:24.999");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        java.io.IOException iOException1 = new java.io.IOException("de-DE");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: de-DE" + "'", str2, "java.io.IOException: de-DE");
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = property4.getAsText(locale8);
        java.lang.String str11 = locale8.getExtension('u');
        java.lang.String str12 = locale8.getDisplayVariant();
        java.lang.String str13 = locale8.getDisplayLanguage();
        java.lang.String str15 = locale8.getUnicodeLocaleType("ko");
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mardi" + "'", str9, "mardi");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French" + "'", str13, "French");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 1, periodType14);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period15);
        int int17 = mutablePeriod1.getYears();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = durationFieldType20.getField(chronology30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, chronology34);
        int int36 = period35.getMillis();
        long long39 = chronology30.add((org.joda.time.ReadablePeriod) period35, (long) (short) 100, 40);
        mutablePeriod1.setPeriod((-86400000L), (-907200L), chronology30);
        mutablePeriod1.addHours(35435);
        mutablePeriod1.addWeeks(2800);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4100L + "'", long39 == 4100L);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField19.set((long) (-2022), "S\374dkorea");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Su?dkorea\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        boolean boolean14 = dateTimeField13.isSupported();
        long long17 = dateTimeField13.getDifferenceAsLong(1645514222400L, 1645514224037L);
        int int20 = dateTimeField13.getDifference(432000000L, 1645514240751L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-52) + "'", int20 == (-52));
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime1.minusMonths((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfCentury();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime18);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod19.setValue((int) (byte) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("PeriodType[Years]", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=periodtype[years]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        int int6 = property5.getLeapAmount();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(durationField7);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("292278993");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"292278993\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime1.plusDays(10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1, chronology16);
        org.joda.time.DateTime dateTime20 = dateTime1.withChronology(chronology16);
        org.joda.time.DurationField durationField21 = chronology16.days();
        long long24 = durationField21.getMillis((int) (byte) -1, 1645514149289L);
        long long27 = durationField21.getValueAsLong((long) 32, 1645514199988L);
        long long30 = durationField21.getValueAsLong(1645520170159L, (long) 36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-86400000L) + "'", long24 == (-86400000L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 19045L + "'", long30 == 19045L);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay10 = dateTime7.toTimeOfDay();
        java.lang.String str11 = timeOfDay10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        int int34 = dateTime31.getEra();
        int int35 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears((int) '4');
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property44 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime37.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime46.getZone();
        long long50 = dateTimeZone47.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime31.toMutableDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime57 = dateTime53.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean59 = dateTime23.isBefore((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean60 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime61 = dateTime21.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks62 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) timeOfDay10, (org.joda.time.ReadablePartial) localDateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "T07:17:23.777" + "'", str11, "T07:17:23.777");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-519L) + "'", long50 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes6 = period2.toStandardMinutes();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.minutes(1);
        java.lang.String str9 = minutes8.toString();
        org.joda.time.Minutes minutes10 = minutes6.minus(minutes8);
        org.joda.time.Minutes minutes11 = minutes10.negated();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT1M" + "'", str9, "PT1M");
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod0.setValue(32, 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        int int22 = period21.getHours();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime2.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 26220, dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.520" + "'", str13, "+00:00:00.520");
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds10 = seconds8.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.seconds();
        int int12 = seconds10.get(durationFieldType11);
        org.joda.time.Period period14 = period7.withFieldAdded(durationFieldType11, 10);
        org.joda.time.Period period16 = period14.plusHours(26161);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.Period period19 = period16.minusDays(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration20 = period16.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period23 = duration3.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime25);
        mutablePeriod28.addHours((int) (byte) -1);
        mutablePeriod28.setMillis(33);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        org.joda.time.DateTime dateTime5 = property2.addToCopy(10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale6.getDisplayName(locale8);
        int int10 = property2.getMaximumTextLength(locale8);
        java.lang.String str11 = property2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str9, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[dayOfMonth]" + "'", str11, "Property[dayOfMonth]");
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        boolean boolean2 = locale0.equals((java.lang.Object) 1645514173148L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) ' ');
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime.Property property16 = dateTime12.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Days days18 = org.joda.time.Days.daysIn(readableInterval17);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Duration duration20 = duration19.toDuration();
        org.joda.time.DateTime dateTime22 = dateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration20, (-1));
        org.joda.time.DateTime dateTime24 = dateTime12.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.secondOfMinute();
        org.joda.time.Chronology chronology34 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology34.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.secondOfMinute();
        int int39 = dateTimeField37.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = dateTimeField37.getAsText(readablePartial40, 3, locale42);
        int int44 = dateTime12.get(dateTimeField37);
        org.joda.time.DateTime dateTime46 = dateTime12.minusWeeks(40);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period48 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46, periodType47);
        org.joda.time.DateTime dateTime49 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = dateTime46.isEqual(readableInstant50);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "3" + "'", str43, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 24 + "'", int44 == 24);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.setWeeks((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod3.copy();
        mutablePeriod30.addYears(1814400);
        mutablePeriod30.setSeconds(2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.DurationField durationField13 = chronology9.years();
        java.lang.String str14 = durationField13.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DurationField[years]" + "'", str14, "DurationField[years]");
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        int int9 = dateTime6.getEra();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime12 = dateTime4.plusHours(435);
        org.joda.time.DateTime dateTime13 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime4.plusDays(55);
        org.joda.time.DateTime dateTime17 = dateTime4.minusYears(26220);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        long long22 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime5.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime5.millisOfSecond();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645512145011L + "'", long22 == 1645512145011L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod8 = period5.toMutablePeriod();
        org.joda.time.Hours hours9 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours10 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours11 = hours9.plus(hours10);
        org.joda.time.Hours hours12 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours13 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours14 = hours12.plus(hours13);
        org.joda.time.Hours hours15 = hours10.minus(hours13);
        org.joda.time.MutablePeriod mutablePeriod16 = hours10.toMutablePeriod();
        mutablePeriod16.setMillis(2147483647);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        mutablePeriod16.set(durationFieldType19, 0);
        boolean boolean22 = mutablePeriod8.isSupported(durationFieldType19);
        java.lang.String str23 = durationFieldType19.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyears" + "'", str23, "weekyears");
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        int int45 = mutablePeriod43.getYears();
        org.joda.time.Days days46 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod43.copy();
        mutablePeriod43.addDays(0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone1.convertUTCToLocal((long) (short) -1);
        long long7 = dateTimeZone1.convertLocalToUTC(1645514169280L, true, 2022L);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(0L, dateTimeZone1);
        int int9 = dateTime8.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 519L + "'", long3 == 519L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514168760L + "'", long7 == 1645514168760L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.plus(4320000001L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = dateTime3.toString("T07:17:08.422");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        mutablePeriod1.setValue((int) (byte) 0, 31);
        int[] intArray17 = mutablePeriod1.getValues();
        int int18 = mutablePeriod1.getSeconds();
        int int19 = mutablePeriod1.getMinutes();
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds22 = seconds20.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = seconds22.get(durationFieldType23);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds26 = seconds22.minus(seconds25);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) seconds22);
        int int28 = seconds22.getSeconds();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[31, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal(1645514152287L);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.520' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 520 + "'", int2 == 520);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        long long30 = interval26.getStartMillis();
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.secondOfMinute();
        org.joda.time.Chronology chronology42 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.DurationField durationField44 = chronology42.weeks();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfMinute();
        int int47 = dateTimeField45.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = dateTimeField45.getAsText(readablePartial48, 3, locale50);
        long long53 = dateTimeField45.roundHalfCeiling((long) 1814400);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime58 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime60.plusDays(10);
        org.joda.time.Days days65 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalTime localTime66 = dateTime58.toLocalTime();
        int int67 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localTime66);
        int[] intArray69 = new int[] { (byte) -1 };
        int int70 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localTime66, intArray69);
        org.joda.time.format.PeriodPrinter periodPrinter71 = null;
        org.joda.time.format.PeriodParser periodParser72 = null;
        org.joda.time.format.PeriodFormatter periodFormatter73 = new org.joda.time.format.PeriodFormatter(periodPrinter71, periodParser72);
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter76 = periodFormatter73.withLocale(locale74);
        org.joda.time.format.PeriodPrinter periodPrinter77 = periodFormatter73.getPrinter();
        boolean boolean78 = localTime66.equals((java.lang.Object) periodFormatter73);
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str80 = locale79.getISO3Language();
        java.util.Set<java.lang.Character> charSet81 = locale79.getExtensionKeys();
        boolean boolean82 = locale79.hasExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter83 = periodFormatter73.withLocale(locale79);
        java.lang.String str84 = locale79.getDisplayLanguage();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514246155L + "'", long28 == 1645514246155L);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514246155L + "'", long30 == 1645514246155L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3" + "'", str51, "3");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1814480L + "'", long53 == 1814480L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 59 + "'", int67 == 59);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(periodFormatter76);
        org.junit.Assert.assertNull(periodPrinter77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "eng" + "'", str80, "eng");
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(periodFormatter83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "anglais" + "'", str84, "anglais");
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        int int2 = mutablePeriod1.getMonths();
        mutablePeriod1.addWeeks(2022);
        mutablePeriod1.addHours(26198);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks16 = weeks14.plus(0);
        org.joda.time.Weeks weeks18 = weeks16.minus(3);
        org.joda.time.Weeks weeks19 = weeks13.plus(weeks18);
        int[] intArray21 = chronology9.get((org.joda.time.ReadablePeriod) weeks19, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField22 = chronology9.year();
        int int23 = dateTimeField22.getMinimumValue();
        org.joda.time.format.PeriodPrinter periodPrinter26 = null;
        org.joda.time.format.PeriodParser periodParser27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = new org.joda.time.format.PeriodFormatter(periodPrinter26, periodParser27);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale29);
        org.joda.time.format.PeriodPrinter periodPrinter32 = periodFormatter28.getPrinter();
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter28.withLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = dateTimeField22.set(1645514160365L, "pt-54s", locale33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"pt-54s\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-292275054) + "'", int23 == (-292275054));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNull(periodPrinter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodFormatter34);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        long long14 = durationField11.subtract((long) (byte) 0, 1814400);
        long long17 = durationField11.add(1L, 100);
        long long19 = durationField11.getMillis(2022L);
        long long21 = durationField11.getMillis(2);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = durationField11.subtract((long) (short) 10, 978566400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -978566400000 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-78382080000000L) + "'", long14 == (-78382080000000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4320000001L + "'", long17 == 4320000001L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 87350400000L + "'", long19 == 87350400000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86400000L + "'", long21 == 86400000L);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        org.joda.time.PeriodType periodType9 = periodFormatter8.getParseType();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withParseType(periodType10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = periodFormatter11.print(readablePeriod12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Days days3 = days1.plus((-1));
        int int4 = days1.getDays();
        org.joda.time.PeriodType periodType5 = days1.getPeriodType();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusSeconds((int) (short) 1);
        org.joda.time.Days days12 = period11.toStandardDays();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Days days16 = days12.minus(days14);
        org.joda.time.Days days18 = days12.plus(41);
        org.joda.time.Days days19 = days1.minus(days18);
        int int20 = days1.size();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("2022-02-22T07:16:24.943Z/2022-02-22T07:16:24.943Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T07:16:24.943Z/2022-02-22T07:16:24.943Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"UTC\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 999);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime.Property property22 = dateTime18.secondOfMinute();
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateTime23);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = locale25.toLanguageTag();
        java.lang.String str27 = locale25.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.US;
        java.lang.String str29 = locale25.getDisplayLanguage(locale28);
        java.util.Calendar calendar30 = dateTime23.toCalendar(locale28);
        int int31 = dateTimeField10.getMaximumTextLength(locale28);
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = dateTimeField10.set((long) 734, "Germany", locale35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Germany\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 31525804800000L + "'", long16 == 31525804800000L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr-FR" + "'", str26, "fr-FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French" + "'", str29, "French");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645514246480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=27,MILLISECOND=0,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 3);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) ' ');
        int int6 = dateTime3.getEra();
        org.joda.time.DateTime dateTime8 = dateTime3.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime3.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) 'u');
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        long long24 = duration23.getStandardHours();
        java.lang.String str25 = duration23.toString();
        boolean boolean26 = duration18.isEqual((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        long long30 = duration29.getStandardHours();
        java.lang.String str31 = duration29.toString();
        int int32 = duration23.compareTo((org.joda.time.ReadableDuration) duration29);
        boolean boolean33 = duration1.isEqual((org.joda.time.ReadableDuration) duration23);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime14.withChronology(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property26 = dateTime14.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = dateTime14.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear(99);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime32.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        java.lang.String str39 = dateTimeZone37.getID();
        long long41 = dateTimeZone37.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 1, dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime35.toMutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears((int) '4');
        org.joda.time.DateTime.Property property48 = dateTime45.dayOfWeek();
        org.joda.time.DateTime dateTime51 = dateTime45.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property52 = dateTime45.secondOfMinute();
        org.joda.time.Chronology chronology53 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfMonth();
        org.joda.time.DurationField durationField55 = chronology53.weeks();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfMinute();
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.lang.String str59 = locale58.toLanguageTag();
        java.lang.String str60 = dateTimeField56.getAsText((-1L), locale58);
        long long63 = dateTimeField56.addWrapField((long) (short) 100, 1);
        int int64 = mutableDateTime43.get(dateTimeField56);
        int int65 = dateTime30.get(dateTimeField56);
        int int67 = dateTimeField56.getMaximumValue(1645514193756L);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.520" + "'", str39, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ja-JP" + "'", str59, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1100L + "'", long63 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 27 + "'", int64 == 27);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 27 + "'", int65 == 27);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 59 + "'", int67 == 59);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime27 = dateTime22.minusMinutes((int) (short) 1);
        int int28 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.Days days37 = org.joda.time.Days.daysIn(readableInterval36);
        org.joda.time.Duration duration38 = days37.toStandardDuration();
        org.joda.time.Duration duration39 = duration38.toDuration();
        org.joda.time.ReadableDuration readableDuration40 = null;
        boolean boolean41 = duration39.isLongerThan(readableDuration40);
        boolean boolean42 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) ' ');
        int int47 = dateTime44.getEra();
        org.joda.time.DateTime dateTime49 = dateTime44.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime51 = dateTime44.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval52 = duration33.toIntervalTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration33.toDuration();
        org.joda.time.Duration duration55 = duration53.plus((-78382080000000L));
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology57 = dateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology57.getZone();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(105, 97, 7, 26216, 10, (-18633), chronology57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26216 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-519L) + "'", long20 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 520 + "'", int28 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.addMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        int int34 = property31.compareTo((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = property31.getAsText(locale35);
        java.util.Calendar calendar37 = dateTime23.toCalendar(locale35);
        org.joda.time.DateTime dateTime39 = dateTime23.withEra((int) (byte) 0);
        int int40 = dateTime39.getYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.lang.String str43 = dateTimeZone41.getID();
        long long45 = dateTimeZone41.previousTransition((long) (short) 0);
        long long47 = dateTimeZone41.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone41);
        java.util.Date date49 = dateTime48.toDate();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withMonthsRemoved();
        boolean boolean53 = dateTime48.equals((java.lang.Object) periodType51);
        int int54 = periodType51.size();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime39, periodType51);
        java.lang.String str56 = periodType51.getName();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mardi" + "'", str36, "mardi");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514247593,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=28,MILLISECOND=113,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-2022) + "'", int40 == (-2022));
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.520" + "'", str43, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Feb 22 07:17:27 UTC 2022");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "YearDayTime" + "'", str56, "YearDayTime");
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime14.withChronology(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property26 = dateTime14.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = dateTime14.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime14.withMillisOfDay(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(92000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 92000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.MutablePeriod mutablePeriod7 = hours1.toMutablePeriod();
        mutablePeriod7.setMillis(2147483647);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod7.copy();
        int int11 = mutablePeriod7.getMinutes();
        mutablePeriod7.clear();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusSeconds((int) (short) 1);
        org.joda.time.Days days18 = period17.toStandardDays();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        java.lang.String str21 = days20.toString();
        boolean boolean22 = days18.isGreaterThan(days20);
        long long25 = chronology9.add((org.joda.time.ReadablePeriod) days20, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField26 = chronology9.hourOfHalfday();
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        java.lang.String str28 = days27.toString();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        org.joda.time.Period period34 = period31.plusSeconds((int) (short) 1);
        org.joda.time.Days days35 = period34.toStandardDays();
        org.joda.time.Days days36 = days27.plus(days35);
        long long39 = chronology9.add((org.joda.time.ReadablePeriod) days36, 1739860860662L, 20);
        org.joda.time.DateTimeField dateTimeField40 = chronology9.weekyearOfCentury();
        boolean boolean41 = dateTimeField40.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P0D" + "'", str21, "P0D");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "P3D" + "'", str28, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1745044860662L + "'", long39 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setLanguage("");
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale.Builder builder8 = builder3.setLocale(locale7);
        int int9 = property2.getMaximumTextLength(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale7.getUnicodeLocaleType("YearDayTime");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: YearDayTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime23 = dateTime14.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis((int) ' ');
        int int28 = dateTime25.getEra();
        org.joda.time.DateTime dateTime30 = dateTime25.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime32 = dateTime25.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime37 = dateTime33.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTime dateTime38 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean40 = localDateTime23.isSupported(dateTimeFieldType39);
        java.lang.String str41 = localDateTime23.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = localDateTime23.getValue(24);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 24");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:17:28.914" + "'", str41, "2022-02-22T07:17:28.914");
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology14.getDateTimeMillis(292278993, 26194, 2147483647, 26214, 2800, 100, 54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26214 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Period period1 = seconds0.toPeriod();
        org.joda.time.Period period3 = period1.withWeeks((-292275054));
        int int4 = period1.getHours();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod8 = period5.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = period5.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        int int9 = dateTime6.getEra();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime12 = dateTime4.plusHours(435);
        org.joda.time.DateTime dateTime13 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime4.plusDays(55);
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.minus(1645488000117L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) ' ');
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime.Property property24 = dateTime20.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Days days26 = org.joda.time.Days.daysIn(readableInterval25);
        org.joda.time.Duration duration27 = days26.toStandardDuration();
        org.joda.time.Duration duration28 = duration27.toDuration();
        org.joda.time.DateTime dateTime30 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration28, (-1));
        org.joda.time.Duration duration32 = duration28.plus((-1L));
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.Days days40 = org.joda.time.Days.daysIn(readableInterval39);
        org.joda.time.Duration duration41 = days40.toStandardDuration();
        org.joda.time.Duration duration42 = duration41.toDuration();
        org.joda.time.ReadableDuration readableDuration43 = null;
        boolean boolean44 = duration42.isLongerThan(readableDuration43);
        boolean boolean45 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays(1814000L);
        boolean boolean48 = duration42.isEqual((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration49 = duration28.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration47, periodType50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 156729600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType50);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.joda.time.Chronology chronology5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(105, 943, (int) (byte) 10, 2074, 8, chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2074 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        boolean boolean14 = periodType2.equals((java.lang.Object) period9);
        org.joda.time.PeriodType periodType15 = periodType2.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property26 = dateTime19.secondOfMinute();
        org.joda.time.Chronology chronology27 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology27);
        org.joda.time.DurationField durationField30 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.weekyear();
        org.joda.time.DurationField durationField32 = chronology27.weekyears();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) 100, 1814000L, periodType15, chronology27);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.PeriodType periodType36 = days35.getPeriodType();
        boolean boolean37 = mutablePeriod33.equals((java.lang.Object) periodType36);
        int int38 = mutablePeriod33.getSeconds();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime14 = dateTime2.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration18, periodType28);
        int int30 = mutablePeriod29.getSeconds();
        int int31 = mutablePeriod29.getDays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 436);
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours((-27425236));
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime12.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        boolean boolean25 = dateTimeZone22.isStandardOffset(1814400000L);
        long long29 = dateTimeZone22.convertLocalToUTC(1100L, true, (long) 28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Days days44 = org.joda.time.Days.daysIn(readableInterval43);
        org.joda.time.Duration duration45 = days44.toStandardDuration();
        org.joda.time.Duration duration46 = duration45.toDuration();
        org.joda.time.ReadableDuration readableDuration47 = null;
        boolean boolean48 = duration46.isLongerThan(readableDuration47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Days days50 = org.joda.time.Days.daysIn(readableInterval49);
        org.joda.time.Duration duration51 = days50.toStandardDuration();
        org.joda.time.Duration duration52 = duration51.toDuration();
        org.joda.time.ReadableDuration readableDuration53 = null;
        boolean boolean54 = duration52.isLongerThan(readableDuration53);
        boolean boolean55 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMillis((int) ' ');
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime62 = dateTime57.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime64 = dateTime57.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval65 = duration46.toIntervalTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDateTime localDateTime66 = dateTime57.toLocalDateTime();
        boolean boolean67 = dateTimeZone41.isLocalDateTimeGap(localDateTime66);
        boolean boolean68 = dateTimeZone22.isLocalDateTimeGap(localDateTime66);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod73 = period72.toMutablePeriod();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod77 = period76.toMutablePeriod();
        org.joda.time.Period period79 = period76.plusMinutes((int) (byte) 0);
        mutablePeriod73.mergePeriod((org.joda.time.ReadablePeriod) period76);
        boolean boolean81 = periodType69.equals((java.lang.Object) period76);
        org.joda.time.PeriodType periodType82 = periodType69.withHoursRemoved();
        org.joda.time.PeriodType periodType83 = periodType82.withMillisRemoved();
        org.joda.time.PeriodType periodType84 = periodType82.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDateTime66, periodType82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 580L + "'", long29 == 580L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertNotNull(mutablePeriod77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime39 = dateTime1.minusYears(56);
        org.joda.time.DateTime.Property property40 = dateTime1.dayOfWeek();
        org.joda.time.DurationField durationField41 = property40.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime43.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property50 = dateTime43.secondOfMinute();
        org.joda.time.Chronology chronology51 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfMonth();
        org.joda.time.DurationField durationField53 = chronology51.halfdays();
        org.joda.time.Chronology chronology54 = chronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfDay();
        org.joda.time.Chronology chronology56 = chronology54.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((java.lang.Object) property40, chronology54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-519L) + "'", long28 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay((int) (short) 0);
        boolean boolean24 = property13.equals((java.lang.Object) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime21.withDayOfMonth(92000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 92000 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) ' ');
        int int13 = dateTime10.getEra();
        int int14 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime16.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime10.toMutableDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime30, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime39 = dateTime32.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay40 = dateTime39.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfWeek();
        org.joda.time.DateTime dateTime48 = dateTime42.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property49 = dateTime42.secondOfMinute();
        org.joda.time.Chronology chronology50 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMillis((int) ' ');
        int int60 = dateTime57.getEra();
        int int61 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusYears((int) '4');
        org.joda.time.DateTime.Property property66 = dateTime63.dayOfWeek();
        org.joda.time.DateTime dateTime69 = dateTime63.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property70 = dateTime63.minuteOfHour();
        org.joda.time.DateTime dateTime72 = dateTime63.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime72.getZone();
        long long76 = dateTimeZone73.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime57.toMutableDateTime(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime83 = dateTime79.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime77, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime86 = dateTime79.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay87 = dateTime86.toTimeOfDay();
        int[] intArray89 = chronology50.get((org.joda.time.ReadablePartial) timeOfDay87, (long) 1814400);
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay40, (org.joda.time.ReadablePartial) timeOfDay87);
        java.lang.String str91 = timeOfDay87.toString();
        java.lang.String str92 = timeOfDay87.toString();
        org.joda.time.DateTime dateTime93 = dateTime3.withFields((org.joda.time.ReadablePartial) timeOfDay87);
        int int94 = dateTime3.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = dateTime3.withEra(7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-519L) + "'", long29 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-519L) + "'", long76 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(timeOfDay87);
        org.junit.Assert.assertNotNull(intArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 30, 14, 920]");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "T07:17:30.473" + "'", str91, "T07:17:30.473");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "T07:17:30.473" + "'", str92, "T07:17:30.473");
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2022 + "'", int94 == 2022);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withHourOfDay(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime10.withTime((int) 'u', 0, 8, (-123));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(7);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period(10L, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology12.getDateTimeMillis((int) (short) 0, (int) (byte) -1, 26194, 26232);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = weeks1.plus(0);
        org.joda.time.Weeks weeks5 = weeks3.minus(3);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks5);
        org.joda.time.MutablePeriod mutablePeriod7 = weeks6.toMutablePeriod();
        mutablePeriod7.setDays(40);
        mutablePeriod7.addHours(54);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime14 = dateTime2.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration18, periodType28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.secondOfMinute();
        org.joda.time.Chronology chronology42 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.dayOfMonth();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology42);
        org.joda.time.DurationField durationField45 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.weekyear();
        mutablePeriod29.add(0L, chronology42);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = chronology42.getDateTimeMillis(1645514194937L, 14565858, 74, (int) '#', 30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14565858 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        org.joda.time.Period period1 = org.joda.time.Period.months(31);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        org.joda.time.Period period72 = period69.plusMinutes((int) (byte) 0);
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) period69);
        long long76 = chronology58.add((org.joda.time.ReadablePeriod) mutablePeriod66, 1645512060662L, 74);
        org.joda.time.DurationField durationField77 = chronology58.weeks();
        long long80 = durationField77.subtract(1645514210540L, 1);
        int int83 = durationField77.getDifference(1609977600056L, 1645514229538L);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645512060662L + "'", long76 == 1645512060662L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1644909410540L + "'", long80 == 1644909410540L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-58) + "'", int83 == (-58));
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes2 = minutes0.minus(2147483647);
        org.joda.time.Duration duration3 = minutes2.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology15 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology15);
        org.joda.time.DurationField durationField18 = chronology15.months();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyear();
        org.joda.time.DurationField durationField20 = chronology15.weekyears();
        org.joda.time.Period period21 = duration3.toPeriod(chronology15);
        org.joda.time.Period period23 = period21.minusWeeks(999);
        org.joda.time.Period period25 = period21.withDays(26237116);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.joda.time.Period period8 = new org.joda.time.Period(0, (-19045), 52, 35435, 131, (-58), 8, 2147483647);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyear();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = dateTimeField30.getAsShortText(0L, locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = locale32.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514251181L + "'", long28 == 1645514251181L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("cor\351en");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"core?en\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.joda.time.Period period1 = org.joda.time.Period.days(2);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        int int29 = dateTime26.getEra();
        int int30 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property39 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime41.getZone();
        long long45 = dateTimeZone42.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime26.toMutableDateTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime52 = dateTime48.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime46, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime55 = dateTime48.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay56 = dateTime55.toTimeOfDay();
        java.lang.Object obj57 = null;
        boolean boolean58 = timeOfDay56.equals(obj57);
        int int59 = timeOfDay56.size();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = dateTime62.withZone(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        int int73 = property70.compareTo((org.joda.time.ReadableInstant) dateTime72);
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = property70.getAsText(locale74);
        java.util.Calendar calendar76 = dateTime62.toCalendar(locale74);
        java.lang.String str77 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) timeOfDay56, 26160, locale74);
        long long79 = dateTimeField20.remainder(19045L);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-519L) + "'", long45 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "mardi" + "'", str75, "mardi");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1645514251293,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=31,MILLISECOND=813,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "26160" + "'", str77, "26160");
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 19565L + "'", long79 == 19565L);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale9 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatter2.getParser();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 'a', (long) 3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = periodFormatter2.print((org.joda.time.ReadablePeriod) period13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(periodParser10);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) 'u');
        org.joda.time.Period period3 = period1.plusHours(100);
        int int4 = period3.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        java.lang.String str15 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.adjustOffset(26178720L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.520" + "'", str15, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 26178720L + "'", long18 == 26178720L);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 31);
        org.joda.time.DurationField durationField17 = dateTimeField10.getRangeDurationField();
        boolean boolean19 = dateTimeField10.isLeap((long) (byte) -1);
        org.joda.time.DurationField durationField20 = dateTimeField10.getLeapDurationField();
        long long23 = durationField20.getMillis(112, 1645596588089L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 978566400000L + "'", long16 == 978566400000L);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 67737600000L + "'", long23 == 67737600000L);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes(0);
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.MAX_VALUE;
        java.lang.String str8 = seconds7.toString();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.secondOfMinute();
        org.joda.time.Chronology chronology21 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfMonth();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.weekyear();
        org.joda.time.DurationField durationField26 = chronology21.weekyears();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) str8, periodType9, chronology21);
        org.joda.time.DateTime dateTime28 = dateTime1.toDateTime(chronology21);
        org.joda.time.DurationField durationField29 = chronology21.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        org.joda.time.Chronology chronology39 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DurationField durationField41 = chronology39.halfdays();
        org.joda.time.Chronology chronology42 = chronology39.withUTC();
        org.joda.time.DurationField durationField43 = chronology42.halfdays();
        int int44 = durationField29.compareTo(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT2147483647S" + "'", str8, "PT2147483647S");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        int int22 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property31 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime24.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        long long37 = dateTimeZone34.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime18.toMutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((-82409903L));
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime38.toMutableDateTime(dateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) chronology9, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-519L) + "'", long37 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 520 + "'", int41 == 520);
        org.junit.Assert.assertNotNull(mutableDateTime42);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.MAX_VALUE;
        boolean boolean2 = seconds0.isLessThan(seconds1);
        org.joda.time.Seconds seconds4 = seconds0.minus((int) (short) 0);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(seconds4);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTime();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 55);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) instant9, periodType10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        int int13 = minutes12.getMinutes();
        org.joda.time.Minutes minutes14 = minutes12.negated();
        org.joda.time.PeriodType periodType15 = minutes14.getPeriodType();
        boolean boolean16 = mutablePeriod11.equals((java.lang.Object) minutes14);
        int int17 = mutablePeriod11.getYears();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField14 = chronology9.months();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField14.getMillis(1645512095361L, (long) 26237116);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1645512095361");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withLocale(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withLocale(locale7);
        boolean boolean10 = periodFormatter3.isParser();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime15.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableDuration13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime27 = dateTime15.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Days days29 = org.joda.time.Days.daysIn(readableInterval28);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration31.isLongerThan(readableDuration32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        boolean boolean40 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration31, periodType41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1645514164648L, 1645514168245L, periodType41);
        org.joda.time.PeriodType periodType44 = periodType41.withMillisRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter3.withParseType(periodType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod46 = org.joda.time.MutablePeriod.parse("26173127", periodFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr-FR" + "'", str8, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodFormatter45);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        boolean boolean4 = periodType1.isSupported(durationFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, periodType1, chronology14);
        mutablePeriod18.setYears(40);
        org.joda.time.Hours hours21 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours22 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours23 = hours21.plus(hours22);
        org.joda.time.Hours hours24 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours25 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours26 = hours24.plus(hours25);
        org.joda.time.Hours hours27 = hours22.minus(hours25);
        org.joda.time.MutablePeriod mutablePeriod28 = hours22.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) hours22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime39 = dateTime1.minusYears(56);
        org.joda.time.DateTime dateTime41 = dateTime39.plusDays((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime41.withMonthOfYear(943);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 943 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-519L) + "'", long28 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setPeriod(92000, (int) '#', (-292275054), 92000, (int) (short) 100, 2, 3, 2147483647);
        mutablePeriod1.addMinutes(38);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfDay();
        int int16 = dateTimeField14.get(1645514169859L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26169 + "'", int16 == 26169);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withLocale(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withLocale(locale7);
        boolean boolean10 = periodFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = org.joda.time.MutablePeriod.parse("kor", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr-FR" + "'", str8, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        java.lang.String str12 = locale10.getISO3Language();
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "deu" + "'", str12, "deu");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1643698799480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=520,DST_OFFSET=0]");
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = weeks1.plus(0);
        org.joda.time.Weeks weeks5 = weeks3.minus(3);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks5);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks10 = weeks8.plus(0);
        org.joda.time.Weeks weeks12 = weeks10.minus(3);
        org.joda.time.Weeks weeks13 = weeks7.plus(weeks12);
        org.joda.time.Weeks weeks14 = weeks5.plus(weeks13);
        java.lang.String str15 = weeks14.toString();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P3W" + "'", str15, "P3W");
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime3.plusDays((-1));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears((int) '4');
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property16 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        long long22 = dateTimeZone19.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMinutes((int) (short) 1);
        int int30 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.withMonthOfYear((int) (short) 1);
        org.joda.time.Seconds seconds33 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime24);
        long long34 = dateTime24.getMillis();
        org.joda.time.LocalDateTime localDateTime35 = dateTime24.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime41 = dateTime39.withSecondOfMinute(59);
        java.lang.String str42 = dateTime39.toString();
        org.joda.time.LocalDate localDate43 = dateTime39.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime35, (org.joda.time.ReadablePartial) localDate43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-519L) + "'", long22 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 520 + "'", int30 == 520);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(seconds33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514252482L + "'", long34 == 1645514252482L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T07:17:32.970+00:00:00.520" + "'", str42, "2022-02-22T07:17:32.970+00:00:00.520");
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = instant0.getChronology();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime23 = dateTime14.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis((int) ' ');
        int int28 = dateTime25.getEra();
        org.joda.time.DateTime dateTime30 = dateTime25.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime32 = dateTime25.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime37 = dateTime33.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTime dateTime38 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean40 = localDateTime23.isSupported(dateTimeFieldType39);
        java.lang.String str41 = localDateTime23.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime43.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property50 = dateTime43.secondOfMinute();
        org.joda.time.Chronology chronology51 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.weekyear();
        int int55 = dateTimeField52.getDifference((long) 28, (long) 2147483647);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime61 = dateTime57.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Days days63 = org.joda.time.Days.daysIn(readableInterval62);
        org.joda.time.Duration duration64 = days63.toStandardDuration();
        org.joda.time.Duration duration65 = duration64.toDuration();
        org.joda.time.ReadableDuration readableDuration66 = null;
        boolean boolean67 = duration65.isLongerThan(readableDuration66);
        org.joda.time.ReadableInterval readableInterval68 = null;
        org.joda.time.Days days69 = org.joda.time.Days.daysIn(readableInterval68);
        org.joda.time.Duration duration70 = days69.toStandardDuration();
        org.joda.time.Duration duration71 = duration70.toDuration();
        org.joda.time.ReadableDuration readableDuration72 = null;
        boolean boolean73 = duration71.isLongerThan(readableDuration72);
        boolean boolean74 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration71, periodType75);
        org.joda.time.LocalDate localDate77 = dateTime61.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime79.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusMillis((int) ' ');
        int int86 = dateTime83.getEra();
        int int87 = dateTime81.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime89 = dateTime83.plus((long) 22);
        org.joda.time.DateTime dateTime90 = dateTime89.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate91 = dateTime89.toLocalDate();
        org.joda.time.Days days92 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate77, (org.joda.time.ReadablePartial) localDate91);
        java.util.Locale locale94 = java.util.Locale.KOREAN;
        java.lang.String str95 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDate77, (int) (short) -1, locale94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours96 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime23, (org.joda.time.ReadablePartial) localDate77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:17:33.096" + "'", str41, "2022-02-22T07:17:33.096");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(days92);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "-1" + "'", str95, "-1");
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = dateTime4.plusDays(9);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(26173127);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) dateTime8, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime27 = dateTime22.minusMinutes((int) (short) 1);
        int int28 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        long long30 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property31 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.parse("-1");
        org.joda.time.DateTime.Property property34 = dateTime33.monthOfYear();
        long long35 = property31.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.withFields(readablePartial36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-519L) + "'", long20 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 520 + "'", int28 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 738938L + "'", long35 == 738938L);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = period7.withYears(92000);
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period7);
        java.lang.String str11 = seconds10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = dateTime16.withSecondOfMinute(3);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis(2);
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.THREE;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusSeconds((int) (short) 1);
        org.joda.time.Period period29 = period27.multipliedBy(100);
        org.joda.time.Period period31 = period29.withYears(92000);
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period29);
        java.lang.String str33 = seconds32.toString();
        org.joda.time.Seconds seconds34 = seconds21.plus(seconds32);
        org.joda.time.DateTime dateTime35 = dateTime18.minus((org.joda.time.ReadablePeriod) seconds21);
        org.joda.time.Seconds seconds36 = seconds10.plus(seconds21);
        org.joda.time.Hours hours37 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours38 = org.joda.time.Hours.SEVEN;
        boolean boolean39 = hours37.isLessThan(hours38);
        org.joda.time.Duration duration40 = hours37.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = seconds21.compareTo((org.joda.time.base.BaseSingleFieldPeriod) hours37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Seconds cannot be compared to class org.joda.time.Hours");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT100S" + "'", str11, "PT100S");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT100S" + "'", str33, "PT100S");
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.lang.String str8 = dateTimeZone6.getID();
        long long10 = dateTimeZone6.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1, dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfMinute();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = dateTimeField25.getAsText((-1L), locale27);
        long long32 = dateTimeField25.addWrapField((long) (short) 100, 1);
        int int33 = mutableDateTime12.get(dateTimeField25);
        long long35 = dateTimeField25.roundFloor(1645512060662L);
        org.joda.time.DurationField durationField36 = dateTimeField25.getRangeDurationField();
        int int39 = durationField36.getDifference(0L, 0L);
        long long40 = durationField36.getUnitMillis();
        boolean boolean41 = durationField36.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.520" + "'", str8, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja-JP" + "'", str28, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1100L + "'", long32 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 33 + "'", int33 == 33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645512060480L + "'", long35 == 1645512060480L);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 60000L + "'", long40 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime1.plusDays(10);
        org.joda.time.DateTime.Property property6 = dateTime5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears((int) '4');
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfWeek();
        org.joda.time.DateTime dateTime41 = dateTime35.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime35.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        long long48 = dateTimeZone45.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime29.toMutableDateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime55 = dateTime51.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime49, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime58 = dateTime51.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay59 = dateTime58.toTimeOfDay();
        int[] intArray61 = chronology22.get((org.joda.time.ReadablePartial) timeOfDay59, (long) 1814400);
        long long63 = chronology9.set((org.joda.time.ReadablePartial) timeOfDay59, 2022L);
        org.joda.time.DurationField durationField64 = chronology9.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = durationField64.getValueAsLong((-259200000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-519L) + "'", long48 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 30, 14, 920]");
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 26253124L + "'", long63 == 26253124L);
        org.junit.Assert.assertNotNull(durationField64);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean2 = instant0.isEqual(10L);
        org.joda.time.Instant instant4 = instant0.minus(87350400000L);
        org.joda.time.Instant instant7 = instant4.withDurationAdded((long) 28, 112);
        org.joda.time.Instant instant10 = instant7.withDurationAdded(1645427790446L, 86399);
        boolean boolean12 = instant7.isEqual(94223257200L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        mutablePeriod3.setDays((int) (short) 100);
        int int34 = mutablePeriod3.getHours();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        int int40 = dateTime37.getEra();
        org.joda.time.DateTime.Property property41 = dateTime37.secondOfMinute();
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration35, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration43 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Seconds seconds44 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod45 = seconds44.toMutablePeriod();
        mutablePeriod45.setMonths((int) (short) 100);
        int int48 = mutablePeriod45.getYears();
        int int49 = mutablePeriod45.getYears();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime55 = dateTime52.withLaterOffsetAtOverlap();
        mutablePeriod45.setPeriod(readableInstant50, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str58 = durationFieldType57.toString();
        org.joda.time.Chronology chronology59 = null;
        boolean boolean60 = durationFieldType57.isSupported(chronology59);
        mutablePeriod45.add(durationFieldType57, 0);
        java.lang.String str63 = durationFieldType57.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.add(durationFieldType57, 26160);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'centuries'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "centuries" + "'", str58, "centuries");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "centuries" + "'", str63, "centuries");
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology15 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getNameKey((long) (short) -1);
        long long23 = dateTimeZone17.adjustOffset((long) 0, false);
        org.joda.time.Chronology chronology24 = chronology15.withZone(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(26195, 59, 26169, (-52), 0, (int) (byte) 1, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        boolean boolean14 = periodType2.equals((java.lang.Object) period9);
        org.joda.time.PeriodType periodType15 = periodType2.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property26 = dateTime19.secondOfMinute();
        org.joda.time.Chronology chronology27 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology27);
        org.joda.time.DurationField durationField30 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.weekyear();
        org.joda.time.DurationField durationField32 = chronology27.weekyears();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) 100, 1814000L, periodType15, chronology27);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod33.setWeeks(74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        boolean boolean13 = periodType1.equals((java.lang.Object) period8);
        org.joda.time.PeriodType periodType14 = periodType1.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645514212710L, periodType14);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod15.setValue((int) 'a', 26207766);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration3 = duration1.minus((-78382080000000L));
        org.joda.time.Duration duration5 = duration1.plus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) ' ');
        int int10 = dateTime7.getEra();
        org.joda.time.DateTime.Property property11 = dateTime7.secondOfMinute();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime12);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale14.getDisplayLanguage(locale17);
        java.util.Calendar calendar19 = dateTime12.toCalendar(locale17);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        org.joda.time.Duration duration26 = duration23.toDuration();
        org.joda.time.Period period27 = duration23.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime.Property property33 = dateTime29.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.DateTime dateTime39 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration37, (-1));
        org.joda.time.DateTime dateTime41 = dateTime29.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime29.plusSeconds((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.Days days45 = org.joda.time.Days.daysIn(readableInterval44);
        org.joda.time.Duration duration46 = days45.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        org.joda.time.Duration duration54 = duration46.withDurationAdded(readableDuration51, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMillis((int) ' ');
        int int59 = dateTime56.getEra();
        org.joda.time.DateTime.Property property60 = dateTime56.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.Days days62 = org.joda.time.Days.daysIn(readableInterval61);
        org.joda.time.Duration duration63 = days62.toStandardDuration();
        org.joda.time.Duration duration64 = duration63.toDuration();
        org.joda.time.DateTime dateTime66 = dateTime56.withDurationAdded((org.joda.time.ReadableDuration) duration64, (-1));
        org.joda.time.DateTime dateTime68 = dateTime56.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.plusYears((int) '4');
        org.joda.time.DateTime.Property property73 = dateTime70.dayOfWeek();
        org.joda.time.DateTime dateTime76 = dateTime70.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property77 = dateTime70.secondOfMinute();
        org.joda.time.Chronology chronology78 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.dayOfMonth();
        org.joda.time.DurationField durationField80 = chronology78.weeks();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.secondOfMinute();
        int int83 = dateTimeField81.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial84 = null;
        java.util.Locale locale86 = java.util.Locale.KOREA;
        java.lang.String str87 = dateTimeField81.getAsText(readablePartial84, 3, locale86);
        int int88 = dateTime56.get(dateTimeField81);
        org.joda.time.DateTime dateTime90 = dateTime56.minusWeeks(40);
        org.joda.time.PeriodType periodType91 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period92 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime90, periodType91);
        org.joda.time.Period period93 = duration23.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType91);
        org.joda.time.PeriodType periodType94 = periodType91.withMonthsRemoved();
        org.joda.time.Period period95 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime12, periodType91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days96 = period95.toStandardDays();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Days as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr-FR" + "'", str15, "fr-FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "French" + "'", str18, "French");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514253480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=34,MILLISECOND=0,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "3" + "'", str87, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 34 + "'", int88 == 34);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(periodType94);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Days days17 = org.joda.time.Days.daysIn(readableInterval16);
        org.joda.time.Duration duration18 = days17.toStandardDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration19.isLongerThan(readableDuration20);
        boolean boolean22 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime24.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval32 = duration13.toIntervalTo((org.joda.time.ReadableInstant) dateTime24);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval32);
        mutablePeriod9.addYears((int) ' ');
        mutablePeriod9.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableDuration38, (org.joda.time.ReadableInstant) dateTime40);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod49.add(durationFieldType51, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property63 = dateTime56.secondOfMinute();
        org.joda.time.Chronology chronology64 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1, chronology64);
        org.joda.time.DurationField durationField68 = durationFieldType51.getField(chronology64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 0, chronology64);
        org.joda.time.DateTimeField dateTimeField70 = chronology64.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(31, 437, (int) (short) 0, 14, 896, chronology64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 896 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList12);
        boolean boolean15 = period5.equals((java.lang.Object) strList14);
        org.joda.time.Period period17 = period5.withHours((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((java.lang.Object) period5);
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds21 = seconds19.minus(56);
        java.lang.String str22 = seconds21.toString();
        org.joda.time.Seconds seconds24 = seconds21.minus(0);
        org.joda.time.PeriodType periodType25 = seconds21.getPeriodType();
        org.joda.time.Period period26 = period5.normalizedStandard(periodType25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime34 = dateTime28.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property35 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime28.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        long long41 = dateTimeZone38.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis((int) ' ');
        int int46 = dateTime43.getEra();
        org.joda.time.DateTime dateTime48 = dateTime43.minusMinutes((int) (short) 1);
        int int49 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime43.getZone();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Days days52 = org.joda.time.Days.daysIn(readableInterval51);
        org.joda.time.Duration duration53 = days52.toStandardDuration();
        org.joda.time.Duration duration54 = duration53.toDuration();
        org.joda.time.ReadableDuration readableDuration55 = null;
        boolean boolean56 = duration54.isLongerThan(readableDuration55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        boolean boolean63 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMillis((int) ' ');
        int int68 = dateTime65.getEra();
        org.joda.time.DateTime dateTime70 = dateTime65.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime72 = dateTime65.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval73 = duration54.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration74 = duration54.toDuration();
        org.joda.time.Duration duration76 = duration74.plus((-78382080000000L));
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration76);
        org.joda.time.Period period79 = period77.withWeeks(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period80 = period26.plus((org.joda.time.ReadablePeriod) period79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-54S" + "'", str22, "PT-54S");
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-519L) + "'", long41 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 520 + "'", int49 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period79);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.addMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime23.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property30 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime23.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime32.getZone();
        long long36 = dateTimeZone33.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        int int44 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime46 = dateTime38.withMonthOfYear((int) (short) 1);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.minutes();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime38, periodType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType50 = periodType47.getFieldType(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-519L) + "'", long36 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 520 + "'", int44 == 520);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Duration duration21 = days20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration22.isLongerThan(readableDuration23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Days days26 = org.joda.time.Days.daysIn(readableInterval25);
        org.joda.time.Duration duration27 = days26.toStandardDuration();
        org.joda.time.Duration duration28 = duration27.toDuration();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration28.isLongerThan(readableDuration29);
        boolean boolean31 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration28);
        boolean boolean33 = duration10.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod41 = period40.toMutablePeriod();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        org.joda.time.Period period47 = period44.plusMinutes((int) (byte) 0);
        mutablePeriod41.mergePeriod((org.joda.time.ReadablePeriod) period44);
        mutablePeriod41.addMonths((int) 'u');
        mutablePeriod41.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusYears((int) '4');
        org.joda.time.DateTime.Property property60 = dateTime57.dayOfWeek();
        org.joda.time.DateTime dateTime63 = dateTime57.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property64 = dateTime57.secondOfMinute();
        org.joda.time.Chronology chronology65 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.dayOfMonth();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology65);
        org.joda.time.DurationField durationField68 = chronology65.months();
        mutablePeriod41.setPeriod((long) 1814400, chronology65);
        org.joda.time.DurationField durationField70 = chronology65.months();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(87350400000L, periodType37, chronology65);
        org.joda.time.Period period72 = duration28.toPeriod(periodType34, chronology65);
        boolean boolean74 = period72.equals((java.lang.Object) 100.0d);
        int int75 = period72.getSeconds();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) (byte) 10, 26198, 6, 17, (-123), (-625), 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -123 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        int int14 = dateTimeField12.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = dateTimeField12.getAsText(readablePartial15, 3, locale17);
        long long21 = dateTimeField12.addWrapField((long) 26160, 52);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 18160L + "'", long21 == 18160L);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks16 = weeks14.plus(0);
        org.joda.time.Weeks weeks18 = weeks16.minus(3);
        org.joda.time.Weeks weeks19 = weeks13.plus(weeks18);
        int[] intArray21 = chronology9.get((org.joda.time.ReadablePeriod) weeks19, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField22 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField23 = chronology9.years();
        long long25 = durationField23.getMillis((long) 131);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 4133960712000L + "'", long25 == 4133960712000L);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("millis");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"millis\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        java.lang.String str4 = periodType3.toString();
        org.joda.time.PeriodType periodType5 = periodType3.withMinutesRemoved();
        org.joda.time.Period period6 = new org.joda.time.Period(1645514208443L, (long) '4', periodType5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days7 = period6.toStandardDays();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Days as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[Years]" + "'", str4, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        java.lang.String str6 = dateTimeZone2.getNameKey((long) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTime dateTime16 = property13.setCopy(1);
        int int17 = dateTime16.getWeekyear();
        org.joda.time.Days days18 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        int int19 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[dayOfMonth]" + "'", str14, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(days18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 520 + "'", int19 == 520);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.months();
        long long17 = durationField14.getMillis((int) ' ', (long) 26199270);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 84153600000L + "'", long17 == 84153600000L);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period(12, (-2022), (-292275054), (int) (short) 100, 26199270, (int) (short) 10, 435, 3, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Days days2 = org.joda.time.Days.daysIn(readableInterval1);
        org.joda.time.Duration duration3 = days2.toStandardDuration();
        org.joda.time.Duration duration4 = duration3.toDuration();
        org.joda.time.ReadableDuration readableDuration5 = null;
        boolean boolean6 = duration4.isLongerThan(readableDuration5);
        org.joda.time.Duration duration7 = duration4.toDuration();
        org.joda.time.Period period8 = duration4.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) ' ');
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime.Property property14 = dateTime10.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.DateTime dateTime20 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration18, (-1));
        org.joda.time.DateTime dateTime22 = dateTime10.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Days days26 = org.joda.time.Days.daysIn(readableInterval25);
        org.joda.time.Duration duration27 = days26.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Days days29 = org.joda.time.Days.daysIn(readableInterval28);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration31.isLongerThan(readableDuration32);
        org.joda.time.Duration duration35 = duration27.withDurationAdded(readableDuration32, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        int int40 = dateTime37.getEra();
        org.joda.time.DateTime.Property property41 = dateTime37.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.Days days43 = org.joda.time.Days.daysIn(readableInterval42);
        org.joda.time.Duration duration44 = days43.toStandardDuration();
        org.joda.time.Duration duration45 = duration44.toDuration();
        org.joda.time.DateTime dateTime47 = dateTime37.withDurationAdded((org.joda.time.ReadableDuration) duration45, (-1));
        org.joda.time.DateTime dateTime49 = dateTime37.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfWeek();
        org.joda.time.DateTime dateTime57 = dateTime51.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property58 = dateTime51.secondOfMinute();
        org.joda.time.Chronology chronology59 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.dayOfMonth();
        org.joda.time.DurationField durationField61 = chronology59.weeks();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.secondOfMinute();
        int int64 = dateTimeField62.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial65 = null;
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = dateTimeField62.getAsText(readablePartial65, 3, locale67);
        int int69 = dateTime37.get(dateTimeField62);
        org.joda.time.DateTime dateTime71 = dateTime37.minusWeeks(40);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period73 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71, periodType72);
        org.joda.time.Period period74 = duration4.toPeriodTo((org.joda.time.ReadableInstant) dateTime10, periodType72);
        org.joda.time.Period period75 = new org.joda.time.Period(1645514178186L, periodType72);
        org.joda.time.Period period78 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod79 = period78.toMutablePeriod();
        org.joda.time.Period period81 = period78.plusMinutes((int) (byte) 0);
        org.joda.time.Period period83 = period81.plusMonths((int) '4');
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType85.getDurationType();
        boolean boolean87 = periodType84.isSupported(durationFieldType86);
        boolean boolean88 = period81.isSupported(durationFieldType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period90 = period75.withField(durationFieldType86, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "3" + "'", str68, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod((long) 2022);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusMinutes((int) (byte) 0);
        mutablePeriod11.mergePeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setMonths(40);
        mutablePeriod1.setPeriod(24, 56, 22, 26161, 1, (-2022), 40, 56);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = mutablePeriod1.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period6 = periodFormatter2.parsePeriod("2022-02-22T07:16:28.373Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setScript("Deutsch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Deutsch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        long long2 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property11 = dateTime4.minuteOfDay();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusMinutes((int) (short) 1);
        int int35 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime29.getZone();
        int int37 = property11.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period38 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Days days44 = org.joda.time.Days.daysIn(readableInterval43);
        org.joda.time.Duration duration45 = days44.toStandardDuration();
        org.joda.time.Duration duration46 = duration45.toDuration();
        org.joda.time.ReadableDuration readableDuration47 = null;
        boolean boolean48 = duration46.isLongerThan(readableDuration47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Days days50 = org.joda.time.Days.daysIn(readableInterval49);
        org.joda.time.Duration duration51 = days50.toStandardDuration();
        org.joda.time.Duration duration52 = duration51.toDuration();
        org.joda.time.ReadableDuration readableDuration53 = null;
        boolean boolean54 = duration52.isLongerThan(readableDuration53);
        boolean boolean55 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMillis((int) ' ');
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime62 = dateTime57.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime64 = dateTime57.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval65 = duration46.toIntervalTo((org.joda.time.ReadableInstant) dateTime57);
        mutablePeriod42.add((org.joda.time.ReadableInterval) interval65);
        mutablePeriod42.addYears((int) ' ');
        mutablePeriod42.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusYears((int) '4');
        org.joda.time.DateTime.Property property76 = dateTime73.dayOfWeek();
        org.joda.time.DateTime dateTime79 = dateTime73.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property80 = dateTime73.minuteOfHour();
        org.joda.time.DateTime dateTime81 = dateTime73.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(readableDuration71, (org.joda.time.ReadableInstant) dateTime73);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod82);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod82.add(durationFieldType84, (int) (short) 100);
        org.joda.time.Period period87 = mutablePeriod82.toPeriod();
        org.joda.time.Period period88 = period38.plus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.Period period90 = period38.withYears((int) (short) 0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 596523L + "'", long2 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-519L) + "'", long27 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 520 + "'", int35 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property3 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime5 = property3.setCopy(9);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayVariant();
        int int8 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.months();
        org.joda.time.Period period26 = new org.joda.time.Period(596523L, 2022L, chronology22);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period26);
        org.joda.time.PeriodType periodType28 = minutes27.getPeriodType();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusMinutes((int) (byte) 0);
        mutablePeriod34.mergePeriod((org.joda.time.ReadablePeriod) period37);
        mutablePeriod34.addMonths((int) 'u');
        mutablePeriod34.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology58);
        org.joda.time.DurationField durationField61 = chronology58.months();
        mutablePeriod34.setPeriod((long) 1814400, chronology58);
        org.joda.time.DurationField durationField63 = chronology58.months();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(87350400000L, periodType30, chronology58);
        org.joda.time.DateTimeField dateTimeField65 = chronology58.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = chronology58.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period67 = new org.joda.time.Period((java.lang.Object) property3, periodType28, chronology58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfMonth();
        java.lang.String str4 = property3.toString();
        int int5 = property3.getMaximumValue();
        int int6 = property3.getMaximumValueOverall();
        org.joda.time.DateTime dateTime7 = property3.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableDuration10, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime24 = dateTime12.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.secondOfMinute();
        org.joda.time.Chronology chronology34 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology34.weeks();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology34.getZone();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.weekyear();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) dateTime24, chronology34);
        org.joda.time.DateTime dateTime40 = dateTime9.toDateTime(chronology34);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.Period period52 = period49.plusMinutes((int) (byte) 0);
        mutablePeriod46.mergePeriod((org.joda.time.ReadablePeriod) period49);
        mutablePeriod46.addMonths((int) 'u');
        mutablePeriod46.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusYears((int) '4');
        org.joda.time.DateTime.Property property65 = dateTime62.dayOfWeek();
        org.joda.time.DateTime dateTime68 = dateTime62.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property69 = dateTime62.secondOfMinute();
        org.joda.time.Chronology chronology70 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfMonth();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology70);
        org.joda.time.DurationField durationField73 = chronology70.months();
        mutablePeriod46.setPeriod((long) 1814400, chronology70);
        org.joda.time.DurationField durationField75 = chronology70.months();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(87350400000L, periodType42, chronology70);
        org.joda.time.DateTimeField dateTimeField77 = chronology70.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = chronology70.clockhourOfHalfday();
        org.joda.time.DateTime dateTime79 = dateTime40.toDateTime(chronology70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) hours0, chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Hours");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[dayOfMonth]" + "'", str4, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 28 + "'", int5 == 28);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.joda.time.Period period1 = org.joda.time.Period.months(24);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.secondOfMinute();
        org.joda.time.Chronology chronology23 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMillis((int) ' ');
        int int33 = dateTime30.getEra();
        int int34 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime45 = dateTime36.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        long long49 = dateTimeZone46.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime30.toMutableDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime56 = dateTime52.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime50, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime59 = dateTime52.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay60 = dateTime59.toTimeOfDay();
        int[] intArray62 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay60, (long) 1814400);
        long long64 = chronology10.set((org.joda.time.ReadablePartial) timeOfDay60, 2022L);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearWeekDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period66 = new org.joda.time.Period(readablePartial0, (org.joda.time.ReadablePartial) timeOfDay60, periodType65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-519L) + "'", long49 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 30, 14, 920]");
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 26256665L + "'", long64 == 26256665L);
        org.junit.Assert.assertNotNull(periodType65);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration27.isLongerThan(readableDuration28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        boolean boolean36 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval46 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration27.toDuration();
        org.joda.time.Duration duration49 = duration47.plus((-78382080000000L));
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology51 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        org.joda.time.DurationField durationField53 = chronology51.weekyears();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusYears((int) '4');
        org.joda.time.DateTime.Property property58 = dateTime55.dayOfWeek();
        org.joda.time.DateTime dateTime61 = dateTime55.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property62 = dateTime55.secondOfMinute();
        org.joda.time.Chronology chronology63 = dateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.dayOfMonth();
        org.joda.time.DurationField durationField65 = chronology63.weeks();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.minuteOfDay();
        org.joda.time.DurationField durationField69 = chronology63.months();
        int int70 = durationField53.compareTo(durationField69);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = durationField53.subtract(1645514242555L, 1645512107180L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1645512107180");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime27 = dateTime22.minusMinutes((int) (short) 1);
        int int28 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        long long30 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property31 = dateTime22.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Days days33 = org.joda.time.Days.daysIn(readableInterval32);
        org.joda.time.Duration duration34 = days33.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Days days36 = org.joda.time.Days.daysIn(readableInterval35);
        org.joda.time.Duration duration37 = days36.toStandardDuration();
        org.joda.time.Duration duration38 = duration37.toDuration();
        org.joda.time.ReadableDuration readableDuration39 = null;
        boolean boolean40 = duration38.isLongerThan(readableDuration39);
        org.joda.time.Duration duration42 = duration34.withDurationAdded(readableDuration39, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) ' ');
        int int47 = dateTime44.getEra();
        org.joda.time.DateTime.Property property48 = dateTime44.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Days days50 = org.joda.time.Days.daysIn(readableInterval49);
        org.joda.time.Duration duration51 = days50.toStandardDuration();
        org.joda.time.Duration duration52 = duration51.toDuration();
        org.joda.time.DateTime dateTime54 = dateTime44.withDurationAdded((org.joda.time.ReadableDuration) duration52, (-1));
        org.joda.time.DateTime dateTime56 = dateTime44.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((int) '4');
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfWeek();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property65 = dateTime58.secondOfMinute();
        org.joda.time.Chronology chronology66 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfMonth();
        org.joda.time.DurationField durationField68 = chronology66.weeks();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.secondOfMinute();
        int int71 = dateTimeField69.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial72 = null;
        java.util.Locale locale74 = java.util.Locale.KOREA;
        java.lang.String str75 = dateTimeField69.getAsText(readablePartial72, 3, locale74);
        int int76 = dateTime44.get(dateTimeField69);
        org.joda.time.DateTime dateTime78 = dateTime44.minusWeeks(40);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period80 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime78, periodType79);
        org.joda.time.LocalTime localTime81 = dateTime78.toLocalTime();
        int int82 = property31.getDifference((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = locale85.getDisplayVariant();
        java.lang.String str87 = dateTimeZone83.getName((long) '4', locale85);
        int int88 = property31.getMaximumShortTextLength(locale85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((java.lang.Object) int88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-519L) + "'", long20 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 520 + "'", int28 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "3" + "'", str75, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 37 + "'", int76 == 37);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 280 + "'", int82 == 280);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.joda.time.Period period4 = new org.joda.time.Period(28, 37, 1814400, 40);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setHours(1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        int int11 = dateTime8.getEra();
        int int12 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime8.toMutableDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime28, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.Period period41 = period38.plusSeconds((int) (short) 1);
        org.joda.time.Days days42 = period41.toStandardDays();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Days days44 = org.joda.time.Days.daysIn(readableInterval43);
        org.joda.time.Duration duration45 = days44.toStandardDuration();
        org.joda.time.Days days46 = days42.minus(days44);
        mutablePeriod35.add((org.joda.time.ReadablePeriod) days44);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears((int) '4');
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfWeek();
        org.joda.time.DateTime dateTime57 = dateTime51.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property58 = dateTime51.secondOfMinute();
        org.joda.time.Chronology chronology59 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.dayOfMonth();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology59);
        org.joda.time.DurationField durationField62 = chronology59.days();
        boolean boolean63 = mutablePeriod35.equals((java.lang.Object) durationField62);
        long long66 = durationField62.getValueAsLong((-672L), (long) 20);
        org.joda.time.DurationFieldType durationFieldType67 = durationField62.getType();
        mutablePeriod0.add(durationFieldType67, 59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType71 = mutablePeriod0.getFieldType(25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-519L) + "'", long27 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType67);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime3.plusDays((-1));
        int int8 = dateTime7.getYearOfEra();
        boolean boolean9 = dateTime7.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.Hours hours8 = hours6.dividedBy((int) '4');
        org.joda.time.Hours hours10 = hours8.minus(1814400);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = hours10.getFieldType(663);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 663");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.minusYears((int) '#');
        org.joda.time.Period period5 = period1.plusMinutes(100);
        org.joda.time.Seconds seconds6 = period5.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = seconds6.getFieldType((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(seconds6);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod((long) 2022);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusMinutes((int) (byte) 0);
        mutablePeriod11.mergePeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod1.setMonths(40);
        mutablePeriod1.setPeriod(24, 56, 22, 26161, 1, (-2022), 40, 56);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod1.copy();
        java.lang.String str32 = mutablePeriod1.toString();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P24Y56M22W26161DT1H-2022M40.056S" + "'", str32, "P24Y56M22W26161DT1H-2022M40.056S");
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = property4.getAsText(locale8);
        org.joda.time.DurationField durationField10 = property4.getLeapDurationField();
        org.joda.time.DateTime dateTime11 = property4.withMinimumValue();
        int int12 = dateTime11.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mardi" + "'", str9, "mardi");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("TWN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguage("2022-02-22T07:16:29.342Z/2022-02-22T07:16:29.342Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-22T07:16:29.342Z/2022-02-22T07:16:29.342Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField12.set((-1306367964316780955L), "2022-02-22T07:16:34.145Z/2022-02-22T07:16:34.145Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:16:34.145Z/2022-02-22T07:16:34.145Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("2022-02-22T07:17:05.761+00:00:00.520/2022-02-22T07:17:05.761+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:17:05.761+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(2074);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        int int4 = dateTimeZone0.getStandardOffset(1645514217961L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 519L + "'", long2 == 519L);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 520 + "'", int4 == 520);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("minuteOfDay", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=minuteofday");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(2147483647, 16, 734, 100, 473, 50, 366, 0);
        mutablePeriod8.add((long) 943);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Days days17 = org.joda.time.Days.daysIn(readableInterval16);
        org.joda.time.Duration duration18 = days17.toStandardDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration19.isLongerThan(readableDuration20);
        boolean boolean22 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime24.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval32 = duration13.toIntervalTo((org.joda.time.ReadableInstant) dateTime24);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval32);
        mutablePeriod9.addYears((int) ' ');
        mutablePeriod9.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableDuration38, (org.joda.time.ReadableInstant) dateTime40);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        mutablePeriod9.addDays(2022);
        mutablePeriod9.setPeriod(1645512060662L);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((int) '4');
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfWeek();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property65 = dateTime58.minuteOfDay();
        org.joda.time.DateTime dateTime67 = property65.addToCopy(7);
        org.joda.time.Chronology chronology68 = dateTime67.getChronology();
        org.joda.time.Period period69 = new org.joda.time.Period(10L, chronology68);
        mutablePeriod9.add(1645512060662L, chronology68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(99, (int) (byte) 10, 31, (-19045), (int) (short) 100, 26161, chronology68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19045 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        java.util.Locale locale0 = java.util.Locale.US;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        int int8 = property5.compareTo((org.joda.time.ReadableInstant) dateTime7);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.lang.String str13 = property5.getAsShortText(locale9);
        java.lang.String str14 = locale0.getDisplayScript(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = locale0.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr-FR" + "'", str10, "fr-FR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str12, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mar." + "'", str13, "mar.");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        mutablePeriod1.addMinutes(0);
        mutablePeriod1.setHours(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType9 = mutablePeriod1.getFieldType(565);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period23 = duration3.toPeriod();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        long long27 = duration26.getStandardHours();
        boolean boolean28 = duration3.isEqual((org.joda.time.ReadableDuration) duration26);
        long long29 = duration26.getMillis();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) (short) 10);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        org.joda.time.Period period48 = period45.plusMinutes((int) (byte) 0);
        mutablePeriod42.mergePeriod((org.joda.time.ReadablePeriod) period45);
        mutablePeriod42.addMonths((int) 'u');
        mutablePeriod42.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusYears((int) '4');
        org.joda.time.DateTime.Property property61 = dateTime58.dayOfWeek();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property65 = dateTime58.secondOfMinute();
        org.joda.time.Chronology chronology66 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfMonth();
        org.joda.time.Period period68 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology66);
        org.joda.time.DurationField durationField69 = chronology66.months();
        mutablePeriod42.setPeriod((long) 1814400, chronology66);
        org.joda.time.DurationField durationField71 = chronology66.months();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(87350400000L, periodType38, chronology66);
        org.joda.time.Period period73 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34, periodType38);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusMillis((int) ' ');
        int int78 = dateTime75.getEra();
        org.joda.time.DateTime dateTime80 = dateTime75.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime82 = dateTime75.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime83 = dateTime82.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime85 = dateTime83.minusMillis((int) 'u');
        org.joda.time.ReadableInterval readableInterval86 = null;
        org.joda.time.Days days87 = org.joda.time.Days.daysIn(readableInterval86);
        org.joda.time.Duration duration88 = days87.toStandardDuration();
        org.joda.time.Duration duration89 = duration88.toDuration();
        org.joda.time.ReadableDuration readableDuration90 = null;
        boolean boolean91 = duration89.isLongerThan(readableDuration90);
        org.joda.time.Duration duration92 = duration89.toDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType93.getDurationType();
        boolean boolean95 = duration89.equals((java.lang.Object) dateTimeFieldType93);
        int int96 = dateTime85.get(dateTimeFieldType93);
        int int97 = dateTime34.get(dateTimeFieldType93);
        org.joda.time.DateTime.Property property98 = dateTime34.year();
        org.joda.time.DateTime dateTime99 = property98.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(days87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2001 + "'", int96 == 2001);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2022 + "'", int97 == 2022);
        org.junit.Assert.assertNotNull(property98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.getID();
        long long6 = dateTimeZone2.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1, dateTimeZone2);
        java.lang.String str9 = dateTimeZone2.getName((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 100, dateTimeZone2);
        long long12 = dateTimeZone2.nextTransition(1645514191193L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.520" + "'", str4, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.520" + "'", str9, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514191193L + "'", long12 == 1645514191193L);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.SEVEN;
        boolean boolean2 = hours0.isLessThan(hours1);
        org.joda.time.Duration duration3 = hours0.toStandardDuration();
        org.joda.time.Hours hours5 = hours0.plus(7);
        org.joda.time.Hours hours6 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours7 = org.joda.time.Hours.SEVEN;
        boolean boolean8 = hours6.isLessThan(hours7);
        org.joda.time.Duration duration9 = hours6.toStandardDuration();
        org.joda.time.Hours hours10 = hours5.plus(hours6);
        org.joda.time.Hours hours11 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours12 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours13 = hours11.plus(hours12);
        org.joda.time.Hours hours14 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours15 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours16 = hours14.plus(hours15);
        org.joda.time.Hours hours17 = hours12.minus(hours15);
        org.joda.time.Hours hours19 = hours17.dividedBy((int) '4');
        org.joda.time.Hours hours21 = hours19.minus(1814400);
        org.joda.time.Hours hours22 = hours6.minus(hours21);
        java.lang.String str23 = hours6.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT4H" + "'", str23, "PT4H");
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        java.lang.String str1 = seconds0.toString();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology14);
        org.joda.time.DurationField durationField17 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyear();
        org.joda.time.DurationField durationField19 = chronology14.weekyears();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((java.lang.Object) str1, periodType2, chronology14);
        org.joda.time.DateTimeField dateTimeField21 = chronology14.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime27 = dateTime25.withSecondOfMinute(59);
        java.lang.String str28 = dateTime25.toString();
        org.joda.time.LocalDate localDate29 = dateTime25.toLocalDate();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("\ud654\uc694\uc77c");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDate29, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT2147483647S" + "'", str1, "PT2147483647S");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T07:17:39.937+00:00:00.520" + "'", str28, "2022-02-22T07:17:39.937+00:00:00.520");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period12 = period6.withDays(435);
        org.joda.time.Period period14 = period6.minusYears(33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds15 = period14.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        int int28 = mutablePeriod3.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod3.copy();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime55 = dateTime48.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval56 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Period period60 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod61 = period60.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Days days63 = org.joda.time.Days.daysIn(readableInterval62);
        org.joda.time.Duration duration64 = days63.toStandardDuration();
        org.joda.time.Duration duration65 = duration64.toDuration();
        org.joda.time.ReadableDuration readableDuration66 = null;
        boolean boolean67 = duration65.isLongerThan(readableDuration66);
        org.joda.time.ReadableInterval readableInterval68 = null;
        org.joda.time.Days days69 = org.joda.time.Days.daysIn(readableInterval68);
        org.joda.time.Duration duration70 = days69.toStandardDuration();
        org.joda.time.Duration duration71 = duration70.toDuration();
        org.joda.time.ReadableDuration readableDuration72 = null;
        boolean boolean73 = duration71.isLongerThan(readableDuration72);
        boolean boolean74 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMillis((int) ' ');
        int int79 = dateTime76.getEra();
        org.joda.time.DateTime dateTime81 = dateTime76.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime83 = dateTime76.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval84 = duration65.toIntervalTo((org.joda.time.ReadableInstant) dateTime76);
        mutablePeriod61.add((org.joda.time.ReadableInterval) interval84);
        boolean boolean86 = interval56.isBefore((org.joda.time.ReadableInterval) interval84);
        mutablePeriod29.setPeriod((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Interval interval88 = interval56.toInterval();
        org.joda.time.Duration duration89 = interval56.toDuration();
        org.joda.time.DateTime dateTime90 = interval56.getStart();
        org.joda.time.DateTime dateTime93 = dateTime90.withDurationAdded(0L, (-292275054));
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime93.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        java.lang.String str5 = property4.getAsShortText();
        org.joda.time.Duration duration7 = org.joda.time.Duration.parse("PT2147483647S");
        long long8 = duration7.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) ' ');
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime.Property property14 = dateTime10.secondOfMinute();
        org.joda.time.Period period15 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime10);
        long long16 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime10.withTime((-625), 565, 55, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -625 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud654" + "'", str5, "\ud654");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 596523L + "'", long8 == 596523L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setLanguageTag("2022-02-22T07:17:22.493+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Days days17 = org.joda.time.Days.daysIn(readableInterval16);
        org.joda.time.Duration duration18 = days17.toStandardDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration19.isLongerThan(readableDuration20);
        boolean boolean22 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime24.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval32 = duration13.toIntervalTo((org.joda.time.ReadableInstant) dateTime24);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval32);
        mutablePeriod9.addYears((int) ' ');
        mutablePeriod9.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableDuration38, (org.joda.time.ReadableInstant) dateTime40);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod49.add(durationFieldType51, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property63 = dateTime56.secondOfMinute();
        org.joda.time.Chronology chronology64 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1, chronology64);
        org.joda.time.DurationField durationField68 = durationFieldType51.getField(chronology64);
        long long74 = chronology64.getDateTimeMillis((long) 0, 4, 40, 0, 22);
        org.joda.time.DateTimeField dateTimeField75 = chronology64.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((int) (short) 100, (-1645514220), 554, 48, 53, 17, chronology64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField68);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 16799502L + "'", long74 == 16799502L);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        int int12 = mutablePeriod11.getSeconds();
        mutablePeriod11.addMillis(0);
        mutablePeriod11.add(26169, 97, (-123), (-2483), 28, 23, 43, (-292275054));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.Days days12 = duration9.toStandardDays();
        org.joda.time.Duration duration13 = days12.toStandardDuration();
        org.joda.time.Days days15 = org.joda.time.Days.days(896);
        boolean boolean16 = days12.isLessThan(days15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod((long) 2022);
        mutablePeriod1.addSeconds(437);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(112, 26237116, 26194, 105, (int) (byte) 10, 26160);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 105 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        mutablePeriod3.addDays(2022);
        mutablePeriod3.setPeriod(1645512060662L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime52.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property59 = dateTime52.minuteOfDay();
        org.joda.time.DateTime dateTime61 = property59.addToCopy(7);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.Period period63 = new org.joda.time.Period(10L, chronology62);
        mutablePeriod3.add(1645512060662L, chronology62);
        org.joda.time.ReadableInterval readableInterval65 = null;
        org.joda.time.Days days66 = org.joda.time.Days.daysIn(readableInterval65);
        org.joda.time.Duration duration67 = days66.toStandardDuration();
        org.joda.time.Duration duration68 = duration67.toDuration();
        org.joda.time.ReadableDuration readableDuration69 = null;
        boolean boolean70 = duration68.isLongerThan(readableDuration69);
        long long71 = duration68.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusYears((int) '4');
        org.joda.time.DateTime.Property property76 = dateTime73.dayOfWeek();
        org.joda.time.DateTime dateTime79 = dateTime73.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property80 = dateTime73.secondOfMinute();
        org.joda.time.Chronology chronology81 = dateTime73.getChronology();
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = duration68.toPeriodFrom((org.joda.time.ReadableInstant) dateTime73, periodType82);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration87 = duration68.withDurationAdded(1645514169280L, (int) (short) 0);
        org.joda.time.Days days88 = duration87.toStandardDays();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(days88);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-22T07:17:24.714+00:00:00.520", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        int int8 = period5.getDays();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        boolean boolean11 = instant9.isEqual(10L);
        org.joda.time.Instant instant13 = instant9.minus(87350400000L);
        org.joda.time.Instant instant16 = instant13.withDurationAdded((long) 28, 112);
        org.joda.time.Duration duration17 = period5.toDurationTo((org.joda.time.ReadableInstant) instant13);
        int int18 = period5.getWeeks();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        mutablePeriod3.setDays((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) ' ');
        int int38 = dateTime35.getEra();
        org.joda.time.DateTime.Property property39 = dateTime35.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.DateTime dateTime45 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        org.joda.time.Duration duration47 = duration43.plus((-1L));
        long long48 = duration43.getStandardMinutes();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration43);
        mutablePeriod3.setHours(92000);
        mutablePeriod3.clear();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.setValue(22, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        org.joda.time.DateTimeField dateTimeField63 = chronology58.millisOfDay();
        long long65 = dateTimeField63.roundHalfCeiling(0L);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        long long21 = dateTimeField19.roundCeiling(0L);
        int int23 = dateTimeField19.getMaximumValue(16800022L);
        int int24 = dateTimeField19.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis((int) ' ');
        int int37 = dateTime34.getEra();
        int int38 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        long long53 = dateTimeZone50.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime34.toMutableDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime60 = dateTime56.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime54, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean62 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime64 = dateTime26.minusYears(56);
        org.joda.time.DateTime.Property property65 = dateTime64.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property74 = dateTime67.minuteOfHour();
        long long75 = property65.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.TimeOfDay timeOfDay76 = dateTime67.toTimeOfDay();
        java.util.Locale locale77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) timeOfDay76, locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31535999480L + "'", long21 == 31535999480L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 99 + "'", int23 == 99);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-519L) + "'", long53 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-672L) + "'", long75 == (-672L));
        org.junit.Assert.assertNotNull(timeOfDay76);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("70");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"70\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Seconds seconds1 = minutes0.toStandardSeconds();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        boolean boolean14 = periodType2.equals((java.lang.Object) period9);
        org.joda.time.PeriodType periodType15 = periodType2.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property25 = dateTime18.secondOfMinute();
        org.joda.time.Chronology chronology26 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField28 = durationFieldType16.getField(chronology26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 22, (long) (byte) -1, periodType15, chronology26);
        mutablePeriod29.addYears(26160);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod29.setWeeks((-23375));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = weeks0.negated();
        org.joda.time.Weeks weeks2 = null;
        boolean boolean3 = weeks0.isLessThan(weeks2);
        int int4 = weeks0.getWeeks();
        org.joda.time.Duration duration5 = weeks0.toStandardDuration();
        long long6 = duration5.getMillis();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1209600000L + "'", long6 == 1209600000L);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy(100);
        org.joda.time.Period period9 = org.joda.time.Period.weeks(1);
        org.joda.time.Period period10 = period7.plus((org.joda.time.ReadablePeriod) period9);
        int int11 = period10.getMillis();
        org.joda.time.Period period13 = period10.multipliedBy(28);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = period10.withPeriodType(periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime12.plusMinutes(22);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.PeriodType periodType24 = mutablePeriod23.getPeriodType();
        org.joda.time.Hours hours25 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours26 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours27 = hours25.plus(hours26);
        org.joda.time.DurationFieldType durationFieldType28 = hours25.getFieldType();
        mutablePeriod23.set(durationFieldType28, 24);
        org.joda.time.Seconds seconds31 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod32 = seconds31.toMutablePeriod();
        mutablePeriod32.setMonths((int) (short) 100);
        int int35 = mutablePeriod32.getYears();
        int int36 = mutablePeriod32.getYears();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime42 = dateTime39.withLaterOffsetAtOverlap();
        mutablePeriod32.setPeriod(readableInstant37, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str45 = durationFieldType44.toString();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = durationFieldType44.isSupported(chronology46);
        mutablePeriod32.add(durationFieldType44, 0);
        java.lang.String str50 = durationFieldType44.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.set(durationFieldType44, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'centuries'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "centuries" + "'", str45, "centuries");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "centuries" + "'", str50, "centuries");
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime3.plusDays(55);
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusYears((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime16.plusDays(10);
        org.joda.time.Days days21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        int int22 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        boolean boolean29 = dateTimeZone27.isStandardOffset(0L);
        boolean boolean31 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime3.toMutableDateTime(dateTimeZone27);
        int int33 = dateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 42 + "'", int33 == 42);
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes11 = period7.toStandardMinutes();
        boolean boolean12 = dateTime1.equals((java.lang.Object) minutes11);
        boolean boolean13 = dateTime1.isEqualNow();
        org.joda.time.DateTime.Property property14 = dateTime1.yearOfEra();
        int int15 = property14.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay((int) (short) 0);
        long long26 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str27 = property14.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime27.withZone(dateTimeZone28);
        java.lang.String str32 = dateTimeZone28.getNameKey((long) 1);
        long long35 = dateTimeZone28.adjustOffset((long) 2022, true);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime25.toMutableDateTime(dateTimeZone28);
        java.lang.String str37 = dateTimeZone28.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-519L) + "'", long24 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2022L + "'", long35 == 2022L);
        org.junit.Assert.assertNotNull(mutableDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.520" + "'", str37, "+00:00:00.520");
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        java.lang.String str26 = property25.toString();
        int int27 = property25.getMaximumValue();
        int int28 = property25.getMaximumValueOverall();
        org.joda.time.DateTime dateTime29 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        int int39 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period40 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.Days days54 = org.joda.time.Days.daysIn(readableInterval53);
        org.joda.time.Duration duration55 = days54.toStandardDuration();
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.ReadableDuration readableDuration57 = null;
        boolean boolean58 = duration56.isLongerThan(readableDuration57);
        boolean boolean59 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration56, periodType60);
        org.joda.time.Days days62 = duration56.toStandardDays();
        org.joda.time.Duration duration64 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration56, 435);
        org.joda.time.Period period65 = duration64.toPeriod();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 28 + "'", int27 == 28);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(56);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        int int28 = mutablePeriod3.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod3.copy();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration43.isLongerThan(readableDuration44);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime55 = dateTime48.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval56 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Period period60 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod61 = period60.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.Days days63 = org.joda.time.Days.daysIn(readableInterval62);
        org.joda.time.Duration duration64 = days63.toStandardDuration();
        org.joda.time.Duration duration65 = duration64.toDuration();
        org.joda.time.ReadableDuration readableDuration66 = null;
        boolean boolean67 = duration65.isLongerThan(readableDuration66);
        org.joda.time.ReadableInterval readableInterval68 = null;
        org.joda.time.Days days69 = org.joda.time.Days.daysIn(readableInterval68);
        org.joda.time.Duration duration70 = days69.toStandardDuration();
        org.joda.time.Duration duration71 = duration70.toDuration();
        org.joda.time.ReadableDuration readableDuration72 = null;
        boolean boolean73 = duration71.isLongerThan(readableDuration72);
        boolean boolean74 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMillis((int) ' ');
        int int79 = dateTime76.getEra();
        org.joda.time.DateTime dateTime81 = dateTime76.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime83 = dateTime76.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval84 = duration65.toIntervalTo((org.joda.time.ReadableInstant) dateTime76);
        mutablePeriod61.add((org.joda.time.ReadableInterval) interval84);
        boolean boolean86 = interval56.isBefore((org.joda.time.ReadableInterval) interval84);
        mutablePeriod29.setPeriod((org.joda.time.ReadableInterval) interval56);
        mutablePeriod29.setValue(0, 896);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(days63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(days69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = dateTimeField12.getAsText((-1L), locale14);
        long long19 = dateTimeField12.addWrapField((long) (short) 100, 1);
        int int21 = dateTimeField12.get(4320000001L);
        org.joda.time.DurationField durationField22 = dateTimeField12.getDurationField();
        long long25 = durationField22.getDifferenceAsLong(19353599515L, 1645514198763L);
        long long28 = durationField22.getMillis(2764800000L, 19045L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ja-JP" + "'", str15, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1100L + "'", long19 == 1100L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1626160599L) + "'", long25 == (-1626160599L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2764800000000L + "'", long28 == 2764800000000L);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        java.lang.String str8 = dateTimeZone6.getID();
        long long10 = dateTimeZone6.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1, dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone6);
        int int13 = dateTime4.getYear();
        org.joda.time.Period period15 = org.joda.time.Period.weeks(131);
        org.joda.time.DateTime dateTime17 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 2022);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.520" + "'", str8, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter5.getParser();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyear();
        int int20 = dateTimeField17.getDifference((long) 28, (long) 2147483647);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration36, periodType40);
        org.joda.time.LocalDate localDate42 = dateTime26.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        int int52 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime54 = dateTime48.plus((long) 22);
        org.joda.time.DateTime dateTime55 = dateTime54.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate56 = dateTime54.toLocalDate();
        org.joda.time.Days days57 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate56);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDate42, (int) (short) -1, locale59);
        java.lang.String str61 = locale59.getLanguage();
        org.joda.time.format.PeriodFormatter periodFormatter62 = periodFormatter5.withLocale(locale59);
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale59.getDisplayVariant(locale63);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-1" + "'", str60, "-1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ko" + "'", str61, "ko");
        org.junit.Assert.assertNotNull(periodFormatter62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.joda.time.Days days0 = org.joda.time.Days.SEVEN;
        org.joda.time.Days days2 = days0.minus(26217);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        mutablePeriod3.setDays((int) 'a');
        mutablePeriod3.addMinutes(0);
        mutablePeriod3.setSeconds((int) ' ');
        org.joda.time.Hours hours17 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours18 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours19 = hours17.plus(hours18);
        org.joda.time.Hours hours20 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours21 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours22 = hours20.plus(hours21);
        org.joda.time.Hours hours23 = hours18.minus(hours21);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) hours18);
        org.joda.time.Hours hours25 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours26 = org.joda.time.Hours.SEVEN;
        boolean boolean27 = hours25.isLessThan(hours26);
        org.joda.time.DurationFieldType durationFieldType28 = hours25.getFieldType();
        int int29 = hours25.getHours();
        boolean boolean30 = hours18.isGreaterThan(hours25);
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusMinutes((int) (byte) 0);
        mutablePeriod34.mergePeriod((org.joda.time.ReadablePeriod) period37);
        mutablePeriod34.setDays((int) 'a');
        mutablePeriod34.addMinutes(0);
        mutablePeriod34.setSeconds((int) ' ');
        org.joda.time.Hours hours48 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours49 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours50 = hours48.plus(hours49);
        org.joda.time.Hours hours51 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours52 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours53 = hours51.plus(hours52);
        org.joda.time.Hours hours54 = hours49.minus(hours52);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) hours49);
        org.joda.time.Hours hours56 = hours18.plus(hours49);
        java.lang.String str57 = hours18.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT4H" + "'", str57, "PT4H");
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Period period16 = period13.plusMinutes((int) (byte) 0);
        org.joda.time.Period period18 = period16.plusMonths((int) '4');
        org.joda.time.Seconds seconds19 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds21 = seconds19.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        int int23 = seconds21.get(durationFieldType22);
        org.joda.time.Period period25 = period18.withFieldAdded(durationFieldType22, 10);
        org.joda.time.Period period27 = period25.plusHours(26161);
        org.joda.time.DateTime dateTime29 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.Period period30 = period25.normalizedStandard();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds31 = period30.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.format.PeriodPrinter periodPrinter17 = null;
        org.joda.time.format.PeriodParser periodParser18 = null;
        org.joda.time.format.PeriodFormatter periodFormatter19 = new org.joda.time.format.PeriodFormatter(periodPrinter17, periodParser18);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter19.withLocale(locale20);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter19.withLocale(locale23);
        java.util.Locale locale26 = periodFormatter19.getLocale();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        org.joda.time.Period period37 = period34.plusMinutes((int) (byte) 0);
        mutablePeriod31.mergePeriod((org.joda.time.ReadablePeriod) period34);
        mutablePeriod31.addMonths((int) 'u');
        mutablePeriod31.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime47.dayOfWeek();
        org.joda.time.DateTime dateTime53 = dateTime47.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property54 = dateTime47.secondOfMinute();
        org.joda.time.Chronology chronology55 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.dayOfMonth();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology55);
        org.joda.time.DurationField durationField58 = chronology55.months();
        mutablePeriod31.setPeriod((long) 1814400, chronology55);
        org.joda.time.Period period60 = new org.joda.time.Period((java.lang.Object) locale26, periodType27, chronology55);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime67 = dateTime65.withSecondOfMinute(59);
        org.joda.time.format.PeriodPrinter periodPrinter68 = null;
        org.joda.time.format.PeriodParser periodParser69 = null;
        org.joda.time.format.PeriodFormatter periodFormatter70 = new org.joda.time.format.PeriodFormatter(periodPrinter68, periodParser69);
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter73 = periodFormatter70.withLocale(locale71);
        java.util.Calendar calendar74 = dateTime67.toCalendar(locale71);
        int int75 = dateTimeField61.getMaximumShortTextLength(locale71);
        // The following exception was thrown during execution in test generation
        try {
            long long76 = dateTimeField14.set(1645514217961L, "2022-02-22T07:16:07.732Z/2022-02-22T07:16:07.732Z", locale71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:16:07.732Z/2022-02-22T07:16:07.732Z\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr-FR" + "'", str24, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(periodFormatter73);
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645514278946,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=59,MILLISECOND=466,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime7 = dateTime3.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime9 = dateTime3.plusMillis(26160);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.minusWeeks(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType14 = period12.getFieldType(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = dateTime3.isSupported(dateTimeFieldType5);
        org.joda.time.Period period7 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property17 = dateTime10.secondOfMinute();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField20 = durationFieldType8.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime3.toMutableDateTime(chronology18);
        org.joda.time.DateTime dateTime24 = dateTime3.plusWeeks(55);
        boolean boolean25 = dateTime24.isAfterNow();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime9 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withWeekOfWeekyear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.plus(4320000001L);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) instant12);
        int int14 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration18 = duration16.minus((-78382080000000L));
        org.joda.time.Duration duration20 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        boolean boolean25 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration23);
        boolean boolean26 = duration18.isEqual((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DateTime dateTime34 = dateTime28.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property35 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime28.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Days days42 = org.joda.time.Days.daysIn(readableInterval41);
        org.joda.time.Duration duration43 = days42.toStandardDuration();
        org.joda.time.Duration duration44 = duration43.toDuration();
        org.joda.time.ReadableDuration readableDuration45 = null;
        boolean boolean46 = duration44.isLongerThan(readableDuration45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        boolean boolean53 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis((int) ' ');
        int int58 = dateTime55.getEra();
        org.joda.time.DateTime dateTime60 = dateTime55.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime62 = dateTime55.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval63 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateTime55.withChronology(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property67 = dateTime55.property(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = dateTime55.withYearOfEra((int) (byte) 100);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.halfdays();
        int int72 = periodType70.indexOf(durationFieldType71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime55, periodType70);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = dateTime75.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime80 = dateTime78.withSecondOfMinute(3);
        boolean boolean81 = dateTime55.equals((java.lang.Object) 3);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime55, periodType82);
        org.joda.time.Instant instant84 = instant12.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Instant instant86 = instant12.plus(1645514170000L);
        org.joda.time.Instant instant88 = instant12.plus(1645514239368L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 520 + "'", int14 == 520);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(instant88);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(7);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period(10L, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.DurationField durationField16 = chronology12.days();
        java.lang.String str17 = durationField16.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DurationField[days]" + "'", str17, "DurationField[days]");
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy((int) (byte) -1);
        org.joda.time.Period period9 = period7.plusMinutes((int) (byte) 10);
        org.joda.time.Period period11 = period7.minusWeeks(26161);
        int int12 = period7.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("Property[weekOfWeekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[weekOfWeekyear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = dateTimeField14.getAsShortText((int) (byte) -1, locale16);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField14.set(18160L, "2022-02-22T07:16:35.926Z/2022-02-22T07:16:35.926Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:16:35.926Z/2022-02-22T07:16:35.926Z\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime3.withSecondOfMinute(59);
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale9);
        java.util.Calendar calendar12 = dateTime5.toCalendar(locale9);
        org.joda.time.Instant instant13 = dateTime5.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime.Property property19 = dateTime15.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.DateTime dateTime25 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration23, (-1));
        org.joda.time.Duration duration27 = duration23.plus((-1L));
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) 52);
        org.joda.time.Duration duration30 = duration29.toDuration();
        int int31 = duration23.compareTo((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Instant instant33 = instant13.withDurationAdded((org.joda.time.ReadableDuration) duration23, (-123));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514278854,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=59,MILLISECOND=374,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(instant33);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 35435);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        int int45 = mutablePeriod43.getYears();
        int int46 = mutablePeriod43.getWeeks();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        boolean boolean4 = periodType1.isSupported(durationFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, periodType1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.Seconds seconds33 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds35 = seconds33.plus((int) (short) 10);
        org.joda.time.Seconds seconds37 = seconds35.minus(2022);
        long long40 = chronology30.add((org.joda.time.ReadablePeriod) seconds37, (long) 'a', 41);
        org.joda.time.DateTimeField dateTimeField41 = chronology30.clockhourOfDay();
        mutablePeriod18.setPeriod(471600005L, 596523L, chronology30);
        int int43 = mutablePeriod18.size();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-82409903L) + "'", long40 == (-82409903L));
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        int int9 = dateTime6.getEra();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime12 = dateTime4.plusHours(435);
        org.joda.time.DateTime.Property property13 = dateTime4.monthOfYear();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = property13.addToCopy(1645514261480L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1645514261480");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1, chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType45.getField(chronology58);
        long long68 = chronology58.getDateTimeMillis((long) 0, 4, 40, 0, 22);
        org.joda.time.DateTimeField dateTimeField69 = chronology58.clockhourOfHalfday();
        long long71 = dateTimeField69.remainder(1645514172000L);
        long long74 = dateTimeField69.addWrapField((long) 39, 2147483647);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 16799502L + "'", long68 == 16799502L);
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 972520L + "'", long71 == 972520L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 25200039L + "'", long74 == 25200039L);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = dateTimeField12.getAsText((-1L), locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property25 = dateTime18.secondOfMinute();
        org.joda.time.Chronology chronology26 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField28 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        org.joda.time.Chronology chronology39 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        int int49 = dateTime46.getEra();
        int int50 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears((int) '4');
        org.joda.time.DateTime.Property property55 = dateTime52.dayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime52.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property59 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime61 = dateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        long long65 = dateTimeZone62.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime46.toMutableDateTime(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime72 = dateTime68.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime66, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime75 = dateTime68.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay76 = dateTime75.toTimeOfDay();
        int[] intArray78 = chronology39.get((org.joda.time.ReadablePartial) timeOfDay76, (long) 1814400);
        long long80 = chronology26.set((org.joda.time.ReadablePartial) timeOfDay76, 2022L);
        int[] intArray81 = null;
        int int82 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay76, intArray81);
        java.lang.String str83 = dateTimeField12.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ja-JP" + "'", str15, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-519L) + "'", long65 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(intArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 30, 14, 920]");
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 26265202L + "'", long80 == 26265202L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "secondOfMinute" + "'", str83, "secondOfMinute");
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Instant instant4 = dateTime1.toInstant();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime20.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property27 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        long long33 = dateTimeZone30.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime14.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean42 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime44 = dateTime6.minusYears(56);
        org.joda.time.DateTime dateTime46 = dateTime6.minusMonths(92000);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        org.joda.time.Duration duration53 = duration50.toDuration();
        org.joda.time.ReadableInterval readableInterval54 = null;
        org.joda.time.Days days55 = org.joda.time.Days.daysIn(readableInterval54);
        org.joda.time.Duration duration56 = days55.toStandardDuration();
        org.joda.time.Duration duration57 = duration56.toDuration();
        org.joda.time.ReadableDuration readableDuration58 = null;
        boolean boolean59 = duration57.isLongerThan(readableDuration58);
        org.joda.time.Duration duration60 = duration57.toDuration();
        org.joda.time.Period period61 = duration57.toPeriod();
        int int62 = duration53.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTime dateTime64 = dateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration53, (-625));
        org.joda.time.Instant instant65 = instant4.minus((org.joda.time.ReadableDuration) duration53);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-519L) + "'", long33 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(instant65);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(1);
        int int2 = minutes1.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfWeek();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period13 = period10.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes14 = period10.toStandardMinutes();
        boolean boolean15 = dateTime4.equals((java.lang.Object) minutes14);
        boolean boolean16 = minutes1.isGreaterThan(minutes14);
        org.joda.time.Duration duration17 = minutes1.toStandardDuration();
        org.joda.time.Minutes minutes19 = minutes1.minus(37);
        java.lang.String str20 = minutes1.toString();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M" + "'", str20, "PT1M");
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        boolean boolean4 = periodType1.isSupported(durationFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, periodType1, chronology14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.Seconds seconds33 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds35 = seconds33.plus((int) (short) 10);
        org.joda.time.Seconds seconds37 = seconds35.minus(2022);
        long long40 = chronology30.add((org.joda.time.ReadablePeriod) seconds37, (long) 'a', 41);
        org.joda.time.DateTimeField dateTimeField41 = chronology30.clockhourOfDay();
        mutablePeriod18.setPeriod(471600005L, 596523L, chronology30);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.addSeconds(29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-82409903L) + "'", long40 == (-82409903L));
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.plus(4320000001L);
        int int6 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        boolean boolean11 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime3.withTime(3, 55, 2800, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2800 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.lang.Object obj6 = locale3.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "German" + "'", str2, "German");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Korean" + "'", str4, "Korean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "ko_KR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "ko_KR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "ko_KR");
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DurationField durationField15 = durationFieldType3.getField(chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, chronology17);
        int int19 = period18.getMillis();
        long long22 = chronology13.add((org.joda.time.ReadablePeriod) period18, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType2, chronology13);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = chronology13.getDateTimeMillis(92000, 54, 31, 14565858);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4100L + "'", long22 == 4100L);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.plus(4320000001L);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) instant12);
        int int14 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays(1814000L);
        boolean boolean30 = duration24.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Instant instant32 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration29, 896);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str34 = dateTimeFieldType33.getName();
        boolean boolean35 = instant12.isSupported(dateTimeFieldType33);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime38.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableDuration36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime50 = dateTime38.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Days days52 = org.joda.time.Days.daysIn(readableInterval51);
        org.joda.time.Duration duration53 = days52.toStandardDuration();
        org.joda.time.Duration duration54 = duration53.toDuration();
        org.joda.time.ReadableDuration readableDuration55 = null;
        boolean boolean56 = duration54.isLongerThan(readableDuration55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        boolean boolean63 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration54, periodType64);
        org.joda.time.Duration duration67 = duration54.plus((-2159999941L));
        org.joda.time.Duration duration68 = duration67.toDuration();
        org.joda.time.Duration duration69 = duration67.toDuration();
        org.joda.time.Instant instant70 = instant12.plus((org.joda.time.ReadableDuration) duration69);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 520 + "'", int14 == 520);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "clockhourOfDay" + "'", str34, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(instant70);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.ReadableDuration readableDuration2 = null;
        boolean boolean3 = duration1.isLongerThan(readableDuration2);
        long long4 = duration1.getMillis();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 180000L + "'", long4 == 180000L);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMillis((int) ' ');
        int int36 = dateTime33.getEra();
        int int37 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusYears((int) '4');
        org.joda.time.DateTime.Property property42 = dateTime39.dayOfWeek();
        org.joda.time.DateTime dateTime45 = dateTime39.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property46 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        long long52 = dateTimeZone49.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime33.toMutableDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime59 = dateTime55.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean61 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean62 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime63 = dateTime23.toLocalDateTime();
        boolean boolean64 = dateTimeZone13.isLocalDateTimeGap(localDateTime63);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = localDateTime63.getValue(112);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 112");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-519L) + "'", long52 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("TWN");
        java.util.Locale.Builder builder11 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("2022-02-22T07:16:24.943Z/2022-02-22T07:16:24.943Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:16:24.943Z/2022-02-22T07:16:24.943Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder7 = builder0.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setUnicodeLocaleKeyword("halfdayOfDay", "Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: halfdayOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime3.withSecondOfMinute(59);
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale9);
        java.util.Calendar calendar12 = dateTime5.toCalendar(locale9);
        org.joda.time.Instant instant13 = dateTime5.toInstant();
        boolean boolean15 = instant13.isEqual(1645514185113L);
        org.joda.time.Instant instant18 = instant13.withDurationAdded(6L, 105);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514279367,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=59,MILLISECOND=887,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.Chronology chronology46 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfMinute();
        int int51 = dateTimeField49.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = dateTimeField49.getAsText(readablePartial52, 3, locale54);
        int int56 = dateTimeField36.getMaximumTextLength(locale54);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayVariant(locale60);
        java.lang.String str63 = locale54.getDisplayCountry(locale57);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusYears((int) '4');
        org.joda.time.DateTime.Property property68 = dateTime65.dayOfWeek();
        org.joda.time.DateTime dateTime71 = dateTime65.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property72 = dateTime65.secondOfMinute();
        org.joda.time.Chronology chronology73 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.dayOfMonth();
        org.joda.time.DurationField durationField75 = chronology73.halfdays();
        org.joda.time.DurationField durationField76 = chronology73.minutes();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.millisOfDay();
        java.util.Locale locale80 = java.util.Locale.FRENCH;
        java.lang.String str81 = locale80.getISO3Language();
        long long82 = dateTimeField77.set(1645514198763L, "17", locale80);
        java.lang.String str83 = locale54.getDisplayCountry(locale80);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3" + "'", str55, "3");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "German" + "'", str59, "German");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Korean" + "'", str61, "Korean");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S\374dkorea" + "'", str63, "S\374dkorea");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fra" + "'", str81, "fra");
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645487999497L + "'", long82 == 1645487999497L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Cor\351e du Sud" + "'", str83, "Cor\351e du Sud");
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime16.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = dateTime38.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay46 = dateTime45.toTimeOfDay();
        int[] intArray48 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay46, (long) 1814400);
        org.joda.time.DurationField durationField49 = chronology9.months();
        long long52 = durationField49.add((long) 'a', 23);
        long long55 = durationField49.add(1645514189635L, (long) 20);
        long long57 = durationField49.getValueAsLong((long) 51026400);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-519L) + "'", long35 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 30, 14, 920]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 60393600097L + "'", long52 == 60393600097L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1697958989635L + "'", long55 == 1697958989635L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList19);
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap27);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
        org.joda.time.Duration duration5 = weeks4.toStandardDuration();
        long long6 = duration5.getStandardDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime17);
        int int21 = property5.getDifference((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime23.plusDays(10);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime23);
        mutablePeriod28.setYears(99);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1814400 + "'", int21 == 1814400);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Period period6 = period3.plusSeconds((int) (short) 1);
        org.joda.time.Days days7 = period6.toStandardDays();
        org.joda.time.Days days9 = days7.plus((int) (byte) 1);
        org.joda.time.Days days10 = days0.plus(days7);
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType12 = days7.getFieldType();
        org.joda.time.PeriodType periodType13 = days7.getPeriodType();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        boolean boolean14 = periodType2.equals((java.lang.Object) period9);
        org.joda.time.PeriodType periodType15 = periodType2.withHoursRemoved();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property25 = dateTime18.secondOfMinute();
        org.joda.time.Chronology chronology26 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField28 = durationFieldType16.getField(chronology26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 22, (long) (byte) -1, periodType15, chronology26);
        mutablePeriod29.add(1645514156241L);
        int int32 = mutablePeriod29.getMinutes();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 435 + "'", int32 == 435);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withLocale(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withLocale(locale7);
        boolean boolean10 = periodFormatter3.isParser();
        boolean boolean11 = periodFormatter3.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = org.joda.time.Period.parse("2022-02-22T07:17:17.595+00:00:00.520", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr-FR" + "'", str8, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(7);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period(10L, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime.Property property20 = dateTime16.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.DateTime dateTime26 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-1));
        boolean boolean28 = dateTime16.isAfter(0L);
        org.joda.time.LocalTime localTime29 = dateTime16.toLocalTime();
        int[] intArray31 = chronology13.get((org.joda.time.ReadablePartial) localTime29, 0L);
        org.joda.time.DurationField durationField32 = chronology13.halfdays();
        org.joda.time.DurationField durationField33 = durationFieldType0.getField(chronology13);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 520]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DurationFieldType[] durationFieldTypeArray33 = mutablePeriod32.getFieldTypes();
        mutablePeriod32.addDays((int) ' ');
        int int36 = mutablePeriod32.getHours();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-519L) + "'", long24 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(durationFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration3 = duration1.minus((-78382080000000L));
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Days days6 = org.joda.time.Days.daysIn(readableInterval5);
        org.joda.time.Duration duration7 = days6.toStandardDuration();
        org.joda.time.Duration duration8 = duration7.toDuration();
        org.joda.time.ReadableDuration readableDuration9 = null;
        boolean boolean10 = duration8.isLongerThan(readableDuration9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Days days12 = org.joda.time.Days.daysIn(readableInterval11);
        org.joda.time.Duration duration13 = days12.toStandardDuration();
        org.joda.time.Duration duration14 = duration13.toDuration();
        org.joda.time.ReadableDuration readableDuration15 = null;
        boolean boolean16 = duration14.isLongerThan(readableDuration15);
        boolean boolean17 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis((int) ' ');
        int int22 = dateTime19.getEra();
        org.joda.time.DateTime dateTime24 = dateTime19.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime26 = dateTime19.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval27 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period28 = duration8.toPeriod();
        long long29 = duration8.getStandardSeconds();
        org.joda.time.Instant instant31 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration8, 2022);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime36.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableDuration34, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime48 = dateTime36.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Days days50 = org.joda.time.Days.daysIn(readableInterval49);
        org.joda.time.Duration duration51 = days50.toStandardDuration();
        org.joda.time.Duration duration52 = duration51.toDuration();
        org.joda.time.ReadableDuration readableDuration53 = null;
        boolean boolean54 = duration52.isLongerThan(readableDuration53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.Days days56 = org.joda.time.Days.daysIn(readableInterval55);
        org.joda.time.Duration duration57 = days56.toStandardDuration();
        org.joda.time.Duration duration58 = duration57.toDuration();
        org.joda.time.ReadableDuration readableDuration59 = null;
        boolean boolean60 = duration58.isLongerThan(readableDuration59);
        boolean boolean61 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration52, periodType62);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1645514164648L, 1645514168245L, periodType62);
        org.joda.time.Period period65 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) instant31, periodType62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType67 = period65.getFieldType((-625));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("era");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"era\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Days days33 = org.joda.time.Days.daysIn(readableInterval32);
        org.joda.time.Duration duration34 = days33.toStandardDuration();
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.ReadableDuration readableDuration36 = null;
        boolean boolean37 = duration35.isLongerThan(readableDuration36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.Days days39 = org.joda.time.Days.daysIn(readableInterval38);
        org.joda.time.Duration duration40 = days39.toStandardDuration();
        org.joda.time.Duration duration41 = duration40.toDuration();
        org.joda.time.ReadableDuration readableDuration42 = null;
        boolean boolean43 = duration41.isLongerThan(readableDuration42);
        boolean boolean44 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        int int49 = dateTime46.getEra();
        org.joda.time.DateTime dateTime51 = dateTime46.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime53 = dateTime46.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval54 = duration35.toIntervalTo((org.joda.time.ReadableInstant) dateTime46);
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval54);
        boolean boolean56 = interval26.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval26.toPeriod(periodType57);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period68 = period65.plusMinutes((int) (byte) 0);
        mutablePeriod62.mergePeriod((org.joda.time.ReadablePeriod) period65);
        mutablePeriod62.setDays((int) 'a');
        org.joda.time.Period period72 = period58.withFields((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period75 = org.joda.time.Period.seconds(2147483647);
        boolean boolean76 = periodType73.equals((java.lang.Object) 2147483647);
        org.joda.time.Period period77 = period72.normalizedStandard(periodType73);
        int int78 = period77.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PT-54S");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "pt-54s" + "'", str3, "pt-54s");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "pt-54s" + "'", str4, "pt-54s");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        mutablePeriod3.addMonths((int) 'u');
        mutablePeriod3.addHours((int) (byte) -1);
        int int15 = mutablePeriod3.getMinutes();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        org.joda.time.Period period21 = period18.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes22 = period18.toStandardMinutes();
        org.joda.time.Minutes minutes24 = minutes22.multipliedBy(435);
        org.joda.time.Minutes minutes26 = minutes24.dividedBy(9);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) minutes24);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(4, 0, (int) (short) 1, (int) (short) -1, 1439, 26160, 1814400, (int) '#');
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weekyears();
        int int38 = mutablePeriod36.get(durationFieldType37);
        int int39 = mutablePeriod3.get(durationFieldType37);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime11.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime37 = dateTime33.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime31, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean39 = dateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTime dateTime41 = dateTime5.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfMonth();
        java.lang.String str45 = property44.toString();
        int int46 = property44.getMaximumValue();
        int int47 = property44.getMaximumValueOverall();
        org.joda.time.DateTime dateTime48 = property44.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime53.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property60 = dateTime53.minuteOfHour();
        org.joda.time.DateTime dateTime61 = dateTime53.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableDuration51, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime65 = dateTime53.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property74 = dateTime67.secondOfMinute();
        org.joda.time.Chronology chronology75 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.dayOfMonth();
        org.joda.time.DurationField durationField77 = chronology75.weeks();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology75.getZone();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.weekyear();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) dateTime65, chronology75);
        org.joda.time.DateTime dateTime81 = dateTime50.toDateTime(chronology75);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime41.toMutableDateTime(chronology75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime84 = dateTime41.withMonthOfYear(543);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 543 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-519L) + "'", long30 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[dayOfMonth]" + "'", str45, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 28 + "'", int46 == 28);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("2022-02-22T07:17:22.299+00:00:00.520/2022-02-22T07:17:22.299+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:17:22.299+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears(26173127);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusYears((int) '4');
        org.joda.time.DateTime.Property property20 = dateTime17.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property24 = dateTime17.secondOfMinute();
        org.joda.time.Chronology chronology25 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField27 = durationFieldType15.getField(chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, chronology29);
        int int31 = period30.getMillis();
        long long34 = chronology25.add((org.joda.time.ReadablePeriod) period30, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType14, chronology25);
        org.joda.time.DateTimeField dateTimeField36 = chronology25.minuteOfDay();
        org.joda.time.DateTime dateTime37 = dateTime11.toDateTime(chronology25);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime41.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        long long47 = dateTimeZone38.getMillisKeepLocal(dateTimeZone42, 1100L);
        boolean boolean48 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime49 = dateTime37.withZone(dateTimeZone42);
        int int50 = dateTime37.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4100L + "'", long34 == 4100L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1100L + "'", long47 == 1100L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 28 + "'", int50 == 28);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withEra((-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.MutablePeriod mutablePeriod7 = hours1.toMutablePeriod();
        mutablePeriod7.setMillis(2147483647);
        mutablePeriod7.clear();
        mutablePeriod7.setWeeks(280);
        mutablePeriod7.addMinutes(40);
        mutablePeriod7.addYears(2);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property23 = dateTime16.yearOfEra();
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList30);
        boolean boolean33 = dateTime16.equals((java.lang.Object) strList30);
        int int34 = dateTime16.getCenturyOfEra();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusSeconds((int) (short) 1);
        org.joda.time.Period period42 = period40.multipliedBy(100);
        org.joda.time.Period period44 = period42.withYears(92000);
        org.joda.time.Period period46 = period44.withYears(31);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusYears((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime49.dayOfWeek();
        org.joda.time.DateTime dateTime55 = dateTime49.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property56 = dateTime49.secondOfMinute();
        org.joda.time.Chronology chronology57 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfMonth();
        org.joda.time.DurationField durationField59 = durationFieldType47.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) period46, chronology57);
        org.joda.time.DateTime dateTime62 = dateTime16.plus((org.joda.time.ReadablePeriod) period46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime16.withMillisOfSecond(14565858);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14565858 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property6.setCopy("halfdayOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"halfdayOfDay\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        int int7 = property4.compareTo((org.joda.time.ReadableInstant) dateTime6);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("fr-FR");
        java.lang.String str10 = property4.getAsShortText(locale9);
        java.lang.String str11 = property4.getAsString();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Days days17 = org.joda.time.Days.daysIn(readableInterval16);
        org.joda.time.Duration duration18 = days17.toStandardDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration19.isLongerThan(readableDuration20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Days days23 = org.joda.time.Days.daysIn(readableInterval22);
        org.joda.time.Duration duration24 = days23.toStandardDuration();
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.ReadableDuration readableDuration26 = null;
        boolean boolean27 = duration25.isLongerThan(readableDuration26);
        boolean boolean28 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMillis((int) ' ');
        int int33 = dateTime30.getEra();
        org.joda.time.DateTime dateTime35 = dateTime30.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime37 = dateTime30.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval38 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        mutablePeriod15.add((org.joda.time.ReadableInterval) interval38);
        long long40 = interval38.getStartMillis();
        org.joda.time.Chronology chronology41 = interval38.getChronology();
        long long42 = interval38.getStartMillis();
        org.joda.time.Chronology chronology43 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusYears((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime46.dayOfWeek();
        org.joda.time.DateTime dateTime52 = dateTime46.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property53 = dateTime46.secondOfMinute();
        org.joda.time.Chronology chronology54 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.dayOfMonth();
        org.joda.time.DurationField durationField56 = chronology54.weeks();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.secondOfMinute();
        int int59 = dateTimeField57.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.lang.String str63 = dateTimeField57.getAsText(readablePartial60, 3, locale62);
        long long65 = dateTimeField57.roundHalfCeiling((long) 1814400);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime70 = dateTime67.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusYears((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime72.plusDays(10);
        org.joda.time.Days days77 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalTime localTime78 = dateTime70.toLocalTime();
        int int79 = dateTimeField57.getMaximumValue((org.joda.time.ReadablePartial) localTime78);
        int[] intArray81 = new int[] { (byte) -1 };
        int int82 = dateTimeField44.getMinimumValue((org.joda.time.ReadablePartial) localTime78, intArray81);
        org.joda.time.ReadablePartial readablePartial83 = null;
        java.util.Locale.Builder builder85 = new java.util.Locale.Builder();
        java.util.Locale locale86 = builder85.build();
        java.util.Locale locale87 = java.util.Locale.FRANCE;
        java.util.Locale.Builder builder88 = builder85.setLocale(locale87);
        java.lang.String str89 = dateTimeField44.getAsShortText(readablePartial83, 292278993, locale87);
        java.util.Locale locale91 = java.util.Locale.KOREAN;
        java.lang.String str92 = locale91.getDisplayName();
        java.lang.String str93 = dateTimeField44.getAsShortText(97, locale91);
        java.lang.String str94 = property4.getAsText(locale91);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mar." + "'", str10, "mar.");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2" + "'", str11, "2");
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514268222L + "'", long40 == 1645514268222L);
        org.junit.Assert.assertNotNull(chronology41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514268222L + "'", long42 == 1645514268222L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "3" + "'", str63, "3");
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1814480L + "'", long65 == 1814480L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(days77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 59 + "'", int79 == 59);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "292278993" + "'", str89, "292278993");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Korean" + "'", str92, "Korean");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "97" + "'", str93, "97");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\ud654\uc694\uc77c" + "'", str94, "\ud654\uc694\uc77c");
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.joda.time.Period period1 = new org.joda.time.Period(1645514180480L);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks4 = weeks2.minus(59);
        org.joda.time.Weeks weeks5 = weeks0.plus(weeks4);
        org.joda.time.Weeks weeks7 = weeks5.minus((int) (short) 1);
        org.joda.time.Weeks weeks9 = weeks5.dividedBy(23);
        org.joda.time.Weeks weeks11 = weeks9.minus((int) (short) 10);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        java.lang.String str3 = property2.toString();
        int int4 = property2.getMaximumValue();
        int int5 = property2.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfEra(436);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[dayOfMonth]" + "'", str3, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 28 + "'", int4 == 28);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long42 = chronology29.getDateTimeMillis((long) 2, 19, (int) (byte) 1, (int) (byte) -1, 26214);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks3 = weeks1.plus(0);
        org.joda.time.Weeks weeks5 = weeks3.minus(3);
        org.joda.time.Weeks weeks6 = weeks0.plus(weeks5);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks10 = weeks8.plus(0);
        org.joda.time.Weeks weeks12 = weeks10.minus(3);
        org.joda.time.Weeks weeks13 = weeks7.plus(weeks12);
        org.joda.time.Weeks weeks14 = weeks5.plus(weeks13);
        org.joda.time.Weeks weeks16 = weeks14.multipliedBy(37);
        org.joda.time.Weeks weeks18 = weeks14.multipliedBy(734);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("2022-02-22T07:16:53.103+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-22T07:16:53.103+00:00:00.520 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withField(dateTimeFieldType5, 436);
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours((-27425236));
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) ' ');
        int int23 = dateTime20.getEra();
        int int24 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        long long39 = dateTimeZone36.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime20.toMutableDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime40, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean48 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime50 = dateTime12.minusYears(56);
        org.joda.time.DateTime.Property property51 = dateTime50.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears((int) '4');
        org.joda.time.DateTime.Property property56 = dateTime53.dayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime53.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property60 = dateTime53.minuteOfHour();
        long long61 = property51.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.TimeOfDay timeOfDay62 = dateTime53.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears((int) '4');
        org.joda.time.DateTime.Property property67 = dateTime64.dayOfWeek();
        org.joda.time.DateTime dateTime70 = dateTime64.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime72 = dateTime70.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay73 = dateTime70.toTimeOfDay();
        org.joda.time.Minutes minutes74 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay62, (org.joda.time.ReadablePartial) timeOfDay73);
        org.joda.time.PeriodType periodType75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) timeOfDay73, periodType75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-519L) + "'", long39 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-672L) + "'", long61 == (-672L));
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(minutes74);
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        long long7 = property6.remainder();
        java.lang.String str8 = property6.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1069485L + "'", long7 == 1069485L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hourOfDay" + "'", str8, "hourOfDay");
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.joda.time.Duration duration3 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration5 = duration3.minus((-78382080000000L));
        org.joda.time.Duration duration7 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        boolean boolean12 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration10);
        boolean boolean13 = duration5.isEqual((org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.Days days23 = org.joda.time.Days.daysIn(readableInterval22);
        org.joda.time.Duration duration24 = days23.toStandardDuration();
        org.joda.time.Duration duration25 = duration24.toDuration();
        org.joda.time.ReadableDuration readableDuration26 = null;
        boolean boolean27 = duration25.isLongerThan(readableDuration26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Days days29 = org.joda.time.Days.daysIn(readableInterval28);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration31.isLongerThan(readableDuration32);
        boolean boolean34 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration31, periodType35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.Chronology chronology46 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 3, 16800022L, periodType35, chronology46);
        org.joda.time.Period period51 = duration5.toPeriod(chronology46);
        org.joda.time.Period period52 = new org.joda.time.Period(1645514211838L, (long) (-3), chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        int int55 = period52.get(durationFieldType54);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod1, periodType15);
        mutablePeriod1.addMinutes(2800);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = durationFieldType0.getField(chronology10);
        int int15 = durationField12.getValue((long) 100, (long) 28);
        long long16 = durationField12.getUnitMillis();
        long long19 = durationField12.add(1645514217961L, (long) 26203635);
        java.lang.String str20 = durationField12.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2265639578217961L + "'", long19 == 2265639578217961L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("centuries");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"centuries\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis((int) ' ');
        int int22 = dateTime19.getEra();
        int int23 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        long long38 = dateTimeZone35.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime19.toMutableDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime41.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean47 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean48 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime49 = dateTime9.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime49.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-519L) + "'", long38 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration27.isLongerThan(readableDuration28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        boolean boolean36 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval46 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration27.toDuration();
        org.joda.time.Duration duration49 = duration47.plus((-78382080000000L));
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Chronology chronology51 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        int int54 = dateTimeZone52.getStandardOffset((long) 36);
        int int56 = dateTimeZone52.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 520 + "'", int54 == 520);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 520 + "'", int56 == 520);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfWeek();
        java.lang.String str15 = dateTimeField13.getAsShortText((long) 663);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Thu" + "'", str15, "Thu");
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = periodFormatter2.getLocale();
        java.io.Writer writer7 = null;
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds10 = seconds8.plus((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer7, (org.joda.time.ReadablePeriod) seconds10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.Period period7 = duration3.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.DateTime dateTime19 = dateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration17, (-1));
        org.joda.time.DateTime dateTime21 = dateTime9.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.Duration duration34 = duration26.withDurationAdded(readableDuration31, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis((int) ' ');
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime.Property property40 = dateTime36.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Days days42 = org.joda.time.Days.daysIn(readableInterval41);
        org.joda.time.Duration duration43 = days42.toStandardDuration();
        org.joda.time.Duration duration44 = duration43.toDuration();
        org.joda.time.DateTime dateTime46 = dateTime36.withDurationAdded((org.joda.time.ReadableDuration) duration44, (-1));
        org.joda.time.DateTime dateTime48 = dateTime36.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) '4');
        org.joda.time.DateTime.Property property53 = dateTime50.dayOfWeek();
        org.joda.time.DateTime dateTime56 = dateTime50.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property57 = dateTime50.secondOfMinute();
        org.joda.time.Chronology chronology58 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DurationField durationField60 = chronology58.weeks();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.secondOfMinute();
        int int63 = dateTimeField61.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial64 = null;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.lang.String str67 = dateTimeField61.getAsText(readablePartial64, 3, locale66);
        int int68 = dateTime36.get(dateTimeField61);
        org.joda.time.DateTime dateTime70 = dateTime36.minusWeeks(40);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period72 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime70, periodType71);
        org.joda.time.Period period73 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime9, periodType71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType75 = periodType71.getFieldType(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "3" + "'", str67, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 49 + "'", int68 == 49);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        java.lang.Object obj5 = mutablePeriod1.clone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        int int19 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime15.toMutableDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime41 = dateTime37.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean43 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime45 = dateTime7.minusYears(56);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime(dateTimeZone48);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType52 = mutablePeriod1.getFieldType(1814400);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "P-52Y-1M-3WT-7H-17M-49.456S");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P-52Y-1M-3WT-7H-17M-49.456S");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P-52Y-1M-3WT-7H-17M-49.456S");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-519L) + "'", long34 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration9, (-1));
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime1.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime1.getZone();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone18);
        int int21 = dateTime20.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Seconds seconds14 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime12);
        int int15 = dateTime12.getYearOfCentury();
        org.joda.time.DateTime dateTime17 = dateTime12.plusSeconds((int) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds22 = seconds20.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = seconds22.get(durationFieldType23);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds26 = seconds22.minus(seconds25);
        org.joda.time.Seconds seconds28 = seconds26.minus(92000);
        org.joda.time.DateTime dateTime29 = dateTime17.minus((org.joda.time.ReadablePeriod) seconds26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime17.withMinuteOfHour(26214);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26214 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusMinutes((int) (byte) 0);
        org.joda.time.Period period7 = period5.plusMonths((int) '4');
        org.joda.time.Period period9 = period7.multipliedBy(40);
        org.joda.time.Period period10 = period7.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType12 = period7.getFieldType(589);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("2022-02-22T07:17:14.734+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:17:14.734+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours4 = hours2.plus((int) (short) 10);
        org.joda.time.Hours hours6 = hours2.minus(2022);
        org.joda.time.Hours hours8 = hours6.dividedBy(26173127);
        org.joda.time.Hours hours9 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours10 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours11 = hours9.plus(hours10);
        org.joda.time.Hours hours13 = hours10.minus(2022);
        org.joda.time.Hours hours14 = hours8.minus(hours13);
        org.joda.time.Hours hours16 = hours14.minus(8);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds2 = seconds0.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        int int4 = seconds2.get(durationFieldType3);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds6 = seconds2.minus(seconds5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds8 = seconds6.multipliedBy((-1645514220));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 3 * -1645514220");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-22T07:17:27.767+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:17:27.767+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration27.isLongerThan(readableDuration28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        boolean boolean36 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval46 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration27.toDuration();
        org.joda.time.Duration duration49 = duration47.plus((-78382080000000L));
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration51 = org.joda.time.Duration.ZERO;
        int int52 = duration49.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = duration49.withDurationAdded((-259200000L), (int) (short) 1);
        long long56 = duration55.getStandardDays();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-907203L) + "'", long56 == (-907203L));
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 31);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property25 = dateTime18.secondOfMinute();
        org.joda.time.Chronology chronology26 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField28 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.secondOfMinute();
        int int31 = dateTimeField29.getMinimumValue((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) ' ');
        int int40 = dateTime37.getEra();
        int int41 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime43.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property50 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime52.getZone();
        long long56 = dateTimeZone53.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime37.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime63 = dateTime59.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime57, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime66 = dateTime59.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay67 = dateTime66.toTimeOfDay();
        java.lang.Object obj68 = null;
        boolean boolean69 = timeOfDay67.equals(obj68);
        int int70 = timeOfDay67.size();
        int int71 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay67);
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale73.getScript();
        java.lang.String str77 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) timeOfDay67, 8, locale73);
        java.lang.String str78 = locale73.getDisplayVariant();
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str80 = locale79.getISO3Language();
        java.util.Set<java.lang.Character> charSet81 = locale79.getExtensionKeys();
        java.lang.String str82 = locale73.getDisplayVariant(locale79);
        java.lang.Object obj83 = locale73.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 978566400000L + "'", long16 == 978566400000L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-519L) + "'", long56 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "German" + "'", str75, "German");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "8" + "'", str77, "8");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "eng" + "'", str80, "eng");
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "de_DE");
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        int int25 = dateTime22.getEra();
        org.joda.time.DateTime dateTime27 = dateTime22.minusMinutes((int) (short) 1);
        int int28 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        long long30 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime31 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime32 = property5.roundCeilingCopy();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale33.getScript();
        java.lang.String str35 = locale33.getISO3Language();
        int int36 = property5.getMaximumShortTextLength(locale33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-519L) + "'", long20 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 520 + "'", int28 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "deu" + "'", str35, "deu");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) ' ');
        int int8 = dateTime5.getEra();
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime5.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property33 = dateTime27.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-519L) + "'", long24 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Period period6 = period3.plusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period6.multipliedBy(100);
        org.joda.time.Period period10 = period8.withYears(92000);
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) period8);
        java.lang.String str12 = seconds11.toString();
        org.joda.time.Seconds seconds13 = seconds0.plus(seconds11);
        org.joda.time.DurationFieldType durationFieldType14 = seconds11.getFieldType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT100S" + "'", str12, "PT100S");
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(durationFieldType14);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.joda.time.Chronology chronology5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(365, 120, (int) (short) 0, 24, 45, chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime4.withSecondOfMinute(59);
        java.lang.String str7 = dateTime4.toString();
        org.joda.time.LocalDate localDate8 = dateTime4.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = new org.joda.time.Period(readablePartial0, (org.joda.time.ReadablePartial) localDate8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:17:51.219+00:00:00.520" + "'", str7, "2022-02-22T07:17:51.219+00:00:00.520");
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setPeriod(92000, (int) '#', (-292275054), 92000, (int) (short) 100, 2, 3, 2147483647);
        mutablePeriod1.setWeeks(26203635);
        mutablePeriod1.setDays(0);
        org.joda.time.format.PeriodPrinter periodPrinter15 = null;
        org.joda.time.format.PeriodParser periodParser16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = new org.joda.time.format.PeriodFormatter(periodPrinter15, periodParser16);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter17.withLocale(locale18);
        boolean boolean21 = periodFormatter17.isPrinter();
        boolean boolean22 = periodFormatter17.isParser();
        boolean boolean23 = periodFormatter17.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = mutablePeriod1.toString(periodFormatter17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 100);
        org.joda.time.Period period3 = period1.withWeeks((int) 'u');
        org.joda.time.Period period5 = period1.minusDays((int) (byte) 100);
        int int6 = period5.getSeconds();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusMinutes((int) (byte) 0);
        mutablePeriod6.mergePeriod((org.joda.time.ReadablePeriod) period9);
        boolean boolean14 = periodType2.equals((java.lang.Object) period9);
        org.joda.time.PeriodType periodType15 = periodType2.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property26 = dateTime19.secondOfMinute();
        org.joda.time.Chronology chronology27 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology27);
        org.joda.time.DurationField durationField30 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.weekyear();
        org.joda.time.DurationField durationField32 = chronology27.weekyears();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) 100, 1814000L, periodType15, chronology27);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.PeriodType periodType36 = days35.getPeriodType();
        boolean boolean37 = mutablePeriod33.equals((java.lang.Object) periodType36);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod33.addHours(131);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("2022-02-22T07:16:00.629Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-22T07:16:00.629Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.joda.time.Period period4 = new org.joda.time.Period(729764, 33, 435, 520);
        int int5 = period4.getMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 520 + "'", int5 == 520);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(30240, 2147483647, (int) ' ', 26232, 734, 131, (int) (byte) 1, 92000);
        mutablePeriod8.setMonths(436);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyear();
        int int17 = dateTimeField14.getDifference((long) 28, (long) 2147483647);
        long long20 = dateTimeField14.addWrapField((long) (short) 0, 31);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.secondOfMinute();
        int int35 = dateTimeField33.getMinimumValue((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMillis((int) ' ');
        int int44 = dateTime41.getEra();
        int int45 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears((int) '4');
        org.joda.time.DateTime.Property property50 = dateTime47.dayOfWeek();
        org.joda.time.DateTime dateTime53 = dateTime47.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property54 = dateTime47.minuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime47.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        long long60 = dateTimeZone57.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime41.toMutableDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime67 = dateTime63.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime61, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime70 = dateTime63.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay71 = dateTime70.toTimeOfDay();
        java.lang.Object obj72 = null;
        boolean boolean73 = timeOfDay71.equals(obj72);
        int int74 = timeOfDay71.size();
        int int75 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay71);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.lang.String str80 = locale77.getScript();
        java.lang.String str81 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) timeOfDay71, 8, locale77);
        java.lang.String str82 = locale77.getDisplayVariant();
        java.util.Locale.setDefault(category2, locale77);
        java.util.Locale locale84 = java.util.Locale.getDefault(category2);
        java.lang.String str85 = locale0.getDisplayVariant(locale84);
        java.lang.String str86 = locale84.getCountry();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 978566400000L + "'", long20 == 978566400000L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-519L) + "'", long60 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "German" + "'", str79, "German");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "8" + "'", str81, "8");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "DE" + "'", str86, "DE");
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Period period6 = period3.plusSeconds((int) (short) 1);
        org.joda.time.Days days7 = period6.toStandardDays();
        org.joda.time.Days days9 = days7.plus((int) (byte) 1);
        org.joda.time.Days days10 = days0.plus(days7);
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.Period period12 = duration11.toPeriod();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period2.withDays(59);
        int int5 = period2.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((int) (short) 100);
        org.joda.time.Weeks weeks3 = weeks1.minus(59);
        org.joda.time.DurationFieldType durationFieldType4 = weeks3.getFieldType();
        int int5 = weeks3.size();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime1.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        int int11 = dateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime8.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = timeOfDay6.compareTo((org.joda.time.ReadablePartial) localDateTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes6 = period2.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy(435);
        org.joda.time.Minutes minutes10 = minutes8.dividedBy(9);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Period period16 = period13.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes17 = period13.toStandardMinutes();
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy(435);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean21 = minutes17.isGreaterThan(minutes20);
        org.joda.time.Minutes minutes23 = minutes20.plus(435);
        org.joda.time.MutablePeriod mutablePeriod24 = minutes20.toMutablePeriod();
        boolean boolean25 = minutes8.isGreaterThan(minutes20);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType27 = periodType26.withMillisRemoved();
        org.joda.time.PeriodType periodType28 = periodType26.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) minutes8, periodType28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType31 = mutablePeriod29.getFieldType(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder7 = builder0.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setRegion("seconds");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: seconds [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfMinute();
        java.lang.String str15 = dateTimeField14.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "secondOfMinute" + "'", str15, "secondOfMinute");
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean16 = dateTime13.isSupported(dateTimeFieldType14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = dateTime13.toString(dateTimeFormatter17);
        int int19 = dateTime13.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.521+00:00:00.520" + "'", str18, "1970-01-01T00:00:00.521+00:00:00.520");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.Chronology chronology5 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyear();
        org.joda.time.Hours hours7 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours8 = org.joda.time.Hours.SEVEN;
        boolean boolean9 = hours7.isLessThan(hours8);
        org.joda.time.Duration duration10 = hours7.toStandardDuration();
        org.joda.time.Hours hours12 = hours7.plus(7);
        org.joda.time.Hours hours13 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours14 = org.joda.time.Hours.SEVEN;
        boolean boolean15 = hours13.isLessThan(hours14);
        org.joda.time.Duration duration16 = hours13.toStandardDuration();
        org.joda.time.Hours hours17 = hours12.plus(hours13);
        org.joda.time.Hours hours18 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours19 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours20 = hours18.plus(hours19);
        org.joda.time.Hours hours21 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours22 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours23 = hours21.plus(hours22);
        org.joda.time.Hours hours24 = hours19.minus(hours22);
        org.joda.time.Hours hours26 = hours24.dividedBy((int) '4');
        org.joda.time.Hours hours28 = hours26.minus(1814400);
        org.joda.time.Hours hours29 = hours13.minus(hours28);
        long long32 = chronology5.add((org.joda.time.ReadablePeriod) hours29, 1645514189530L, 12);
        org.joda.time.Period period34 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Period period36 = period34.minus(readablePeriod35);
        org.joda.time.Hours hours37 = period36.toStandardHours();
        java.lang.String str38 = hours37.toString();
        org.joda.time.Hours hours40 = hours37.multipliedBy(2022);
        boolean boolean41 = hours29.isLessThan(hours37);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 80027766989530L + "'", long32 == 80027766989530L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0H" + "'", str38, "PT0H");
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Hours hours2 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = hours2.plus(hours3);
        org.joda.time.DurationFieldType durationFieldType5 = hours2.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1, chronology16);
        boolean boolean20 = durationFieldType5.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        boolean boolean22 = dateTimeFieldType0.isSupported(chronology16);
        org.joda.time.DurationField durationField23 = chronology16.months();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = durationField23.getMillis(1645514169346L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514169346 * 2629746000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(2022L, 1100L);
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime9.plus((long) 22);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        boolean boolean33 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) ' ');
        int int38 = dateTime35.getEra();
        org.joda.time.DateTime dateTime40 = dateTime35.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime42 = dateTime35.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval43 = duration24.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        mutablePeriod20.add((org.joda.time.ReadableInterval) interval43);
        mutablePeriod20.addYears((int) ' ');
        mutablePeriod20.setSeconds((int) (byte) 100);
        mutablePeriod20.setDays((int) (short) 100);
        int int51 = mutablePeriod20.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getRangeDurationType();
        boolean boolean54 = mutablePeriod20.isSupported(durationFieldType53);
        org.joda.time.DateTime dateTime55 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Period period56 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.Days days64 = org.joda.time.Days.daysIn(readableInterval63);
        org.joda.time.Duration duration65 = days64.toStandardDuration();
        org.joda.time.Duration duration66 = duration65.toDuration();
        org.joda.time.ReadableDuration readableDuration67 = null;
        boolean boolean68 = duration66.isLongerThan(readableDuration67);
        boolean boolean69 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMillis((int) ' ');
        int int74 = dateTime71.getEra();
        org.joda.time.DateTime dateTime76 = dateTime71.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime78 = dateTime71.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval79 = duration60.toIntervalTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration80 = duration2.minus((org.joda.time.ReadableDuration) duration60);
        java.lang.String str81 = duration2.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT-0.922S" + "'", str81, "PT-0.922S");
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        long long21 = dateTimeField19.roundCeiling(0L);
        int int23 = dateTimeField19.getMaximumValue(16800022L);
        long long25 = dateTimeField19.roundHalfFloor(1645514262566L);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31535999480L + "'", long21 == 31535999480L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 99 + "'", int23 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1640995199480L + "'", long25 == 1640995199480L);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime6.withMonthOfYear(65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Days days8 = org.joda.time.Days.daysIn(readableInterval7);
        org.joda.time.Duration duration9 = days8.toStandardDuration();
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.ReadableDuration readableDuration11 = null;
        boolean boolean12 = duration10.isLongerThan(readableDuration11);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration16.isLongerThan(readableDuration17);
        boolean boolean19 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis((int) ' ');
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime26 = dateTime21.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime28 = dateTime21.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval29 = duration10.toIntervalTo((org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval29);
        org.joda.time.MutableInterval mutableInterval31 = interval29.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusYears((int) '4');
        boolean boolean36 = interval29.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Days days42 = org.joda.time.Days.daysIn(readableInterval41);
        org.joda.time.Duration duration43 = days42.toStandardDuration();
        org.joda.time.Duration duration44 = duration43.toDuration();
        org.joda.time.ReadableDuration readableDuration45 = null;
        boolean boolean46 = duration44.isLongerThan(readableDuration45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.Days days48 = org.joda.time.Days.daysIn(readableInterval47);
        org.joda.time.Duration duration49 = days48.toStandardDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration50.isLongerThan(readableDuration51);
        boolean boolean53 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis((int) ' ');
        int int58 = dateTime55.getEra();
        org.joda.time.DateTime dateTime60 = dateTime55.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime62 = dateTime55.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval63 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime55);
        mutablePeriod40.add((org.joda.time.ReadableInterval) interval63);
        mutablePeriod40.addYears((int) ' ');
        mutablePeriod40.setSeconds((int) (byte) 100);
        mutablePeriod40.setDays((int) (short) 100);
        mutablePeriod40.add(0, (int) '4', (int) (byte) 10, 28, (int) '#', (int) (short) 0, 0, 28);
        org.joda.time.ReadableInterval readableInterval80 = null;
        org.joda.time.Days days81 = org.joda.time.Days.daysIn(readableInterval80);
        org.joda.time.Duration duration82 = days81.toStandardDuration();
        org.joda.time.Duration duration83 = duration82.toDuration();
        org.joda.time.ReadableDuration readableDuration84 = null;
        boolean boolean85 = duration83.isLongerThan(readableDuration84);
        org.joda.time.Duration duration86 = duration83.toDuration();
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Interval interval88 = duration83.toIntervalTo(readableInstant87);
        java.lang.String str89 = interval88.toString();
        mutablePeriod40.setPeriod((org.joda.time.ReadableInterval) interval88);
        boolean boolean91 = interval29.isBefore((org.joda.time.ReadableInterval) interval88);
        org.joda.time.MutableInterval mutableInterval92 = interval88.toMutableInterval();
        org.joda.time.Period period93 = interval88.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = periodFormatter2.print((org.joda.time.ReadablePeriod) period93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(days81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-22T07:17:53.412+00:00:00.520/2022-02-22T07:17:53.412+00:00:00.520" + "'", str89, "2022-02-22T07:17:53.412+00:00:00.520/2022-02-22T07:17:53.412+00:00:00.520");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(mutableInterval92);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        boolean boolean9 = periodFormatter2.isParser();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears((int) '4');
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableDuration12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = dateTime14.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration30, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1645514164648L, 1645514168245L, periodType40);
        org.joda.time.PeriodType periodType43 = periodType40.withMillisRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter2.withParseType(periodType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod46 = periodFormatter44.parseMutablePeriod("T07:17:03.994");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Days days17 = org.joda.time.Days.daysIn(readableInterval16);
        org.joda.time.Duration duration18 = days17.toStandardDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration19.isLongerThan(readableDuration20);
        boolean boolean22 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime29 = dateTime24.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime31 = dateTime24.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval32 = duration13.toIntervalTo((org.joda.time.ReadableInstant) dateTime24);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval32);
        mutablePeriod9.addYears((int) ' ');
        mutablePeriod9.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears((int) '4');
        org.joda.time.DateTime.Property property43 = dateTime40.dayOfWeek();
        org.joda.time.DateTime dateTime46 = dateTime40.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property47 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableDuration38, (org.joda.time.ReadableInstant) dateTime40);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod49.add(durationFieldType51, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears((int) '4');
        org.joda.time.DateTime.Property property59 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property63 = dateTime56.secondOfMinute();
        org.joda.time.Chronology chronology64 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology64.millis();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1, chronology64);
        org.joda.time.DurationField durationField68 = durationFieldType51.getField(chronology64);
        long long74 = chronology64.getDateTimeMillis((long) 0, 4, 40, 0, 22);
        org.joda.time.DateTimeField dateTimeField75 = chronology64.clockhourOfHalfday();
        org.joda.time.DurationField durationField76 = chronology64.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(0, 26, (-23375), 26214, 0, (-58), chronology64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26214 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField68);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 16799502L + "'", long74 == 16799502L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime2.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        long long15 = dateTimeZone12.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime22 = dateTime17.minusMinutes((int) (short) 1);
        int int23 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property24 = dateTime17.yearOfEra();
        boolean boolean25 = dateTimeZone0.equals((java.lang.Object) dateTime17);
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) 2022);
        long long30 = dateTimeZone0.convertLocalToUTC((long) 51026400, false);
        java.lang.String str31 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-519L) + "'", long15 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 520 + "'", int23 == 520);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 51025880L + "'", long30 == 51025880L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.520" + "'", str31, "+00:00:00.520");
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime2.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime36 = dateTime29.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval37 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime29.withChronology(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property41 = dateTime29.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = dateTime29.withYearOfEra((int) (byte) 100);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        int int46 = periodType44.indexOf(durationFieldType45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime29, periodType44);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period49 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime14, periodType48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period51 = period49.minusMonths(26217);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime2.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime11.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) ' ');
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime36 = dateTime29.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval37 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime29.withChronology(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property41 = dateTime29.property(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = dateTime29.withYearOfEra((int) (byte) 100);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        int int46 = periodType44.indexOf(durationFieldType45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime29, periodType44);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period49 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime14, periodType48);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod53 = period52.toMutablePeriod();
        org.joda.time.Period period55 = period52.plusSeconds((int) (short) 1);
        org.joda.time.Period period57 = period55.multipliedBy((int) (byte) -1);
        org.joda.time.Period period59 = period57.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime60 = dateTime14.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period62 = period57.plusDays(26232);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(period62);
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 7);
        long long2 = duration1.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 7L + "'", long2 == 7L);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 1);
        org.joda.time.Period period3 = period1.withYears((int) '#');
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableDuration4, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime18 = dateTime6.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) '4');
        org.joda.time.DateTime.Property property23 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime20.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property27 = dateTime20.secondOfMinute();
        org.joda.time.Chronology chronology28 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology28.weeks();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.weekyear();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) dateTime18, chronology28);
        int int34 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime18.withDurationAdded((-2764799903L), 26194);
        org.joda.time.Duration duration38 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.format.PeriodPrinter periodPrinter39 = null;
        org.joda.time.format.PeriodParser periodParser40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = new org.joda.time.format.PeriodFormatter(periodPrinter39, periodParser40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale42);
        org.joda.time.format.PeriodParser periodParser45 = periodFormatter44.getParser();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType47 = periodType46.withWeeksRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter48 = periodFormatter44.withParseType(periodType46);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        java.lang.String str51 = periodType50.toString();
        org.joda.time.PeriodType periodType52 = periodType50.withMinutesRemoved();
        org.joda.time.PeriodType periodType53 = periodType50.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter54 = periodFormatter44.withParseType(periodType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period55 = period3.withPeriodType(periodType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 26274 + "'", int34 == 26274);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNull(periodParser45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodFormatter48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PeriodType[Years]" + "'", str51, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodFormatter54);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(42);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.joda.time.format.PeriodPrinter periodPrinter8 = null;
        org.joda.time.format.PeriodParser periodParser9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = new org.joda.time.format.PeriodFormatter(periodPrinter8, periodParser9);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter10.withLocale(locale11);
        org.joda.time.format.PeriodParser periodParser14 = periodFormatter13.getParser();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withMonthsRemoved();
        org.joda.time.PeriodType periodType18 = periodType16.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter13.withParseType(periodType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(26, 365, 25, 9, 17, 26203635, 24, 50, periodType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(periodParser14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        mutablePeriod3.setSeconds((int) (short) 0);
        mutablePeriod3.addSeconds(112);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = mutablePeriod3.getValue(54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("ISOChronology[+00:00:00.520]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ISOChronology[+00:00:00.520] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.DurationFieldType durationFieldType3 = hours0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime6.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property13 = dateTime6.secondOfMinute();
        org.joda.time.Chronology chronology14 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology14);
        boolean boolean18 = durationFieldType3.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.year();
        java.lang.Class<?> wildcardClass20 = dateTimeField19.getClass();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Weeks weeks6 = period5.toStandardWeeks();
        int int7 = period5.getSeconds();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.ReadablePartial readablePartial11 = null;
        int[] intArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = dateTimeField10.set(readablePartial11, (-1), intArray13, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.Seconds seconds7 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds9 = seconds7.multipliedBy(1);
        boolean boolean10 = property5.equals((java.lang.Object) seconds7);
        org.joda.time.Seconds seconds12 = seconds7.plus(435);
        org.joda.time.Seconds seconds13 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds15 = seconds13.plus((int) (short) 10);
        org.joda.time.Seconds seconds17 = seconds15.minus(2022);
        org.joda.time.Seconds seconds18 = seconds7.plus(seconds15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) ' ');
        int int23 = dateTime20.getEra();
        org.joda.time.DateTime.Property property24 = dateTime20.secondOfMinute();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds28 = seconds26.multipliedBy(1);
        boolean boolean29 = property24.equals((java.lang.Object) seconds26);
        org.joda.time.Seconds seconds31 = seconds26.plus(435);
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds34 = seconds32.plus((int) (short) 10);
        org.joda.time.Seconds seconds36 = seconds34.minus(2022);
        org.joda.time.Seconds seconds37 = seconds26.plus(seconds34);
        org.joda.time.DurationFieldType durationFieldType38 = seconds34.getFieldType();
        boolean boolean39 = seconds7.isLessThan(seconds34);
        org.joda.time.Seconds seconds40 = seconds7.negated();
        org.joda.time.Seconds seconds42 = seconds7.minus((-2483));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(seconds42);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        int int15 = dateTimeField13.getMaximumValue((long) 'a');
        java.lang.String str17 = dateTimeField13.getAsShortText((-863997978L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dec" + "'", str17, "Dec");
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology29.era();
        org.joda.time.Hours hours38 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours39 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours40 = hours38.plus(hours39);
        org.joda.time.DurationFieldType durationFieldType41 = hours38.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusYears((int) '4');
        org.joda.time.DateTime.Property property47 = dateTime44.dayOfWeek();
        org.joda.time.DateTime dateTime50 = dateTime44.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property51 = dateTime44.secondOfMinute();
        org.joda.time.Chronology chronology52 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfMonth();
        org.joda.time.DurationField durationField54 = chronology52.millis();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1, chronology52);
        boolean boolean56 = durationFieldType41.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.weekyearOfCentury();
        long long59 = dateTimeField57.roundCeiling(0L);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.lang.String str62 = locale61.toLanguageTag();
        java.lang.String str63 = locale61.getDisplayScript();
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str65 = locale61.getDisplayLanguage(locale64);
        java.lang.String str66 = locale64.getDisplayName();
        java.lang.String str67 = dateTimeField57.getAsText(1645514172480L, locale64);
        int int68 = dateTimeField37.getMaximumTextLength(locale64);
        java.lang.String str69 = locale64.getDisplayLanguage();
        java.lang.String str70 = locale64.getDisplayName();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 31535999480L + "'", long59 == 31535999480L);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fr-FR" + "'", str62, "fr-FR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "French" + "'", str65, "French");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English (United States)" + "'", str66, "English (United States)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "22" + "'", str67, "22");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English" + "'", str69, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English (United States)" + "'", str70, "English (United States)");
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.Days days4 = org.joda.time.Days.daysIn(readableInterval3);
        org.joda.time.Duration duration5 = days4.toStandardDuration();
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration6.isLongerThan(readableDuration7);
        org.joda.time.Duration duration10 = duration2.withDurationAdded(readableDuration7, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) ' ');
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime.Property property16 = dateTime12.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.Days days18 = org.joda.time.Days.daysIn(readableInterval17);
        org.joda.time.Duration duration19 = days18.toStandardDuration();
        org.joda.time.Duration duration20 = duration19.toDuration();
        org.joda.time.DateTime dateTime22 = dateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration20, (-1));
        org.joda.time.DateTime dateTime24 = dateTime12.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) '4');
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property33 = dateTime26.secondOfMinute();
        org.joda.time.Chronology chronology34 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology34.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.secondOfMinute();
        int int39 = dateTimeField37.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial40 = null;
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = dateTimeField37.getAsText(readablePartial40, 3, locale42);
        int int44 = dateTime12.get(dateTimeField37);
        org.joda.time.DateTime dateTime46 = dateTime12.minusWeeks(40);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period48 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46, periodType47);
        org.joda.time.LocalTime localTime49 = dateTime46.toLocalTime();
        int int50 = localTime49.size();
        java.lang.Class<?> wildcardClass51 = localTime49.getClass();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "3" + "'", str43, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 54 + "'", int44 == 54);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes6 = period2.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy(435);
        org.joda.time.Minutes minutes10 = minutes8.dividedBy(9);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Period period16 = period13.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes17 = period13.toStandardMinutes();
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy(435);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean21 = minutes17.isGreaterThan(minutes20);
        org.joda.time.Minutes minutes23 = minutes20.plus(435);
        org.joda.time.MutablePeriod mutablePeriod24 = minutes20.toMutablePeriod();
        boolean boolean25 = minutes8.isGreaterThan(minutes20);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType27 = periodType26.withMillisRemoved();
        org.joda.time.PeriodType periodType28 = periodType26.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) minutes8, periodType28);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod29.addMinutes(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("P24Y56M22W26161DT1H-2022M40.056S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'P24Y56M22W26161DT1H-2022M40.056S' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        long long6 = duration3.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8, periodType17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        org.joda.time.Days days22 = days20.plus((-1));
        int int23 = days20.getDays();
        org.joda.time.PeriodType periodType24 = days20.getPeriodType();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.Period period26 = duration3.toPeriod(periodType24);
        org.joda.time.Period period27 = period26.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = period26.minusYears(53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Days" + "'", str25, "Days");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 86399);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str30 = dateTimeZone28.getID();
        long long32 = dateTimeZone28.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1, dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime26.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) '4');
        org.joda.time.DateTime.Property property39 = dateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property43 = dateTime36.secondOfMinute();
        org.joda.time.Chronology chronology44 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfMonth();
        org.joda.time.DurationField durationField46 = chronology44.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = dateTimeField47.getAsText((-1L), locale49);
        long long54 = dateTimeField47.addWrapField((long) (short) 100, 1);
        int int55 = mutableDateTime34.get(dateTimeField47);
        org.joda.time.DateTime dateTime56 = localDate21.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMillis((int) ' ');
        int int61 = dateTime58.getEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime65 = dateTime58.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime66 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime72 = dateTime69.withLaterOffsetAtOverlap();
        org.joda.time.ReadableInterval readableInterval73 = null;
        org.joda.time.Days days74 = org.joda.time.Days.daysIn(readableInterval73);
        org.joda.time.Duration duration75 = days74.toStandardDuration();
        org.joda.time.Duration duration76 = duration75.toDuration();
        org.joda.time.ReadableDuration readableDuration77 = null;
        boolean boolean78 = duration76.isLongerThan(readableDuration77);
        org.joda.time.ReadableInterval readableInterval79 = null;
        org.joda.time.Days days80 = org.joda.time.Days.daysIn(readableInterval79);
        org.joda.time.Duration duration81 = days80.toStandardDuration();
        org.joda.time.Duration duration82 = duration81.toDuration();
        org.joda.time.ReadableDuration readableDuration83 = null;
        boolean boolean84 = duration82.isLongerThan(readableDuration83);
        boolean boolean85 = duration76.isShorterThan((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration87 = org.joda.time.Duration.standardDays(1814000L);
        boolean boolean88 = duration82.isEqual((org.joda.time.ReadableDuration) duration87);
        org.joda.time.DateTime dateTime89 = dateTime72.minus((org.joda.time.ReadableDuration) duration87);
        org.joda.time.DateTime.Property property90 = dateTime72.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval91 = duration67.toIntervalFrom((org.joda.time.ReadableInstant) dateTime72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.520" + "'", str30, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja-JP" + "'", str50, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1100L + "'", long54 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 54 + "'", int55 == 54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        int int30 = dateTime27.getEra();
        int int31 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime33 = dateTime27.plus((long) 22);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate35 = dateTime33.toLocalDate();
        org.joda.time.Days days36 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = localDate35.getField(663);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 663");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(days36);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.LocalDate localDate21 = dateTime5.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis((int) ' ');
        int int30 = dateTime27.getEra();
        int int31 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime33 = dateTime27.plus((long) 22);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate35 = dateTime33.toLocalDate();
        org.joda.time.Days days36 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.minuteOfDay();
        int int46 = property45.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property55 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime48.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime57.getZone();
        long long61 = dateTimeZone58.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMillis((int) ' ');
        int int66 = dateTime63.getEra();
        org.joda.time.DateTime dateTime68 = dateTime63.minusMinutes((int) (short) 1);
        int int69 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime63.getZone();
        int int71 = property45.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.minusMillis((int) ' ');
        int int76 = dateTime73.getEra();
        org.joda.time.DateTime dateTime78 = dateTime73.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime80 = dateTime73.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime81 = dateTime80.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime83 = dateTime81.minusMillis((int) 'u');
        boolean boolean84 = dateTime63.isEqual((org.joda.time.ReadableInstant) dateTime83);
        int int85 = dateTime63.getDayOfWeek();
        org.joda.time.DateTime dateTime86 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property87 = dateTime86.centuryOfEra();
        boolean boolean88 = localDate21.equals((java.lang.Object) dateTime86);
        long long89 = dateTime86.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-519L) + "'", long61 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 520 + "'", int69 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1645487999480L + "'", long89 == 1645487999480L);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        java.lang.String str1 = seconds0.toString();
        java.lang.String str2 = seconds0.toString();
        int int3 = seconds0.getSeconds();
        org.joda.time.PeriodType periodType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period5 = new org.joda.time.Period((java.lang.Object) int3, periodType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT2147483647S" + "'", str1, "PT2147483647S");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT2147483647S" + "'", str2, "PT2147483647S");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
        org.joda.time.Hours hours5 = weeks4.toStandardHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(hours5);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        int int28 = mutablePeriod3.getMinutes();
        mutablePeriod3.addHours(0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 31);
        long long19 = dateTimeField10.getDifferenceAsLong((long) (byte) 1, (long) 943);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.util.Locale.setDefault(locale22);
        java.lang.String str26 = dateTimeField10.getAsShortText((long) 2, locale22);
        java.lang.String str27 = locale22.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 978566400000L + "'", long16 == 978566400000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plusMillis(26160);
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.LocalTime localTime10 = dateTime2.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime16.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = dateTime38.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay46 = dateTime45.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) '4');
        org.joda.time.DateTime.Property property51 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property55 = dateTime48.secondOfMinute();
        org.joda.time.Chronology chronology56 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMillis((int) ' ');
        int int66 = dateTime63.getEra();
        int int67 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime75 = dateTime69.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property76 = dateTime69.minuteOfHour();
        org.joda.time.DateTime dateTime78 = dateTime69.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime78.getZone();
        long long82 = dateTimeZone79.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime63.toMutableDateTime(dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime89 = dateTime85.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime83, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime92 = dateTime85.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay93 = dateTime92.toTimeOfDay();
        int[] intArray95 = chronology56.get((org.joda.time.ReadablePartial) timeOfDay93, (long) 1814400);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay46, (org.joda.time.ReadablePartial) timeOfDay93);
        java.lang.String str97 = timeOfDay93.toString();
        org.joda.time.Days days98 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localTime10, (org.joda.time.ReadablePartial) timeOfDay93);
        org.joda.time.Chronology chronology99 = localTime10.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-519L) + "'", long35 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-519L) + "'", long82 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(timeOfDay93);
        org.junit.Assert.assertNotNull(intArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 30, 14, 920]");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "T07:17:55.388" + "'", str97, "T07:17:55.388");
        org.junit.Assert.assertNotNull(days98);
        org.junit.Assert.assertNotNull(chronology99);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setExtension('#', "2022-02-22T07:16:51.060+00:00:00.520/2022-02-22T07:16:51.060+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, (int) 'a', 0, 42, 0, 0, 943);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property41 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration32, (org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        mutablePeriod43.add(durationFieldType45, (int) (short) 100);
        mutablePeriod43.addSeconds((int) '#');
        org.joda.time.DurationFieldType durationFieldType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod43.set(durationFieldType50, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale9 = periodFormatter2.getLocale();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        org.joda.time.Duration duration22 = days21.toStandardDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.ReadableDuration readableDuration24 = null;
        boolean boolean25 = duration23.isLongerThan(readableDuration24);
        boolean boolean26 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMillis((int) ' ');
        int int31 = dateTime28.getEra();
        org.joda.time.DateTime dateTime33 = dateTime28.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime35 = dateTime28.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval36 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod13.add((org.joda.time.ReadableInterval) interval36);
        long long38 = interval36.getStartMillis();
        org.joda.time.Chronology chronology39 = interval36.getChronology();
        long long40 = interval36.getStartMillis();
        org.joda.time.Chronology chronology41 = interval36.getChronology();
        org.joda.time.Days days42 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        org.joda.time.Period period48 = period45.plusSeconds((int) (short) 1);
        org.joda.time.Days days49 = period48.toStandardDays();
        boolean boolean50 = days42.isGreaterThan(days49);
        boolean boolean51 = interval36.equals((java.lang.Object) days49);
        org.joda.time.MutablePeriod mutablePeriod52 = days49.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = periodFormatter2.print((org.joda.time.ReadablePeriod) days49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514275279L + "'", long38 == 1645514275279L);
        org.junit.Assert.assertNotNull(chronology39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514275279L + "'", long40 == 1645514275279L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(days49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutablePeriod52);
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTime();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 55);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.months();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) instant9, periodType10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.TWO;
        int int13 = minutes12.getMinutes();
        org.joda.time.Minutes minutes14 = minutes12.negated();
        org.joda.time.PeriodType periodType15 = minutes14.getPeriodType();
        boolean boolean16 = mutablePeriod11.equals((java.lang.Object) minutes14);
        org.joda.time.Period period18 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period19 = period18.toPeriod();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology30 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = durationFieldType20.getField(chronology30);
        org.joda.time.Period period34 = period19.withFieldAdded(durationFieldType20, 1814400);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.set(durationFieldType20, 33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.io.Writer writer7 = null;
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod9 = seconds8.toMutablePeriod();
        mutablePeriod9.setMonths((int) (short) 100);
        int int12 = mutablePeriod9.getYears();
        int int13 = mutablePeriod9.getYears();
        mutablePeriod9.setPeriod((long) 2022);
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        org.joda.time.Period period25 = period22.plusMinutes((int) (byte) 0);
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) period22);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) period22);
        mutablePeriod9.setMonths(40);
        int int30 = mutablePeriod9.getSeconds();
        mutablePeriod9.addMillis(26199270);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer7, (org.joda.time.ReadablePeriod) mutablePeriod9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours4 = hours2.plus((int) (short) 10);
        org.joda.time.Period period5 = hours2.toPeriod();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime14.withChronology(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property26 = dateTime14.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = dateTime14.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(37);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime7 = dateTime3.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration11.isLongerThan(readableDuration12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        boolean boolean20 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration17, periodType21);
        org.joda.time.PeriodType periodType23 = periodType21.withMinutesRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Days days29 = org.joda.time.Days.daysIn(readableInterval28);
        org.joda.time.Duration duration30 = days29.toStandardDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        org.joda.time.ReadableDuration readableDuration32 = null;
        boolean boolean33 = duration31.isLongerThan(readableDuration32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.Days days35 = org.joda.time.Days.daysIn(readableInterval34);
        org.joda.time.Duration duration36 = days35.toStandardDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration37.isLongerThan(readableDuration38);
        boolean boolean40 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) ' ');
        int int45 = dateTime42.getEra();
        org.joda.time.DateTime dateTime47 = dateTime42.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime49 = dateTime42.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval50 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime42);
        mutablePeriod27.add((org.joda.time.ReadableInterval) interval50);
        long long52 = interval50.getStartMillis();
        org.joda.time.Chronology chronology53 = interval50.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(32L, (long) 9, periodType21, chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.hourOfHalfday();
        java.lang.String str58 = dateTimeField56.getAsText(1645514168760L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514275648L + "'", long52 == 1645514275648L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "7" + "'", str58, "7");
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime21 = dateTime16.minusMinutes((int) (short) 1);
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Days days25 = org.joda.time.Days.daysIn(readableInterval24);
        org.joda.time.Duration duration26 = days25.toStandardDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration27.isLongerThan(readableDuration28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Days days31 = org.joda.time.Days.daysIn(readableInterval30);
        org.joda.time.Duration duration32 = days31.toStandardDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.ReadableDuration readableDuration34 = null;
        boolean boolean35 = duration33.isLongerThan(readableDuration34);
        boolean boolean36 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        int int41 = dateTime38.getEra();
        org.joda.time.DateTime dateTime43 = dateTime38.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime45 = dateTime38.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval46 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration27.toDuration();
        org.joda.time.Duration duration49 = duration47.plus((-78382080000000L));
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant51 = dateTime16.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-519L) + "'", long14 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 520 + "'", int22 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant51);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime20 = dateTime15.minusMinutes((int) (short) 1);
        org.joda.time.Days days21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime13.withDayOfMonth(33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(days21);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.Period period17 = new org.joda.time.Period(596523L, 2022L, chronology13);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period17);
        java.lang.String str19 = minutes18.toString();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT-9M" + "'", str19, "PT-9M");
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(738938L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(7);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period(10L, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField14.set(0L, "2022-02-22T07:17:47.185+00:00:00.520/2022-02-22T07:17:47.185+00:00:00.520", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:17:47.185+00:00:00.520/2022-02-22T07:17:47.185+00:00:00.520\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        int int14 = dateTimeField12.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = dateTimeField12.getAsText(readablePartial15, 3, locale17);
        long long20 = dateTimeField12.roundHalfCeiling((long) 1814400);
        int int23 = dateTimeField12.getDifference((long) 4, 1645514220229L);
        long long25 = dateTimeField12.roundHalfCeiling(1721632596884L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "3" + "'", str18, "3");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1814480L + "'", long20 == 1814480L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1645514220) + "'", int23 == (-1645514220));
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1721632596480L + "'", long25 == 1721632596480L);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        long long14 = dateTimeField12.roundCeiling(1645514171862L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField12.getType();
        long long18 = dateTimeField12.add(1645514152287L, 8);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514172480L + "'", long14 == 1645514172480L);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514160287L + "'", long18 == 1645514160287L);
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str1 = dateTimeFieldType0.getName();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "centuryOfEra" + "'", str1, "centuryOfEra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "centuryOfEra" + "'", str2, "centuryOfEra");
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-22T07:17:14.622+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:17:14.622+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime6.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514276480L + "'", long7 == 1645514276480L);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        boolean boolean6 = dateTimeZone4.isStandardOffset(0L);
        int int8 = dateTimeZone4.getStandardOffset((long) 999);
        java.util.TimeZone timeZone9 = dateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 520 + "'", int8 == 520);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfDay();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property18 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long24 = dateTimeZone21.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMillis((int) ' ');
        int int29 = dateTime26.getEra();
        org.joda.time.DateTime dateTime31 = dateTime26.minusMinutes((int) (short) 1);
        int int32 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime26.getZone();
        int int34 = property8.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis((int) ' ');
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime dateTime41 = dateTime36.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime36.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) 'u');
        boolean boolean47 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod53 = period52.toMutablePeriod();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        org.joda.time.Period period59 = period56.plusMinutes((int) (byte) 0);
        mutablePeriod53.mergePeriod((org.joda.time.ReadablePeriod) period56);
        mutablePeriod53.addMonths((int) 'u');
        mutablePeriod53.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusYears((int) '4');
        org.joda.time.DateTime.Property property72 = dateTime69.dayOfWeek();
        org.joda.time.DateTime dateTime75 = dateTime69.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property76 = dateTime69.secondOfMinute();
        org.joda.time.Chronology chronology77 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.dayOfMonth();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology77);
        org.joda.time.DurationField durationField80 = chronology77.months();
        mutablePeriod53.setPeriod((long) 1814400, chronology77);
        org.joda.time.DurationField durationField82 = chronology77.months();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(87350400000L, periodType49, chronology77);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology77);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone89 = dateTime88.getZone();
        boolean boolean91 = dateTimeZone89.isStandardOffset(0L);
        boolean boolean93 = dateTimeZone89.isStandardOffset((long) (byte) -1);
        org.joda.time.Chronology chronology94 = chronology77.withZone(dateTimeZone89);
        org.joda.time.DateTime dateTime95 = dateTime46.withZone(dateTimeZone89);
        org.joda.time.DateTime dateTime97 = dateTime95.minusDays(366);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-519L) + "'", long24 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 520 + "'", int32 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.joda.time.Period period2 = new org.joda.time.Period(1645514173148L, 26159942L);
        org.joda.time.Period period4 = period2.withSeconds(59);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime9.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean37 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime39 = dateTime1.minusYears(56);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime41 = property40.roundHalfFloorCopy();
        java.lang.String str42 = property40.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property40.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = property40.setCopy(52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-519L) + "'", long28 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[monthOfYear]" + "'", str42, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime1.plusDays(10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1, chronology16);
        org.joda.time.DateTime dateTime20 = dateTime1.withChronology(chronology16);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear(59);
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        org.joda.time.Period period1 = org.joda.time.Period.millis(26223);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.joda.time.Period period2 = new org.joda.time.Period(1645512144856L, 1645514170834L);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes6 = period2.toStandardMinutes();
        org.joda.time.Minutes minutes8 = minutes6.multipliedBy(435);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean10 = minutes6.isGreaterThan(minutes9);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Period period16 = period13.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes17 = period13.toStandardMinutes();
        org.joda.time.Minutes minutes19 = minutes17.multipliedBy(435);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean21 = minutes17.isGreaterThan(minutes20);
        int int22 = minutes20.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes23 = minutes6.minus(minutes20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(42);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime9.minusWeeks(22);
        int int15 = dateTime9.getMinuteOfHour();
        int int16 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime9.plusMillis((-3));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 17 + "'", int15 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 57 + "'", int16 == 57);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusSeconds((int) (short) 1);
        org.joda.time.Days days18 = period17.toStandardDays();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.Days days20 = org.joda.time.Days.daysIn(readableInterval19);
        java.lang.String str21 = days20.toString();
        boolean boolean22 = days18.isGreaterThan(days20);
        long long25 = chronology9.add((org.joda.time.ReadablePeriod) days20, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField26 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology9.weekyears();
        long long29 = durationField27.getMillis((-3));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "P0D" + "'", str21, "P0D");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-94670856000L) + "'", long29 == (-94670856000L));
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("T07:16:55.300");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t07:16:55.300");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField14 = dateTimeField13.getLeapDurationField();
        long long17 = dateTimeField13.add(1645514204028L, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField13.set(0L, 26198);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26198 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514204028L + "'", long17 == 1645514204028L);
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours1 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours3 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours4 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours5 = hours3.plus(hours4);
        org.joda.time.Hours hours6 = hours1.minus(hours4);
        org.joda.time.MutablePeriod mutablePeriod7 = hours1.toMutablePeriod();
        mutablePeriod7.setMillis(2147483647);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weekyears();
        mutablePeriod7.set(durationFieldType10, 0);
        mutablePeriod7.setPeriod((long) (byte) 1, (long) 51026400);
        mutablePeriod7.add((long) 30240);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.joda.time.Period period4 = new org.joda.time.Period(729764, 33, 435, 520);
        org.joda.time.Period period6 = period4.withHours((int) 'a');
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("2022-02-22T07:16:03.232Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:16:03.232Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(26203635, 26216, 0, 26257876, 29, 26217);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26257876 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        long long28 = interval26.getStartMillis();
        org.joda.time.Chronology chronology29 = interval26.getChronology();
        long long30 = interval26.getStartMillis();
        org.joda.time.Chronology chronology31 = interval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        org.joda.time.DurationField durationField33 = chronology31.weeks();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray36 = chronology31.get(readablePeriod34, 1645514269919L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514277616L + "'", long28 == 1645514277616L);
        org.junit.Assert.assertNotNull(chronology29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514277616L + "'", long30 == 1645514277616L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        mutablePeriod13.addHours(28);
        mutablePeriod13.addMinutes(5);
        int int18 = mutablePeriod13.getMinutes();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        int int16 = dateTimeZone14.getOffsetFromLocal((-863997978L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        int int20 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 520 + "'", int16 == 520);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 520 + "'", int20 == 520);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        long long14 = dateTimeField12.roundHalfFloor(86400000L);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField12.set(2265639578217961L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod1, periodType15);
        org.joda.time.format.PeriodFormatter periodFormatter17 = null;
        java.lang.String str18 = mutablePeriod1.toString(periodFormatter17);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0S" + "'", str18, "PT0S");
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.DateTime.Property property5 = dateTime3.centuryOfEra();
        int int6 = property5.get();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = property5.getAsText(locale7);
        int int11 = property5.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property5.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "20" + "'", str10, "20");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        java.lang.String str1 = days0.toString();
        boolean boolean3 = days0.equals((java.lang.Object) 97);
        org.joda.time.Days days5 = days0.plus(25);
        org.joda.time.Days days7 = days5.multipliedBy(14);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.halfdays();
        int int10 = periodType8.indexOf(durationFieldType9);
        org.joda.time.PeriodType periodType11 = periodType8.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = new org.joda.time.Period((java.lang.Object) 14, periodType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P3D" + "'", str1, "P3D");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        mutablePeriod1.setValue((int) (byte) 0, 31);
        int[] intArray17 = mutablePeriod1.getValues();
        int int18 = mutablePeriod1.getSeconds();
        int int19 = mutablePeriod1.getMinutes();
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds22 = seconds20.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = seconds22.get(durationFieldType23);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds26 = seconds22.minus(seconds25);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) seconds22);
        mutablePeriod1.addDays(51026400);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[31, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        int int21 = period20.getMonths();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        mutablePeriod1.setValue((int) (byte) 0, 31);
        int[] intArray17 = mutablePeriod1.getValues();
        int int18 = mutablePeriod1.getSeconds();
        int int19 = mutablePeriod1.getMinutes();
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds22 = seconds20.multipliedBy(1);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = seconds22.get(durationFieldType23);
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds26 = seconds22.minus(seconds25);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) seconds22);
        mutablePeriod1.setSeconds(33);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.setValue(27425236, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27425236");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[31, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds26);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = dateTimeField13.getAsText((-1L), locale15);
        long long20 = dateTimeField13.addWrapField((long) (short) 100, 1);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        int int22 = dateTimeField13.getMaximumShortTextLength(locale21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Days days24 = org.joda.time.Days.daysIn(readableInterval23);
        org.joda.time.Duration duration25 = days24.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.Days days27 = org.joda.time.Days.daysIn(readableInterval26);
        org.joda.time.Duration duration28 = days27.toStandardDuration();
        org.joda.time.Duration duration29 = duration28.toDuration();
        org.joda.time.ReadableDuration readableDuration30 = null;
        boolean boolean31 = duration29.isLongerThan(readableDuration30);
        org.joda.time.Duration duration33 = duration25.withDurationAdded(readableDuration30, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) ' ');
        int int38 = dateTime35.getEra();
        org.joda.time.DateTime.Property property39 = dateTime35.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Days days41 = org.joda.time.Days.daysIn(readableInterval40);
        org.joda.time.Duration duration42 = days41.toStandardDuration();
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.DateTime dateTime45 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration43, (-1));
        org.joda.time.DateTime dateTime47 = dateTime35.minusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusYears((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime49.dayOfWeek();
        org.joda.time.DateTime dateTime55 = dateTime49.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property56 = dateTime49.secondOfMinute();
        org.joda.time.Chronology chronology57 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfMonth();
        org.joda.time.DurationField durationField59 = chronology57.weeks();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.secondOfMinute();
        int int62 = dateTimeField60.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial63 = null;
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = dateTimeField60.getAsText(readablePartial63, 3, locale65);
        int int67 = dateTime35.get(dateTimeField60);
        org.joda.time.DateTime dateTime69 = dateTime35.minusWeeks(40);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period71 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69, periodType70);
        org.joda.time.LocalTime localTime72 = dateTime69.toLocalTime();
        int int73 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localTime72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds74 = org.joda.time.Seconds.secondsBetween(readablePartial0, (org.joda.time.ReadablePartial) localTime72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ja-JP" + "'", str16, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1100L + "'", long20 == 1100L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "3" + "'", str66, "3");
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 59 + "'", int67 == 59);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime dateTime5 = dateTime1.plusDays(10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1, chronology16);
        org.joda.time.DateTime dateTime20 = dateTime1.withChronology(chronology16);
        org.joda.time.DurationField durationField21 = chronology16.days();
        long long24 = durationField21.subtract(259200097L, (long) '#');
        boolean boolean25 = durationField21.isPrecise();
        long long27 = durationField21.getMillis((long) 943);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-2764799903L) + "'", long24 == (-2764799903L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 81475200000L + "'", long27 == 81475200000L);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime.Property property6 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Period period3 = period1.withHours(0);
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period27 = duration7.toPeriod();
        org.joda.time.Period period28 = period1.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period1.plusMillis(0);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = period30.withPeriodType(periodType31);
        org.joda.time.Period period34 = period30.withHours((int) (byte) 10);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Days days9 = org.joda.time.Days.daysIn(readableInterval8);
        org.joda.time.Duration duration10 = days9.toStandardDuration();
        org.joda.time.Duration duration11 = duration10.toDuration();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration11.isLongerThan(readableDuration12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.ReadableDuration readableDuration18 = null;
        boolean boolean19 = duration17.isLongerThan(readableDuration18);
        boolean boolean20 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration17);
        int int22 = period21.getMonths();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withLocale(locale3);
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatter2.getPrinter();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period14 = period11.plusSeconds((int) (short) 1);
        org.joda.time.Period period16 = period14.multipliedBy(100);
        org.joda.time.Period period18 = period16.withYears(92000);
        org.joda.time.Period period20 = period18.withYears(31);
        org.joda.time.Period period21 = period18.negated();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = periodFormatter2.print((org.joda.time.ReadablePeriod) period21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodPrinter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusSeconds((int) (short) 1);
        org.joda.time.Minutes minutes11 = period7.toStandardMinutes();
        boolean boolean12 = dateTime1.equals((java.lang.Object) minutes11);
        org.joda.time.DateTime.Property property13 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property13.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime3.plusDays((-1));
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period((java.lang.Object) 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(896L);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder6 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder2.setLanguage("2022-02-22T07:16:35.713Z/2022-02-22T07:16:35.713Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-22T07:16:35.713Z/2022-02-22T07:16:35.713Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.joda.time.Days days1 = org.joda.time.Days.days(26220);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2265408000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology29 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.months();
        mutablePeriod5.setPeriod((long) 1814400, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.months();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(87350400000L, periodType1, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) '4');
        org.joda.time.DateTime.Property property41 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.Chronology chronology46 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfMinute();
        int int51 = dateTimeField49.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = dateTimeField49.getAsText(readablePartial52, 3, locale54);
        int int56 = dateTimeField36.getMaximumTextLength(locale54);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayVariant(locale60);
        java.lang.String str63 = locale54.getDisplayCountry(locale57);
        java.lang.String str64 = locale57.getVariant();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3" + "'", str55, "3");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "German" + "'", str59, "German");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Korean" + "'", str61, "Korean");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "S\374dkorea" + "'", str63, "S\374dkorea");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        int int17 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime16, periodType20);
        java.lang.String str22 = duration3.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime27 = dateTime24.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusYears((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime29.plusDays(10);
        org.joda.time.Days days34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMillis((int) ' ');
        int int43 = dateTime40.getEra();
        int int44 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfMonth();
        org.joda.time.DateTime dateTime53 = property52.roundFloorCopy();
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.halfdays();
        int int57 = periodType55.indexOf(durationFieldType56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        int int59 = periodType58.size();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime53, periodType58);
        org.joda.time.Period period61 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29, periodType58);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(periodType58);
        mutablePeriod62.addYears((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears((int) '4');
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property74 = dateTime67.secondOfMinute();
        org.joda.time.Chronology chronology75 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.weekyear();
        mutablePeriod62.setPeriod(1645427790446L, chronology75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType79 = mutablePeriod62.getFieldType(24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T07:16:30.758Z", (double) 1645514267656L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645514267656E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 100);
        org.joda.time.Period period3 = period1.withWeeks((int) 'u');
        org.joda.time.Period period4 = period3.toPeriod();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusMinutes((int) (byte) 0);
        org.joda.time.Period period12 = period10.plusMonths((int) '4');
        org.joda.time.Period period14 = period10.withMillis(1814400);
        int int15 = period14.getSeconds();
        org.joda.time.Period period16 = period14.normalizedStandard();
        org.joda.time.Period period18 = period16.minusDays(3);
        org.joda.time.Period period20 = period18.withMillis((int) ' ');
        org.joda.time.Period period21 = period3.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Days days22 = period21.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration23 = new org.joda.time.Duration((java.lang.Object) days22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Days");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(days22);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        java.lang.String str1 = days0.toString();
        org.joda.time.PeriodType periodType2 = days0.getPeriodType();
        org.joda.time.Hours hours3 = days0.toStandardHours();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P3D" + "'", str1, "P3D");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("TWN");
        java.util.Locale.Builder builder11 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder5.setLanguageTag("2022-02-22T07:17:29.315+00:00:00.520");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.TWO;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) ' ');
        int int6 = dateTime3.getEra();
        org.joda.time.DateTime.Property property7 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds11 = seconds9.multipliedBy(1);
        boolean boolean12 = property7.equals((java.lang.Object) seconds9);
        org.joda.time.Seconds seconds14 = seconds9.plus(435);
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds17 = seconds15.plus((int) (short) 10);
        org.joda.time.Seconds seconds19 = seconds17.minus(2022);
        org.joda.time.Seconds seconds20 = seconds9.plus(seconds17);
        org.joda.time.Seconds seconds22 = seconds9.plus(0);
        org.joda.time.Seconds seconds23 = seconds0.plus(seconds22);
        org.joda.time.MutablePeriod mutablePeriod24 = seconds22.toMutablePeriod();
        mutablePeriod24.setPeriod(2001, 26217, 39, (-1), (-23375), 70, 4, 25200000);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = durationFieldType0.getField(chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, chronology14);
        int int16 = period15.getMillis();
        long long19 = chronology10.add((org.joda.time.ReadablePeriod) period15, (long) (short) 100, 40);
        org.joda.time.Period period21 = period15.plusSeconds(40);
        org.joda.time.Period period23 = period15.withWeeks(1439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object) 1439);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4100L + "'", long19 == 4100L);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        long long3 = duration2.getStandardHours();
        java.lang.String str4 = duration2.toString();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Days days6 = org.joda.time.Days.daysIn(readableInterval5);
        org.joda.time.Duration duration7 = days6.toStandardDuration();
        org.joda.time.Duration duration8 = duration7.toDuration();
        org.joda.time.ReadableDuration readableDuration9 = null;
        boolean boolean10 = duration8.isLongerThan(readableDuration9);
        org.joda.time.Duration duration11 = duration8.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime();
        int int22 = dateTime21.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime21, periodType25);
        long long27 = duration8.getMillis();
        boolean boolean28 = duration2.isEqual((org.joda.time.ReadableDuration) duration8);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withMonthsRemoved();
        org.joda.time.Period period32 = duration8.toPeriod(periodType31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        int int40 = property37.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DurationField durationField41 = property37.getLeapDurationField();
        org.joda.time.DateTime dateTime43 = property37.addToCopy(100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(896);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType48 = period46.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.joda.time.Period period1 = org.joda.time.Period.hours(32);
        org.joda.time.Period period4 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusMinutes((int) (byte) 0);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) period8);
        mutablePeriod5.addMonths((int) 'u');
        mutablePeriod5.addHours((int) (byte) -1);
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.Period period22 = period19.plusMinutes((int) (byte) 0);
        org.joda.time.Period period24 = period22.plusMonths((int) '4');
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        boolean boolean28 = periodType25.isSupported(durationFieldType27);
        boolean boolean29 = period22.isSupported(durationFieldType27);
        int int30 = mutablePeriod5.indexOf(durationFieldType27);
        java.lang.String str31 = durationFieldType27.toString();
        org.joda.time.Period period33 = period1.withFieldAdded(durationFieldType27, 105);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        java.lang.String str36 = dateTimeZone34.getID();
        long long38 = dateTimeZone34.previousTransition((long) (short) 0);
        long long40 = dateTimeZone34.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone34);
        java.util.Date date42 = dateTime41.toDate();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withMonthsRemoved();
        boolean boolean46 = dateTime41.equals((java.lang.Object) periodType44);
        int int47 = dateTime41.getMonthOfYear();
        org.joda.time.Duration duration48 = period1.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period50 = period1.withMinutes(70);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hours" + "'", str31, "hours");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.520" + "'", str36, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Feb 22 07:17:59 UTC 2022");
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.Chronology chronology5 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyear();
        org.joda.time.Hours hours7 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours8 = org.joda.time.Hours.SEVEN;
        boolean boolean9 = hours7.isLessThan(hours8);
        org.joda.time.Duration duration10 = hours7.toStandardDuration();
        org.joda.time.Hours hours12 = hours7.plus(7);
        org.joda.time.Hours hours13 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours14 = org.joda.time.Hours.SEVEN;
        boolean boolean15 = hours13.isLessThan(hours14);
        org.joda.time.Duration duration16 = hours13.toStandardDuration();
        org.joda.time.Hours hours17 = hours12.plus(hours13);
        org.joda.time.Hours hours18 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours19 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours20 = hours18.plus(hours19);
        org.joda.time.Hours hours21 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours22 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours23 = hours21.plus(hours22);
        org.joda.time.Hours hours24 = hours19.minus(hours22);
        org.joda.time.Hours hours26 = hours24.dividedBy((int) '4');
        org.joda.time.Hours hours28 = hours26.minus(1814400);
        org.joda.time.Hours hours29 = hours13.minus(hours28);
        long long32 = chronology5.add((org.joda.time.ReadablePeriod) hours29, 1645514189530L, 12);
        int int33 = hours29.getHours();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 80027766989530L + "'", long32 == 80027766989530L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1814404 + "'", int33 == 1814404);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        int int11 = dateTime10.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.joda.time.Period period1 = org.joda.time.Period.months(26160);
        org.joda.time.Period period3 = period1.plusYears(49);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.weekyear();
        org.joda.time.DurationField durationField17 = dateTimeField16.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        long long15 = dateTimeZone11.adjustOffset((long) 'x', false);
        long long17 = dateTimeZone11.nextTransition(1645514189635L);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = dateTime18.toString("eng");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 120L + "'", long15 == 120L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514189635L + "'", long17 == 1645514189635L);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        java.io.Writer writer5 = null;
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears((int) '4');
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property15 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime20 = dateTime8.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        boolean boolean33 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration24, periodType34);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer5, (org.joda.time.ReadablePeriod) mutablePeriod35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property12 = dateTime5.secondOfMinute();
        org.joda.time.Chronology chronology13 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DurationField durationField15 = durationFieldType3.getField(chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, chronology17);
        int int19 = period18.getMillis();
        long long22 = chronology13.add((org.joda.time.ReadablePeriod) period18, (long) (short) 100, 40);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) '#', (long) 999, periodType2, chronology13);
        org.joda.time.DateTimeField dateTimeField24 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology13.era();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = dateTimeField25.getDifference(1645514242555L, 19045L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4100L + "'", long22 == 4100L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        long long3 = duration2.getStandardHours();
        java.lang.String str4 = duration2.toString();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Days days6 = org.joda.time.Days.daysIn(readableInterval5);
        org.joda.time.Duration duration7 = days6.toStandardDuration();
        org.joda.time.Duration duration8 = duration7.toDuration();
        org.joda.time.ReadableDuration readableDuration9 = null;
        boolean boolean10 = duration8.isLongerThan(readableDuration9);
        org.joda.time.Duration duration11 = duration8.toDuration();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime();
        int int22 = dateTime21.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) (byte) 1);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime21, periodType25);
        long long27 = duration8.getMillis();
        boolean boolean28 = duration2.isEqual((org.joda.time.ReadableDuration) duration8);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withMonthsRemoved();
        org.joda.time.Period period32 = duration8.toPeriod(periodType31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears((int) '4');
        org.joda.time.DateTime.Property property37 = dateTime34.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        int int40 = property37.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DurationField durationField41 = property37.getLeapDurationField();
        org.joda.time.DateTime dateTime43 = property37.addToCopy(100);
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(896);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str47 = duration8.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0S" + "'", str47, "PT0S");
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        int int13 = dateTimeField10.getDifference((long) 28, (long) 2147483647);
        long long16 = dateTimeField10.addWrapField((long) (short) 0, 31);
        long long19 = dateTimeField10.getDifferenceAsLong((long) (byte) 1, (long) 943);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.util.Locale.setDefault(locale22);
        java.lang.String str26 = dateTimeField10.getAsShortText((long) 2, locale22);
        java.lang.String str27 = dateTimeField10.getName();
        org.joda.time.DurationField durationField28 = dateTimeField10.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 978566400000L + "'", long16 == 978566400000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970" + "'", str26, "1970");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertNull(durationField28);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        boolean boolean33 = interval26.isAfter((org.joda.time.ReadableInstant) dateTime30);
        long long34 = interval26.getEndMillis();
        org.joda.time.Chronology chronology35 = interval26.getChronology();
        org.joda.time.Chronology chronology36 = interval26.getChronology();
        long long37 = interval26.getEndMillis();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514280448L + "'", long34 == 1645514280448L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514280448L + "'", long37 == 1645514280448L);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.joda.time.Duration duration8 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.Duration duration10 = duration8.minus((-78382080000000L));
        org.joda.time.Duration duration12 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Days days14 = org.joda.time.Days.daysIn(readableInterval13);
        org.joda.time.Duration duration15 = days14.toStandardDuration();
        org.joda.time.Duration duration16 = duration15.toDuration();
        boolean boolean17 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration15);
        boolean boolean18 = duration10.isEqual((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration36, periodType40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime43.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property50 = dateTime43.secondOfMinute();
        org.joda.time.Chronology chronology51 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfMonth();
        org.joda.time.DurationField durationField53 = chronology51.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 3, 16800022L, periodType40, chronology51);
        org.joda.time.Period period56 = duration10.toPeriod(chronology51);
        org.joda.time.Period period57 = new org.joda.time.Period(1645514211838L, (long) (-3), chronology51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(26272, 131, 39, 23, 1814400, chronology51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1814400 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis((int) ' ');
        int int9 = dateTime6.getEra();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime12 = dateTime4.plusHours(435);
        org.joda.time.DateTime dateTime13 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime4.plusDays(55);
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime18.withZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        java.lang.String str25 = dateTimeZone23.getID();
        long long27 = dateTimeZone23.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1, dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime21.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) '4');
        org.joda.time.DateTime.Property property34 = dateTime31.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property38 = dateTime31.secondOfMinute();
        org.joda.time.Chronology chronology39 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfMonth();
        org.joda.time.DurationField durationField41 = chronology39.weeks();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.secondOfMinute();
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.toLanguageTag();
        java.lang.String str46 = dateTimeField42.getAsText((-1L), locale44);
        long long49 = dateTimeField42.addWrapField((long) (short) 100, 1);
        int int50 = mutableDateTime29.get(dateTimeField42);
        long long52 = dateTimeField42.roundFloor(1645512060662L);
        java.lang.String str53 = dateTimeField42.getName();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMillis((int) ' ');
        int int59 = dateTime56.getEra();
        org.joda.time.DateTime.Property property60 = dateTime56.secondOfMinute();
        org.joda.time.DateTime dateTime61 = property60.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((java.lang.Object) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = dateTime64.withZone(dateTimeZone65);
        org.joda.time.DateTime.Property property68 = dateTime67.weekyear();
        boolean boolean69 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.plusYears((int) '4');
        org.joda.time.DateTime.Property property74 = dateTime71.dayOfWeek();
        org.joda.time.DateTime dateTime77 = dateTime71.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property78 = dateTime71.secondOfMinute();
        org.joda.time.Chronology chronology79 = dateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.dayOfMonth();
        org.joda.time.DurationField durationField81 = chronology79.weeks();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology79.getZone();
        org.joda.time.DateTimeField dateTimeField83 = chronology79.weekyear();
        java.util.Locale locale84 = java.util.Locale.FRANCE;
        java.lang.String str85 = locale84.toLanguageTag();
        java.lang.String str86 = locale84.getDisplayScript();
        int int87 = dateTimeField83.getMaximumShortTextLength(locale84);
        java.util.Calendar calendar88 = dateTime61.toCalendar(locale84);
        java.lang.String str89 = dateTimeField42.getAsShortText(26199270, locale84);
        java.util.Locale locale91 = new java.util.Locale("");
        java.lang.String str92 = locale84.getDisplayVariant(locale91);
        java.lang.String str93 = property16.getAsText(locale91);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.520" + "'", str25, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ja-JP" + "'", str45, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1100L + "'", long49 == 1100L);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645512060480L + "'", long52 == 1645512060480L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "secondOfMinute" + "'", str53, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fr-FR" + "'", str85, "fr-FR");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=1645514280480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=1,MILLISECOND=0,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "26199270" + "'", str89, "26199270");
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022" + "'", str93, "2022");
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = dateTimeField12.getAsText((-1L), locale14);
        long long19 = dateTimeField12.addWrapField((long) (short) 100, 1);
        int int20 = dateTimeField12.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.Days days28 = org.joda.time.Days.daysIn(readableInterval27);
        org.joda.time.Duration duration29 = days28.toStandardDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.ReadableDuration readableDuration31 = null;
        boolean boolean32 = duration30.isLongerThan(readableDuration31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Days days34 = org.joda.time.Days.daysIn(readableInterval33);
        org.joda.time.Duration duration35 = days34.toStandardDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.ReadableDuration readableDuration37 = null;
        boolean boolean38 = duration36.isLongerThan(readableDuration37);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration36, periodType40);
        org.joda.time.LocalDate localDate42 = dateTime26.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) ' ');
        int int51 = dateTime48.getEra();
        int int52 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime54 = dateTime48.plus((long) 22);
        org.joda.time.DateTime dateTime55 = dateTime54.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate56 = dateTime54.toLocalDate();
        org.joda.time.Days days57 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate56);
        int int58 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears((int) '4');
        org.joda.time.DateTime.Property property63 = dateTime60.dayOfWeek();
        org.joda.time.DateTime dateTime66 = dateTime60.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property67 = dateTime60.secondOfMinute();
        org.joda.time.Chronology chronology68 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.dayOfMonth();
        org.joda.time.DurationField durationField70 = chronology68.weeks();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.secondOfMinute();
        int int73 = dateTimeField71.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial74 = null;
        java.util.Locale locale76 = java.util.Locale.KOREA;
        java.lang.String str77 = dateTimeField71.getAsText(readablePartial74, 3, locale76);
        long long79 = dateTimeField71.roundHalfCeiling((long) 1814400);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime84 = dateTime81.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.plusYears((int) '4');
        org.joda.time.DateTime dateTime90 = dateTime86.plusDays(10);
        org.joda.time.Days days91 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime84, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.LocalTime localTime92 = dateTime84.toLocalTime();
        int int93 = dateTimeField71.getMaximumValue((org.joda.time.ReadablePartial) localTime92);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean95 = localTime92.isSupported(dateTimeFieldType94);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = localDate56.compareTo((org.joda.time.ReadablePartial) localTime92);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ja-JP" + "'", str15, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1100L + "'", long19 == 1100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "3" + "'", str77, "3");
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1814480L + "'", long79 == 1814480L);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(days91);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 59 + "'", int93 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime3.withSecondOfMinute(59);
        org.joda.time.format.PeriodPrinter periodPrinter6 = null;
        org.joda.time.format.PeriodParser periodParser7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = new org.joda.time.format.PeriodFormatter(periodPrinter6, periodParser7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale9);
        java.util.Calendar calendar12 = dateTime5.toCalendar(locale9);
        java.lang.String str13 = locale9.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514338644,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=59,MILLISECOND=164,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "PT1M");
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("TWN");
        java.util.Locale.Builder builder11 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguage("P100W");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: P100W [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr-FR" + "'", str7, "fr-FR");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        long long23 = interval22.getStartMillis();
        org.joda.time.DateTime dateTime24 = interval22.getEnd();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514281071L + "'", long23 == 1645514281071L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = dateTime3.isSupported(dateTimeFieldType5);
        org.joda.time.Period period7 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        int int8 = period7.getMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.halfdays();
        org.joda.time.Chronology chronology13 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 55, chronology13);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = period15.getValue(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime3.plusDays((-1));
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(2022);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.Period period22 = period19.plusMinutes((int) (byte) 0);
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) period19);
        mutablePeriod16.addMonths((int) 'u');
        mutablePeriod16.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property39 = dateTime32.secondOfMinute();
        org.joda.time.Chronology chronology40 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology40);
        org.joda.time.DurationField durationField43 = chronology40.months();
        mutablePeriod16.setPeriod((long) 1814400, chronology40);
        org.joda.time.DurationField durationField45 = chronology40.months();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(87350400000L, periodType12, chronology40);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusYears((int) '4');
        org.joda.time.DateTime.Property property52 = dateTime49.dayOfWeek();
        org.joda.time.DateTime dateTime55 = dateTime49.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property56 = dateTime49.secondOfMinute();
        org.joda.time.Chronology chronology57 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfMonth();
        org.joda.time.DurationField durationField59 = chronology57.weeks();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.secondOfMinute();
        int int62 = dateTimeField60.getMinimumValue((long) (byte) 0);
        org.joda.time.ReadablePartial readablePartial63 = null;
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = dateTimeField60.getAsText(readablePartial63, 3, locale65);
        int int67 = dateTimeField47.getMaximumTextLength(locale65);
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale71.getDisplayLanguage();
        java.lang.String str73 = locale68.getDisplayVariant(locale71);
        java.lang.String str74 = locale65.getDisplayCountry(locale68);
        java.util.Set<java.lang.Character> charSet75 = locale68.getExtensionKeys();
        java.util.Locale locale76 = locale68.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = dateTime7.toString("2022-02-22T07:17:53.862+00:00:00.520/2022-02-22T07:17:53.862+00:00:00.520", locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "3" + "'", str66, "3");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "German" + "'", str70, "German");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str72, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "S\374dkorea" + "'", str74, "S\374dkorea");
        org.junit.Assert.assertNotNull(charSet75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de_DE");
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale12, locale13, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale23, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags(languageRangeList31, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale38, locale39, locale40 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList44);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList45, filteringMode46);
        org.joda.time.Duration duration50 = org.joda.time.Duration.parse("PT2147483647S");
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = dateTime52.isSupported(dateTimeFieldType54);
        org.joda.time.Period period56 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusYears((int) '4');
        org.joda.time.DateTime.Property property62 = dateTime59.dayOfWeek();
        org.joda.time.DateTime dateTime65 = dateTime59.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property66 = dateTime59.secondOfMinute();
        org.joda.time.Chronology chronology67 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.dayOfMonth();
        org.joda.time.DurationField durationField69 = durationFieldType57.getField(chronology67);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime52.toMutableDateTime(chronology67);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 473, chronology67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) localeList47, chronology67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime14 = dateTime2.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours((long) 943);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration16);
        java.lang.String str18 = duration16.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT3394800S" + "'", str18, "PT3394800S");
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.previousTransition((long) (short) 0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1, dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getName((long) 1);
        int int10 = dateTimeZone1.getStandardOffset(1645514269480L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.520" + "'", str3, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.520" + "'", str8, "+00:00:00.520");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 520 + "'", int10 == 520);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.joda.time.Period period1 = org.joda.time.Period.months((-58));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Days days13 = org.joda.time.Days.daysIn(readableInterval12);
        org.joda.time.Duration duration14 = days13.toStandardDuration();
        org.joda.time.Duration duration15 = duration14.toDuration();
        org.joda.time.ReadableDuration readableDuration16 = null;
        boolean boolean17 = duration15.isLongerThan(readableDuration16);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration15, periodType19);
        org.joda.time.Days days21 = duration15.toStandardDays();
        org.joda.time.Days days22 = null;
        boolean boolean23 = days21.isLessThan(days22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks1 = weeks0.negated();
        org.joda.time.Weeks weeks2 = null;
        boolean boolean3 = weeks0.isLessThan(weeks2);
        int int4 = weeks0.getWeeks();
        org.joda.time.Duration duration5 = weeks0.toStandardDuration();
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks9 = weeks7.plus(0);
        org.joda.time.Weeks weeks11 = weeks9.minus(3);
        org.joda.time.Weeks weeks12 = weeks6.plus(weeks11);
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks16 = weeks14.plus(0);
        org.joda.time.Weeks weeks18 = weeks16.minus(3);
        org.joda.time.Weeks weeks19 = weeks13.plus(weeks18);
        org.joda.time.Weeks weeks20 = weeks11.plus(weeks19);
        org.joda.time.Weeks weeks21 = weeks0.plus(weeks20);
        org.joda.time.Weeks weeks23 = weeks20.multipliedBy(97);
        org.joda.time.DurationFieldType durationFieldType24 = weeks20.getFieldType();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertNotNull(durationFieldType24);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType1 = periodType0.withWeeksRemoved();
        java.lang.String str2 = periodType1.toString();
        org.joda.time.PeriodType periodType3 = periodType1.withMinutesRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusYears((int) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime7.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property14 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology15 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.Period period23 = period20.plusSeconds((int) (short) 1);
        org.joda.time.Days days24 = period23.toStandardDays();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Days days26 = org.joda.time.Days.daysIn(readableInterval25);
        java.lang.String str27 = days26.toString();
        boolean boolean28 = days24.isGreaterThan(days26);
        long long31 = chronology15.add((org.joda.time.ReadablePeriod) days26, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField32 = chronology15.hourOfHalfday();
        org.joda.time.Days days33 = org.joda.time.Days.THREE;
        java.lang.String str34 = days33.toString();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusSeconds((int) (short) 1);
        org.joda.time.Days days41 = period40.toStandardDays();
        org.joda.time.Days days42 = days33.plus(days41);
        long long45 = chronology15.add((org.joda.time.ReadablePeriod) days42, 1739860860662L, 20);
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType5.getField(chronology15);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Days days52 = org.joda.time.Days.daysIn(readableInterval51);
        org.joda.time.Duration duration53 = days52.toStandardDuration();
        org.joda.time.Duration duration54 = duration53.toDuration();
        org.joda.time.ReadableDuration readableDuration55 = null;
        boolean boolean56 = duration54.isLongerThan(readableDuration55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        boolean boolean63 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMillis((int) ' ');
        int int68 = dateTime65.getEra();
        org.joda.time.DateTime dateTime70 = dateTime65.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime72 = dateTime65.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval73 = duration54.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        mutablePeriod50.add((org.joda.time.ReadableInterval) interval73);
        org.joda.time.MutableInterval mutableInterval75 = interval73.toMutableInterval();
        java.lang.String str76 = mutableInterval75.toString();
        org.joda.time.Chronology chronology77 = mutableInterval75.getChronology();
        org.joda.time.Chronology chronology78 = mutableInterval75.getChronology();
        boolean boolean79 = dateTimeFieldType5.isSupported(chronology78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((java.lang.Object) periodType3, chronology78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PeriodType[Years]" + "'", str2, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P0D" + "'", str27, "P0D");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 32L + "'", long31 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "P3D" + "'", str34, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1745044860662L + "'", long45 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(mutableInterval75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-22T07:18:02.128+00:00:00.520/2022-02-22T07:18:02.128+00:00:00.520" + "'", str76, "2022-02-22T07:18:02.128+00:00:00.520/2022-02-22T07:18:02.128+00:00:00.520");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        mutablePeriod3.addYears((int) ' ');
        mutablePeriod3.setSeconds((int) (byte) 100);
        mutablePeriod3.setDays((int) (short) 100);
        mutablePeriod3.add(0, (int) '4', (int) (byte) 10, 28, (int) '#', (int) (short) 0, 0, 28);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Days days44 = org.joda.time.Days.daysIn(readableInterval43);
        org.joda.time.Duration duration45 = days44.toStandardDuration();
        org.joda.time.Duration duration46 = duration45.toDuration();
        org.joda.time.ReadableDuration readableDuration47 = null;
        boolean boolean48 = duration46.isLongerThan(readableDuration47);
        org.joda.time.Duration duration49 = duration46.toDuration();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = duration46.toIntervalTo(readableInstant50);
        java.lang.String str52 = interval51.toString();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval51);
        mutablePeriod3.addSeconds((int) 'u');
        java.lang.Object obj56 = mutablePeriod3.clone();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(interval51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:18:02.212+00:00:00.520/2022-02-22T07:18:02.212+00:00:00.520" + "'", str52, "2022-02-22T07:18:02.212+00:00:00.520/2022-02-22T07:18:02.212+00:00:00.520");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT117S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT117S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT117S");
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks16 = weeks14.plus(0);
        org.joda.time.Weeks weeks18 = weeks16.minus(3);
        org.joda.time.Weeks weeks19 = weeks13.plus(weeks18);
        int[] intArray21 = chronology9.get((org.joda.time.ReadablePeriod) weeks19, (long) (byte) 100);
        org.joda.time.DurationField durationField22 = chronology9.minutes();
        int int24 = durationField22.getValue(3061584000000L);
        boolean boolean25 = durationField22.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51026400 + "'", int24 == 51026400);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMillis((int) ' ');
        int int5 = dateTime2.getEra();
        org.joda.time.DateTime.Property property6 = dateTime2.secondOfMinute();
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) ' ');
        int int12 = dateTime9.getEra();
        org.joda.time.DateTime.Property property13 = dateTime9.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Days days15 = org.joda.time.Days.daysIn(readableInterval14);
        org.joda.time.Duration duration16 = days15.toStandardDuration();
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.DateTime dateTime19 = dateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration17, (-1));
        org.joda.time.DateTime dateTime21 = dateTime9.minusMinutes((int) (byte) 10);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.plusMinutes((int) (byte) 0);
        mutablePeriod26.mergePeriod((org.joda.time.ReadablePeriod) period29);
        boolean boolean34 = periodType22.equals((java.lang.Object) period29);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        boolean boolean38 = periodType35.isSupported(durationFieldType37);
        int int39 = periodType22.indexOf(durationFieldType37);
        org.joda.time.DateTime dateTime41 = dateTime21.withFieldAdded(durationFieldType37, (int) ' ');
        boolean boolean42 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime2.plusMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime46.withZone(dateTimeZone47);
        java.lang.String str51 = dateTimeZone47.getNameKey((long) 1);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone47.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime54 = dateTime44.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime.Property property55 = dateTime44.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusYears((int) '4');
        org.joda.time.DateTime.Property property60 = dateTime57.dayOfWeek();
        org.joda.time.DateTime dateTime63 = dateTime57.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property64 = dateTime57.secondOfMinute();
        org.joda.time.Chronology chronology65 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.dayOfMonth();
        org.joda.time.DurationField durationField67 = chronology65.weeks();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.secondOfMinute();
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = dateTimeField68.getAsText((-1L), locale70);
        int int74 = dateTimeField68.getMaximumValue((long) (byte) 0);
        long long77 = dateTimeField68.add((long) (-1), (int) (byte) 100);
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = locale78.getDisplayVariant(locale79);
        int int81 = dateTimeField68.getMaximumTextLength(locale79);
        int int82 = property55.getMaximumShortTextLength(locale79);
        java.lang.String str83 = locale79.getScript();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ja-JP" + "'", str71, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 59 + "'", int74 == 59);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 99999L + "'", long77 == 99999L);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period5.multipliedBy((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod8 = period5.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = mutablePeriod8.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((int) ' ');
        int int4 = dateTime1.getEra();
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((int) ' ');
        org.joda.time.DateTime dateTime13 = property10.getDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Period period3 = period1.minusSeconds(12);
        org.joda.time.Period period5 = period1.minusMonths(435);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant6 = new org.joda.time.Instant((java.lang.Object) period5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusYears((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property10 = dateTime3.secondOfMinute();
        org.joda.time.Chronology chronology11 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField13 = chronology11.halfdays();
        org.joda.time.Chronology chronology14 = chronology11.withUTC();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period17 = new org.joda.time.Period((java.lang.Object) "51", periodType1, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"51\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        boolean boolean4 = periodFormatter2.isPrinter();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period14 = period11.plusMinutes((int) (byte) 0);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) period11);
        mutablePeriod8.addMonths((int) 'u');
        mutablePeriod8.addHours((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) '4');
        org.joda.time.DateTime.Property property27 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property31 = dateTime24.secondOfMinute();
        org.joda.time.Chronology chronology32 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology32);
        org.joda.time.DurationField durationField35 = chronology32.months();
        mutablePeriod8.setPeriod((long) 1814400, chronology32);
        mutablePeriod8.addYears((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int41 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod8, "2022-02-22T07:16:48.495Z/2022-02-22T07:16:48.495Z", 26207766);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes7 = minutes5.minus(2147483647);
        org.joda.time.Duration duration8 = minutes7.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property17 = dateTime10.secondOfMinute();
        org.joda.time.Chronology chronology18 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekOfWeekyear();
        org.joda.time.Period period21 = duration8.toPeriod(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(24, 734, (int) (byte) 1, 896, 54, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 896 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.Days days5 = org.joda.time.Days.daysIn(readableInterval4);
        org.joda.time.Duration duration6 = days5.toStandardDuration();
        org.joda.time.Duration duration7 = duration6.toDuration();
        org.joda.time.ReadableDuration readableDuration8 = null;
        boolean boolean9 = duration7.isLongerThan(readableDuration8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Days days11 = org.joda.time.Days.daysIn(readableInterval10);
        org.joda.time.Duration duration12 = days11.toStandardDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration13.isLongerThan(readableDuration14);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime25 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval26 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime18);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) '4');
        boolean boolean33 = interval26.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period34 = interval26.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant35 = new org.joda.time.Instant((java.lang.Object) period34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1, chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis((int) ' ');
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime20 = dateTime15.minusMinutes((int) (short) 1);
        org.joda.time.Days days21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime23 = dateTime15.minusSeconds(41);
        int int24 = dateTime23.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26241808 + "'", int24 == 26241808);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        mutablePeriod3.setDays((int) 'a');
        mutablePeriod3.addMinutes(0);
        int int15 = mutablePeriod3.getMonths();
        mutablePeriod3.setWeeks(100);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        mutablePeriod1.setMonths((int) (short) 100);
        int int4 = mutablePeriod1.getYears();
        int int5 = mutablePeriod1.getYears();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime8.withLaterOffsetAtOverlap();
        mutablePeriod1.setPeriod(readableInstant6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod1.copy();
        int int14 = mutablePeriod1.getYears();
        mutablePeriod1.setPeriod(1645514250178L, 1645514277082L);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-22T07:15:58.360Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:15:58.360Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.joda.time.Period period1 = org.joda.time.Period.millis(436);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) ' ');
        int int19 = dateTime16.getEra();
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property29 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime16.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = dateTime38.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay46 = dateTime45.toTimeOfDay();
        int[] intArray48 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay46, (long) 1814400);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = timeOfDay46.getValue(53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-519L) + "'", long35 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 30, 14, 920]");
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.joda.time.Days days1 = org.joda.time.Days.days(365);
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime1.withZone(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        int int12 = property9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = property9.getAsText(locale13);
        java.util.Calendar calendar15 = dateTime1.toCalendar(locale13);
        org.joda.time.DateTime dateTime17 = dateTime1.withEra((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) '4');
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property26 = dateTime19.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean34 = dateTime30.isSupported(dateTimeFieldType33);
        int int35 = dateTime1.get(dateTimeFieldType33);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType38 = periodType37.withWeeksRemoved();
        java.lang.String str39 = periodType38.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears((int) '4');
        org.joda.time.DateTime.Property property44 = dateTime41.dayOfWeek();
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property48 = dateTime41.secondOfMinute();
        org.joda.time.Chronology chronology49 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMillis((int) ' ');
        int int59 = dateTime56.getEra();
        int int60 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusYears((int) '4');
        org.joda.time.DateTime.Property property65 = dateTime62.dayOfWeek();
        org.joda.time.DateTime dateTime68 = dateTime62.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property69 = dateTime62.minuteOfHour();
        org.joda.time.DateTime dateTime71 = dateTime62.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        long long75 = dateTimeZone72.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime56.toMutableDateTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime82 = dateTime78.minusMinutes((int) '#');
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime76, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime85 = dateTime78.plusDays(1);
        org.joda.time.TimeOfDay timeOfDay86 = dateTime85.toTimeOfDay();
        int[] intArray88 = chronology49.get((org.joda.time.ReadablePartial) timeOfDay86, (long) 1814400);
        org.joda.time.DurationField durationField89 = chronology49.months();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((long) 'u', periodType38, chronology49);
        boolean boolean91 = dateTimeFieldType33.isSupported(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "mardi" + "'", str14, "mardi");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514282724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=3,MILLISECOND=244,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 244 + "'", int35 == 244);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PeriodType[Years]" + "'", str39, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-519L) + "'", long75 == (-519L));
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(timeOfDay86);
        org.junit.Assert.assertNotNull(intArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 30, 14, 920]");
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Days days1 = org.joda.time.Days.daysIn(readableInterval0);
        org.joda.time.Duration duration2 = days1.toStandardDuration();
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration3.isLongerThan(readableDuration4);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.Days days7 = org.joda.time.Days.daysIn(readableInterval6);
        org.joda.time.Duration duration8 = days7.toStandardDuration();
        org.joda.time.Duration duration9 = duration8.toDuration();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration9.isLongerThan(readableDuration10);
        boolean boolean12 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis((int) ' ');
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime21 = dateTime14.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval22 = duration3.toIntervalTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime23 = dateTime14.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis((int) ' ');
        int int28 = dateTime25.getEra();
        org.joda.time.DateTime dateTime30 = dateTime25.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime32 = dateTime25.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime37 = dateTime33.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTime dateTime38 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean40 = localDateTime23.isSupported(dateTimeFieldType39);
        java.lang.String str41 = localDateTime23.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((int) '4');
        org.joda.time.DateTime.Property property46 = dateTime43.dayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime43.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime dateTime51 = dateTime49.withYear((int) '#');
        org.joda.time.TimeOfDay timeOfDay52 = dateTime49.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes53 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) localDateTime23, (org.joda.time.ReadablePartial) timeOfDay52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:18:03.332" + "'", str41, "2022-02-22T07:18:03.332");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Period period3 = period1.minus(readablePeriod2);
        org.joda.time.Period period5 = period1.minusHours((int) (short) 10);
        org.joda.time.Hours hours6 = org.joda.time.Hours.THREE;
        org.joda.time.Period period7 = period5.withFields((org.joda.time.ReadablePeriod) hours6);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) hours6);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatter3.withLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Days days16 = org.joda.time.Days.daysIn(readableInterval15);
        org.joda.time.Duration duration17 = days16.toStandardDuration();
        org.joda.time.Duration duration18 = duration17.toDuration();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration18.isLongerThan(readableDuration19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.Days days22 = org.joda.time.Days.daysIn(readableInterval21);
        org.joda.time.Duration duration23 = days22.toStandardDuration();
        org.joda.time.Duration duration24 = duration23.toDuration();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration24.isLongerThan(readableDuration25);
        boolean boolean27 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration24, periodType28);
        org.joda.time.PeriodType periodType30 = periodType28.withMinutesRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.Days days36 = org.joda.time.Days.daysIn(readableInterval35);
        org.joda.time.Duration duration37 = days36.toStandardDuration();
        org.joda.time.Duration duration38 = duration37.toDuration();
        org.joda.time.ReadableDuration readableDuration39 = null;
        boolean boolean40 = duration38.isLongerThan(readableDuration39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.Days days42 = org.joda.time.Days.daysIn(readableInterval41);
        org.joda.time.Duration duration43 = days42.toStandardDuration();
        org.joda.time.Duration duration44 = duration43.toDuration();
        org.joda.time.ReadableDuration readableDuration45 = null;
        boolean boolean46 = duration44.isLongerThan(readableDuration45);
        boolean boolean47 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMillis((int) ' ');
        int int52 = dateTime49.getEra();
        org.joda.time.DateTime dateTime54 = dateTime49.minusMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime56 = dateTime49.withYearOfCentury((int) (short) 1);
        org.joda.time.Interval interval57 = duration38.toIntervalTo((org.joda.time.ReadableInstant) dateTime49);
        mutablePeriod34.add((org.joda.time.ReadableInterval) interval57);
        long long59 = interval57.getStartMillis();
        org.joda.time.Chronology chronology60 = interval57.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(32L, (long) 9, periodType28, chronology60);
        org.joda.time.format.PeriodFormatter periodFormatter63 = periodFormatter3.withParseType(periodType28);
        boolean boolean64 = periodFormatter3.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period65 = org.joda.time.Period.parse("Koreanisch", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval57);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645514283010L + "'", long59 == 1645514283010L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(periodFormatter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod7 = period6.toMutablePeriod();
        org.joda.time.Period period9 = period6.plusMinutes((int) (byte) 0);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period12 = period6.withDays(435);
        org.joda.time.Period period14 = period6.minusYears(33);
        org.joda.time.Period period16 = period14.plusMillis(58);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone12.isLocalDateTimeGap(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.addMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) ' ');
        int int14 = dateTime11.getEra();
        int int15 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        org.joda.time.Duration duration20 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime23.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) '4');
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        int int34 = property31.compareTo((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = property31.getAsText(locale35);
        java.util.Calendar calendar37 = dateTime23.toCalendar(locale35);
        org.joda.time.DateTime dateTime39 = dateTime23.withEra((int) (byte) 0);
        int int40 = dateTime39.getYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.lang.String str43 = dateTimeZone41.getID();
        long long45 = dateTimeZone41.previousTransition((long) (short) 0);
        long long47 = dateTimeZone41.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone41);
        java.util.Date date49 = dateTime48.toDate();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withMonthsRemoved();
        boolean boolean53 = dateTime48.equals((java.lang.Object) periodType51);
        int int54 = periodType51.size();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime39, periodType51);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod55.addMonths(26198);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mardi" + "'", str36, "mardi");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514283112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.520,offset=520,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=3,MILLISECOND=632,ZONE_OFFSET=520,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-2022) + "'", int40 == (-2022));
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.520" + "'", str43, "+00:00:00.520");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Feb 22 07:18:03 UTC 2022");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes((int) (short) 1);
        java.lang.String str15 = dateTime12.toString();
        long long16 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime12.minusMillis(896);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T07:18:03.720+00:00:00.520" + "'", str15, "2022-02-21T07:18:03.720+00:00:00.520");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645427883200L + "'", long16 == 1645427883200L);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale0.getDisplayLanguage(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getUnicodeLocaleType("DurationField[minutes]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: DurationField[minutes]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de-DE" + "'", str1, "de-DE");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        boolean boolean6 = dateTimeZone4.isStandardOffset(0L);
        int int8 = dateTimeZone4.getStandardOffset((long) 999);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone4.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime15.plusDays((-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis((int) ' ');
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime dateTime41 = dateTime36.minusMinutes((int) (short) 1);
        int int42 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime44 = dateTime36.withMonthOfYear((int) (short) 1);
        org.joda.time.Seconds seconds45 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime36);
        long long46 = dateTime36.getMillis();
        org.joda.time.LocalDateTime localDateTime47 = dateTime36.toLocalDateTime();
        boolean boolean48 = dateTimeZone4.isLocalDateTimeGap(localDateTime47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime54 = dateTime50.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.Days days56 = org.joda.time.Days.daysIn(readableInterval55);
        org.joda.time.Duration duration57 = days56.toStandardDuration();
        org.joda.time.Duration duration58 = duration57.toDuration();
        org.joda.time.ReadableDuration readableDuration59 = null;
        boolean boolean60 = duration58.isLongerThan(readableDuration59);
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.Days days62 = org.joda.time.Days.daysIn(readableInterval61);
        org.joda.time.Duration duration63 = days62.toStandardDuration();
        org.joda.time.Duration duration64 = duration63.toDuration();
        org.joda.time.ReadableDuration readableDuration65 = null;
        boolean boolean66 = duration64.isLongerThan(readableDuration65);
        boolean boolean67 = duration58.isShorterThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration64, periodType68);
        org.joda.time.LocalDate localDate70 = dateTime54.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMillis((int) ' ');
        int int79 = dateTime76.getEra();
        int int80 = dateTime74.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime82 = dateTime76.plus((long) 22);
        org.joda.time.DateTime dateTime83 = dateTime82.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate84 = dateTime82.toLocalDate();
        org.joda.time.Days days85 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDate70, (org.joda.time.ReadablePartial) localDate84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks86 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) localDateTime47, (org.joda.time.ReadablePartial) localDate84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 520 + "'", int8 == 520);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-519L) + "'", long34 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 520 + "'", int42 == 520);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(seconds45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514283295L + "'", long46 == 1645514283295L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(days85);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.minuteOfHour();
        int int9 = property8.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) '4');
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property20 = dateTime13.secondOfMinute();
        org.joda.time.Chronology chronology21 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfMonth();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 59, (long) (byte) 0, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.weekyear();
        long long29 = dateTimeField26.add(86400000L, (long) 'a');
        boolean boolean30 = property8.equals((java.lang.Object) dateTimeField26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusYears((int) '4');
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property39 = dateTime32.secondOfMinute();
        org.joda.time.Chronology chronology40 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.DurationField durationField42 = chronology40.weeks();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.weekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) ' ');
        org.joda.time.DateTime dateTime50 = dateTime46.minusMinutes((int) '#');
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Days days52 = org.joda.time.Days.daysIn(readableInterval51);
        org.joda.time.Duration duration53 = days52.toStandardDuration();
        org.joda.time.Duration duration54 = duration53.toDuration();
        org.joda.time.ReadableDuration readableDuration55 = null;
        boolean boolean56 = duration54.isLongerThan(readableDuration55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.Days days58 = org.joda.time.Days.daysIn(readableInterval57);
        org.joda.time.Duration duration59 = days58.toStandardDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        org.joda.time.ReadableDuration readableDuration61 = null;
        boolean boolean62 = duration60.isLongerThan(readableDuration61);
        boolean boolean63 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration60, periodType64);
        org.joda.time.LocalDate localDate66 = dateTime50.toLocalDate();
        long long68 = chronology40.set((org.joda.time.ReadablePartial) localDate66, (long) 'u');
        int int69 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDate66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.plusYears((int) '4');
        org.joda.time.DateTime dateTime75 = dateTime71.plusDays(10);
        org.joda.time.DateTime.Property property76 = dateTime75.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property76.getFieldType();
        java.lang.String str78 = dateTimeFieldType77.getName();
        boolean boolean79 = localDate66.isSupported(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3061584000000L + "'", long29 == 3061584000000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645488000117L + "'", long68 == 1645488000117L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-292275054) + "'", int69 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "monthOfYear" + "'", str78, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) '4');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.Chronology chronology9 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField11 = chronology9.halfdays();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.days();
        long long16 = durationField13.getValueAsLong((long) 8, (-78382080000000L));
        long long18 = durationField13.getValueAsLong(738938L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(1);
        org.joda.time.DurationFieldType durationFieldType2 = minutes1.getFieldType();
        org.joda.time.Weeks weeks3 = minutes1.toStandardWeeks();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(weeks3);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusYears((int) '4');
        org.joda.time.DateTime.Property property5 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfMinute();
        org.joda.time.Chronology chronology10 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusSeconds((int) (short) 1);
        org.joda.time.Days days19 = period18.toStandardDays();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Days days21 = org.joda.time.Days.daysIn(readableInterval20);
        java.lang.String str22 = days21.toString();
        boolean boolean23 = days19.isGreaterThan(days21);
        long long26 = chronology10.add((org.joda.time.ReadablePeriod) days21, (long) ' ', (int) ' ');
        org.joda.time.DateTimeField dateTimeField27 = chronology10.hourOfHalfday();
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        java.lang.String str29 = days28.toString();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.Period period35 = period32.plusSeconds((int) (short) 1);
        org.joda.time.Days days36 = period35.toStandardDays();
        org.joda.time.Days days37 = days28.plus(days36);
        long long40 = chronology10.add((org.joda.time.ReadablePeriod) days37, 1739860860662L, 20);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType0.getField(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = dateTimeField41.set(67737600000L, "Englisch (Vereinigte Staaten von Amerika)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Englisch (Vereinigte Staaten von Amerika)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P0D" + "'", str22, "P0D");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P3D" + "'", str29, "P3D");
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1745044860662L + "'", long40 == 1745044860662L);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.joda.time.Period period3 = period1.minusSeconds(12);
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        mutablePeriod9.addMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) ' ');
        int int20 = dateTime17.getEra();
        int int21 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) ' ');
        org.joda.time.Duration duration26 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime23);
        mutablePeriod9.add((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusYears((int) '4');
        org.joda.time.DateTime.Property property32 = dateTime29.dayOfWeek();
        org.joda.time.DateTime dateTime35 = dateTime29.withDurationAdded((long) 100, 0);
        org.joda.time.DateTime.Property property36 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime29.withMillisOfSecond((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        long long42 = dateTimeZone39.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) ' ');
        int int47 = dateTime44.getEra();
        org.joda.time.DateTime dateTime49 = dateTime44.minusMinutes((int) (short) 1);
        int int50 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime52 = dateTime44.withMonthOfYear((int) (short) 1);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.minutes();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime44, periodType53);
        org.joda.time.Period period55 = new org.joda.time.Period((long) (-292275054), (long) 0, periodType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period56 = period3.withPeriodType(periodType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-519L) + "'", long42 == (-519L));
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 520 + "'", int50 == 520);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.Period period3 = period1.plusMillis(435);
        org.joda.time.Seconds seconds4 = period1.toStandardSeconds();
        org.joda.time.Seconds seconds6 = seconds4.minus(467);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds6);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        java.io.IOException iOException1 = new java.io.IOException("P3D");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException5 = new java.io.IOException("Tue");
        iOException1.addSuppressed((java.lang.Throwable) iOException5);
        java.lang.String str7 = iOException5.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.io.IOException: Tue" + "'", str7, "java.io.IOException: Tue");
    }
}
